{"nodes":[{"content":"Used to indicate that a control can be the target of a callback event on the server.","nodes":[{"pos":[0,84],"content":"Used to indicate that a control can be the target of a callback event on the server.","nodes":[{"content":"Used to indicate that a control can be the target of a callback event on the server.","pos":[0,84]}]}],"pos":[523,608],"yaml":true},{"content":"Implement the <xref:System.Web.UI.ICallbackEventHandler> interface for any custom control that needs to receive callback events. For more information, see [Implementing Client Callbacks Without Postbacks](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  \n  \n Examples of controls that implement the <xref:System.Web.UI.ICallbackEventHandler> interface include the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> controls. When a callback event targets a control that implements the <xref:System.Web.UI.ICallbackEventHandler> interface, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is called to handle the event, passing the event argument as a parameter and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the result of the callback.  \n  \n Controls that retrieve data from a data source control during callback can do so synchronously or asynchronously. ASP.NET controls like <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> are implemented synchronously. Synchronous callbacks do not prevent the user from working in the browser. In synchronous mode, only one callback at a time can execute, with the last callback taking precedence. When a Web control is implemented to support asynchronous behavior, multiple callbacks can be raised simultaneously. For details on asynchronous programming, see [Event-based Asynchronous Pattern (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).  \n  \n You can specify whether callback events originating from the user interface rendered by a control implementing the <xref:System.Web.UI.ICallbackEventHandler> interface are validated. Validation of events is a good security practice. However, for performance reasons you can disable it. To control whether event validation is performed on callback events, set the `enableEventValidation` attribute of the [@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive or the `enableEventValidation` attribute of the [pages Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458) of the Web.config file. If you set the <xref:System.Web.UI.Page.EnableEventValidation%2A> property in code, set it in the `Page_Init` phase of page processing. For more information on balancing the security benefit of event validation with its performance cost, see [ASP.NET Performance Overview](http://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b).","nodes":[{"pos":[0,277],"content":"Implement the <xref:System.Web.UI.ICallbackEventHandler> interface for any custom control that needs to receive callback events. For more information, see [Implementing Client Callbacks Without Postbacks](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).","nodes":[{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.Web.UI.ICallbackEventHandler&gt;</ph> interface for any custom control that needs to receive callback events.","pos":[0,128],"source":"Implement the <xref:System.Web.UI.ICallbackEventHandler> interface for any custom control that needs to receive callback events."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Implementing Client Callbacks Without Postbacks<ept id=\"p1\">](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)</ept>.","pos":[129,277],"source":" For more information, see [Implementing Client Callbacks Without Postbacks](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)."}]},{"pos":[284,911],"content":"Examples of controls that implement the <xref:System.Web.UI.ICallbackEventHandler> interface include the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> controls. When a callback event targets a control that implements the <xref:System.Web.UI.ICallbackEventHandler> interface, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is called to handle the event, passing the event argument as a parameter and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the result of the callback.","nodes":[{"content":"Examples of controls that implement the <xref:System.Web.UI.ICallbackEventHandler> interface include the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> controls. When a callback event targets a control that implements the <xref:System.Web.UI.ICallbackEventHandler> interface, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is called to handle the event, passing the event argument as a parameter and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the result of the callback.","pos":[0,627],"nodes":[{"content":"Examples of controls that implement the <ph id=\"ph1\">&lt;xref:System.Web.UI.ICallbackEventHandler&gt;</ph> interface include the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.GridView&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.DetailsView&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Web.UI.WebControls.TreeView&gt;</ph> controls.","pos":[0,249],"source":"Examples of controls that implement the <xref:System.Web.UI.ICallbackEventHandler> interface include the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> controls."},{"content":"When a callback event targets a control that implements the <ph id=\"ph1\">&lt;xref:System.Web.UI.ICallbackEventHandler&gt;</ph> interface, the <ph id=\"ph2\">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method is called to handle the event, passing the event argument as a parameter and the <ph id=\"ph3\">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph> method returns the result of the callback.","pos":[250,627],"source":" When a callback event targets a control that implements the <xref:System.Web.UI.ICallbackEventHandler> interface, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is called to handle the event, passing the event argument as a parameter and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the result of the callback."}]}]},{"pos":[918,1693],"content":"Controls that retrieve data from a data source control during callback can do so synchronously or asynchronously. ASP.NET controls like <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> are implemented synchronously. Synchronous callbacks do not prevent the user from working in the browser. In synchronous mode, only one callback at a time can execute, with the last callback taking precedence. When a Web control is implemented to support asynchronous behavior, multiple callbacks can be raised simultaneously. For details on asynchronous programming, see [Event-based Asynchronous Pattern (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).","nodes":[{"content":"Controls that retrieve data from a data source control during callback can do so synchronously or asynchronously.","pos":[0,113]},{"content":"ASP.NET controls like <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.GridView&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.DetailsView&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.TreeView&gt;</ph> are implemented synchronously.","pos":[114,301],"source":" ASP.NET controls like <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> are implemented synchronously."},{"content":"Synchronous callbacks do not prevent the user from working in the browser.","pos":[302,376]},{"content":"In synchronous mode, only one callback at a time can execute, with the last callback taking precedence.","pos":[377,480]},{"content":"When a Web control is implemented to support asynchronous behavior, multiple callbacks can be raised simultaneously.","pos":[481,597]},{"content":"For details on asynchronous programming, see <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept>.","pos":[598,775],"source":" For details on asynchronous programming, see [Event-based Asynchronous Pattern (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)."}]},{"pos":[1700,2722],"content":"You can specify whether callback events originating from the user interface rendered by a control implementing the <xref:System.Web.UI.ICallbackEventHandler> interface are validated. Validation of events is a good security practice. However, for performance reasons you can disable it. To control whether event validation is performed on callback events, set the `enableEventValidation` attribute of the [@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive or the `enableEventValidation` attribute of the [pages Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458) of the Web.config file. If you set the <xref:System.Web.UI.Page.EnableEventValidation%2A> property in code, set it in the `Page_Init` phase of page processing. For more information on balancing the security benefit of event validation with its performance cost, see [ASP.NET Performance Overview](http://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b).","nodes":[{"content":"You can specify whether callback events originating from the user interface rendered by a control implementing the <ph id=\"ph1\">&lt;xref:System.Web.UI.ICallbackEventHandler&gt;</ph> interface are validated.","pos":[0,182],"source":"You can specify whether callback events originating from the user interface rendered by a control implementing the <xref:System.Web.UI.ICallbackEventHandler> interface are validated."},{"content":"Validation of events is a good security practice.","pos":[183,232]},{"content":"However, for performance reasons you can disable it.","pos":[233,285]},{"content":"To control whether event validation is performed on callback events, set the <ph id=\"ph1\">`enableEventValidation`</ph> attribute of the <bpt id=\"p1\">[</bpt>@ Page<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4)</ept> directive or the <ph id=\"ph2\">`enableEventValidation`</ph> attribute of the <bpt id=\"p2\">[</bpt>pages Element (ASP.NET Settings Schema)<ept id=\"p2\">](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458)</ept> of the Web.config file.","pos":[286,676],"source":" To control whether event validation is performed on callback events, set the `enableEventValidation` attribute of the [@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive or the `enableEventValidation` attribute of the [pages Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458) of the Web.config file."},{"content":"If you set the <ph id=\"ph1\">&lt;xref:System.Web.UI.Page.EnableEventValidation%2A&gt;</ph> property in code, set it in the <ph id=\"ph2\">`Page_Init`</ph> phase of page processing.","pos":[677,812],"source":" If you set the <xref:System.Web.UI.Page.EnableEventValidation%2A> property in code, set it in the `Page_Init` phase of page processing."},{"content":"For more information on balancing the security benefit of event validation with its performance cost, see <bpt id=\"p1\">[</bpt>ASP.NET Performance Overview<ept id=\"p1\">](http://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b)</ept>.","pos":[813,1022],"source":" For more information on balancing the security benefit of event validation with its performance cost, see [ASP.NET Performance Overview](http://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b)."}]}],"pos":[619,3350],"yaml":true,"extradata":"MT"},{"content":"Returns the results of a callback event that targets a control.","nodes":[{"pos":[0,63],"content":"Returns the results of a callback event that targets a control.","nodes":[{"content":"Returns the results of a callback event that targets a control.","pos":[0,63]}]}],"pos":[4525,4589],"yaml":true},{"content":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.","nodes":[{"pos":[0,512],"content":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.","nodes":[{"content":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.","pos":[0,512],"nodes":[{"content":"Exceptions thrown in <ph id=\"ph1\">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> will not prevent <ph id=\"ph2\">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph> from being called and returning a result.","pos":[0,208],"source":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result."},{"content":"To prevent <ph id=\"ph1\">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph> from returning a result, set a flag when an exception is thrown in <ph id=\"ph2\">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> and return an empty string from <ph id=\"ph3\">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph>.","pos":[209,512],"source":" To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>."}]}]}],"pos":[4600,5113],"yaml":true,"extradata":"MT"},{"content":"The result of the callback.","nodes":[{"pos":[0,27],"content":"The result of the callback.","nodes":[{"content":"The result of the callback.","pos":[0,27]}]}],"pos":[5248,5276],"yaml":true},{"content":"Processes a callback event that targets a control.","nodes":[{"pos":[0,50],"content":"Processes a callback event that targets a control.","nodes":[{"content":"Processes a callback event that targets a control.","pos":[0,50]}]}],"pos":[6387,6438],"yaml":true},{"content":"When `null` is used as the event argument parameter, the string is serialized to \"null\" and sent back to the server. Because there is no way to distinguish between `null` and \"null\", you should avoid using `null` argument parameters with callbacks.  \n  \n Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.","nodes":[{"pos":[0,248],"content":"When `null` is used as the event argument parameter, the string is serialized to \"null\" and sent back to the server. Because there is no way to distinguish between `null` and \"null\", you should avoid using `null` argument parameters with callbacks.","nodes":[{"content":"When <ph id=\"ph1\">`null`</ph> is used as the event argument parameter, the string is serialized to \"null\" and sent back to the server.","pos":[0,116],"source":"When `null` is used as the event argument parameter, the string is serialized to \"null\" and sent back to the server."},{"content":"Because there is no way to distinguish between <ph id=\"ph1\">`null`</ph> and \"null\", you should avoid using <ph id=\"ph2\">`null`</ph> argument parameters with callbacks.","pos":[117,248],"source":" Because there is no way to distinguish between `null` and \"null\", you should avoid using `null` argument parameters with callbacks."}]},{"pos":[255,767],"content":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.","nodes":[{"content":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.","pos":[0,512],"nodes":[{"content":"Exceptions thrown in <ph id=\"ph1\">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> will not prevent <ph id=\"ph2\">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph> from being called and returning a result.","pos":[0,208],"source":"Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result."},{"content":"To prevent <ph id=\"ph1\">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph> from returning a result, set a flag when an exception is thrown in <ph id=\"ph2\">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> and return an empty string from <ph id=\"ph3\">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph>.","pos":[209,512],"source":" To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>."}]}]}],"pos":[6449,7225],"yaml":true,"extradata":"MT"},{"content":"A string that represents an event argument to pass to the event handler.","nodes":[{"pos":[0,72],"content":"A string that represents an event argument to pass to the event handler.","nodes":[{"content":"A string that represents an event argument to pass to the event handler.","pos":[0,72]}]}],"pos":[7388,7461],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.ICallbackEventHandler\n  commentId: T:System.Web.UI.ICallbackEventHandler\n  id: ICallbackEventHandler\n  children:\n  - System.Web.UI.ICallbackEventHandler.GetCallbackResult\n  - System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)\n  langs:\n  - csharp\n  name: ICallbackEventHandler\n  nameWithType: ICallbackEventHandler\n  fullName: System.Web.UI.ICallbackEventHandler\n  type: Interface\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Used to indicate that a control can be the target of a callback event on the server.\n  remarks: \"Implement the <xref:System.Web.UI.ICallbackEventHandler> interface for any custom control that needs to receive callback events. For more information, see [Implementing Client Callbacks Without Postbacks](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  \\n  \\n Examples of controls that implement the <xref:System.Web.UI.ICallbackEventHandler> interface include the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> controls. When a callback event targets a control that implements the <xref:System.Web.UI.ICallbackEventHandler> interface, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is called to handle the event, passing the event argument as a parameter and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the result of the callback.  \\n  \\n Controls that retrieve data from a data source control during callback can do so synchronously or asynchronously. ASP.NET controls like <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> are implemented synchronously. Synchronous callbacks do not prevent the user from working in the browser. In synchronous mode, only one callback at a time can execute, with the last callback taking precedence. When a Web control is implemented to support asynchronous behavior, multiple callbacks can be raised simultaneously. For details on asynchronous programming, see [Event-based Asynchronous Pattern (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).  \\n  \\n You can specify whether callback events originating from the user interface rendered by a control implementing the <xref:System.Web.UI.ICallbackEventHandler> interface are validated. Validation of events is a good security practice. However, for performance reasons you can disable it. To control whether event validation is performed on callback events, set the `enableEventValidation` attribute of the [@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive or the `enableEventValidation` attribute of the [pages Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458) of the Web.config file. If you set the <xref:System.Web.UI.Page.EnableEventValidation%2A> property in code, set it in the `Page_Init` phase of page processing. For more information on balancing the security benefit of event validation with its performance cost, see [ASP.NET Performance Overview](http://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b).\"\n  syntax:\n    content: public interface ICallbackEventHandler\n  derivedClasses:\n  - System.Web.UI.WebControls.DetailsView\n  - System.Web.UI.WebControls.GridView\n  - System.Web.UI.WebControls.TreeView\n  implements: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ICallbackEventHandler.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult\n  commentId: M:System.Web.UI.ICallbackEventHandler.GetCallbackResult\n  id: GetCallbackResult\n  parent: System.Web.UI.ICallbackEventHandler\n  langs:\n  - csharp\n  name: GetCallbackResult()\n  nameWithType: ICallbackEventHandler.GetCallbackResult()\n  fullName: ICallbackEventHandler.GetCallbackResult()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Returns the results of a callback event that targets a control.\n  remarks: Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.\n  syntax:\n    content: public string GetCallbackResult ();\n    parameters: []\n    return:\n      type: System.String\n      description: The result of the callback.\n  overload: System.Web.UI.ICallbackEventHandler.GetCallbackResult*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ICallbackEventHandler.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)\n  commentId: M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)\n  id: RaiseCallbackEvent(System.String)\n  parent: System.Web.UI.ICallbackEventHandler\n  langs:\n  - csharp\n  name: RaiseCallbackEvent(String)\n  nameWithType: ICallbackEventHandler.RaiseCallbackEvent(String)\n  fullName: ICallbackEventHandler.RaiseCallbackEvent(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Processes a callback event that targets a control.\n  remarks: \"When `null` is used as the event argument parameter, the string is serialized to \\\"null\\\" and sent back to the server. Because there is no way to distinguish between `null` and \\\"null\\\", you should avoid using `null` argument parameters with callbacks.  \\n  \\n Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.\"\n  syntax:\n    content: public void RaiseCallbackEvent (string eventArgument);\n    parameters:\n    - id: eventArgument\n      type: System.String\n      description: A string that represents an event argument to pass to the event handler.\n  overload: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ICallbackEventHandler.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\nreferences:\n- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult\n  parent: System.Web.UI.ICallbackEventHandler\n  isExternal: false\n  name: GetCallbackResult()\n  nameWithType: ICallbackEventHandler.GetCallbackResult()\n  fullName: ICallbackEventHandler.GetCallbackResult()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)\n  parent: System.Web.UI.ICallbackEventHandler\n  isExternal: false\n  name: RaiseCallbackEvent(String)\n  nameWithType: ICallbackEventHandler.RaiseCallbackEvent(String)\n  fullName: ICallbackEventHandler.RaiseCallbackEvent(String)\n- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult*\n  parent: System.Web.UI.ICallbackEventHandler\n  isExternal: false\n  name: GetCallbackResult\n  nameWithType: ICallbackEventHandler.GetCallbackResult\n  fullName: ICallbackEventHandler.GetCallbackResult\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ICallbackEventHandler.xml\n- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*\n  parent: System.Web.UI.ICallbackEventHandler\n  isExternal: false\n  name: RaiseCallbackEvent\n  nameWithType: ICallbackEventHandler.RaiseCallbackEvent\n  fullName: ICallbackEventHandler.RaiseCallbackEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/ICallbackEventHandler.xml\n"}