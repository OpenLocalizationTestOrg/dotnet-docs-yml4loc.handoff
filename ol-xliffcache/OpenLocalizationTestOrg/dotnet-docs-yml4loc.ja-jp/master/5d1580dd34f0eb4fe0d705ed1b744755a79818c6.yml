### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.TaskFactory
  commentId: T:System.Threading.Tasks.TaskFactory
  id: TaskFactory
  children:
  - System.Threading.Tasks.TaskFactory.#ctor
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.CancellationToken
  - System.Threading.Tasks.TaskFactory.ContinuationOptions
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.CreationOptions
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.Scheduler
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  langs:
  - csharp
  name: TaskFactory
  nameWithType: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
  type: Class
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Provides support for creating and scheduling <xref href="System.Threading.Tasks.Task"></xref> objects.
  remarks: "The .NET Framework provides two factories for creating and scheduling tasks:  \n  \n-   The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects. You can call the overloads of this method to create and execute a task that requires non-default arguments.  \n  \n    > [!WARNING]\n    >  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.  \n  \n-   The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.  \n  \n The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:  \n  \n-   Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.  \n  \n    > [!WARNING]\n    >  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.  \n  \n-   Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.  \n  \n-   Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.  \n  \n The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.  \n  \n [!code-csharp[TPL_Factories#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)]\n [!code-vb[TPL_Factories#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)]  \n  \n In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance. Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example."
  example:
  - "The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.  \n  \n [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]\n [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]"
  syntax:
    content: public class TaskFactory
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.#ctor
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: TaskFactory()
  nameWithType: TaskFactory.TaskFactory()
  fullName: TaskFactory.TaskFactory()
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory"></xref> instance with the default configuration.
  remarks: This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory ();
    parameters: []
  overload: System.Threading.Tasks.TaskFactory.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: TaskFactory(CancellationToken)
  nameWithType: TaskFactory.TaskFactory(CancellationToken)
  fullName: TaskFactory.TaskFactory(CancellationToken)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory"></xref> instance with the specified configuration.
  remarks: This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to tasks created by this <xref href="System.Threading.Tasks.TaskFactory"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.
  overload: System.Threading.Tasks.TaskFactory.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: TaskFactory(TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(TaskScheduler)
  fullName: TaskFactory.TaskFactory(TaskScheduler)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory"></xref> instance with the specified configuration.
  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.
  overload: System.Threading.Tasks.TaskFactory.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  nameWithType: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  fullName: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory"></xref> instance with the specified configuration.
  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default <xref href="System.Threading.Tasks.TaskCreationOptions"></xref> to use when creating tasks with this TaskFactory.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> to use when creating continuation tasks with this TaskFactory.
  overload: System.Threading.Tasks.TaskFactory.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>creationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>.  \n  \n -or-  \n  \n The <code>continuationOptions</code> argument specifies an invalid value."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory"></xref> instance with the specified configuration.
  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The default <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to tasks created by this <xref href="System.Threading.Tasks.TaskFactory"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default <xref href="System.Threading.Tasks.TaskCreationOptions"></xref> to use when creating tasks with this TaskFactory.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> to use when creating continuation tasks with this TaskFactory.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The default <xref href="System.Threading.Tasks.TaskScheduler"></xref> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.
  overload: System.Threading.Tasks.TaskFactory.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>creationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>.  \n  \n -or-  \n  \n The <code>continuationOptions</code> argument specifies an invalid value."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.CancellationToken
  commentId: P:System.Threading.Tasks.TaskFactory.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: CancellationToken
  nameWithType: TaskFactory.CancellationToken
  fullName: TaskFactory.CancellationToken
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets the default cancellation token for this task factory.
  remarks: This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods.
  syntax:
    content: public System.Threading.CancellationToken CancellationToken { get; }
    return:
      type: System.Threading.CancellationToken
      description: The default task cancellation token for this task factory.
  overload: System.Threading.Tasks.TaskFactory.CancellationToken*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions
  commentId: P:System.Threading.Tasks.TaskFactory.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinuationOptions
  nameWithType: TaskFactory.ContinuationOptions
  fullName: TaskFactory.ContinuationOptions
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets the default task continuation options for this task factory.
  remarks: The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.
  syntax:
    content: public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default task continuation options for this task factory.
  overload: System.Threading.Tasks.TaskFactory.ContinuationOptions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll(Task[], Action<Task[]>)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)
  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  remarks: "The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.  \n  \n Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling. You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> property of each task in the `tasks` array. To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=fullName> method."
  example:
  - "The following example launches separate tasks that use a regular expression to count the number of words in a set of text files. The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.  \n  \n [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall1.cs#1)]\n [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall1.vb#1)]  \n  \n The call to the continuation task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method does not allow it to handle exceptions thrown by the antecedent tasks, so the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property of each antecedent task to determine whether the task succeeded."
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An element in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  remarks: The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.
  example:
  - "The following example creates a cancellation token, which it passes to separate tasks that use a regular expression to count the number of words in a set of text files. The cancellation token is set if a file cannot be found. The [\\], Action(Task\\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed. If the cancellation token is set, which indicates that one or more tasks have been cancelled, it handles the <xref:System.AggregateException> exception and displays an error message.  \n  \n [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall2.cs#2)]\n [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall2.vb#2)]"
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An element in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The object that is used to schedule the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The object that is used to schedule the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An element in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An element in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}
      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The object that is used to schedule the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}
      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An element in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}
      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}
      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An element in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)
  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    typeParameters:
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An element in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    typeParameters:
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    typeParameters:
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An element in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that starts when a set of specified tasks has completed.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to assign to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The object that is used to schedule the new continuation task.
    typeParameters:
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array is empty or contains a null value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task"></xref> that will be started upon the completion of any Task in the provided set.
  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: The action delegate to execute when one task in the <code>tasks</code> array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: The action delegate to execute when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the created continuation <xref href="System.Threading.Tasks.Task"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny(Task[], Action<Task>)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>)
  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task"></xref> that will be started upon the completion of any Task in the provided set.
  remarks: ''
  example:
  - "The following example shows how to use `ContinueWhenAny` and `ContinueWhenAll`:  \n  \n [!code-csharp[System.Threading.Tasks.Task#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuewhenmulti.cs#05)]\n [!code-vb[System.Threading.Tasks.Task#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuewhenmulti.vb#05)]"
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: The action delegate to execute when one task in the <code>tasks</code> array completes.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>tasks</code> array contains a `null` value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: The action delegate to execute when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>tasks</code> array contains a `null` value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty ."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1"></xref> that will be started upon the completion of any Task in the provided set.
  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1"></xref> that will be started upon the completion of any Task in the provided set.
  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the created continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}
      description: The action delegate to execute when one task in the <code>tasks</code> array completes.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}
      description: The action delegate to execute when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task"></xref> that will be started upon the completion of any Task in the provided set.
  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}
      description: The action delegate to execute when one task in the <code>tasks</code> array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task"></xref>.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task"></xref> that will be started upon the completion of any Task in the provided set.
  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}
      description: The action delegate to execute when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the created continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task
      description: The new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)
  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    typeParameters:
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1"></xref> that will be started upon the completion of any Task in the provided set.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    typeParameters:
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1"></xref> that will be started upon the completion of any Task in the provided set.
  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation <xref href="System.Threading.Tasks.Task`1"></xref> that will be started upon the completion of any Task in the provided set.
  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> value that controls the behavior of the created continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the created continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.CreationOptions
  commentId: P:System.Threading.Tasks.TaskFactory.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: CreationOptions
  nameWithType: TaskFactory.CreationOptions
  fullName: TaskFactory.CreationOptions
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets the default task creation options for this task factory.
  remarks: The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.
  syntax:
    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default task creation options for this task factory.
  overload: System.Threading.Tasks.TaskFactory.CreationOptions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync(IAsyncResult, Action<IAsyncResult>)
  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)
  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that executes an end method action when a specified <xref href="System.IAsyncResult"></xref> completes.
  remarks: >-
    > [!TIP]

    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The action delegate that processes the completed <code>asyncResult</code>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)
  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)
  fullName: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.  This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that executes an end method action when a specified <xref href="System.IAsyncResult"></xref> completes.
  remarks: >-
    > [!TIP]

    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The action delegate that processes the completed <code>asyncResult</code>.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`. The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive. In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that executes an end method action when a specified <xref href="System.IAsyncResult"></xref> completes.
  remarks: >-
    > [!TIP]

    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The action delegate that processes the completed <code>asyncResult</code>.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the task that executes the end method.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3,TResult> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: arg3
      type: TArg3
      description: The third argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the third argument passed to <code>beginMethod</code> delegate.
    - id: TArg3
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``4*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3,TResult> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: arg3
      type: TArg3
      description: The third argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the third argument passed to <code>beginMethod</code> delegate.
    - id: TArg3
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``4*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: arg3
      type: TArg3
      description: The third argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the third argument passed to <code>beginMethod</code> delegate.
    - id: TArg3
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``3*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: arg3
      type: TArg3
      description: The third argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the third argument passed to <code>beginMethod</code> delegate.
    - id: TArg3
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``3*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TResult> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``3*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TResult> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``3*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
  fullName: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  fullName: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TResult> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TResult> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
  fullName: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The created <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that executes an end method function when a specified <xref href="System.IAsyncResult"></xref> completes.
  remarks: >-
    > [!TIP]

    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The function delegate that processes the completed <code>asyncResult</code>.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the task that executes the end method.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: A <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that executes an end method function when a specified <xref href="System.IAsyncResult"></xref> completes.
  remarks: >-
    > [!TIP]

    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The function delegate that processes the completed <code>asyncResult</code>.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: A <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  fullName: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)
  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)
  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that executes an end method function when a specified <xref href="System.IAsyncResult"></xref> completes.
  remarks: >-
    > [!TIP]

    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The function delegate that processes the completed <code>asyncResult</code>.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: A <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.Scheduler
  commentId: P:System.Threading.Tasks.TaskFactory.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: Scheduler
  nameWithType: TaskFactory.Scheduler
  fullName: TaskFactory.Scheduler
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets the default task scheduler for this task factory.
  remarks: "The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.  \n  \n If this property value is `null`, the value of the <xref:System.Threading.Tasks.TaskScheduler.Current%2A> property is used."
  syntax:
    content: public System.Threading.Tasks.TaskScheduler Scheduler { get; }
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: The default task scheduler for this task factory.
  overload: System.Threading.Tasks.TaskFactory.Scheduler*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The action delegate to execute asynchronously.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>action</code> delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the created <xref href="System.Threading.Tasks.Task"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>action</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: action
      type: System.Action
      description: The action delegate to execute asynchronously.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to the new <xref href="System.Threading.Tasks.Task"></xref>
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the created <xref href="System.Threading.Tasks.Task"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>action</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew(Action<Object>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)
  fullName: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The action delegate to execute asynchronously.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>action</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown when the <code>action</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew(Action<Object>, Object, CancellationToken)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)
  fullName: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  example:
  - "The following example defines an array of 6-letter words. Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.  \n  \n [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew4.cs#4)]\n [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew4.vb#4)]  \n  \n Note that the example initializes a single random number generator, which is protected by a lock. For the need of a lock, see \"The System.Random class and thread safety\" in the <xref:System.Random> class topic. To handle the possibility of corruption of the random number generator, a cancellation token is passed to task. If two random numbers equal zero, the method assumes that the random number generator is corrupted and sets the cancellation token. Before sorting the `chars` array that contains the six characters in a word, the method calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method to throw an <xref:System.OperationCanceledException> if the token has been canceled."
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The action delegate to execute asynchronously.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>action</code> delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to the new <xref href="System.Threading.Tasks.Task"></xref>
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown when the <code>action</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  id: StartNew(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew(Action, CancellationToken)
  nameWithType: TaskFactory.StartNew(Action, CancellationToken)
  fullName: TaskFactory.StartNew(Action, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task"></xref>.
  remarks: "Calling `StartNew` is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  example:
  - "The following example calls the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\\Windows\\System32 directory. The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object. Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method. The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method.  \n  \n [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew2.cs#2)]\n [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew2.vb#2)]"
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action
      description: The action delegate to execute asynchronously.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to the new task.
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown when the <code>action</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew(Action, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action, TaskCreationOptions)
  fullName: TaskFactory.StartNew(Action, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action
      description: The action delegate to execute asynchronously.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task"></xref>
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown when the <code>action</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  id: StartNew(System.Action)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew(Action)
  nameWithType: TaskFactory.StartNew(Action)
  fullName: TaskFactory.StartNew(Action)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  remarks: "Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  example:
  - "The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> method to repeatedly invoke an <xref:System.Action> delegate that generates a random number, interprets it as a Unicode code point, converts it to a UTF16-encoded code unit, and displays information about the resulting character or characters.  \n  \n [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew1.cs#1)]\n [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew1.vb#1)]"
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action action);
    parameters:
    - id: action
      type: System.Action
      description: The action delegate to execute asynchronously.
    return:
      type: System.Threading.Tasks.Task
      description: The started task.
  overload: System.Threading.Tasks.TaskFactory.StartNew*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>action</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  id: StartNew(System.Action{System.Object},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew(Action<Object>, Object)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object)
  fullName: TaskFactory.StartNew(Action<Object>, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task"></xref>.
  remarks: "Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  example:
  - "The following example defines an array of 6-letter words. Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.  \n  \n [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew3.cs#3)]\n [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew3.vb#3)]  \n  \n Note that the example initializes a single random number generator, which is protected by a lock. For the need of a lock, see \"The System.Random class and thread safety\" in the <xref:System.Random> class topic."
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The action delegate to execute asynchronously.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>action</code> delegate.
    return:
      type: System.Threading.Tasks.Task
      description: The started <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>action</code> argument is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func`1
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>function</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  id: StartNew``1(System.Func{``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew<TResult>(Func<TResult>)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>)
  fullName: TaskFactory.StartNew<TResult>(Func<TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: "Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  example:
  - "The following example is a simple addition app that generates two random numbers and prompts the user to enter their sum. It then indicates whether the answer is correct or, if the user's response is not a valid number, prompts the user to re-enter a valid number. The <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is used to create the <xref:System.Threading.Tasks.Task%601> objects that return the random numbers to add.  \n  \n [!code-csharp[System.Threading.Tasks.Task.Run#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run5.cs#5)]\n [!code-vb[System.Threading.Tasks.Task.Run#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run5.vb#5)]"
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function);
    parameters:
    - id: function
      type: System.Func`1
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  id: StartNew``1(System.Func{System.Object,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew<TResult>(Func<Object,TResult>, Object)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object)
  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>function</code> delegate.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown when the <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew<TResult>(Func<TResult>, CancellationToken)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)
  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: "Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  example:
  - "The following example uses two tasks to compute the Fibonacci sequence ending in F100 = F100-1 + F100-2 with seed values F1= 1, F2 = 1 and F1 = 0, F2= 1. Approximately half of the time, a cancellation token is set as the operations execute. The output from the example shows the result if the two tasks complete successfully and if the token is cancelled.  \n  \n [!code-csharp[System.Threading.Tasks.Task.Run#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run9.cs#9)]\n [!code-vb[System.Threading.Tasks.Task.Run#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run9.vb#9)]"
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func`1
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to the new <xref href="System.Threading.Tasks.Task"></xref>
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown when the <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew<TResult>(Func<TResult>, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)
  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func`1
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown when the <code>function</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)
  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>function</code> delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to the new <xref href="System.Threading.Tasks.Task"></xref>
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown when the <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>function</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown when the <code>function</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  name: StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: "Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: A function delegate that returns the future result to be available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>function</code> delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken"></xref> that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: A TaskCreationOptions value that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result available through the <xref href="System.Threading.Tasks.Task`1"></xref>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory.StartNew``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The exception that is thrown when the <code>function</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href="System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"></xref>
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Threading.Tasks.TaskFactory.#ctor
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory()
  nameWithType: TaskFactory.TaskFactory()
  fullName: TaskFactory.TaskFactory()
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory(CancellationToken)
  nameWithType: TaskFactory.TaskFactory(CancellationToken)
  fullName: TaskFactory.TaskFactory(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory(TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(TaskScheduler)
  fullName: TaskFactory.TaskFactory(TaskScheduler)
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  nameWithType: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  fullName: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.CancellationToken
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: CancellationToken
  nameWithType: TaskFactory.CancellationToken
  fullName: TaskFactory.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinuationOptions
  nameWithType: TaskFactory.ContinuationOptions
  fullName: TaskFactory.ContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[], Action<Task[]>)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)
  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task[]
  parent: System.Threading.Tasks
  isExternal: false
  name: Task[]
  nameWithType: Task[]
  fullName: System.Threading.Tasks.Task[]
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Action{System.Threading.Tasks.Task[]}
  parent: System
  isExternal: false
  name: Action<Task[]>
  nameWithType: Action<Task[]>
  fullName: System.Action<System.Threading.Tasks.Task[]>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: TAntecedentResult
  name: TAntecedentResult
  nameWithType: TAntecedentResult
  fullName: TAntecedentResult
- uid: System.Threading.Tasks.Task{TAntecedentResult}[]
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TAntecedentResult>[]
  nameWithType: Task<TAntecedentResult>[]
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Func`2
  name: Func<T,TResult>
  nameWithType: Func<T,TResult>
  fullName: System.Func<T,TResult>
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
  parent: System
  isExternal: false
  name: Func<Task<TAntecedentResult>[],TResult>
  nameWithType: Func<Task<TAntecedentResult>[],TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}
  parent: System
  isExternal: false
  name: Action<Task<TAntecedentResult>[]>
  nameWithType: Action<Task<TAntecedentResult>[]>
  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)
  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)
- uid: System.Func{System.Threading.Tasks.Task[],TResult}
  parent: System
  isExternal: false
  name: Func<Task[],TResult>
  nameWithType: Func<Task[],TResult>
  fullName: System.Func<System.Threading.Tasks.Task[],TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[], Action<Task>)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>)
  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
  parent: System
  isExternal: false
  name: Func<Task<TAntecedentResult>,TResult>
  nameWithType: Func<Task<TAntecedentResult>,TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
- uid: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}
  parent: System
  isExternal: false
  name: Action<Task<TAntecedentResult>>
  nameWithType: Action<Task<TAntecedentResult>>
  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)
  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: false
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)
  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)
  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.CreationOptions
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: CreationOptions
  nameWithType: TaskFactory.CreationOptions
  fullName: TaskFactory.CreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(IAsyncResult, Action<IAsyncResult>)
  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)
  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Action{System.IAsyncResult}
  parent: System
  isExternal: false
  name: Action<IAsyncResult>
  nameWithType: Action<IAsyncResult>
  fullName: System.Action<System.IAsyncResult>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)
  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)
  fullName: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)
- uid: System.Func`3
  name: Func<T1,T2,TResult>
  nameWithType: Func<T1,T2,TResult>
  fullName: System.Func<T1,T2,TResult>
- uid: System.AsyncCallback
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
- uid: System.Func`6
  name: Func<T1,T2,T3,T4,T5,TResult>
  nameWithType: Func<T1,T2,T3,T4,T5,TResult>
  fullName: System.Func<T1,T2,T3,T4,T5,TResult>
- uid: TArg1
  name: TArg1
  nameWithType: TArg1
  fullName: TArg1
- uid: TArg2
  name: TArg2
  nameWithType: TArg2
  fullName: TArg2
- uid: TArg3
  name: TArg3
  nameWithType: TArg3
  fullName: TArg3
- uid: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg2
    name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg3
    name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Func{System.IAsyncResult,TResult}
  parent: System
  isExternal: false
  name: Func<IAsyncResult,TResult>
  nameWithType: Func<IAsyncResult,TResult>
  fullName: System.Func<System.IAsyncResult,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
- uid: System.Func`5
  name: Func<T1,T2,T3,T4,TResult>
  nameWithType: Func<T1,T2,T3,T4,TResult>
  fullName: System.Func<T1,T2,T3,T4,TResult>
- uid: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg2
    name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
  fullName: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  nameWithType: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  fullName: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
- uid: System.Func`4
  name: Func<T1,T2,T3,TResult>
  nameWithType: Func<T1,T2,T3,TResult>
  fullName: System.Func<T1,T2,T3,TResult>
- uid: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<TArg1,AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<TArg1,AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
  fullName: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  fullName: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)
  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)
  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  fullName: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.Scheduler
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: Scheduler
  nameWithType: TaskFactory.Scheduler
  fullName: TaskFactory.Scheduler
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Action{System.Object}
  parent: System
  isExternal: false
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action<Object>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)
  fullName: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action<Object>, Object, CancellationToken)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)
  fullName: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action, CancellationToken)
  nameWithType: TaskFactory.StartNew(Action, CancellationToken)
  fullName: TaskFactory.StartNew(Action, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action, TaskCreationOptions)
  fullName: TaskFactory.StartNew(Action, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action)
  nameWithType: TaskFactory.StartNew(Action)
  fullName: TaskFactory.StartNew(Action)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action<Object>, Object)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object)
  fullName: TaskFactory.StartNew(Action<Object>, Object)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew<TResult>(Func<TResult>)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>)
  fullName: TaskFactory.StartNew<TResult>(Func<TResult>)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew<TResult>(Func<Object,TResult>, Object)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object)
  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object)
- uid: System.Func{System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Object,TResult>
  nameWithType: Func<Object,TResult>
  fullName: System.Func<System.Object,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew<TResult>(Func<TResult>, CancellationToken)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)
  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew<TResult>(Func<TResult>, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)
  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)
  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.StartNew*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory.StartNew
  fullName: TaskFactory.StartNew
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.#ctor*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory
  nameWithType: TaskFactory.TaskFactory
  fullName: TaskFactory.TaskFactory
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.CancellationToken*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: CancellationToken
  nameWithType: TaskFactory.CancellationToken
  fullName: TaskFactory.CancellationToken
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinuationOptions
  nameWithType: TaskFactory.ContinuationOptions
  fullName: TaskFactory.ContinuationOptions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory.ContinueWhenAll
  fullName: TaskFactory.ContinueWhenAll
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult,TResult>
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>
  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny
  nameWithType: TaskFactory.ContinueWhenAny
  fullName: TaskFactory.ContinueWhenAny
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult,TResult>
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>
  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.CreationOptions*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: CreationOptions
  nameWithType: TaskFactory.CreationOptions
  fullName: TaskFactory.CreationOptions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.FromAsync*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync
  nameWithType: TaskFactory.FromAsync
  fullName: TaskFactory.FromAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3,TResult>
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3>
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>
  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1,TArg2>
  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>
  fullName: TaskFactory.FromAsync<TArg1,TArg2>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync<TArg1>
  nameWithType: TaskFactory.FromAsync<TArg1>
  fullName: TaskFactory.FromAsync<TArg1>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.Scheduler*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: Scheduler
  nameWithType: TaskFactory.Scheduler
  fullName: TaskFactory.Scheduler
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Threading.Tasks.TaskFactory.StartNew``1*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew<TResult>
  nameWithType: TaskFactory.StartNew<TResult>
  fullName: TaskFactory.StartNew<TResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
