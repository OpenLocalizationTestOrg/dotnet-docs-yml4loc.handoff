{"nodes":[{"content":"Indicates that a method should use the `StdCall` calling convention.","nodes":[{"pos":[0,68],"content":"Indicates that a method should use the <ph id=\"ph1\">`StdCall`</ph> calling convention.","source":"Indicates that a method should use the `StdCall` calling convention."}],"pos":[539,608],"yaml":true},{"content":"The callee cleans the stack. This is the default convention for calling unmanaged functions from managed code.  \n  \n The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.  \n  \n Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.  \n  \n You can emit custom modifiers into metadata using one of the following techniques:  \n  \n-   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  \n  \n-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).  \n  \n-   Using the unmanaged reflection API.","nodes":[{"pos":[0,110],"content":"The callee cleans the stack. This is the default convention for calling unmanaged functions from managed code.","nodes":[{"content":"The callee cleans the stack. This is the default convention for calling unmanaged functions from managed code.","pos":[0,110],"nodes":[{"content":"The callee cleans the stack.","pos":[0,28]},{"content":"This is the default convention for calling unmanaged functions from managed code.","pos":[29,110]}]}]},{"pos":[117,206],"content":"The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.","nodes":[{"content":"The classes in <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> are for compiler writers' use only.","pos":[0,89],"source":"The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only."}]},{"pos":[213,846],"content":"Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.","nodes":[{"content":"Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.","pos":[0,633],"nodes":[{"content":"Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.","pos":[0,163]},{"content":"When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.","pos":[165,277]},{"content":"Compilers can apply custom modifiers to methods, parameters, and return values.","pos":[279,358]},{"content":"The JIT compiler must respond to required modifiers but can ignore optional modifiers.","pos":[360,446]},{"content":"A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.","pos":[448,633]}]}]},{"pos":[853,935],"content":"You can emit custom modifiers into metadata using one of the following techniques:","nodes":[{"content":"You can emit custom modifiers into metadata using one of the following techniques:","pos":[0,82]}]},{"pos":[945,1267],"content":"Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.","nodes":[{"content":"Using methods in the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class such as <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph>.","pos":[0,322],"source":"Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>."}]},{"pos":[1277,1502],"content":"Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id=\"ph1\">`modopt`</ph> and <ph id=\"ph2\">`modreq`</ph>, and assembling the file with the <bpt id=\"p1\">[</bpt>Ilasm.exe (IL Assembler)<ept id=\"p1\">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>.","source":"Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md)."},{"pos":[1512,1547],"content":"Using the unmanaged reflection API.","nodes":[{"content":"Using the unmanaged reflection API.","pos":[0,35]}]}],"pos":[619,2181],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.CallConvStdcall\"></xref> class.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallConvStdcall\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.CallConvStdcall\"></xref> class."}],"pos":[4033,4143],"yaml":true},{"content":"The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.","nodes":[{"pos":[0,89],"content":"The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.","nodes":[{"content":"The classes in <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> are for compiler writers' use only.","pos":[0,89],"source":"The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only."}]}],"pos":[4154,4244],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.CallConvStdcall\n  commentId: T:System.Runtime.CompilerServices.CallConvStdcall\n  id: CallConvStdcall\n  children:\n  - System.Runtime.CompilerServices.CallConvStdcall.#ctor\n  langs:\n  - csharp\n  name: CallConvStdcall\n  nameWithType: CallConvStdcall\n  fullName: System.Runtime.CompilerServices.CallConvStdcall\n  type: Class\n  assemblies:\n  - System.Runtime.CompilerServices.VisualC\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Indicates that a method should use the `StdCall` calling convention.\n  remarks: \"The callee cleans the stack. This is the default convention for calling unmanaged functions from managed code.  \\n  \\n The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.  \\n  \\n Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.  \\n  \\n You can emit custom modifiers into metadata using one of the following techniques:  \\n  \\n-   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  \\n  \\n-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).  \\n  \\n-   Using the unmanaged reflection API.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CallConvStdcall\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/CallConvStdcall.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.CallConvStdcall.#ctor\n  commentId: M:System.Runtime.CompilerServices.CallConvStdcall.#ctor\n  id: '#ctor'\n  parent: System.Runtime.CompilerServices.CallConvStdcall\n  langs:\n  - csharp\n  name: CallConvStdcall()\n  nameWithType: CallConvStdcall.CallConvStdcall()\n  fullName: CallConvStdcall.CallConvStdcall()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.CompilerServices.VisualC\n  namespace: System.Runtime.CompilerServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.CallConvStdcall\"></xref> class.\n  remarks: The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.\n  syntax:\n    content: public CallConvStdcall ();\n    parameters: []\n  overload: System.Runtime.CompilerServices.CallConvStdcall.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/CallConvStdcall.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.CompilerServices.CallConvStdcall.#ctor\n  parent: System.Runtime.CompilerServices.CallConvStdcall\n  isExternal: false\n  name: CallConvStdcall()\n  nameWithType: CallConvStdcall.CallConvStdcall()\n  fullName: CallConvStdcall.CallConvStdcall()\n- uid: System.Runtime.CompilerServices.CallConvStdcall.#ctor*\n  parent: System.Runtime.CompilerServices.CallConvStdcall\n  isExternal: false\n  name: CallConvStdcall\n  nameWithType: CallConvStdcall.CallConvStdcall\n  fullName: CallConvStdcall.CallConvStdcall\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/CallConvStdcall.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}