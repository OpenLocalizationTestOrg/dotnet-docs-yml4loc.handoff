{"nodes":[{"content":"Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.","nodes":[{"pos":[0,134],"content":"Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.","nodes":[{"content":"Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.","pos":[0,134],"nodes":[{"content":"Exposes instance methods for creating, moving, and enumerating through directories and subdirectories.","pos":[0,102]},{"content":"This class cannot be inherited.","pos":[103,134]}]}]}],"pos":[2419,2554],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the <xref:System.IO.DirectoryInfo> class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \n  \n If you are going to reuse an object several times, consider using the instance method of <xref:System.IO.DirectoryInfo> instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary.  \n  \n> [!NOTE]\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n By default, full read/write access to new directories is granted to all users.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[2,415],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,411],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)</ept>.","pos":[1,174],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[175,403],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[422,560],"content":"Use the <xref:System.IO.DirectoryInfo> class for typical operations such as copying, moving, renaming, creating, and deleting directories.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> class for typical operations such as copying, moving, renaming, creating, and deleting directories.","pos":[0,138],"source":"Use the <xref:System.IO.DirectoryInfo> class for typical operations such as copying, moving, renaming, creating, and deleting directories."}]},{"pos":[567,826],"content":"If you are going to reuse an object several times, consider using the instance method of <xref:System.IO.DirectoryInfo> instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary.","nodes":[{"content":"If you are going to reuse an object several times, consider using the instance method of <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> instead of the corresponding static methods of the <ph id=\"ph2\">&lt;xref:System.IO.Directory&gt;</ph> class, because a security check will not always be necessary.","pos":[0,259],"source":"If you are going to reuse an object several times, consider using the instance method of <xref:System.IO.DirectoryInfo> instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary."}]},{"pos":[834,1364],"content":"[!NOTE]\n In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.","leadings":["","> "],"nodes":[{"content":" In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.","pos":[8,528],"nodes":[{"content":"In members that accept a path as an input string, that path must be well-formed or an exception is raised.","pos":[1,107]},{"content":"For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class.","pos":[108,223]},{"content":"Therefore, the path is malformed and an exception is raised.","pos":[224,284]},{"content":"Similarly, a path or a combination of paths cannot be fully qualified twice.","pos":[285,361]},{"content":"For example, \"c:\\temp c:\\windows\" also raises an exception in most cases.","pos":[362,435]},{"content":"Ensure that your paths are well-formed when using methods that accept a path string.","pos":[436,520]}]}]},{"pos":[1371,1630],"content":"In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:","nodes":[{"content":"In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:","pos":[0,259],"nodes":[{"content":"In members that accept a path, the path can refer to a file or just a directory.","pos":[0,80]},{"content":"The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name.","pos":[81,206]},{"content":"For example, all the following are acceptable paths:","pos":[207,259]}]}]},{"pos":[1640,1714],"content":"\"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.","nodes":[{"content":"\"c:<ph id=\"ph1\">\\\\</ph>\\MyDir<ph id=\"ph2\">\\\\</ph>\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.","pos":[0,74],"source":"\"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic."}]},{"pos":[1724,1774],"content":"\"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.","nodes":[{"content":"\"c:<ph id=\"ph1\">\\\\</ph>\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.","pos":[0,50],"source":"\"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic."}]},{"pos":[1784,1846],"content":"\"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.","nodes":[{"content":"\"MyDir<ph id=\"ph1\">\\\\</ph>\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.","pos":[0,62],"source":"\"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic."}]},{"pos":[1856,1932],"content":"\"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.","nodes":[{"content":"\"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">\\\\</ph>\\MyServer<ph id=\"ph4\">\\\\</ph>\\MyShare\" in C#, or \"<ph id=\"ph5\">\\\\</ph>\\MyServer\\MyShare\" in Visual Basic.","pos":[0,76],"source":"\"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic."}]},{"pos":[1939,2017],"content":"By default, full read/write access to new directories is granted to all users.","nodes":[{"content":"By default, full read/write access to new directories is granted to all users.","pos":[0,78]}]},{"pos":[2024,2119],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[2565,4759],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class on the specified path.","nodes":[{"pos":[0,107],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> class on the specified path.","source":"Initializes a new instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class on the specified path."}],"pos":[8509,8617],"yaml":true},{"content":"This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,159],"content":"This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.","nodes":[{"content":"This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.","pos":[0,159],"nodes":[{"content":"This constructor does not check if a directory exists.","pos":[0,54]},{"content":"This constructor is a placeholder for a string that is used to access the disk in subsequent operations.","pos":[55,159]}]}]},{"pos":[166,269],"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","source":"The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"pos":[277,518],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[525,620],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[8628,9258],"yaml":true,"extradata":"MT"},{"content":"A string specifying the path on which to create the `DirectoryInfo`.","nodes":[{"pos":[0,68],"content":"A string specifying the path on which to create the <ph id=\"ph1\">`DirectoryInfo`</ph>.","source":"A string specifying the path on which to create the `DirectoryInfo`."}],"pos":[9921,9990],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[10149,10178],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[10290,10340],"yaml":true},{"content":"<code>path</code> contains invalid characters such as \", <, >, or |.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains invalid characters such as \", &lt;, &gt;, or |.","source":"<code>path</code> contains invalid characters such as \", <, >, or |."}],"pos":[10434,10503],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","nodes":[{"pos":[0,263],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","pos":[0,263],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]},{"content":"The specified path, file name, or both are too long.","pos":[211,263]}]}]}],"pos":[10609,10873],"yaml":true},{"content":"Creates a directory.","nodes":[{"pos":[0,20],"content":"Creates a directory.","nodes":[{"content":"Creates a directory.","pos":[0,20]}]}],"pos":[12133,12154],"yaml":true},{"content":"If the directory already exists, this method does nothing.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,58],"content":"If the directory already exists, this method does nothing.","nodes":[{"content":"If the directory already exists, this method does nothing.","pos":[0,58]}]},{"pos":[65,160],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[12165,12330],"yaml":true,"extradata":"MT"},{"content":"The directory cannot be created.","nodes":[{"pos":[0,32],"content":"The directory cannot be created.","nodes":[{"content":"The directory cannot be created.","pos":[0,32]}]}],"pos":[13047,13080],"yaml":true},{"content":"Creates a directory using a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object.","nodes":[{"pos":[0,104],"content":"Creates a directory using a <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a directory using a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object."}],"pos":[14497,14602],"yaml":true},{"content":"Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.  \n  \n If the directory already exists, this method does nothing.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,147],"content":"Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.","nodes":[{"content":"Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.","pos":[0,147]}]},{"pos":[154,212],"content":"If the directory already exists, this method does nothing.","nodes":[{"content":"If the directory already exists, this method does nothing.","pos":[0,58]}]},{"pos":[219,314],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[14613,14934],"yaml":true,"extradata":"MT"},{"content":"The access control to apply to the directory.","nodes":[{"pos":[0,45],"content":"The access control to apply to the directory.","nodes":[{"content":"The access control to apply to the directory.","pos":[0,45]}]}],"pos":[15168,15214],"yaml":true},{"content":"The directory specified by <code>path</code> is read-only or is not empty.","nodes":[{"pos":[0,74],"content":"The directory specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is read-only or is not empty.","source":"The directory specified by <code>path</code> is read-only or is not empty."}],"pos":[15360,15435],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[15549,15599],"yaml":true},{"content":"<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\"></xref>.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.InvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\"></xref>."}],"pos":[15693,15874],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[15976,16005],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,210],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]}],"pos":[16111,16322],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[16440,16507],"yaml":true},{"content":"Creating a directory with only the colon (:) character was attempted.","nodes":[{"pos":[0,69],"content":"Creating a directory with only the colon (:) character was attempted.","nodes":[{"content":"Creating a directory with only the colon (:) character was attempted.","pos":[0,69]}]}],"pos":[16609,16679],"yaml":true},{"content":"Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.","nodes":[{"pos":[0,174],"content":"Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.","nodes":[{"content":"Creates a subdirectory or subdirectories on the specified path.","pos":[0,63]},{"content":"The specified path can be relative to this instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> class.","pos":[64,174],"source":" The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class."}]}],"pos":[17818,17993],"yaml":true},{"content":"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.  \n  \n> [!NOTE]\n>  Path names are limited to 248 characters.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,223],"content":"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.","nodes":[{"content":"Any and all directories specified in <ph id=\"ph1\">`path`</ph> are created, unless some part of <ph id=\"ph2\">`path`</ph> is invalid.","pos":[0,95],"source":"Any and all directories specified in `path` are created, unless some part of `path` is invalid."},{"content":"The <ph id=\"ph1\">`path`</ph> parameter specifies a directory path, not a file path.","pos":[96,161],"source":" The `path` parameter specifies a directory path, not a file path."},{"content":"If the subdirectory already exists, this method does nothing.","pos":[162,223]}]},{"pos":[231,283],"content":"[!NOTE]\n Path names are limited to 248 characters.","leadings":["","> "],"nodes":[{"content":"Path names are limited to 248 characters.","pos":[9,50]}]},{"pos":[290,385],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[18004,18397],"yaml":true,"extradata":"MT"},{"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","nodes":[{"pos":[0,101],"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","nodes":[{"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","pos":[0,101],"nodes":[{"content":"The specified path.","pos":[0,19]},{"content":"This cannot be a different disk volume or Universal Naming Convention (UNC) name.","pos":[20,101]}]}]}],"pos":[19202,19304],"yaml":true},{"content":"The last directory specified in <code>path</code>.","nodes":[{"pos":[0,50],"content":"The last directory specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The last directory specified in <code>path</code>."}],"pos":[19371,19422],"yaml":true},{"content":"<code>path</code> does not specify a valid file path or contains invalid `DirectoryInfo` characters.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> does not specify a valid file path or contains invalid <ph id=\"ph2\">`DirectoryInfo`</ph> characters.","source":"<code>path</code> does not specify a valid file path or contains invalid `DirectoryInfo` characters."}],"pos":[19586,19687],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[19789,19818],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[19936,20003],"yaml":true},{"content":"The subdirectory cannot be created.  \n  \n -or-  \n  \n A file or directory already has the name specified by <code>path</code>.","nodes":[{"pos":[0,35],"content":"The subdirectory cannot be created.","nodes":[{"content":"The subdirectory cannot be created.","pos":[0,35]}]},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,125],"content":"A file or directory already has the name specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A file or directory already has the name specified by <code>path</code>."}],"pos":[20091,20223],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","nodes":[{"pos":[0,263],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","pos":[0,263],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]},{"content":"The specified path, file name, or both are too long.","pos":[211,263]}]}]}],"pos":[20329,20593],"yaml":true},{"content":"The caller does not have code access permission to create the directory.  \n  \n -or-  \n  \n The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.","nodes":[{"pos":[0,72],"content":"The caller does not have code access permission to create the directory.","nodes":[{"content":"The caller does not have code access permission to create the directory.","pos":[0,72]}]},{"pos":[79,83],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[90,324],"content":"The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.","nodes":[{"content":"The caller does not have code access permission to read the directory described by the returned <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,148],"source":"The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object."},{"content":"This can occur when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter describes an existing directory.","pos":[150,234],"source":"  This can occur when the <code>path</code> parameter describes an existing directory."}]}],"pos":[20705,21038],"yaml":true},{"content":"<code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\\\").","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains a colon character (:) that is not part of a drive label (\"C:<ph id=\"ph2\">\\\\</ph>\").","source":"<code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\\\")."}],"pos":[21140,21233],"yaml":true},{"content":"Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.","nodes":[{"pos":[0,202],"content":"Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.","nodes":[{"content":"Creates a subdirectory or subdirectories on the specified path with the specified security.","pos":[0,91]},{"content":"The specified path can be relative to this instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> class.","pos":[92,202],"source":" The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class."}]}],"pos":[22788,22991],"yaml":true},{"content":"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.  \n  \n> [!NOTE]\n>  Path names are limited to 248 characters.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,223],"content":"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.","nodes":[{"content":"Any and all directories specified in <ph id=\"ph1\">`path`</ph> are created, unless some part of <ph id=\"ph2\">`path`</ph> is invalid.","pos":[0,95],"source":"Any and all directories specified in `path` are created, unless some part of `path` is invalid."},{"content":"The <ph id=\"ph1\">`path`</ph> parameter specifies a directory path, not a file path.","pos":[96,161],"source":" The `path` parameter specifies a directory path, not a file path."},{"content":"If the subdirectory already exists, this method does nothing.","pos":[162,223]}]},{"pos":[231,283],"content":"[!NOTE]\n Path names are limited to 248 characters.","leadings":["","> "],"nodes":[{"content":"Path names are limited to 248 characters.","pos":[9,50]}]},{"pos":[290,385],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[23002,23395],"yaml":true,"extradata":"MT"},{"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","nodes":[{"pos":[0,101],"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","nodes":[{"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","pos":[0,101],"nodes":[{"content":"The specified path.","pos":[0,19]},{"content":"This cannot be a different disk volume or Universal Naming Convention (UNC) name.","pos":[20,101]}]}]}],"pos":[23626,23728],"yaml":true},{"content":"The security to apply.","nodes":[{"pos":[0,22],"content":"The security to apply.","nodes":[{"content":"The security to apply.","pos":[0,22]}]}],"pos":[23835,23858],"yaml":true},{"content":"The last directory specified in <code>path</code>.","nodes":[{"pos":[0,50],"content":"The last directory specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The last directory specified in <code>path</code>."}],"pos":[23925,23976],"yaml":true},{"content":"<code>path</code> does not specify a valid file path or contains invalid `DirectoryInfo` characters.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> does not specify a valid file path or contains invalid <ph id=\"ph2\">`DirectoryInfo`</ph> characters.","source":"<code>path</code> does not specify a valid file path or contains invalid `DirectoryInfo` characters."}],"pos":[24140,24241],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[24343,24372],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[24490,24557],"yaml":true},{"content":"The subdirectory cannot be created.  \n  \n -or-  \n  \n A file or directory already has the name specified by <code>path</code>.","nodes":[{"pos":[0,35],"content":"The subdirectory cannot be created.","nodes":[{"content":"The subdirectory cannot be created.","pos":[0,35]}]},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,125],"content":"A file or directory already has the name specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A file or directory already has the name specified by <code>path</code>."}],"pos":[24645,24777],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","nodes":[{"pos":[0,263],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","pos":[0,263],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]},{"content":"The specified path, file name, or both are too long.","pos":[211,263]}]}]}],"pos":[24883,25147],"yaml":true},{"content":"The caller does not have code access permission to create the directory.  \n  \n -or-  \n  \n The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.","nodes":[{"pos":[0,72],"content":"The caller does not have code access permission to create the directory.","nodes":[{"content":"The caller does not have code access permission to create the directory.","pos":[0,72]}]},{"pos":[79,83],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[90,324],"content":"The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.","nodes":[{"content":"The caller does not have code access permission to read the directory described by the returned <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,148],"source":"The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object."},{"content":"This can occur when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter describes an existing directory.","pos":[150,234],"source":"  This can occur when the <code>path</code> parameter describes an existing directory."}]}],"pos":[25259,25592],"yaml":true},{"content":"<code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\\\").","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains a colon character (:) that is not part of a drive label (\"C:<ph id=\"ph2\">\\\\</ph>\").","source":"<code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\\\")."}],"pos":[25694,25787],"yaml":true},{"content":"Deletes this <xref href=\"System.IO.DirectoryInfo\"></xref> if it is empty.","nodes":[{"pos":[0,73],"content":"Deletes this <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> if it is empty.","source":"Deletes this <xref href=\"System.IO.DirectoryInfo\"></xref> if it is empty."}],"pos":[26791,26865],"yaml":true},{"content":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,95],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[26876,26972],"yaml":true,"extradata":"MT"},{"content":"The directory contains a read-only file.","nodes":[{"pos":[0,40],"content":"The directory contains a read-only file.","nodes":[{"content":"The directory contains a read-only file.","pos":[0,40]}]}],"pos":[27693,27734],"yaml":true},{"content":"The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found.","nodes":[{"pos":[0,121],"content":"The directory described by this <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object does not exist or could not be found.","source":"The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found."}],"pos":[27852,27974],"yaml":true},{"content":"The directory is not empty.  \n  \n -or-  \n  \n The directory is the application's current working directory.  \n  \n -or-  \n  \n There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories. For more information, see [How to: Enumerate Directories and Files](~/docs/standard/io/how-to-enumerate-directories-and-files.md).","nodes":[{"pos":[0,27],"content":"The directory is not empty.","nodes":[{"content":"The directory is not empty.","pos":[0,27]}]},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,106],"content":"The directory is the application's current working directory.","nodes":[{"content":"The directory is the application's current working directory.","pos":[0,61]}]},{"pos":[113,117],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[124,405],"content":"There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories. For more information, see [How to: Enumerate Directories and Files](~/docs/standard/io/how-to-enumerate-directories-and-files.md).","nodes":[{"content":"There is an open handle on the directory, and the operating system is Windows XP or earlier.","pos":[0,92]},{"content":"This open handle can result from enumerating directories.","pos":[93,150]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Enumerate Directories and Files<ept id=\"p1\">](~/docs/standard/io/how-to-enumerate-directories-and-files.md)</ept>.","pos":[151,281],"source":" For more information, see [How to: Enumerate Directories and Files](~/docs/standard/io/how-to-enumerate-directories-and-files.md)."}]}],"pos":[28062,28478],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[28590,28640],"yaml":true},{"content":"Deletes this instance of a <xref href=\"System.IO.DirectoryInfo\"></xref>, specifying whether to delete subdirectories and files.","nodes":[{"pos":[0,127],"content":"Deletes this instance of a <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph>, specifying whether to delete subdirectories and files.","source":"Deletes this instance of a <xref href=\"System.IO.DirectoryInfo\"></xref>, specifying whether to delete subdirectories and files."}],"pos":[29969,30097],"yaml":true},{"content":"If the `DirectoryInfo` has no files or subdirectories, this method deletes the `DirectoryInfo` even if `recursive` is `false`. Attempting to delete a `DirectoryInfo` that is not empty when `recursive` is `false` throws an <xref:System.IO.IOException>.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,251],"content":"If the `DirectoryInfo` has no files or subdirectories, this method deletes the `DirectoryInfo` even if `recursive` is `false`. Attempting to delete a `DirectoryInfo` that is not empty when `recursive` is `false` throws an <xref:System.IO.IOException>.","nodes":[{"content":"If the <ph id=\"ph1\">`DirectoryInfo`</ph> has no files or subdirectories, this method deletes the <ph id=\"ph2\">`DirectoryInfo`</ph> even if <ph id=\"ph3\">`recursive`</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[0,126],"source":"If the `DirectoryInfo` has no files or subdirectories, this method deletes the `DirectoryInfo` even if `recursive` is `false`."},{"content":"Attempting to delete a <ph id=\"ph1\">`DirectoryInfo`</ph> that is not empty when <ph id=\"ph2\">`recursive`</ph> is <ph id=\"ph3\">`false`</ph> throws an <ph id=\"ph4\">&lt;xref:System.IO.IOException&gt;</ph>.","pos":[127,251],"source":" Attempting to delete a `DirectoryInfo` that is not empty when `recursive` is `false` throws an <xref:System.IO.IOException>."}]},{"pos":[258,353],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[30108,30466],"yaml":true,"extradata":"MT"},{"content":"`true` to delete this directory, its subdirectories, and all files; otherwise, `false`.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">`true`</ph> to delete this directory, its subdirectories, and all files; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to delete this directory, its subdirectories, and all files; otherwise, `false`."}],"pos":[31273,31363],"yaml":true},{"content":"The directory contains a read-only file.","nodes":[{"pos":[0,40],"content":"The directory contains a read-only file.","nodes":[{"content":"The directory contains a read-only file.","pos":[0,40]}]}],"pos":[31535,31576],"yaml":true},{"content":"The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found.","nodes":[{"pos":[0,121],"content":"The directory described by this <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object does not exist or could not be found.","source":"The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found."}],"pos":[31694,31816],"yaml":true},{"content":"The directory is read-only.  \n  \n -or-  \n  \n The directory contains one or more files or subdirectories and <code>recursive</code> is `false`.  \n  \n -or-  \n  \n The directory is the application's current working directory.  \n  \n -or-  \n  \n There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see [How to: Enumerate Directories and Files](~/docs/standard/io/how-to-enumerate-directories-and-files.md).","nodes":[{"pos":[0,27],"content":"The directory is read-only.","nodes":[{"content":"The directory is read-only.","pos":[0,27]}]},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,142],"content":"The directory contains one or more files or subdirectories and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">recursive</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`false`</ph>.","source":"The directory contains one or more files or subdirectories and <code>recursive</code> is `false`."},{"pos":[149,153],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[160,221],"content":"The directory is the application's current working directory.","nodes":[{"content":"The directory is the application's current working directory.","pos":[0,61]}]},{"pos":[228,232],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[239,553],"content":"There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see [How to: Enumerate Directories and Files](~/docs/standard/io/how-to-enumerate-directories-and-files.md).","nodes":[{"content":"There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier.","pos":[0,115]},{"content":"This open handle can result from enumerating directories and files.","pos":[116,183]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Enumerate Directories and Files<ept id=\"p1\">](~/docs/standard/io/how-to-enumerate-directories-and-files.md)</ept>.","pos":[184,314],"source":" For more information, see [How to: Enumerate Directories and Files](~/docs/standard/io/how-to-enumerate-directories-and-files.md)."}]}],"pos":[31904,32472],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[32584,32634],"yaml":true},{"content":"Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.","nodes":[{"pos":[0,129],"content":"Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.","nodes":[{"content":"Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.","pos":[0,129]}]}],"pos":[34152,34282],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,777],"content":"The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph> methods differ as follows:","pos":[0,138],"source":"The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:"}]},{"pos":[787,979],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,192],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned."}]},{"pos":[989,1175],"content":"When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,186],"source":"When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array."}]},{"pos":[1182,1324],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> can be more efficient.","pos":[0,142],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient."}]},{"pos":[1331,1427],"content":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:","pos":[0,96],"source":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:"}]},{"pos":[1437,1482],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[1492,1539],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[1549,1599],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1609,1658],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1668,1720],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1730,1778],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1788,1839],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1846,2024],"content":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.","nodes":[{"content":"The returned collection is not cached; each call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on  the collection will start a new enumeration.","pos":[0,178],"source":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."}]}],"pos":[34293,36363],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,256],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,256],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[62,203]},{"content":"The default pattern is \"*\", which returns all files.","pos":[204,256]}]}]}],"pos":[37260,37517],"yaml":true},{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.","nodes":[{"pos":[0,221],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.","nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.IO.SearchOption.TopDirectoryOnly\"&gt;&lt;/xref&gt;</ph>.","pos":[139,221],"source":" The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>."}]}],"pos":[37594,37816],"yaml":true},{"content":"An enumerable collection of directories that matches <code>searchPattern</code> and <code>searchOption</code>.","nodes":[{"pos":[0,110],"content":"An enumerable collection of directories that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">searchOption</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An enumerable collection of directories that matches <code>searchPattern</code> and <code>searchOption</code>."}],"pos":[37923,38034],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[38208,38246],"yaml":true},{"content":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.IO.SearchOption\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."}],"pos":[38360,38452],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,134],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."}],"pos":[38570,38705],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[38817,38867],"yaml":true},{"content":"Returns an enumerable collection of directory information that matches a specified search pattern.","nodes":[{"pos":[0,98],"content":"Returns an enumerable collection of directory information that matches a specified search pattern.","nodes":[{"content":"Returns an enumerable collection of directory information that matches a specified search pattern.","pos":[0,98]}]}],"pos":[40274,40373],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,777],"content":"The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph> methods differ as follows:","pos":[0,138],"source":"The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:"}]},{"pos":[787,979],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,192],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned."}]},{"pos":[989,1175],"content":"When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,186],"source":"When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array."}]},{"pos":[1182,1324],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> can be more efficient.","pos":[0,142],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient."}]},{"pos":[1331,1427],"content":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:","pos":[0,96],"source":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:"}]},{"pos":[1437,1482],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[1492,1539],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[1549,1599],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1609,1658],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1668,1720],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1730,1778],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1788,1839],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1846,2024],"content":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.","nodes":[{"content":"The returned collection is not cached; each call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on  the collection will start a new enumeration.","pos":[0,178],"source":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."}]}],"pos":[40384,42454],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,256],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,256],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[62,203]},{"content":"The default pattern is \"*\", which returns all files.","pos":[204,256]}]}]}],"pos":[42678,42935],"yaml":true},{"content":"An enumerable collection of directories that matches <code>searchPattern</code>.","nodes":[{"pos":[0,80],"content":"An enumerable collection of directories that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An enumerable collection of directories that matches <code>searchPattern</code>."}],"pos":[43042,43123],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[43297,43335],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,134],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."}],"pos":[43453,43588],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[43700,43750],"yaml":true},{"content":"Returns an enumerable collection of directory information in the current directory.","nodes":[{"pos":[0,83],"content":"Returns an enumerable collection of directory information in the current directory.","nodes":[{"content":"Returns an enumerable collection of directory information in the current directory.","pos":[0,83]}]}],"pos":[45094,45178],"yaml":true},{"content":"The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.","nodes":[{"pos":[0,138],"content":"The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph> methods differ as follows:","pos":[0,138],"source":"The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:"}]},{"pos":[148,340],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,192],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned."}]},{"pos":[350,536],"content":"When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,186],"source":"When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array."}]},{"pos":[543,685],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> can be more efficient.","pos":[0,142],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient."}]},{"pos":[692,788],"content":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:","pos":[0,96],"source":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:"}]},{"pos":[798,843],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[853,900],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[910,960],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[970,1019],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1029,1081],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1091,1139],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1149,1200],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1207,1385],"content":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.","nodes":[{"content":"The returned collection is not cached; each call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on  the collection will start a new enumeration.","pos":[0,178],"source":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."}]}],"pos":[45189,46601],"yaml":true,"extradata":"MT"},{"content":"An enumerable collection of directories in the current directory.","nodes":[{"pos":[0,65],"content":"An enumerable collection of directories in the current directory.","nodes":[{"content":"An enumerable collection of directories in the current directory.","pos":[0,65]}]}],"pos":[47674,47740],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,134],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."}],"pos":[47930,48065],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[48177,48227],"yaml":true},{"content":"Returns an enumerable collection of file information in the current directory.","nodes":[{"pos":[0,78],"content":"Returns an enumerable collection of file information in the current directory.","nodes":[{"content":"Returns an enumerable collection of file information in the current directory.","pos":[0,78]}]}],"pos":[49535,49614],"yaml":true},{"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"pos":[0,126],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:","pos":[0,126],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:"}]},{"pos":[136,317],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,181],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."}]},{"pos":[327,502],"content":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,175],"source":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array."}]},{"pos":[509,645],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.","pos":[0,136],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient."}]},{"pos":[652,743],"content":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> properties:","pos":[0,91],"source":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:"}]},{"pos":[753,798],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[808,855],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[865,915],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[925,974],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[984,1036],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1046,1094],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1104,1155],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1165,1200],"content":"<xref:System.IO.FileInfo.Length%2A>","nodes":[]},{"pos":[1207,1384],"content":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"content":"The returned collection is not cached; each call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.","pos":[0,177],"source":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."}]}],"pos":[49625,51038],"yaml":true,"extradata":"MT"},{"content":"An enumerable collection of the files in the current directory.","nodes":[{"pos":[0,63],"content":"An enumerable collection of the files in the current directory.","nodes":[{"content":"An enumerable collection of the files in the current directory.","pos":[0,63]}]}],"pos":[52669,52733],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,134],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."}],"pos":[52917,53052],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[53164,53214],"yaml":true},{"content":"Returns an enumerable collection of file information that matches a search pattern.","nodes":[{"pos":[0,83],"content":"Returns an enumerable collection of file information that matches a search pattern.","nodes":[{"content":"Returns an enumerable collection of file information that matches a search pattern.","pos":[0,83]}]}],"pos":[54585,54669],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,765],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:","pos":[0,126],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:"}]},{"pos":[775,956],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,181],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."}]},{"pos":[966,1141],"content":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,175],"source":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array."}]},{"pos":[1148,1284],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.","pos":[0,136],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient."}]},{"pos":[1291,1382],"content":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> properties:","pos":[0,91],"source":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:"}]},{"pos":[1392,1437],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[1447,1494],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[1504,1554],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1564,1613],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1623,1675],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1685,1733],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1743,1794],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1804,1839],"content":"<xref:System.IO.FileInfo.Length%2A>","nodes":[]},{"pos":[1846,2023],"content":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"content":"The returned collection is not cached; each call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.","pos":[0,177],"source":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."}]}],"pos":[54680,56751],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,250],"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,250],"nodes":[{"content":"The search string to match against the names of files.","pos":[0,54]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[56,197]},{"content":"The default pattern is \"*\", which returns all files.","pos":[198,250]}]}]}],"pos":[57558,57809],"yaml":true},{"content":"An enumerable collection of files that matches <code>searchPattern</code>.","nodes":[{"pos":[0,74],"content":"An enumerable collection of files that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An enumerable collection of files that matches <code>searchPattern</code>."}],"pos":[57911,57986],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[58154,58192],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, (for example, it is on an unmapped drive).","nodes":[{"pos":[0,135],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid, (for example, it is on an unmapped drive).","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, (for example, it is on an unmapped drive)."}],"pos":[58310,58446],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[58558,58608],"yaml":true},{"content":"Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.","nodes":[{"pos":[0,124],"content":"Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.","nodes":[{"content":"Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.","pos":[0,124]}]}],"pos":[60090,60215],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,765],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:","pos":[0,126],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:"}]},{"pos":[775,956],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,181],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."}]},{"pos":[966,1141],"content":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,175],"source":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array."}]},{"pos":[1148,1284],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.","pos":[0,136],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient."}]},{"pos":[1291,1382],"content":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> properties:","pos":[0,91],"source":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:"}]},{"pos":[1392,1437],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[1447,1494],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[1504,1554],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1564,1613],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1623,1675],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1685,1733],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1743,1794],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1804,1839],"content":"<xref:System.IO.FileInfo.Length%2A>","nodes":[]},{"pos":[1846,2023],"content":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"content":"The returned collection is not cached; each call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.","pos":[0,177],"source":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."}]}],"pos":[60226,62297],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,250],"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,250],"nodes":[{"content":"The search string to match against the names of files.","pos":[0,54]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[56,197]},{"content":"The default pattern is \"*\", which returns all files.","pos":[198,250]}]}]}],"pos":[63141,63392],"yaml":true},{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.","nodes":[{"pos":[0,221],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.","nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.IO.SearchOption.TopDirectoryOnly\"&gt;&lt;/xref&gt;</ph>.","pos":[139,221],"source":" The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>."}]}],"pos":[63469,63691],"yaml":true},{"content":"An enumerable collection of files that matches <code>searchPattern</code> and <code>searchOption</code>.","nodes":[{"pos":[0,104],"content":"An enumerable collection of files that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">searchOption</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An enumerable collection of files that matches <code>searchPattern</code> and <code>searchOption</code>."}],"pos":[63793,63898],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[64066,64104],"yaml":true},{"content":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.IO.SearchOption\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."}],"pos":[64218,64310],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,134],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."}],"pos":[64428,64563],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[64675,64725],"yaml":true},{"content":"Returns an enumerable collection of file system information in the current directory.","nodes":[{"pos":[0,85],"content":"Returns an enumerable collection of file system information in the current directory.","nodes":[{"content":"Returns an enumerable collection of file system information in the current directory.","pos":[0,85]}]}],"pos":[66093,66179],"yaml":true},{"content":"The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"pos":[0,146],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph> methods differ as follows:","pos":[0,146],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:"}]},{"pos":[156,347],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,191],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."}]},{"pos":[357,548],"content":"When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,191],"source":"When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array."}]},{"pos":[555,701],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> can be more efficient.","pos":[0,146],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient."}]},{"pos":[708,805],"content":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:","pos":[0,97],"source":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:"}]},{"pos":[815,860],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[870,917],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[927,977],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[987,1036],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1046,1098],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1108,1156],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1166,1217],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1224,1401],"content":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"content":"The returned collection is not cached; each call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.","pos":[0,177],"source":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."}]}],"pos":[66190,67618],"yaml":true,"extradata":"MT"},{"content":"An enumerable collection of file system information in the current directory.","nodes":[{"pos":[0,77],"content":"An enumerable collection of file system information in the current directory.","nodes":[{"content":"An enumerable collection of file system information in the current directory.","pos":[0,77]}]}],"pos":[67869,67947],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,134],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."}],"pos":[68141,68276],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[68388,68438],"yaml":true},{"content":"Returns an enumerable collection of file system information that matches a specified search pattern.","nodes":[{"pos":[0,100],"content":"Returns an enumerable collection of file system information that matches a specified search pattern.","nodes":[{"content":"Returns an enumerable collection of file system information that matches a specified search pattern.","pos":[0,100]}]}],"pos":[69869,69970],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,785],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph> methods differ as follows:","pos":[0,146],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:"}]},{"pos":[795,986],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,191],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."}]},{"pos":[996,1187],"content":"When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,191],"source":"When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array."}]},{"pos":[1194,1340],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> can be more efficient.","pos":[0,146],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient."}]},{"pos":[1347,1444],"content":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:","pos":[0,97],"source":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:"}]},{"pos":[1454,1499],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[1509,1556],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[1566,1616],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1626,1675],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1685,1737],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1747,1795],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1805,1856],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1863,2040],"content":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"content":"The returned collection is not cached; each call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.","pos":[0,177],"source":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."}]}],"pos":[69981,72067],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,256],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,256],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[62,203]},{"content":"The default pattern is \"*\", which returns all files.","pos":[204,256]}]}]}],"pos":[72296,72553],"yaml":true},{"content":"An enumerable collection of file system information objects that matches <code>searchPattern</code>.","nodes":[{"pos":[0,100],"content":"An enumerable collection of file system information objects that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An enumerable collection of file system information objects that matches <code>searchPattern</code>."}],"pos":[72661,72762],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[72940,72978],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,134],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."}],"pos":[73096,73231],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[73343,73393],"yaml":true},{"content":"Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.","nodes":[{"pos":[0,131],"content":"Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.","nodes":[{"content":"Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.","pos":[0,131]}]}],"pos":[74935,75067],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,785],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph> methods differ as follows:","pos":[0,146],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:"}]},{"pos":[795,986],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,191],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."}]},{"pos":[996,1187],"content":"When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,191],"source":"When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array."}]},{"pos":[1194,1340],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> can be more efficient.","pos":[0,146],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient."}]},{"pos":[1347,1444],"content":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:","pos":[0,97],"source":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:"}]},{"pos":[1454,1499],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[1509,1556],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[1566,1616],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1626,1675],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1685,1737],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1747,1795],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1805,1856],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1863,2040],"content":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","nodes":[{"content":"The returned collection is not cached; each call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.","pos":[0,177],"source":"The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."}]}],"pos":[75078,77164],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,256],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,256],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[62,203]},{"content":"The default pattern is \"*\", which returns all files.","pos":[204,256]}]}]}],"pos":[77430,77687],"yaml":true},{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.","nodes":[{"pos":[0,221],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.","nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.IO.SearchOption.TopDirectoryOnly\"&gt;&lt;/xref&gt;</ph>.","pos":[139,221],"source":" The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>."}]}],"pos":[77764,77986],"yaml":true},{"content":"An enumerable collection of file system information objects that matches <code>searchPattern</code> and <code>searchOption</code>.","nodes":[{"pos":[0,130],"content":"An enumerable collection of file system information objects that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">searchOption</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An enumerable collection of file system information objects that matches <code>searchPattern</code> and <code>searchOption</code>."}],"pos":[78094,78225],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[78403,78441],"yaml":true},{"content":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.IO.SearchOption\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."}],"pos":[78555,78647],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,134],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."}],"pos":[78765,78900],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[79012,79062],"yaml":true},{"content":"Gets a value indicating whether the directory exists.","nodes":[{"pos":[0,53],"content":"Gets a value indicating whether the directory exists.","nodes":[{"content":"Gets a value indicating whether the directory exists.","pos":[0,53]}]}],"pos":[80318,80372],"yaml":true},{"content":"The <xref:System.IO.DirectoryInfo.Exists%2A> property returns `false` if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.","nodes":[{"pos":[0,359],"content":"The <xref:System.IO.DirectoryInfo.Exists%2A> property returns `false` if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.Exists%2A&gt;</ph> property returns <ph id=\"ph2\">`false`</ph> if any error occurs while trying to determine if the specified file exists.","pos":[0,145],"source":"The <xref:System.IO.DirectoryInfo.Exists%2A> property returns `false` if any error occurs while trying to determine if the specified file exists."},{"content":"This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.","pos":[146,359]}]}],"pos":[80383,80743],"yaml":true,"extradata":"MT"},{"content":"`true` if the directory exists; otherwise, `false`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">`true`</ph> if the directory exists; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the directory exists; otherwise, `false`."}],"pos":[81438,81492],"yaml":true},{"content":"Gets the full path of the directory.","nodes":[{"pos":[0,36],"content":"Gets the full path of the directory.","nodes":[{"content":"Gets the full path of the directory.","pos":[0,36]}]}],"pos":[82780,82817],"yaml":true},{"content":"A string containing the full path.","nodes":[{"pos":[0,34],"content":"A string containing the full path.","nodes":[{"content":"A string containing the full path.","pos":[0,34]}]}],"pos":[82998,83033],"yaml":true},{"content":"Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object.","nodes":[{"pos":[0,234],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;&lt;/xref&gt;</ph> object that encapsulates the access control list (ACL) entries for the directory described by the current <ph id=\"ph2\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object."}],"pos":[83795,84030],"yaml":true},{"content":"Calling this method overload is equivalent to calling the <xref:System.IO.Directory.GetAccessControl%2A> method overload and specifying the access control sections <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic).  \n  \n Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the access control list (ACL) entries for the current file.  \n  \n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).","nodes":[{"pos":[0,706],"content":"Calling this method overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.IO.Directory.GetAccessControl%2A&gt;</ph> method overload and specifying the access control sections <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph> &amp;#124; <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph> &amp;#124; <ph id=\"ph4\">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph> (<ph id=\"ph5\">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph><ph id=\"ph6\">`Or`</ph><ph id=\"ph7\">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph><ph id=\"ph8\">`Or`</ph><ph id=\"ph9\">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph> in Visual Basic).","source":"Calling this method overload is equivalent to calling the <xref:System.IO.Directory.GetAccessControl%2A> method overload and specifying the access control sections <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic)."},{"pos":[713,850],"content":"Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the access control list (ACL) entries for the current file.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt;</ph> method to retrieve the access control list (ACL) entries for the current file.","pos":[0,137],"source":"Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the access control list (ACL) entries for the current file."}]},{"pos":[857,1135],"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).","nodes":[{"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory.","pos":[0,127]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Add or Remove Access Control List Entries<ept id=\"p1\">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.","pos":[128,278],"source":" For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)."}]}],"pos":[84041,85183],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the directory.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;&lt;/xref&gt;</ph> object that encapsulates the access control rules for the directory.","source":"A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the directory."}],"pos":[86167,86307],"yaml":true},{"content":"The directory could not be found or modified.","nodes":[{"pos":[0,45],"content":"The directory could not be found or modified.","nodes":[{"content":"The directory could not be found or modified.","pos":[0,45]}]}],"pos":[86465,86511],"yaml":true},{"content":"The directory is read-only.  \n  \n -or-  \n  \n This operation is not supported on the current platform.  \n  \n -or-  \n  \n The caller does not have the required permission.","nodes":[{"pos":[0,27],"content":"The directory is read-only.","nodes":[{"content":"The directory is read-only.","pos":[0,27]}]},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,101],"content":"This operation is not supported on the current platform.","nodes":[{"content":"This operation is not supported on the current platform.","pos":[0,56]}]},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,168],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[86625,86804],"yaml":true},{"content":"An I/O error occurred while opening the directory.","nodes":[{"pos":[0,50],"content":"An I/O error occurred while opening the directory.","nodes":[{"content":"An I/O error occurred while opening the directory.","pos":[0,50]}]}],"pos":[86892,86943],"yaml":true},{"content":"The current operating system is not Microsoft Windows 2000 or later.","nodes":[{"pos":[0,68],"content":"The current operating system is not Microsoft Windows 2000 or later.","nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]}],"pos":[87061,87130],"yaml":true},{"content":"Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object.","nodes":[{"pos":[0,252],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;&lt;/xref&gt;</ph> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <ph id=\"ph2\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object."}],"pos":[88375,88628],"yaml":true},{"content":"Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the access control list (ACL) entries for the current file.  \n  \n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).","nodes":[{"pos":[0,137],"content":"Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the access control list (ACL) entries for the current file.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt;</ph> method to retrieve the access control list (ACL) entries for the current file.","pos":[0,137],"source":"Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the access control list (ACL) entries for the current file."}]},{"pos":[144,422],"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).","nodes":[{"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory.","pos":[0,127]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Add or Remove Access Control List Entries<ept id=\"p1\">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.","pos":[128,278],"source":" For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)."}]}],"pos":[88639,89066],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to receive.","nodes":[{"pos":[0,167],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlSections\"&gt;&lt;/xref&gt;</ph> values that specifies the type of access control list (ACL) information to receive.","source":"One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to receive."}],"pos":[89357,89525],"yaml":true},{"content":"A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the file described by the <code>path</code> parameter.  \n  \n Exceptions  \n  \n <table><thead><tr><th> Exception type  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td><xref href=\"System.SystemException\"></xref></td><td> The directory could not be found or modified.  \n  \n </td></tr><tr><td><xref href=\"System.UnauthorizedAccessException\"></xref></td><td> The current process does not have access to open the directory.  \n  \n </td></tr><tr><td><xref href=\"System.IO.IOException\"></xref></td><td> An I/O error occurred while opening the directory.  \n  \n </td></tr><tr><td><xref href=\"System.PlatformNotSupportedException\"></xref></td><td> The current operating system is not Microsoft Windows 2000 or later.  \n  \n </td></tr><tr><td><xref href=\"System.UnauthorizedAccessException\"></xref></td><td> The directory is read-only.  \n  \n -or-  \n  \n This operation is not supported on the current platform.  \n  \n -or-  \n  \n The caller does not have the required permission.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,179],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;&lt;/xref&gt;</ph> object that encapsulates the access control rules for the file described by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the file described by the <code>path</code> parameter."},{"pos":[186,196],"content":"Exceptions","nodes":[{"content":"Exceptions","pos":[0,10]}]},{"pos":[203,961],"content":"<table><thead><tr><th> Exception type  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td><xref href=\"System.SystemException\"></xref></td><td> The directory could not be found or modified.  \n  \n </td></tr><tr><td><xref href=\"System.UnauthorizedAccessException\"></xref></td><td> The current process does not have access to open the directory.  \n  \n </td></tr><tr><td><xref href=\"System.IO.IOException\"></xref></td><td> An I/O error occurred while opening the directory.  \n  \n </td></tr><tr><td><xref href=\"System.PlatformNotSupportedException\"></xref></td><td> The current operating system is not Microsoft Windows 2000 or later.  \n  \n </td></tr><tr><td><xref href=\"System.UnauthorizedAccessException\"></xref></td><td> The directory is read-only.","nodes":[{"content":"Exception type","pos":[23,42],"source":" Exception type  \n  \n "},{"content":"Condition","pos":[54,68],"source":" Condition  \n  \n "},{"content":" The directory could not be found or modified.  \n  \n ","pos":[155,208],"nodes":[{"content":"The directory could not be found or modified.","pos":[1,46]}]},{"content":" The current process does not have access to open the directory.  \n  \n ","pos":[290,361],"nodes":[{"content":"The current process does not have access to open the directory.","pos":[1,64]}]},{"content":" An I/O error occurred while opening the directory.  \n  \n ","pos":[430,488],"nodes":[{"content":"An I/O error occurred while opening the directory.","pos":[1,51]}]},{"content":" The current operating system is not Microsoft Windows 2000 or later.  \n  \n ","pos":[572,648],"nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[1,69]}]},{"content":"The directory is read-only.","pos":[731,758]}]},{"pos":[968,972],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[979,1035],"content":"This operation is not supported on the current platform.","nodes":[{"content":"This operation is not supported on the current platform.","pos":[0,56]}]},{"pos":[1042,1046],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[1053,1102],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[89616,90792],"yaml":true},{"content":"Returns the subdirectories of the current directory.","nodes":[{"pos":[0,52],"content":"Returns the subdirectories of the current directory.","nodes":[{"content":"Returns the subdirectories of the current directory.","pos":[0,52]}]}],"pos":[91915,91968],"yaml":true},{"content":"If there are no subdirectories, this method returns an empty array. This method is not recursive.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[{"pos":[0,97],"content":"If there are no subdirectories, this method returns an empty array. This method is not recursive.","nodes":[{"content":"If there are no subdirectories, this method returns an empty array. This method is not recursive.","pos":[0,97],"nodes":[{"content":"If there are no subdirectories, this method returns an empty array.","pos":[0,67]},{"content":"This method is not recursive.","pos":[68,97]}]}]},{"pos":[104,200],"content":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:","pos":[0,96],"source":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:"}]},{"pos":[210,255],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[265,312],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[322,372],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[382,431],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[441,493],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[503,551],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[561,612],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]}],"pos":[91979,92610],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.IO.DirectoryInfo\"></xref> objects.","nodes":[{"pos":[0,65],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> objects.","source":"An array of <xref href=\"System.IO.DirectoryInfo\"></xref> objects."}],"pos":[93366,93432],"yaml":true},{"content":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,128],"content":"The path encapsulated in the <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object is invalid, such as being on an unmapped drive.","source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, such as being on an unmapped drive."}],"pos":[93616,93745],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[93857,93907],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[94021,94071],"yaml":true},{"content":"Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria.","nodes":[{"pos":[0,127],"content":"Returns an array of directories in the current <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> matching the given search criteria.","source":"Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria."}],"pos":[95442,95570],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,735],"content":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:","pos":[0,96],"source":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:"}]},{"pos":[745,790],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[800,847],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[857,907],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[917,966],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[976,1028],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1038,1086],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1096,1147],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]}],"pos":[95581,96764],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,256],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,256],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[62,203]},{"content":"The default pattern is \"*\", which returns all files.","pos":[204,256]}]}]}],"pos":[97420,97677],"yaml":true},{"content":"An array of type `DirectoryInfo` matching <code>searchPattern</code>.","nodes":[{"pos":[0,69],"content":"An array of type <ph id=\"ph1\">`DirectoryInfo`</ph> matching <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An array of type `DirectoryInfo` matching <code>searchPattern</code>."}],"pos":[97746,97816],"yaml":true},{"content":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph> method.","source":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method."}],"pos":[97976,98122],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[98224,98262],"yaml":true},{"content":"The path encapsulated in the `DirectoryInfo` object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,105],"content":"The path encapsulated in the <ph id=\"ph1\">`DirectoryInfo`</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the `DirectoryInfo` object is invalid (for example, it is on an unmapped drive)."}],"pos":[98380,98486],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[98600,98650],"yaml":true},{"content":"Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria and using a value to determine whether to search subdirectories.","nodes":[{"pos":[0,191],"content":"Returns an array of directories in the current <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> matching the given search criteria and using a value to determine whether to search subdirectories.","source":"Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria and using a value to determine whether to search subdirectories."}],"pos":[100132,100324],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n If there are no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,764],"content":"If there are no subdirectories, or no subdirectories match the <ph id=\"ph1\">`searchPattern`</ph> parameter, this method returns an empty array.","source":"If there are no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array."},{"pos":[771,867],"content":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:","pos":[0,96],"source":"This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:"}]},{"pos":[877,922],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[932,979],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[989,1039],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1049,1098],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1108,1160],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1170,1218],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1228,1279],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]}],"pos":[100335,101652],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,256],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,256],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[62,203]},{"content":"The default pattern is \"*\", which returns all files.","pos":[204,256]}]}]}],"pos":[102505,102762],"yaml":true},{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","nodes":[{"pos":[0,138],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]}]}],"pos":[102839,102978],"yaml":true},{"content":"An array of type `DirectoryInfo` matching <code>searchPattern</code>.","nodes":[{"pos":[0,69],"content":"An array of type <ph id=\"ph1\">`DirectoryInfo`</ph> matching <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An array of type `DirectoryInfo` matching <code>searchPattern</code>."}],"pos":[103047,103117],"yaml":true},{"content":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph> method.","source":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method."}],"pos":[103277,103423],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[103525,103563],"yaml":true},{"content":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.IO.SearchOption\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."}],"pos":[103677,103769],"yaml":true},{"content":"The path encapsulated in the `DirectoryInfo` object is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,105],"content":"The path encapsulated in the <ph id=\"ph1\">`DirectoryInfo`</ph> object is invalid (for example, it is on an unmapped drive).","source":"The path encapsulated in the `DirectoryInfo` object is invalid (for example, it is on an unmapped drive)."}],"pos":[103887,103993],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[104107,104157],"yaml":true},{"content":"Returns a file list from the current directory.","nodes":[{"pos":[0,47],"content":"Returns a file list from the current directory.","nodes":[{"content":"Returns a file list from the current directory.","pos":[0,47]}]}],"pos":[105429,105477],"yaml":true},{"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>","nodes":[{"pos":[0,126],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:","pos":[0,126],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:"}]},{"pos":[136,317],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,181],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."}]},{"pos":[327,502],"content":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,175],"source":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array."}]},{"pos":[509,645],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.","pos":[0,136],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient."}]},{"pos":[652,748],"content":"If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.","nodes":[{"content":"If there are no files in the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.","pos":[0,96],"source":"If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array."}]},{"pos":[755,891],"content":"The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.","nodes":[{"content":"The order of the returned file names is not guaranteed; use the <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A&gt;</ph> method if a specific sort order is required.","pos":[0,136],"source":"The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required."}]},{"pos":[898,989],"content":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> properties:","pos":[0,91],"source":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:"}]},{"pos":[999,1044],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[1054,1101],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[1111,1161],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1171,1220],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1230,1282],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1292,1340],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1350,1401],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[1411,1446],"content":"<xref:System.IO.FileInfo.Length%2A>","nodes":[]}],"pos":[105488,106965],"yaml":true,"extradata":"MT"},{"content":"An array of type <xref href=\"System.IO.FileInfo\"></xref>.","nodes":[{"pos":[0,57],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.IO.FileInfo\"&gt;&lt;/xref&gt;</ph>.","source":"An array of type <xref href=\"System.IO.FileInfo\"></xref>."}],"pos":[107679,107737],"yaml":true},{"content":"The path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,56],"content":"The path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The path is invalid, such as being on an unmapped drive.","pos":[0,56]}]}],"pos":[107915,107972],"yaml":true},{"content":"Returns a file list from the current directory matching the given search pattern.","nodes":[{"pos":[0,81],"content":"Returns a file list from the current directory matching the given search pattern.","nodes":[{"content":"Returns a file list from the current directory matching the given search pattern.","pos":[0,81]}]}],"pos":[109307,109389],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in the `searchPattern` parameter.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|*|Zero or more characters.|  \n|?|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,629],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[144,240],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[636,762],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:","pos":[0,126],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:"}]},{"pos":[772,953],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,181],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."}]},{"pos":[963,1138],"content":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,175],"source":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array."}]},{"pos":[1145,1281],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.","pos":[0,136],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient."}]},{"pos":[1288,1384],"content":"If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.","nodes":[{"content":"If there are no files in the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.","pos":[0,96],"source":"If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array."}]},{"pos":[1391,1472],"content":"The following wildcard specifiers are permitted in the <ph id=\"ph1\">`searchPattern`</ph> parameter.","source":"The following wildcard specifiers are permitted in the `searchPattern` parameter."},{"pos":[1479,1497],"content":"Wildcard character","nodes":[{"content":"Wildcard character","pos":[0,18]}]},{"pos":[1498,1509],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[1561,1562],"content":"*","nodes":[]},{"pos":[1563,1587],"content":"Zero or more characters.","nodes":[{"content":"Zero or more characters.","pos":[0,24]}]},{"pos":[1592,1593],"content":"?","nodes":[{"content":"?","pos":[0,1]}]},{"pos":[1594,1624],"content":"Exactly zero or one character.","nodes":[{"content":"Exactly zero or one character.","pos":[0,30]}]},{"pos":[1632,1768],"content":"The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.","nodes":[{"content":"The order of the returned file names is not guaranteed; use the <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A&gt;</ph> method if a specific sort order is required.","pos":[0,136],"source":"The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required."}]},{"pos":[1775,2145],"content":"Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.","nodes":[{"content":"Wildcards are permitted.","pos":[0,24]},{"content":"For example, the <ph id=\"ph1\">`searchPattern`</ph> string \"*.txt\" searches for all file names having an extension of \"txt\".","pos":[25,130],"source":" For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\"."},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all file names beginning with the letter \"s\".","pos":[131,222],"source":" The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\"."},{"content":"If there are no files, or no files that match the <ph id=\"ph1\">`searchPattern`</ph> string in the <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.","pos":[223,370],"source":" If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array."}]},{"pos":[2153,3083],"content":"[!NOTE]\n When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.","leadings":["","> "],"nodes":[{"content":" When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.","pos":[8,928],"nodes":[{"content":"When using the asterisk wildcard character in a <ph id=\"ph1\">`searchPattern`</ph> (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension.","pos":[1,174],"source":" When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension."},{"content":"A <ph id=\"ph1\">`searchPattern`</ph> with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the <ph id=\"ph2\">`searchPattern`</ph>.","pos":[175,395],"source":" A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`."},{"content":"A <ph id=\"ph1\">`searchPattern`</ph> with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the <ph id=\"ph2\">`searchPattern`</ph>.","pos":[396,600],"source":" A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`."},{"content":"When using the question mark wildcard character, this method returns only files that match the specified file extension.","pos":[601,721]},{"content":"For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file<ph id=\"ph1\">\\*</ph>.txt\" returns both files.","pos":[722,920],"source":" For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files."}]}]},{"pos":[3091,3436],"content":"[!NOTE]\n Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".","leadings":["","> "],"nodes":[{"content":" Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".","pos":[8,343],"nodes":[{"content":"Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1<ph id=\"ph1\">\\*</ph>.txt\" may return unexpected file names.","pos":[1,185],"source":" Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names."},{"content":"For example, using a search pattern of \"<ph id=\"ph1\">\\*</ph>1<ph id=\"ph2\">\\*</ph>.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".","pos":[186,335],"source":" For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\"."}]}]},{"pos":[3443,3534],"content":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> properties:","pos":[0,91],"source":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:"}]},{"pos":[3544,3589],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[3599,3646],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[3656,3706],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[3716,3765],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[3775,3827],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[3837,3885],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[3895,3946],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[3956,3991],"content":"<xref:System.IO.FileInfo.Length%2A>","nodes":[]}],"pos":[109400,113486],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,250],"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,250],"nodes":[{"content":"The search string to match against the names of files.","pos":[0,54]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[56,197]},{"content":"The default pattern is \"*\", which returns all files.","pos":[198,250]}]}]}],"pos":[114222,114473],"yaml":true},{"content":"An array of type <xref href=\"System.IO.FileInfo\"></xref>.","nodes":[{"pos":[0,57],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.IO.FileInfo\"&gt;&lt;/xref&gt;</ph>.","source":"An array of type <xref href=\"System.IO.FileInfo\"></xref>."}],"pos":[114537,114595],"yaml":true},{"content":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph> method.","source":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method."}],"pos":[114749,114895],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[114997,115035],"yaml":true},{"content":"The path is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,62],"content":"The path is invalid (for example, it is on an unmapped drive).","nodes":[{"content":"The path is invalid (for example, it is on an unmapped drive).","pos":[0,62]}]}],"pos":[115153,115216],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[115328,115378],"yaml":true},{"content":"Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.","nodes":[{"pos":[0,145],"content":"Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.","nodes":[{"content":"Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.","pos":[0,145]}]}],"pos":[116824,116970],"yaml":true},{"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|* (asterisk)|Zero or more characters.|  \n|? (question mark)|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n The following list shows the behavior of different lengths for the `searchPattern` parameter:  \n  \n-   \"*.abc\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.  \n  \n-   \"*.abcd\" returns only files having an extension of.abcd.  \n  \n-   \"*.abcde\" returns only files having an extension of.abcde.  \n  \n-   \"*.abcdef\" returns only files having an extension of.abcdef.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n1.  <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n2.  <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n3.  <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n4.  <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n5.  <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n6.  <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n7.  <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n8.  <xref:System.IO.FileInfo.Length%2A>","nodes":[{"pos":[0,126],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:","pos":[0,126],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:"}]},{"pos":[136,317],"content":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.","pos":[0,181],"source":"When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."}]},{"pos":[327,502],"content":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.","nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id=\"ph2\">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.","pos":[0,175],"source":"When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array."}]},{"pos":[509,645],"content":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.","nodes":[{"content":"Therefore, when you are working with many files and directories, <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.","pos":[0,136],"source":"Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient."}]},{"pos":[652,748],"content":"If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.","nodes":[{"content":"If there are no files in the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.","pos":[0,96],"source":"If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array."}]},{"pos":[755,822],"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","source":"The following wildcard specifiers are permitted in `searchPattern`."},{"pos":[829,847],"content":"Wildcard character","nodes":[{"content":"Wildcard character","pos":[0,18]}]},{"pos":[848,859],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[911,923],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[924,948],"content":"Zero or more characters.","nodes":[{"content":"Zero or more characters.","pos":[0,24]}]},{"pos":[953,970],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[971,1001],"content":"Exactly zero or one character.","nodes":[{"content":"Exactly zero or one character.","pos":[0,30]}]},{"pos":[1009,1145],"content":"The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.","nodes":[{"content":"The order of the returned file names is not guaranteed; use the <ph id=\"ph1\">&lt;xref:System.Array.Sort%2A&gt;</ph> method if a specific sort order is required.","pos":[0,136],"source":"The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required."}]},{"pos":[1152,1522],"content":"Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.","nodes":[{"content":"Wildcards are permitted.","pos":[0,24]},{"content":"For example, the <ph id=\"ph1\">`searchPattern`</ph> string \"*.txt\" searches for all file names having an extension of \"txt\".","pos":[25,130],"source":" For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\"."},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all file names beginning with the letter \"s\".","pos":[131,222],"source":" The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\"."},{"content":"If there are no files, or no files that match the <ph id=\"ph1\">`searchPattern`</ph> string in the <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.","pos":[223,370],"source":" If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array."}]},{"pos":[1530,2460],"content":"[!NOTE]\n When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.","leadings":["","> "],"nodes":[{"content":" When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.","pos":[8,928],"nodes":[{"content":"When using the asterisk wildcard character in a <ph id=\"ph1\">`searchPattern`</ph> (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension.","pos":[1,174],"source":" When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension."},{"content":"A <ph id=\"ph1\">`searchPattern`</ph> with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the <ph id=\"ph2\">`searchPattern`</ph>.","pos":[175,395],"source":" A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`."},{"content":"A <ph id=\"ph1\">`searchPattern`</ph> with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the <ph id=\"ph2\">`searchPattern`</ph>.","pos":[396,600],"source":" A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`."},{"content":"When using the question mark wildcard character, this method returns only files that match the specified file extension.","pos":[601,721]},{"content":"For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file<ph id=\"ph1\">\\*</ph>.txt\" returns both files.","pos":[722,920],"source":" For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files."}]}]},{"pos":[2467,2560],"content":"The following list shows the behavior of different lengths for the <ph id=\"ph1\">`searchPattern`</ph> parameter:","source":"The following list shows the behavior of different lengths for the `searchPattern` parameter:"},{"pos":[2570,2651],"content":"\"*.abc\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.","nodes":[{"content":"\"*.abc\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.","pos":[0,81]}]},{"pos":[2661,2717],"content":"\"*.abcd\" returns only files having an extension of.abcd.","nodes":[{"content":"\"*.abcd\" returns only files having an extension of.abcd.","pos":[0,56]}]},{"pos":[2727,2785],"content":"\"*.abcde\" returns only files having an extension of.abcde.","nodes":[{"content":"\"*.abcde\" returns only files having an extension of.abcde.","pos":[0,58]}]},{"pos":[2795,2855],"content":"\"*.abcdef\" returns only files having an extension of.abcdef.","nodes":[{"content":"\"*.abcdef\" returns only files having an extension of.abcdef.","pos":[0,60]}]},{"pos":[2863,3208],"content":"[!NOTE]\n Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".","leadings":["","> "],"nodes":[{"content":" Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".","pos":[8,343],"nodes":[{"content":"Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1<ph id=\"ph1\">\\*</ph>.txt\" may return unexpected file names.","pos":[1,185],"source":" Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names."},{"content":"For example, using a search pattern of \"<ph id=\"ph1\">\\*</ph>1<ph id=\"ph2\">\\*</ph>.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".","pos":[186,335],"source":" For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\"."}]}]},{"pos":[3215,3306],"content":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> properties:","pos":[0,91],"source":"This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:"}]},{"pos":[3316,3361],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[3371,3418],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[3428,3478],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[3488,3537],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[3547,3599],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[3609,3657],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[3667,3718],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]},{"pos":[3728,3763],"content":"<xref:System.IO.FileInfo.Length%2A>","nodes":[]}],"pos":[116981,120839],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,250],"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,250],"nodes":[{"content":"The search string to match against the names of files.","pos":[0,54]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[56,197]},{"content":"The default pattern is \"*\", which returns all files.","pos":[198,250]}]}]}],"pos":[121612,121863],"yaml":true},{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","nodes":[{"pos":[0,138],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]}]}],"pos":[121940,122079],"yaml":true},{"content":"An array of type <xref href=\"System.IO.FileInfo\"></xref>.","nodes":[{"pos":[0,57],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.IO.FileInfo\"&gt;&lt;/xref&gt;</ph>.","source":"An array of type <xref href=\"System.IO.FileInfo\"></xref>."}],"pos":[122143,122201],"yaml":true},{"content":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph> method.","source":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method."}],"pos":[122355,122501],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[122603,122641],"yaml":true},{"content":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.IO.SearchOption\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."}],"pos":[122755,122847],"yaml":true},{"content":"The path is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,62],"content":"The path is invalid (for example, it is on an unmapped drive).","nodes":[{"content":"The path is invalid (for example, it is on an unmapped drive).","pos":[0,62]}]}],"pos":[122965,123028],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[123140,123190],"yaml":true},{"content":"Retrieves an array of <xref href=\"System.IO.FileSystemInfo\"></xref> objects that represent the files and subdirectories matching the specified search criteria.","nodes":[{"pos":[0,159],"content":"Retrieves an array of <ph id=\"ph1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;&lt;/xref&gt;</ph> objects that represent the files and subdirectories matching the specified search criteria.","source":"Retrieves an array of <xref href=\"System.IO.FileSystemInfo\"></xref> objects that represent the files and subdirectories matching the specified search criteria."}],"pos":[124696,124856],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,1024],"content":"For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.","nodes":[{"content":"For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.","pos":[0,385],"nodes":[{"content":"For subdirectories, the <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects returned by this method can be cast to the derived class <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>.","pos":[0,152],"source":"For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileAttributes&gt;</ph> value returned by the <ph id=\"ph2\">&lt;xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName&gt;</ph> property to determine whether the <ph id=\"ph3\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> represents a file or a directory.","pos":[153,385],"source":" Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory."}]}]},{"pos":[1031,1128],"content":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:","pos":[0,97],"source":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:"}]},{"pos":[1138,1183],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[1193,1240],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[1250,1300],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1310,1359],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[1369,1421],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[1431,1479],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[1489,1540],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]}],"pos":[124867,126445],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,267],"content":"The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,267],"nodes":[{"content":"The search string to match against the names of directories and filesa.","pos":[0,71]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[73,214]},{"content":"The default pattern is \"*\", which returns all files.","pos":[215,267]}]}]}],"pos":[126667,126935],"yaml":true},{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.","nodes":[{"pos":[0,221],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.","nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.IO.SearchOption.TopDirectoryOnly\"&gt;&lt;/xref&gt;</ph>.","pos":[139,221],"source":" The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>."}]}],"pos":[127012,127234],"yaml":true},{"content":"An array of file system entries that match the search criteria.","nodes":[{"pos":[0,63],"content":"An array of file system entries that match the search criteria.","nodes":[{"content":"An array of file system entries that match the search criteria.","pos":[0,63]}]}],"pos":[127304,127368],"yaml":true},{"content":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph> method.","source":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method."}],"pos":[127532,127678],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[127780,127818],"yaml":true},{"content":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.IO.SearchOption\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."}],"pos":[127932,128024],"yaml":true},{"content":"The specified path is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,72],"content":"The specified path is invalid (for example, it is on an unmapped drive).","nodes":[{"content":"The specified path is invalid (for example, it is on an unmapped drive).","pos":[0,72]}]}],"pos":[128142,128215],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[128327,128377],"yaml":true},{"content":"Returns an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries representing all the files and subdirectories in a directory.","nodes":[{"pos":[0,150],"content":"Returns an array of strongly typed <ph id=\"ph1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;&lt;/xref&gt;</ph> entries representing all the files and subdirectories in a directory.","source":"Returns an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries representing all the files and subdirectories in a directory."}],"pos":[129709,129860],"yaml":true},{"content":"If there are no files or directories in the <xref:System.IO.DirectoryInfo>, this method returns an empty array. This method is not recursive.  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[{"pos":[0,141],"content":"If there are no files or directories in the <xref:System.IO.DirectoryInfo>, this method returns an empty array. This method is not recursive.","nodes":[{"content":"If there are no files or directories in the <xref:System.IO.DirectoryInfo>, this method returns an empty array. This method is not recursive.","pos":[0,141],"nodes":[{"content":"If there are no files or directories in the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.","pos":[0,111],"source":"If there are no files or directories in the <xref:System.IO.DirectoryInfo>, this method returns an empty array."},{"content":"This method is not recursive.","pos":[112,141]}]}]},{"pos":[148,533],"content":"For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.","nodes":[{"content":"For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.","pos":[0,385],"nodes":[{"content":"For subdirectories, the <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects returned by this method can be cast to the derived class <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>.","pos":[0,152],"source":"For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileAttributes&gt;</ph> value returned by the <ph id=\"ph2\">&lt;xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName&gt;</ph> property to determine whether the <ph id=\"ph3\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> represents a file or a directory.","pos":[153,385],"source":" Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory."}]}]},{"pos":[540,637],"content":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:","pos":[0,97],"source":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:"}]},{"pos":[647,692],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[702,749],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[759,809],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[819,868],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[878,930],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[940,988],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[998,1049],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]}],"pos":[129871,130941],"yaml":true,"extradata":"MT"},{"content":"An array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries.","nodes":[{"pos":[0,81],"content":"An array of strongly typed <ph id=\"ph1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;&lt;/xref&gt;</ph> entries.","source":"An array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries."}],"pos":[131422,131504],"yaml":true},{"content":"The path is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,62],"content":"The path is invalid (for example, it is on an unmapped drive).","nodes":[{"content":"The path is invalid (for example, it is on an unmapped drive).","pos":[0,62]}]}],"pos":[131692,131755],"yaml":true},{"content":"Retrieves an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> objects representing the files and subdirectories that match the specified search criteria.","nodes":[{"pos":[0,174],"content":"Retrieves an array of strongly typed <ph id=\"ph1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;&lt;/xref&gt;</ph> objects representing the files and subdirectories that match the specified search criteria.","source":"Retrieves an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> objects representing the files and subdirectories that match the specified search criteria."}],"pos":[133150,133325],"yaml":true},{"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method is not recursive.  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n Wild cards are permitted. For example, the `searchPattern` string \"*t\" searches for all directory names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all directory names in `path` beginning with the letter \"s\".  \n  \n The string \"..\" can only be used in `searchPattern` if it is specified as a part of a valid directory name, such as in the directory name \"a..b\". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[{"pos":[0,184],"content":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.","nodes":[{"content":"<ph id=\"ph1\">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.","pos":[0,116],"source":"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions."},{"content":"The following wildcard specifiers are permitted in <ph id=\"ph1\">`searchPattern`</ph>.","pos":[117,184],"source":" The following wildcard specifiers are permitted in `searchPattern`."}]},{"pos":[191,209],"content":"Wildcard specifier","nodes":[{"content":"Wildcard specifier","pos":[0,18]}]},{"pos":[210,217],"content":"Matches","nodes":[{"content":"Matches","pos":[0,7]}]},{"pos":[265,277],"content":"* (asterisk)","nodes":[{"content":"* (asterisk)","pos":[0,12]}]},{"pos":[278,319],"content":"Zero or more characters in that position.","nodes":[{"content":"Zero or more characters in that position.","pos":[0,41]}]},{"pos":[324,341],"content":"? (question mark)","nodes":[{"content":"? (question mark)","pos":[0,17],"nodes":[{"content":"?","pos":[0,1]},{"content":"(question mark)","pos":[2,17]}]}]},{"pos":[342,381],"content":"Zero or one character in that position.","nodes":[{"content":"Zero or one character in that position.","pos":[0,39]}]},{"pos":[389,632],"content":"Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".","nodes":[{"content":"Characters other than the wildcard are literal characters.","pos":[0,58]},{"content":"For example, the  string \"*t\" searches for all names in  ending with the letter \"t\".","pos":[59,143]},{"content":"\".","pos":[144,146]},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[147,243],"source":" The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\"."}]},{"pos":[639,668],"content":"This method is not recursive.","nodes":[{"content":"This method is not recursive.","pos":[0,29]}]},{"pos":[675,1060],"content":"For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.","nodes":[{"content":"For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.","pos":[0,385],"nodes":[{"content":"For subdirectories, the <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects returned by this method can be cast to the derived class <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>.","pos":[0,152],"source":"For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileAttributes&gt;</ph> value returned by the <ph id=\"ph2\">&lt;xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName&gt;</ph> property to determine whether the <ph id=\"ph3\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> represents a file or a directory.","pos":[153,385],"source":" Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory."}]}]},{"pos":[1067,1315],"content":"Wild cards are permitted. For example, the `searchPattern` string \"*t\" searches for all directory names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all directory names in `path` beginning with the letter \"s\".","nodes":[{"content":"Wild cards are permitted.","pos":[0,25]},{"content":"For example, the <ph id=\"ph1\">`searchPattern`</ph> string \"*t\" searches for all directory names in <ph id=\"ph2\">`path`</ph> ending with the letter \"t\".","pos":[26,141],"source":" For example, the `searchPattern` string \"*t\" searches for all directory names in `path` ending with the letter \"t\"."},{"content":"The <ph id=\"ph1\">`searchPattern`</ph> string \"s<ph id=\"ph2\">\\*</ph>\" searches for all directory names in <ph id=\"ph3\">`path`</ph> beginning with the letter \"s\".","pos":[142,248],"source":" The `searchPattern` string \"s\\*\" searches for all directory names in `path` beginning with the letter \"s\"."}]},{"pos":[1322,1699],"content":"The string \"..\" can only be used in `searchPattern` if it is specified as a part of a valid directory name, such as in the directory name \"a..b\". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.","nodes":[{"content":"The string \"..\" can only be used in <ph id=\"ph1\">`searchPattern`</ph> if it is specified as a part of a valid directory name, such as in the directory name \"a..b\".","pos":[0,145],"source":"The string \"..\" can only be used in `searchPattern` if it is specified as a part of a valid directory name, such as in the directory name \"a..b\"."},{"content":"It cannot be used to move up the directory hierarchy.","pos":[146,199]},{"content":"If there are no files or directories, or no files or directories that match the <ph id=\"ph1\">`searchPattern`</ph> string in the <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.","pos":[200,377],"source":" If there are no files or directories, or no files or directories that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array."}]},{"pos":[1706,1803],"content":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:","nodes":[{"content":"This method pre-populates the values of the following <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:","pos":[0,97],"source":"This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:"}]},{"pos":[1813,1858],"content":"<xref:System.IO.FileSystemInfo.Attributes%2A>","nodes":[]},{"pos":[1868,1915],"content":"<xref:System.IO.FileSystemInfo.CreationTime%2A>","nodes":[]},{"pos":[1925,1975],"content":"<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>","nodes":[]},{"pos":[1985,2034],"content":"<xref:System.IO.FileSystemInfo.LastAccessTime%2A>","nodes":[]},{"pos":[2044,2096],"content":"<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>","nodes":[]},{"pos":[2106,2154],"content":"<xref:System.IO.FileSystemInfo.LastWriteTime%2A>","nodes":[]},{"pos":[2164,2215],"content":"<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","nodes":[]}],"pos":[133336,135608],"yaml":true,"extradata":"MT"},{"content":"The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"pos":[0,266],"content":"The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","nodes":[{"content":"The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.","pos":[0,266],"nodes":[{"content":"The search string to match against the names of directories and files.","pos":[0,70]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.","pos":[72,213]},{"content":"The default pattern is \"*\", which returns all files.","pos":[214,266]}]}]}],"pos":[136205,136472],"yaml":true},{"content":"An array of strongly typed `FileSystemInfo` objects matching the search criteria.","nodes":[{"pos":[0,81],"content":"An array of strongly typed <ph id=\"ph1\">`FileSystemInfo`</ph> objects matching the search criteria.","source":"An array of strongly typed `FileSystemInfo` objects matching the search criteria."}],"pos":[136542,136624],"yaml":true},{"content":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph> method.","source":"<code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method."}],"pos":[136788,136934],"yaml":true},{"content":"<code>searchPattern</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>searchPattern</code> is `null`."}],"pos":[137036,137074],"yaml":true},{"content":"The specified path is invalid (for example, it is on an unmapped drive).","nodes":[{"pos":[0,72],"content":"The specified path is invalid (for example, it is on an unmapped drive).","nodes":[{"content":"The specified path is invalid (for example, it is on an unmapped drive).","pos":[0,72]}]}],"pos":[137192,137265],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[137377,137427],"yaml":true},{"content":"Moves a <xref href=\"System.IO.DirectoryInfo\"></xref> instance and its contents to a new path.","nodes":[{"pos":[0,93],"content":"Moves a <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> instance and its contents to a new path.","source":"Moves a <xref href=\"System.IO.DirectoryInfo\"></xref> instance and its contents to a new path."}],"pos":[138750,138844],"yaml":true},{"content":"This method throws an <xref:System.IO.IOException> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists. You must specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, or specify a new directory name such as \"c:\\\\\\newdir\".  \n  \n This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,262],"content":"This method throws an <xref:System.IO.IOException> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists. You must specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, or specify a new directory name such as \"c:\\\\\\newdir\".","nodes":[{"content":"This method throws an <ph id=\"ph1\">&lt;xref:System.IO.IOException&gt;</ph> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists.","pos":[0,136],"source":"This method throws an <xref:System.IO.IOException> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists."},{"content":"You must specify \"c:<ph id=\"ph1\">\\\\</ph>\\public<ph id=\"ph2\">\\\\</ph>\\mydir\" as the <ph id=\"ph3\">`destDirName`</ph> parameter, or specify a new directory name such as \"c:<ph id=\"ph4\">\\\\</ph>\\newdir\".","pos":[137,262],"source":" You must specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, or specify a new directory name such as \"c:\\\\\\newdir\"."}]},{"pos":[269,392],"content":"This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.","nodes":[{"content":"This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.","pos":[0,123],"nodes":[{"content":"This method permits moving a directory to a read-only directory.","pos":[0,64]},{"content":"The read/write attribute of neither directory is affected.","pos":[65,123]}]}]},{"pos":[399,494],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[138855,139372],"yaml":true,"extradata":"MT"},{"content":"The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.","nodes":[{"pos":[0,227],"content":"The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.","nodes":[{"content":"The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.","pos":[0,227],"nodes":[{"content":"The name and path to which to move this directory.","pos":[0,50]},{"content":"The destination cannot be another disk volume or a directory with the identical name.","pos":[51,136]},{"content":"It can be an existing directory to which you want to add this directory as a subdirectory.","pos":[137,227]}]}]}],"pos":[139987,140215],"yaml":true},{"content":"<code>destDirName</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;destDirName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>destDirName</code> is `null`."}],"pos":[140375,140411],"yaml":true},{"content":"<code>destDirName</code> is an empty string (''\").","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;destDirName&lt;/code&gt;</ph> is an empty string (''\").","source":"<code>destDirName</code> is an empty string (''\")."}],"pos":[140505,140556],"yaml":true},{"content":"An attempt was made to move a directory to a different volume.  \n  \n -or-  \n  \n <code>destDirName</code> already exists.  \n  \n -or-  \n  \n You are not authorized to access this path.  \n  \n -or-  \n  \n The directory being moved and the destination directory have the same name.","nodes":[{"pos":[0,62],"content":"An attempt was made to move a directory to a different volume.","nodes":[{"content":"An attempt was made to move a directory to a different volume.","pos":[0,62]}]},{"pos":[69,73],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[80,120],"content":"<ph id=\"ph1\">&lt;code&gt;destDirName&lt;/code&gt;</ph> already exists.","source":"<code>destDirName</code> already exists."},{"pos":[127,131],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[138,181],"content":"You are not authorized to access this path.","nodes":[{"content":"You are not authorized to access this path.","pos":[0,43]}]},{"pos":[188,192],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[199,274],"content":"The directory being moved and the destination directory have the same name.","nodes":[{"content":"The directory being moved and the destination directory have the same name.","pos":[0,75]}]}],"pos":[140644,140933],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[141045,141095],"yaml":true},{"content":"The destination directory cannot be found.","nodes":[{"pos":[0,42],"content":"The destination directory cannot be found.","nodes":[{"content":"The destination directory cannot be found.","pos":[0,42]}]}],"pos":[141213,141256],"yaml":true},{"content":"Gets the name of this <xref href=\"System.IO.DirectoryInfo\"></xref> instance.","nodes":[{"pos":[0,76],"content":"Gets the name of this <ph id=\"ph1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> instance.","source":"Gets the name of this <xref href=\"System.IO.DirectoryInfo\"></xref> instance."}],"pos":[142500,142577],"yaml":true},{"content":"This <xref:System.IO.DirectoryInfo.Name%2A> property returns only the name of the directory, such as \"Bin\". To get the full path, such as \"c:\\public\\Bin\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property.  \n  \n The <xref:System.IO.DirectoryInfo.Name%2A> property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name. If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,216],"content":"This <xref:System.IO.DirectoryInfo.Name%2A> property returns only the name of the directory, such as \"Bin\". To get the full path, such as \"c:\\public\\Bin\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property.","nodes":[{"content":"This <xref:System.IO.DirectoryInfo.Name%2A> property returns only the name of the directory, such as \"Bin\". To get the full path, such as \"c:\\public\\Bin\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property.","pos":[0,216],"nodes":[{"content":"This <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.Name%2A&gt;</ph> property returns only the name of the directory, such as \"Bin\".","pos":[0,107],"source":"This <xref:System.IO.DirectoryInfo.Name%2A> property returns only the name of the directory, such as \"Bin\"."},{"content":"To get the full path, such as \"c:\\public\\Bin\", use the <ph id=\"ph1\">&lt;xref:System.IO.FileSystemInfo.FullName%2A&gt;</ph> property.","pos":[108,216],"source":" To get the full path, such as \"c:\\public\\Bin\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property."}]}]},{"pos":[223,666],"content":"The <xref:System.IO.DirectoryInfo.Name%2A> property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name. If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.","nodes":[{"content":"The <xref:System.IO.DirectoryInfo.Name%2A> property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name. If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.","pos":[0,443],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.Name%2A&gt;</ph> property of a <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> requires no permission (beyond the read permission to the directory necessary to construct the <ph id=\"ph3\">&lt;xref:System.IO.DirectoryInfo.Exists%2A&gt;</ph>) but can give out the directory name.","pos":[0,261],"source":"The <xref:System.IO.DirectoryInfo.Name%2A> property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name."},{"content":"If it is necessary to hand out a <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo&gt;</ph> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.","pos":[262,443],"source":" If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use."}]}]},{"pos":[673,768],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[142588,143369],"yaml":true,"extradata":"MT"},{"content":"The directory name.","nodes":[{"pos":[0,19],"content":"The directory name.","nodes":[{"content":"The directory name.","pos":[0,19]}]}],"pos":[144060,144080],"yaml":true},{"content":"Gets the parent directory of a specified subdirectory.","nodes":[{"pos":[0,54],"content":"Gets the parent directory of a specified subdirectory.","nodes":[{"content":"Gets the parent directory of a specified subdirectory.","pos":[0,54]}]}],"pos":[145395,145450],"yaml":true},{"content":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,95],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[145461,145557],"yaml":true,"extradata":"MT"},{"content":"The parent directory, or `null` if the path is null or if the file path denotes a root (such as \"\\\\\", \"C:\", or * \"\\\\\\server\\share\").","nodes":[{"pos":[0,132],"content":"The parent directory, or <ph id=\"ph1\">`null`</ph> if the path is null or if the file path denotes a root (such as \"<ph id=\"ph2\">\\\\</ph>\", \"C:\", or * \"<ph id=\"ph3\">\\\\</ph>\\server\\share\").","source":"The parent directory, or `null` if the path is null or if the file path denotes a root (such as \"\\\\\", \"C:\", or * \"\\\\\\server\\share\")."}],"pos":[146202,146335],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[146505,146555],"yaml":true},{"content":"Gets the root portion of the directory.","nodes":[{"pos":[0,39],"content":"Gets the root portion of the directory.","nodes":[{"content":"Gets the root portion of the directory.","pos":[0,39]}]}],"pos":[147799,147839],"yaml":true},{"content":"An object that represents the root of the directory.","nodes":[{"pos":[0,52],"content":"An object that represents the root of the directory.","nodes":[{"content":"An object that represents the root of the directory.","pos":[0,52]}]}],"pos":[148337,148390],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[148558,148608],"yaml":true},{"content":"Applies access control list (ACL) entries described by a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object to the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object.","nodes":[{"pos":[0,227],"content":"Applies access control list (ACL) entries described by a <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;&lt;/xref&gt;</ph> object to the directory described by the current <ph id=\"ph2\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"Applies access control list (ACL) entries described by a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object to the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object."}],"pos":[150085,150313],"yaml":true},{"content":"An access control list (ACL) describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).  \n  \n The <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method applies ACL entries to a file that represents the noninherited ACL list.  \n  \n> [!CAUTION]\n>  The ACL specified for `directorySecurity` replaces the existing ACL for the directory. To add permissions for a new user, use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to obtain the existing ACL, and modify it.  \n  \n The <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method persists only <xref:System.Security.AccessControl.DirectorySecurity> objects that have been modified after object creation.  If a <xref:System.Security.AccessControl.DirectorySecurity> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.DirectorySecurity> object from one file and reapply the same object to another file.  \n  \n To copy ACL information from one file to another:  \n  \n1.  Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the <xref:System.Security.AccessControl.DirectorySecurity> object from the source file.  \n  \n2.  Create a new <xref:System.Security.AccessControl.DirectorySecurity> object for the destination file.  \n  \n3.  Use the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method of the source <xref:System.Security.AccessControl.DirectorySecurity> object to retrieve the ACL information.  \n  \n4.  Use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to copy the information retrieved in step 3 to the destination <xref:System.Security.AccessControl.DirectorySecurity> object.  \n  \n5.  Set the destination <xref:System.Security.AccessControl.DirectorySecurity> object to the destination file using the <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method.","nodes":[{"pos":[0,300],"content":"An access control list (ACL) describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).","nodes":[{"content":"An access control list (ACL) describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory.","pos":[0,149]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Add or Remove Access Control List Entries<ept id=\"p1\">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.","pos":[150,300],"source":" For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)."}]},{"pos":[307,441],"content":"The <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method applies ACL entries to a file that represents the noninherited ACL list.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.SetAccessControl%2A&gt;</ph> method applies ACL entries to a file that represents the noninherited ACL list.","pos":[0,134],"source":"The <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method applies ACL entries to a file that represents the noninherited ACL list."}]},{"pos":[449,693],"content":"[!CAUTION]\n The ACL specified for `directorySecurity` replaces the existing ACL for the directory. To add permissions for a new user, use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to obtain the existing ACL, and modify it.","leadings":["","> "],"nodes":[{"content":" The ACL specified for `directorySecurity` replaces the existing ACL for the directory. To add permissions for a new user, use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to obtain the existing ACL, and modify it.","pos":[11,242],"nodes":[{"content":"The ACL specified for <ph id=\"ph1\">`directorySecurity`</ph> replaces the existing ACL for the directory.","pos":[1,87],"source":" The ACL specified for `directorySecurity` replaces the existing ACL for the directory."},{"content":"To add permissions for a new user, use the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt;</ph> method to obtain the existing ACL, and modify it.","pos":[88,231],"source":" To add permissions for a new user, use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to obtain the existing ACL, and modify it."}]}]},{"pos":[700,1178],"content":"The <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method persists only <xref:System.Security.AccessControl.DirectorySecurity> objects that have been modified after object creation.  If a <xref:System.Security.AccessControl.DirectorySecurity> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.DirectorySecurity> object from one file and reapply the same object to another file.","nodes":[{"content":"The <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method persists only <xref:System.Security.AccessControl.DirectorySecurity> objects that have been modified after object creation.  If a <xref:System.Security.AccessControl.DirectorySecurity> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.DirectorySecurity> object from one file and reapply the same object to another file.","pos":[0,478],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.SetAccessControl%2A&gt;</ph> method persists only <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> objects that have been modified after object creation.","pos":[0,185],"source":"The <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method persists only <xref:System.Security.AccessControl.DirectorySecurity> objects that have been modified after object creation."},{"content":"If a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object has not been modified, it will not be persisted to a file.","pos":[187,312],"source":"  If a <xref:System.Security.AccessControl.DirectorySecurity> object has not been modified, it will not be persisted to a file."},{"content":"Therefore, it is not possible to retrieve a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object from one file and reapply the same object to another file.","pos":[314,478],"source":"  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.DirectorySecurity> object from one file and reapply the same object to another file."}]}]},{"pos":[1185,1234],"content":"To copy ACL information from one file to another:","nodes":[{"content":"To copy ACL information from one file to another:","pos":[0,49]}]},{"pos":[1244,1409],"content":"Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the <xref:System.Security.AccessControl.DirectorySecurity> object from the source file.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt;</ph> method to retrieve the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object from the source file.","pos":[0,165],"source":"Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the <xref:System.Security.AccessControl.DirectorySecurity> object from the source file."}]},{"pos":[1419,1519],"content":"Create a new <xref:System.Security.AccessControl.DirectorySecurity> object for the destination file.","nodes":[{"content":"Create a new <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object for the destination file.","pos":[0,100],"source":"Create a new <xref:System.Security.AccessControl.DirectorySecurity> object for the destination file."}]},{"pos":[1529,1827],"content":"Use the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method of the source <xref:System.Security.AccessControl.DirectorySecurity> object to retrieve the ACL information.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt;</ph> method of the source <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object to retrieve the ACL information.","pos":[0,298],"source":"Use the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method of the source <xref:System.Security.AccessControl.DirectorySecurity> object to retrieve the ACL information."}]},{"pos":[1837,2152],"content":"Use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to copy the information retrieved in step 3 to the destination <xref:System.Security.AccessControl.DirectorySecurity> object.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt;</ph> method to copy the information retrieved in step 3 to the destination <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object.","pos":[0,315],"source":"Use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to copy the information retrieved in step 3 to the destination <xref:System.Security.AccessControl.DirectorySecurity> object."}]},{"pos":[2162,2336],"content":"Set the destination <xref:System.Security.AccessControl.DirectorySecurity> object to the destination file using the <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method.","nodes":[{"content":"Set the destination <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object to the destination file using the <ph id=\"ph2\">&lt;xref:System.IO.DirectoryInfo.SetAccessControl%2A&gt;</ph> method.","pos":[0,174],"source":"Set the destination <xref:System.Security.AccessControl.DirectorySecurity> object to the destination file using the <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method."}]}],"pos":[150324,152682],"yaml":true,"extradata":"MT"},{"content":"An object that describes an ACL entry to apply to the directory described by the <code>path</code> parameter.","nodes":[{"pos":[0,109],"content":"An object that describes an ACL entry to apply to the directory described by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"An object that describes an ACL entry to apply to the directory described by the <code>path</code> parameter."}],"pos":[153701,153811],"yaml":true},{"content":"The <code>directorySecurity</code> parameter is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">directorySecurity</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>directorySecurity</code> parameter is `null`."}],"pos":[153981,154037],"yaml":true},{"content":"The file could not be found or modified.","nodes":[{"pos":[0,40],"content":"The file could not be found or modified.","nodes":[{"content":"The file could not be found or modified.","pos":[0,40]}]}],"pos":[154127,154168],"yaml":true},{"content":"The current process does not have access to open the file.","nodes":[{"pos":[0,58],"content":"The current process does not have access to open the file.","nodes":[{"content":"The current process does not have access to open the file.","pos":[0,58]}]}],"pos":[154282,154341],"yaml":true},{"content":"The current operating system is not Microsoft Windows 2000 or later.","nodes":[{"pos":[0,68],"content":"The current operating system is not Microsoft Windows 2000 or later.","nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]}],"pos":[154459,154528],"yaml":true},{"content":"Returns the original path that was passed by the user.","nodes":[{"pos":[0,54],"content":"Returns the original path that was passed by the user.","nodes":[{"content":"Returns the original path that was passed by the user.","pos":[0,54]}]}],"pos":[155544,155599],"yaml":true},{"content":"Returns the original path that was passed by the user.","nodes":[{"pos":[0,54],"content":"Returns the original path that was passed by the user.","nodes":[{"content":"Returns the original path that was passed by the user.","pos":[0,54]}]}],"pos":[155734,155789],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.DirectoryInfo\n  commentId: T:System.IO.DirectoryInfo\n  id: DirectoryInfo\n  children:\n  - System.IO.DirectoryInfo.#ctor(System.String)\n  - System.IO.DirectoryInfo.Create\n  - System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)\n  - System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  - System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)\n  - System.IO.DirectoryInfo.Delete\n  - System.IO.DirectoryInfo.Delete(System.Boolean)\n  - System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  - System.IO.DirectoryInfo.EnumerateDirectories\n  - System.IO.DirectoryInfo.EnumerateFiles\n  - System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  - System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.Exists\n  - System.IO.DirectoryInfo.FullName\n  - System.IO.DirectoryInfo.GetAccessControl\n  - System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)\n  - System.IO.DirectoryInfo.GetDirectories\n  - System.IO.DirectoryInfo.GetDirectories(System.String)\n  - System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.GetFiles\n  - System.IO.DirectoryInfo.GetFiles(System.String)\n  - System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.GetFileSystemInfos\n  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  - System.IO.DirectoryInfo.MoveTo(System.String)\n  - System.IO.DirectoryInfo.Name\n  - System.IO.DirectoryInfo.Parent\n  - System.IO.DirectoryInfo.Root\n  - System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)\n  - System.IO.DirectoryInfo.ToString\n  langs:\n  - csharp\n  name: DirectoryInfo\n  nameWithType: DirectoryInfo\n  fullName: System.IO.DirectoryInfo\n  type: Class\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n Use the <xref:System.IO.DirectoryInfo> class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \\n  \\n If you are going to reuse an object several times, consider using the instance method of <xref:System.IO.DirectoryInfo> instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary.  \\n  \\n> [!NOTE]\\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \\\"c:\\\\temp c:\\\\windows\\\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \\n  \\n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \\n  \\n-   \\\"c:\\\\\\\\\\\\MyDir\\\\\\\\\\\\MyFile.txt\\\" in C#, or \\\"c:\\\\MyDir\\\\MyFile.txt\\\" in Visual Basic.  \\n  \\n-   \\\"c:\\\\\\\\\\\\MyDir\\\" in C#, or \\\"c:\\\\MyDir\\\" in Visual Basic.  \\n  \\n-   \\\"MyDir\\\\\\\\\\\\MySubdir\\\" in C#, or \\\"MyDir\\\\MySubDir\\\" in Visual Basic.  \\n  \\n-   \\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\MyServer\\\\\\\\\\\\MyShare\\\" in C#, or \\\"\\\\\\\\\\\\MyServer\\\\MyShare\\\" in Visual Basic.  \\n  \\n By default, full read/write access to new directories is granted to all users.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example demonstrates some of the main members of the `DirectoryInfo` class.  \\n  \\n [!code-cpp[DirInfo Class Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo Class Example/CPP/dirinfo class example.cpp#1)]\\n [!code-csharp[DirInfo Class Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo Class Example/CS/dirinfo class example.cs#1)]\\n [!code-vb[DirInfo Class Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo Class Example/VB/dirinfo class example.vb#1)]  \\n  \\n The following example demonstrates how to copy a directory and its contents.  \\n  \\n [!code-csharp[IO.DirectoryInfo-CopyDir#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DirectoryInfo-CopyDir/cs/copydir.cs#1)]\\n [!code-vb[IO.DirectoryInfo-CopyDir#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DirectoryInfo-CopyDir/vb/CopyDir.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class DirectoryInfo : System.IO.FileSystemInfo\n  inheritance:\n  - System.Object\n  - System.IO.FileSystemInfo\n  implements: []\n  inheritedMembers:\n  - System.IO.FileSystemInfo.Attributes\n  - System.IO.FileSystemInfo.CreationTime\n  - System.IO.FileSystemInfo.CreationTimeUtc\n  - System.IO.FileSystemInfo.Extension\n  - System.IO.FileSystemInfo.FullPath\n  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.IO.FileSystemInfo.LastAccessTime\n  - System.IO.FileSystemInfo.LastAccessTimeUtc\n  - System.IO.FileSystemInfo.LastWriteTime\n  - System.IO.FileSystemInfo.LastWriteTimeUtc\n  - System.IO.FileSystemInfo.OriginalPath\n  - System.IO.FileSystemInfo.Refresh\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  extensionMethods:\n  - System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.DirectoryInfo)\n  - System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.DirectoryInfo,System.Security.AccessControl.AccessControlSections)\n  - System.IO.FileSystemAclExtensions.SetAccessControl(System.IO.DirectoryInfo,System.Security.AccessControl.DirectorySecurity)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.#ctor(System.String)\n  commentId: M:System.IO.DirectoryInfo.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: DirectoryInfo(String)\n  nameWithType: DirectoryInfo.DirectoryInfo(String)\n  fullName: DirectoryInfo.DirectoryInfo(String)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class on the specified path.\n  remarks: \"This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example uses this constructor to create the specified directory and subdirectory, and demonstrates that a directory that contains subdirectories cannot be deleted.  \\n  \\n [!code-cpp[DirInfo Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo Ctor/CPP/dirinfo ctor.cpp#1)]\\n [!code-csharp[DirInfo Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo Ctor/CS/dirinfo ctor.cs#1)]\\n [!code-vb[DirInfo Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo Ctor/VB/dirinfo ctor.vb#1)]\"\n  syntax:\n    content: public DirectoryInfo (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: A string specifying the path on which to create the `DirectoryInfo`.\n  overload: System.IO.DirectoryInfo.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> contains invalid characters such as \", <, >, or |.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.Create\n  commentId: M:System.IO.DirectoryInfo.Create\n  id: Create\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: DirectoryInfo.Create()\n  fullName: DirectoryInfo.Create()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Creates a directory.\n  remarks: \"If the directory already exists, this method does nothing.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example checks whether a specified directory exists, creates the directory if it does not exist, and deletes the directory.  \\n  \\n [!code-cpp[DirInfo Create#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo Create/CPP/dirinfo create.cpp#1)]\\n [!code-csharp[DirInfo Create#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo Create/CS/dirinfo create.cs#1)]\\n [!code-vb[DirInfo Create#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo Create/VB/dirinfo create.vb#1)]\"\n  syntax:\n    content: public void Create ();\n    parameters: []\n  overload: System.IO.DirectoryInfo.Create*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The directory cannot be created.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)\n  commentId: M:System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)\n  id: Create(System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Create(DirectorySecurity)\n  nameWithType: DirectoryInfo.Create(DirectorySecurity)\n  fullName: DirectoryInfo.Create(DirectorySecurity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Creates a directory using a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object.\n  remarks: \"Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.  \\n  \\n If the directory already exists, this method does nothing.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public void Create (System.Security.AccessControl.DirectorySecurity directorySecurity);\n    parameters:\n    - id: directorySecurity\n      type: System.Security.AccessControl.DirectorySecurity\n      description: The access control to apply to the directory.\n  overload: System.IO.DirectoryInfo.Create*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The directory specified by <code>path</code> is read-only or is not empty.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The caller does not have the required permission.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Creating a directory with only the colon (:) character was attempted.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  commentId: M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  id: CreateSubdirectory(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: CreateSubdirectory(String)\n  nameWithType: DirectoryInfo.CreateSubdirectory(String)\n  fullName: DirectoryInfo.CreateSubdirectory(String)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.\n  remarks: \"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.  \\n  \\n> [!NOTE]\\n>  Path names are limited to 248 characters.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example demonstrates creating a subdirectory. In this example, the created directories are removed once created. Therefore, to test this sample, comment out the delete lines in the code.  \\n  \\n [!code-cpp[directoryinfocreatesub#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfocreatesub/CPP/directoryinfocreatesub.cpp#1)]\\n [!code-csharp[directoryinfocreatesub#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfocreatesub/CS/directoryinfocreatesub.cs#1)]\\n [!code-vb[directoryinfocreatesub#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfocreatesub/VB/directoryinfocreatesub.vb#1)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo CreateSubdirectory (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.\n    return:\n      type: System.IO.DirectoryInfo\n      description: The last directory specified in <code>path</code>.\n  overload: System.IO.DirectoryInfo.CreateSubdirectory*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> does not specify a valid file path or contains invalid `DirectoryInfo` characters.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The subdirectory cannot be created.  \\n  \\n -or-  \\n  \\n A file or directory already has the name specified by <code>path</code>.\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have code access permission to create the directory.  \\n  \\n -or-  \\n  \\n The caller does not have code access permission to read the directory described by the returned <xref href=\\\"System.IO.DirectoryInfo\\\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\\\").\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)\n  commentId: M:System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)\n  id: CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: CreateSubdirectory(String, DirectorySecurity)\n  nameWithType: DirectoryInfo.CreateSubdirectory(String, DirectorySecurity)\n  fullName: DirectoryInfo.CreateSubdirectory(String, DirectorySecurity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.\n  remarks: \"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.  \\n  \\n> [!NOTE]\\n>  Path names are limited to 248 characters.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public System.IO.DirectoryInfo CreateSubdirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);\n    parameters:\n    - id: path\n      type: System.String\n      description: The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.\n    - id: directorySecurity\n      type: System.Security.AccessControl.DirectorySecurity\n      description: The security to apply.\n    return:\n      type: System.IO.DirectoryInfo\n      description: The last directory specified in <code>path</code>.\n  overload: System.IO.DirectoryInfo.CreateSubdirectory*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> does not specify a valid file path or contains invalid `DirectoryInfo` characters.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The subdirectory cannot be created.  \\n  \\n -or-  \\n  \\n A file or directory already has the name specified by <code>path</code>.\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have code access permission to create the directory.  \\n  \\n -or-  \\n  \\n The caller does not have code access permission to read the directory described by the returned <xref href=\\\"System.IO.DirectoryInfo\\\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\\\").\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.Delete\n  commentId: M:System.IO.DirectoryInfo.Delete\n  id: Delete\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Delete()\n  nameWithType: DirectoryInfo.Delete()\n  fullName: DirectoryInfo.Delete()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Deletes this <xref href=\"System.IO.DirectoryInfo\"></xref> if it is empty.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\n  example:\n  - \"The following example throws an exception if you attempt to delete a directory that is not empty.  \\n  \\n [!code-cpp[DirInfo Delete1#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo Delete1/CPP/dirinfo delete1.cpp#1)]\\n [!code-csharp[DirInfo Delete1#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo Delete1/CS/dirinfo delete1.cs#1)]\\n [!code-vb[DirInfo Delete1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo Delete1/VB/dirinfo delete1.vb#1)]\"\n  syntax:\n    content: public override void Delete ();\n    parameters: []\n  overload: System.IO.DirectoryInfo.Delete*\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The directory contains a read-only file.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The directory is not empty.  \\n  \\n -or-  \\n  \\n The directory is the application's current working directory.  \\n  \\n -or-  \\n  \\n There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories. For more information, see [How to: Enumerate Directories and Files](~/docs/standard/io/how-to-enumerate-directories-and-files.md).\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.Delete(System.Boolean)\n  commentId: M:System.IO.DirectoryInfo.Delete(System.Boolean)\n  id: Delete(System.Boolean)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Delete(Boolean)\n  nameWithType: DirectoryInfo.Delete(Boolean)\n  fullName: DirectoryInfo.Delete(Boolean)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Deletes this instance of a <xref href=\"System.IO.DirectoryInfo\"></xref>, specifying whether to delete subdirectories and files.\n  remarks: \"If the `DirectoryInfo` has no files or subdirectories, this method deletes the `DirectoryInfo` even if `recursive` is `false`. Attempting to delete a `DirectoryInfo` that is not empty when `recursive` is `false` throws an <xref:System.IO.IOException>.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example demonstrates deleting a directory. Because the directory is removed, first comment out the `Delete` line to test that the directory exists. Then uncomment the same line of code to test that the directory was removed successfully.  \\n  \\n [!code-cpp[directoryinfodelete#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfodelete/CPP/directoryinfodelete.cpp#1)]\\n [!code-csharp[directoryinfodelete#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfodelete/CS/directoryinfodelete.cs#1)]\\n [!code-vb[directoryinfodelete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfodelete/VB/directoryinfodelete.vb#1)]\"\n  syntax:\n    content: public void Delete (bool recursive);\n    parameters:\n    - id: recursive\n      type: System.Boolean\n      description: '`true` to delete this directory, its subdirectories, and all files; otherwise, `false`.'\n  overload: System.IO.DirectoryInfo.Delete*\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The directory contains a read-only file.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The directory is read-only.  \\n  \\n -or-  \\n  \\n The directory contains one or more files or subdirectories and <code>recursive</code> is `false`.  \\n  \\n -or-  \\n  \\n The directory is the application's current working directory.  \\n  \\n -or-  \\n  \\n There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see [How to: Enumerate Directories and Files](~/docs/standard/io/how-to-enumerate-directories-and-files.md).\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  id: EnumerateDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateDirectories(String, SearchOption)\n  nameWithType: DirectoryInfo.EnumerateDirectories(String, SearchOption)\n  fullName: DirectoryInfo.EnumerateDirectories(String, SearchOption)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.\"\n  example:\n  - \"The following example, starting from a specified directory, uses this method and the <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> method to enumerate the files and directories within the start directory and display details of any files over 10 MB in size.  \\n  \\n [!code-csharp[System.IO.DirectoryInfo.EnumerateDirectories#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumeratedirectories/cs/program.cs#1)]\\n [!code-vb[System.IO.DirectoryInfo.EnumerateDirectories#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumeratedirectories/vb/program.vb#1)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n      description: An enumerable collection of directories that matches <code>searchPattern</code> and <code>searchOption</code>.\n  overload: System.IO.DirectoryInfo.EnumerateDirectories*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  commentId: M:System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  id: EnumerateDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateDirectories(String)\n  nameWithType: DirectoryInfo.EnumerateDirectories(String)\n  fullName: DirectoryInfo.EnumerateDirectories(String)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an enumerable collection of directory information that matches a specified search pattern.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n      description: An enumerable collection of directories that matches <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.EnumerateDirectories*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.EnumerateDirectories\n  commentId: M:System.IO.DirectoryInfo.EnumerateDirectories\n  id: EnumerateDirectories\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateDirectories()\n  nameWithType: DirectoryInfo.EnumerateDirectories()\n  fullName: DirectoryInfo.EnumerateDirectories()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an enumerable collection of directory information in the current directory.\n  remarks: \"The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.\"\n  example:\n  - \"The following example enumerates the subdirectories under the C:\\\\Program Files directory and uses a LINQ query to return the names of all directories that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \\n  \\n If you only need the names of the subdirectories, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%29> method.  \\n  \\n [!code-csharp[System.IO.DirectoryInfo.EnumDirs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumdirs/cs/program.cs#1)]\\n [!code-vb[System.IO.DirectoryInfo.EnumDirs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumdirs/vb/module1.vb#1)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n      description: An enumerable collection of directories in the current directory.\n  overload: System.IO.DirectoryInfo.EnumerateDirectories*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.EnumerateFiles\n  commentId: M:System.IO.DirectoryInfo.EnumerateFiles\n  id: EnumerateFiles\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFiles()\n  nameWithType: DirectoryInfo.EnumerateFiles()\n  fullName: DirectoryInfo.EnumerateFiles()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an enumerable collection of file information in the current directory.\n  remarks: \"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  example:\n  - \"The following example enumerates the files under a specified directory and uses a LINQ query to return the names of all files that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \\n  \\n If you only need the names of the files, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateFiles%28System.String%29?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.IO.DirectoryInfo.EnumFiles#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/cs/program.cs#1)]\\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/vb/module1.vb#1)]  \\n  \\n The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-csharp[System.IO.DirectoryInfo.EnumFiles#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/cs/program2.cs#2)]\\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/vb/module2.vb#2)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n      description: An enumerable collection of the files in the current directory.\n  overload: System.IO.DirectoryInfo.EnumerateFiles*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  commentId: M:System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  id: EnumerateFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFiles(String)\n  nameWithType: DirectoryInfo.EnumerateFiles(String)\n  fullName: DirectoryInfo.EnumerateFiles(String)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an enumerable collection of file information that matches a search pattern.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  example:\n  - \"The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-csharp[System.IO.DirectoryInfo.EnumFiles#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/cs/program2.cs#2)]\\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/vb/module2.vb#2)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n      description: An enumerable collection of files that matches <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.EnumerateFiles*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  id: EnumerateFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFiles(String, SearchOption)\n  nameWithType: DirectoryInfo.EnumerateFiles(String, SearchOption)\n  fullName: DirectoryInfo.EnumerateFiles(String, SearchOption)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  example:\n  - \"The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-csharp[System.IO.DirectoryInfo.EnumFiles#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/cs/program2.cs#2)]\\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/vb/module2.vb#2)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n      description: An enumerable collection of files that matches <code>searchPattern</code> and <code>searchOption</code>.\n  overload: System.IO.DirectoryInfo.EnumerateFiles*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  commentId: M:System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  id: EnumerateFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFileSystemInfos()\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()\n  fullName: DirectoryInfo.EnumerateFileSystemInfos()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an enumerable collection of file system information in the current directory.\n  remarks: \"The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n      description: An enumerable collection of file system information in the current directory.\n  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  commentId: M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  id: EnumerateFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFileSystemInfos(String)\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)\n  fullName: DirectoryInfo.EnumerateFileSystemInfos(String)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an enumerable collection of file system information that matches a specified search pattern.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n      description: An enumerable collection of file system information objects that matches <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  id: EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFileSystemInfos(String, SearchOption)\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String, SearchOption)\n  fullName: DirectoryInfo.EnumerateFileSystemInfos(String, SearchOption)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n      description: An enumerable collection of file system information objects that matches <code>searchPattern</code> and <code>searchOption</code>.\n  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.Exists\n  commentId: P:System.IO.DirectoryInfo.Exists\n  id: Exists\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Exists\n  nameWithType: DirectoryInfo.Exists\n  fullName: DirectoryInfo.Exists\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Gets a value indicating whether the directory exists.\n  remarks: The <xref:System.IO.DirectoryInfo.Exists%2A> property returns `false` if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.\n  example:\n  - \"The following example demonstrates a use of the `Exists` property in the context of copying a source directory to a target directory.  \\n  \\n [!code-cpp[DirectoryInfo Usage Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirectoryInfo Usage Example/CPP/copydirectory.cpp#1)]\\n [!code-csharp[DirectoryInfo Usage Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirectoryInfo Usage Example/CS/copydirectory.cs#1)]\\n [!code-vb[DirectoryInfo Usage Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirectoryInfo Usage Example/VB/copydirectory.vb#1)]\"\n  syntax:\n    content: public override bool Exists { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the directory exists; otherwise, `false`.'\n  overload: System.IO.DirectoryInfo.Exists*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.FullName\n  commentId: P:System.IO.DirectoryInfo.FullName\n  id: FullName\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: FullName\n  nameWithType: DirectoryInfo.FullName\n  fullName: DirectoryInfo.FullName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets the full path of the directory.\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public override string FullName { get; }\n    return:\n      type: System.String\n      description: A string containing the full path.\n  overload: System.IO.DirectoryInfo.FullName*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetAccessControl\n  commentId: M:System.IO.DirectoryInfo.GetAccessControl\n  id: GetAccessControl\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetAccessControl()\n  nameWithType: DirectoryInfo.GetAccessControl()\n  fullName: DirectoryInfo.GetAccessControl()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object.\n  remarks: \"Calling this method overload is equivalent to calling the <xref:System.IO.Directory.GetAccessControl%2A> method overload and specifying the access control sections <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic).  \\n  \\n Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the access control list (ACL) entries for the current file.  \\n  \\n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).\"\n  example:\n  - \"The following example uses the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> and <xref:System.IO.DirectoryInfo.SetAccessControl%2A> methods to add and then remove an access control list (ACL) entry from a directory.  \\n  \\n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]\\n [!code-csharp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]\\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]\"\n  syntax:\n    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl ();\n    parameters: []\n    return:\n      type: System.Security.AccessControl.DirectorySecurity\n      description: A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the directory.\n  overload: System.IO.DirectoryInfo.GetAccessControl*\n  exceptions:\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The directory could not be found or modified.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"The directory is read-only.  \\n  \\n -or-  \\n  \\n This operation is not supported on the current platform.  \\n  \\n -or-  \\n  \\n The caller does not have the required permission.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while opening the directory.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)\n  commentId: M:System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)\n  id: GetAccessControl(System.Security.AccessControl.AccessControlSections)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetAccessControl(AccessControlSections)\n  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)\n  fullName: DirectoryInfo.GetAccessControl(AccessControlSections)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object.\n  remarks: \"Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the access control list (ACL) entries for the current file.  \\n  \\n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).\"\n  syntax:\n    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);\n    parameters:\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to receive.\n    return:\n      type: System.Security.AccessControl.DirectorySecurity\n      description: \"A <xref href=\\\"System.Security.AccessControl.DirectorySecurity\\\"></xref> object that encapsulates the access control rules for the file described by the <code>path</code> parameter.  \\n  \\n Exceptions  \\n  \\n <table><thead><tr><th> Exception type  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td><xref href=\\\"System.SystemException\\\"></xref></td><td> The directory could not be found or modified.  \\n  \\n </td></tr><tr><td><xref href=\\\"System.UnauthorizedAccessException\\\"></xref></td><td> The current process does not have access to open the directory.  \\n  \\n </td></tr><tr><td><xref href=\\\"System.IO.IOException\\\"></xref></td><td> An I/O error occurred while opening the directory.  \\n  \\n </td></tr><tr><td><xref href=\\\"System.PlatformNotSupportedException\\\"></xref></td><td> The current operating system is not Microsoft Windows 2000 or later.  \\n  \\n </td></tr><tr><td><xref href=\\\"System.UnauthorizedAccessException\\\"></xref></td><td> The directory is read-only.  \\n  \\n -or-  \\n  \\n This operation is not supported on the current platform.  \\n  \\n -or-  \\n  \\n The caller does not have the required permission.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.IO.DirectoryInfo.GetAccessControl*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetDirectories\n  commentId: M:System.IO.DirectoryInfo.GetDirectories\n  id: GetDirectories\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetDirectories()\n  nameWithType: DirectoryInfo.GetDirectories()\n  fullName: DirectoryInfo.GetDirectories()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns the subdirectories of the current directory.\n  remarks: \"If there are no subdirectories, this method returns an empty array. This method is not recursive.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example retrieves all the directories in the root directory and displays the directory names.  \\n  \\n [!code-cpp[directoryinfogetdirectories#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfogetdirectories/CPP/directoryinfogetdirectories.cpp#1)]\\n [!code-csharp[directoryinfogetdirectories#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetdirectories/CS/directoryinfogetdirectories.cs#1)]\\n [!code-vb[directoryinfogetdirectories#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfogetdirectories/VB/directoryinfogetdirectories.vb#1)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo[] GetDirectories ();\n    parameters: []\n    return:\n      type: System.IO.DirectoryInfo[]\n      description: An array of <xref href=\"System.IO.DirectoryInfo\"></xref> objects.\n  overload: System.IO.DirectoryInfo.GetDirectories*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, such as being on an unmapped drive.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String)\n  commentId: M:System.IO.DirectoryInfo.GetDirectories(System.String)\n  id: GetDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetDirectories(String)\n  nameWithType: DirectoryInfo.GetDirectories(String)\n  fullName: DirectoryInfo.GetDirectories(String)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example counts the directories in a path that contain the specified letter.  \\n  \\n [!code-cpp[DirInfo GetDirs2#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo GetDirs2/CPP/dirinfo getdirs2.cpp#1)]\\n [!code-csharp[DirInfo GetDirs2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo GetDirs2/CS/dirinfo getdirs2.cs#1)]\\n [!code-vb[DirInfo GetDirs2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo GetDirs2/VB/dirinfo getdirs2.vb#1)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    return:\n      type: System.IO.DirectoryInfo[]\n      description: An array of type `DirectoryInfo` matching <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.GetDirectories*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the `DirectoryInfo` object is invalid (for example, it is on an unmapped drive).\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  id: GetDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetDirectories(String, SearchOption)\n  nameWithType: DirectoryInfo.GetDirectories(String, SearchOption)\n  fullName: DirectoryInfo.GetDirectories(String, SearchOption)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria and using a value to determine whether to search subdirectories.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n If there are no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example lists all of the directories and files that begin with the letter \\\"c\\\" in \\\"c:\\\\\\\\\\\".  \\n  \\n [!code-cpp[System.IO.DirectoryInfo_SearchOptions#00](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryInfo_SearchOptions/cpp/searchoption.cpp#00)]\\n [!code-csharp[System.IO.DirectoryInfo_SearchOptions#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryInfo_SearchOptions/cs/searchoption.cs#00)]\\n [!code-vb[System.IO.DirectoryInfo_SearchOptions#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryInfo_SearchOptions/vb/searchoption.vb#00)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.\n    return:\n      type: System.IO.DirectoryInfo[]\n      description: An array of type `DirectoryInfo` matching <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.GetDirectories*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the `DirectoryInfo` object is invalid (for example, it is on an unmapped drive).\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetFiles\n  commentId: M:System.IO.DirectoryInfo.GetFiles\n  id: GetFiles\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFiles()\n  nameWithType: DirectoryInfo.GetFiles()\n  fullName: DirectoryInfo.GetFiles()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns a file list from the current directory.\n  remarks: \"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>\"\n  example:\n  - \"The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-csharp[directoryinfogetfiles#2](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetfiles/CS/directoryinfogetfiles2.cs#2)]\\n [!code-vb[directoryinfogetfiles#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfogetfiles/VB/directoryinfogetfiles2.vb#2)]\"\n  syntax:\n    content: public System.IO.FileInfo[] GetFiles ();\n    parameters: []\n    return:\n      type: System.IO.FileInfo[]\n      description: An array of type <xref href=\"System.IO.FileInfo\"></xref>.\n  overload: System.IO.DirectoryInfo.GetFiles*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path is invalid, such as being on an unmapped drive.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetFiles(System.String)\n  commentId: M:System.IO.DirectoryInfo.GetFiles(System.String)\n  id: GetFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFiles(String)\n  nameWithType: DirectoryInfo.GetFiles(String)\n  fullName: DirectoryInfo.GetFiles(String)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns a file list from the current directory matching the given search pattern.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n The following wildcard specifiers are permitted in the `searchPattern` parameter.  \\n  \\n|Wildcard character|Description|  \\n|------------------------|-----------------|  \\n|*|Zero or more characters.|  \\n|?|Exactly zero or one character.|  \\n  \\n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \\n  \\n Wildcards are permitted. For example, the `searchPattern` string \\\"*.txt\\\" searches for all file names having an extension of \\\"txt\\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all file names beginning with the letter \\\"s\\\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n> [!NOTE]\\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \\\"*.txt\\\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \\\"file1.txt\\\" and \\\"file1.txtother\\\", a search pattern of \\\"file?.txt\\\" returns only the first file, while a search pattern of \\\"file\\\\*.txt\\\" returns both files.  \\n  \\n> [!NOTE]\\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \\\"*1\\\\*.txt\\\" may return unexpected file names. For example, using a search pattern of \\\"\\\\*1\\\\*.txt\\\" will return \\\"longfilename.txt\\\" because the equivalent 8.3 file name format would be \\\"longf~1.txt\\\".  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>\"\n  example:\n  - \"The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-csharp[directoryinfogetfiles#2](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetfiles/CS/directoryinfogetfiles2.cs#2)]\\n [!code-vb[directoryinfogetfiles#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfogetfiles/VB/directoryinfogetfiles2.vb#2)]\"\n  syntax:\n    content: public System.IO.FileInfo[] GetFiles (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    return:\n      type: System.IO.FileInfo[]\n      description: An array of type <xref href=\"System.IO.FileInfo\"></xref>.\n  overload: System.IO.DirectoryInfo.GetFiles*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  id: GetFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFiles(String, SearchOption)\n  nameWithType: DirectoryInfo.GetFiles(String, SearchOption)\n  fullName: DirectoryInfo.GetFiles(String, SearchOption)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.\n  remarks: \"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard character|Description|  \\n|------------------------|-----------------|  \\n|* (asterisk)|Zero or more characters.|  \\n|? (question mark)|Exactly zero or one character.|  \\n  \\n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \\n  \\n Wildcards are permitted. For example, the `searchPattern` string \\\"*.txt\\\" searches for all file names having an extension of \\\"txt\\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all file names beginning with the letter \\\"s\\\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n> [!NOTE]\\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \\\"*.txt\\\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \\\"file1.txt\\\" and \\\"file1.txtother\\\", a search pattern of \\\"file?.txt\\\" returns only the first file, while a search pattern of \\\"file\\\\*.txt\\\" returns both files.  \\n  \\n The following list shows the behavior of different lengths for the `searchPattern` parameter:  \\n  \\n-   \\\"*.abc\\\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.  \\n  \\n-   \\\"*.abcd\\\" returns only files having an extension of.abcd.  \\n  \\n-   \\\"*.abcde\\\" returns only files having an extension of.abcde.  \\n  \\n-   \\\"*.abcdef\\\" returns only files having an extension of.abcdef.  \\n  \\n> [!NOTE]\\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \\\"*1\\\\*.txt\\\" may return unexpected file names. For example, using a search pattern of \\\"\\\\*1\\\\*.txt\\\" will return \\\"longfilename.txt\\\" because the equivalent 8.3 file name format would be \\\"longf~1.txt\\\".  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n1.  <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n2.  <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n3.  <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n4.  <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n5.  <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n6.  <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n7.  <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n8.  <xref:System.IO.FileInfo.Length%2A>\"\n  example:\n  - \"The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-csharp[directoryinfogetfiles#2](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetfiles/CS/directoryinfogetfiles2.cs#2)]\\n [!code-vb[directoryinfogetfiles#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfogetfiles/VB/directoryinfogetfiles2.vb#2)]\"\n  syntax:\n    content: public System.IO.FileInfo[] GetFiles (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.\n    return:\n      type: System.IO.FileInfo[]\n      description: An array of type <xref href=\"System.IO.FileInfo\"></xref>.\n  overload: System.IO.DirectoryInfo.GetFiles*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  commentId: M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  id: GetFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFileSystemInfos(String, SearchOption)\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String, SearchOption)\n  fullName: DirectoryInfo.GetFileSystemInfos(String, SearchOption)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Retrieves an array of <xref href=\"System.IO.FileSystemInfo\"></xref> objects that represent the files and subdirectories matching the specified search criteria.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  syntax:\n    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\"></xref>.\n    return:\n      type: System.IO.FileSystemInfo[]\n      description: An array of file system entries that match the search criteria.\n  overload: System.IO.DirectoryInfo.GetFileSystemInfos*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos\n  commentId: M:System.IO.DirectoryInfo.GetFileSystemInfos\n  id: GetFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFileSystemInfos()\n  nameWithType: DirectoryInfo.GetFileSystemInfos()\n  fullName: DirectoryInfo.GetFileSystemInfos()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries representing all the files and subdirectories in a directory.\n  remarks: \"If there are no files or directories in the <xref:System.IO.DirectoryInfo>, this method returns an empty array. This method is not recursive.  \\n  \\n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example counts the files and directories under the specified directory.  \\n  \\n [!code-csharp[FSizeSort#1](~/samples/snippets/csharp/VS_Snippets_CLR/FSizeSort/CS/fsizesort.cs#1)]\\n [!code-vb[FSizeSort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FSizeSort/VB/fsizesort.vb#1)]\"\n  syntax:\n    content: public System.IO.FileSystemInfo[] GetFileSystemInfos ();\n    parameters: []\n    return:\n      type: System.IO.FileSystemInfo[]\n      description: An array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries.\n  overload: System.IO.DirectoryInfo.GetFileSystemInfos*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path is invalid (for example, it is on an unmapped drive).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  commentId: M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  id: GetFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFileSystemInfos(String)\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String)\n  fullName: DirectoryInfo.GetFileSystemInfos(String)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Retrieves an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> objects representing the files and subdirectories that match the specified search criteria.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but it doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n This method is not recursive.  \\n  \\n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \\n  \\n Wild cards are permitted. For example, the `searchPattern` string \\\"*t\\\" searches for all directory names in `path` ending with the letter \\\"t\\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all directory names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The string \\\"..\\\" can only be used in `searchPattern` if it is specified as a part of a valid directory name, such as in the directory name \\\"a..b\\\". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example counts the files and directories that match the specified search pattern.  \\n  \\n [!code-csharp[DirInfo GetFileSysInfos2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo GetFileSysInfos2/CS/dirinfo getfilesysinfos2.cs#1)]\\n [!code-vb[DirInfo GetFileSysInfos2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo GetFileSysInfos2/VB/dirinfo getfilesysinfos2.vb#1)]\"\n  syntax:\n    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. The default pattern is \"*\", which returns all files.\n    return:\n      type: System.IO.FileSystemInfo[]\n      description: An array of strongly typed `FileSystemInfo` objects matching the search criteria.\n  overload: System.IO.DirectoryInfo.GetFileSystemInfos*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern</code> contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is `null`.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.MoveTo(System.String)\n  commentId: M:System.IO.DirectoryInfo.MoveTo(System.String)\n  id: MoveTo(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: MoveTo(String)\n  nameWithType: DirectoryInfo.MoveTo(String)\n  fullName: DirectoryInfo.MoveTo(String)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Moves a <xref href=\"System.IO.DirectoryInfo\"></xref> instance and its contents to a new path.\n  remarks: \"This method throws an <xref:System.IO.IOException> if, for example, you try to move c:\\\\mydir to c:\\\\public, and c:\\\\public already exists. You must specify \\\"c:\\\\\\\\\\\\public\\\\\\\\\\\\mydir\\\" as the `destDirName` parameter, or specify a new directory name such as \\\"c:\\\\\\\\\\\\newdir\\\".  \\n  \\n This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example demonstrates moving a directory.  \\n  \\n [!code-cpp[directoryinfomoveto#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfomoveto/CPP/directoryinfomoveto.cpp#1)]\\n [!code-csharp[directoryinfomoveto#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfomoveto/CS/directoryinfomoveto.cs#1)]\\n [!code-vb[directoryinfomoveto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfomoveto/VB/directoryinfomoveto.vb#1)]\"\n  syntax:\n    content: public void MoveTo (string destDirName);\n    parameters:\n    - id: destDirName\n      type: System.String\n      description: The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.\n  overload: System.IO.DirectoryInfo.MoveTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destDirName</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>destDirName</code> is an empty string (''\").\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An attempt was made to move a directory to a different volume.  \\n  \\n -or-  \\n  \\n <code>destDirName</code> already exists.  \\n  \\n -or-  \\n  \\n You are not authorized to access this path.  \\n  \\n -or-  \\n  \\n The directory being moved and the destination directory have the same name.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The destination directory cannot be found.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.Name\n  commentId: P:System.IO.DirectoryInfo.Name\n  id: Name\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Name\n  nameWithType: DirectoryInfo.Name\n  fullName: DirectoryInfo.Name\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Gets the name of this <xref href=\"System.IO.DirectoryInfo\"></xref> instance.\n  remarks: \"This <xref:System.IO.DirectoryInfo.Name%2A> property returns only the name of the directory, such as \\\"Bin\\\". To get the full path, such as \\\"c:\\\\public\\\\Bin\\\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property.  \\n  \\n The <xref:System.IO.DirectoryInfo.Name%2A> property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name. If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example displays the name of the current `DirectoryInfo` instance only.  \\n  \\n [!code-cpp[Classic DirectoryInfo.Name Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DirectoryInfo.Name Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic DirectoryInfo.Name Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DirectoryInfo.Name Example/CS/source.cs#1)]\\n [!code-vb[Classic DirectoryInfo.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DirectoryInfo.Name Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: The directory name.\n  overload: System.IO.DirectoryInfo.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.Parent\n  commentId: P:System.IO.DirectoryInfo.Parent\n  id: Parent\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Parent\n  nameWithType: DirectoryInfo.Parent\n  fullName: DirectoryInfo.Parent\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Gets the parent directory of a specified subdirectory.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\n  example:\n  - \"The following example demonstrates referring to the parent directory of a specified directory.  \\n  \\n [!code-cpp[directoryinfoparent#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfoparent/CPP/directoryinfoparent.cpp#1)]\\n [!code-csharp[directoryinfoparent#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfoparent/CS/directoryinfoparent.cs#1)]\\n [!code-vb[directoryinfoparent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfoparent/VB/directoryinfoparent.vb#1)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo Parent { get; }\n    return:\n      type: System.IO.DirectoryInfo\n      description: The parent directory, or `null` if the path is null or if the file path denotes a root (such as \"\\\\\", \"C:\", or * \"\\\\\\server\\share\").\n  overload: System.IO.DirectoryInfo.Parent*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.Root\n  commentId: P:System.IO.DirectoryInfo.Root\n  id: Root\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Root\n  nameWithType: DirectoryInfo.Root\n  fullName: DirectoryInfo.Root\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Gets the root portion of the directory.\n  remarks: ''\n  example:\n  - \"The following example displays root locations for specified directories.  \\n  \\n [!code-csharp[directoryinforoot#2](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinforoot/CS/directoryinforoot2.cs#2)]\\n [!code-vb[directoryinforoot#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinforoot/VB/directoryinforoot2.vb#2)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo Root { get; }\n    return:\n      type: System.IO.DirectoryInfo\n      description: An object that represents the root of the directory.\n  overload: System.IO.DirectoryInfo.Root*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)\n  commentId: M:System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)\n  id: SetAccessControl(System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: SetAccessControl(DirectorySecurity)\n  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)\n  fullName: DirectoryInfo.SetAccessControl(DirectorySecurity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Applies access control list (ACL) entries described by a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object to the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object.\n  remarks: \"An access control list (ACL) describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).  \\n  \\n The <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method applies ACL entries to a file that represents the noninherited ACL list.  \\n  \\n> [!CAUTION]\\n>  The ACL specified for `directorySecurity` replaces the existing ACL for the directory. To add permissions for a new user, use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to obtain the existing ACL, and modify it.  \\n  \\n The <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method persists only <xref:System.Security.AccessControl.DirectorySecurity> objects that have been modified after object creation.  If a <xref:System.Security.AccessControl.DirectorySecurity> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.DirectorySecurity> object from one file and reapply the same object to another file.  \\n  \\n To copy ACL information from one file to another:  \\n  \\n1.  Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the <xref:System.Security.AccessControl.DirectorySecurity> object from the source file.  \\n  \\n2.  Create a new <xref:System.Security.AccessControl.DirectorySecurity> object for the destination file.  \\n  \\n3.  Use the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method of the source <xref:System.Security.AccessControl.DirectorySecurity> object to retrieve the ACL information.  \\n  \\n4.  Use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to copy the information retrieved in step 3 to the destination <xref:System.Security.AccessControl.DirectorySecurity> object.  \\n  \\n5.  Set the destination <xref:System.Security.AccessControl.DirectorySecurity> object to the destination file using the <xref:System.IO.DirectoryInfo.SetAccessControl%2A> method.\"\n  example:\n  - \"The following example uses the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> and <xref:System.IO.DirectoryInfo.SetAccessControl%2A> methods to add and then remove an access control list (ACL) entry from a directory.  \\n  \\n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]\\n [!code-csharp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]\\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]\"\n  syntax:\n    content: public void SetAccessControl (System.Security.AccessControl.DirectorySecurity directorySecurity);\n    parameters:\n    - id: directorySecurity\n      type: System.Security.AccessControl.DirectorySecurity\n      description: An object that describes an ACL entry to apply to the directory described by the <code>path</code> parameter.\n  overload: System.IO.DirectoryInfo.SetAccessControl*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>directorySecurity</code> parameter is `null`.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The file could not be found or modified.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The current process does not have access to open the file.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.DirectoryInfo.ToString\n  commentId: M:System.IO.DirectoryInfo.ToString\n  id: ToString\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: DirectoryInfo.ToString()\n  fullName: DirectoryInfo.ToString()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns the original path that was passed by the user.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Returns the original path that was passed by the user.\n  overload: System.IO.DirectoryInfo.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.IO.FileSystemInfo\n  parent: System.IO\n  isExternal: false\n  name: FileSystemInfo\n  nameWithType: FileSystemInfo\n  fullName: System.IO.FileSystemInfo\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.IO.PathTooLongException\n  parent: System.IO\n  isExternal: false\n  name: PathTooLongException\n  nameWithType: PathTooLongException\n  fullName: System.IO.PathTooLongException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n- uid: System.IO.DirectoryNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: DirectoryNotFoundException\n  nameWithType: DirectoryNotFoundException\n  fullName: System.IO.DirectoryNotFoundException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.IO.DirectoryInfo.#ctor(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: DirectoryInfo(String)\n  nameWithType: DirectoryInfo.DirectoryInfo(String)\n  fullName: DirectoryInfo.DirectoryInfo(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.DirectoryInfo.Create\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Create()\n  nameWithType: DirectoryInfo.Create()\n  fullName: DirectoryInfo.Create()\n- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Create(DirectorySecurity)\n  nameWithType: DirectoryInfo.Create(DirectorySecurity)\n  fullName: DirectoryInfo.Create(DirectorySecurity)\n- uid: System.Security.AccessControl.DirectorySecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: DirectorySecurity\n  nameWithType: DirectorySecurity\n  fullName: System.Security.AccessControl.DirectorySecurity\n- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: CreateSubdirectory(String)\n  nameWithType: DirectoryInfo.CreateSubdirectory(String)\n  fullName: DirectoryInfo.CreateSubdirectory(String)\n- uid: System.IO.DirectoryInfo\n  parent: System.IO\n  isExternal: false\n  name: DirectoryInfo\n  nameWithType: DirectoryInfo\n  fullName: System.IO.DirectoryInfo\n- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: CreateSubdirectory(String, DirectorySecurity)\n  nameWithType: DirectoryInfo.CreateSubdirectory(String, DirectorySecurity)\n  fullName: DirectoryInfo.CreateSubdirectory(String, DirectorySecurity)\n- uid: System.IO.DirectoryInfo.Delete\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Delete()\n  nameWithType: DirectoryInfo.Delete()\n  fullName: DirectoryInfo.Delete()\n- uid: System.IO.DirectoryInfo.Delete(System.Boolean)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Delete(Boolean)\n  nameWithType: DirectoryInfo.Delete(Boolean)\n  fullName: DirectoryInfo.Delete(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateDirectories(String, SearchOption)\n  nameWithType: DirectoryInfo.EnumerateDirectories(String, SearchOption)\n  fullName: DirectoryInfo.EnumerateDirectories(String, SearchOption)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<DirectoryInfo>\n  nameWithType: IEnumerable<DirectoryInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.DirectoryInfo\n    name: DirectoryInfo\n    nameWithType: DirectoryInfo\n    fullName: System.IO.DirectoryInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.SearchOption\n  parent: System.IO\n  isExternal: false\n  name: SearchOption\n  nameWithType: SearchOption\n  fullName: System.IO.SearchOption\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateDirectories(String)\n  nameWithType: DirectoryInfo.EnumerateDirectories(String)\n  fullName: DirectoryInfo.EnumerateDirectories(String)\n- uid: System.IO.DirectoryInfo.EnumerateDirectories\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateDirectories()\n  nameWithType: DirectoryInfo.EnumerateDirectories()\n  fullName: DirectoryInfo.EnumerateDirectories()\n- uid: System.IO.DirectoryInfo.EnumerateFiles\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFiles()\n  nameWithType: DirectoryInfo.EnumerateFiles()\n  fullName: DirectoryInfo.EnumerateFiles()\n- uid: System.IO.FileInfo\n  name: FileInfo\n  nameWithType: FileInfo\n  fullName: System.IO.FileInfo\n- uid: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<FileInfo>\n  nameWithType: IEnumerable<FileInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.FileInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.FileInfo\n    name: FileInfo\n    nameWithType: FileInfo\n    fullName: System.IO.FileInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFiles(String)\n  nameWithType: DirectoryInfo.EnumerateFiles(String)\n  fullName: DirectoryInfo.EnumerateFiles(String)\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFiles(String, SearchOption)\n  nameWithType: DirectoryInfo.EnumerateFiles(String, SearchOption)\n  fullName: DirectoryInfo.EnumerateFiles(String, SearchOption)\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFileSystemInfos()\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()\n  fullName: DirectoryInfo.EnumerateFileSystemInfos()\n- uid: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<FileSystemInfo>\n  nameWithType: IEnumerable<FileSystemInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.FileSystemInfo\n    name: FileSystemInfo\n    nameWithType: FileSystemInfo\n    fullName: System.IO.FileSystemInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFileSystemInfos(String)\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)\n  fullName: DirectoryInfo.EnumerateFileSystemInfos(String)\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFileSystemInfos(String, SearchOption)\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String, SearchOption)\n  fullName: DirectoryInfo.EnumerateFileSystemInfos(String, SearchOption)\n- uid: System.IO.DirectoryInfo.Exists\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Exists\n  nameWithType: DirectoryInfo.Exists\n  fullName: DirectoryInfo.Exists\n- uid: System.IO.DirectoryInfo.FullName\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: FullName\n  nameWithType: DirectoryInfo.FullName\n  fullName: DirectoryInfo.FullName\n- uid: System.IO.DirectoryInfo.GetAccessControl\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetAccessControl()\n  nameWithType: DirectoryInfo.GetAccessControl()\n  fullName: DirectoryInfo.GetAccessControl()\n- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetAccessControl(AccessControlSections)\n  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)\n  fullName: DirectoryInfo.GetAccessControl(AccessControlSections)\n- uid: System.Security.AccessControl.AccessControlSections\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlSections\n  nameWithType: AccessControlSections\n  fullName: System.Security.AccessControl.AccessControlSections\n- uid: System.IO.DirectoryInfo.GetDirectories\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetDirectories()\n  nameWithType: DirectoryInfo.GetDirectories()\n  fullName: DirectoryInfo.GetDirectories()\n- uid: System.IO.DirectoryInfo[]\n  parent: System.IO\n  isExternal: false\n  name: DirectoryInfo[]\n  nameWithType: DirectoryInfo[]\n  fullName: System.IO.DirectoryInfo[]\n  spec.csharp:\n  - uid: System.IO.DirectoryInfo\n    name: DirectoryInfo\n    nameWithType: DirectoryInfo\n    fullName: System.IO.DirectoryInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetDirectories(String)\n  nameWithType: DirectoryInfo.GetDirectories(String)\n  fullName: DirectoryInfo.GetDirectories(String)\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetDirectories(String, SearchOption)\n  nameWithType: DirectoryInfo.GetDirectories(String, SearchOption)\n  fullName: DirectoryInfo.GetDirectories(String, SearchOption)\n- uid: System.IO.DirectoryInfo.GetFiles\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFiles()\n  nameWithType: DirectoryInfo.GetFiles()\n  fullName: DirectoryInfo.GetFiles()\n- uid: System.IO.FileInfo[]\n  parent: System.IO\n  isExternal: false\n  name: FileInfo[]\n  nameWithType: FileInfo[]\n  fullName: System.IO.FileInfo[]\n  spec.csharp:\n  - uid: System.IO.FileInfo\n    name: FileInfo\n    nameWithType: FileInfo\n    fullName: System.IO.FileInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.DirectoryInfo.GetFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFiles(String)\n  nameWithType: DirectoryInfo.GetFiles(String)\n  fullName: DirectoryInfo.GetFiles(String)\n- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFiles(String, SearchOption)\n  nameWithType: DirectoryInfo.GetFiles(String, SearchOption)\n  fullName: DirectoryInfo.GetFiles(String, SearchOption)\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFileSystemInfos(String, SearchOption)\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String, SearchOption)\n  fullName: DirectoryInfo.GetFileSystemInfos(String, SearchOption)\n- uid: System.IO.FileSystemInfo[]\n  parent: System.IO\n  isExternal: false\n  name: FileSystemInfo[]\n  nameWithType: FileSystemInfo[]\n  fullName: System.IO.FileSystemInfo[]\n  spec.csharp:\n  - uid: System.IO.FileSystemInfo\n    name: FileSystemInfo\n    nameWithType: FileSystemInfo\n    fullName: System.IO.FileSystemInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFileSystemInfos()\n  nameWithType: DirectoryInfo.GetFileSystemInfos()\n  fullName: DirectoryInfo.GetFileSystemInfos()\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFileSystemInfos(String)\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String)\n  fullName: DirectoryInfo.GetFileSystemInfos(String)\n- uid: System.IO.DirectoryInfo.MoveTo(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: MoveTo(String)\n  nameWithType: DirectoryInfo.MoveTo(String)\n  fullName: DirectoryInfo.MoveTo(String)\n- uid: System.IO.DirectoryInfo.Name\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Name\n  nameWithType: DirectoryInfo.Name\n  fullName: DirectoryInfo.Name\n- uid: System.IO.DirectoryInfo.Parent\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Parent\n  nameWithType: DirectoryInfo.Parent\n  fullName: DirectoryInfo.Parent\n- uid: System.IO.DirectoryInfo.Root\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Root\n  nameWithType: DirectoryInfo.Root\n  fullName: DirectoryInfo.Root\n- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: SetAccessControl(DirectorySecurity)\n  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)\n  fullName: DirectoryInfo.SetAccessControl(DirectorySecurity)\n- uid: System.IO.DirectoryInfo.ToString\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: ToString()\n  nameWithType: DirectoryInfo.ToString()\n  fullName: DirectoryInfo.ToString()\n- uid: System.IO.DirectoryInfo.GetAccessControl*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetAccessControl\n  nameWithType: DirectoryInfo.GetAccessControl\n  fullName: DirectoryInfo.GetAccessControl\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.#ctor*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: DirectoryInfo\n  nameWithType: DirectoryInfo.DirectoryInfo\n  fullName: DirectoryInfo.DirectoryInfo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.Create*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Create\n  nameWithType: DirectoryInfo.Create\n  fullName: DirectoryInfo.Create\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.CreateSubdirectory*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: CreateSubdirectory\n  nameWithType: DirectoryInfo.CreateSubdirectory\n  fullName: DirectoryInfo.CreateSubdirectory\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.Delete*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Delete\n  nameWithType: DirectoryInfo.Delete\n  fullName: DirectoryInfo.Delete\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.EnumerateDirectories*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateDirectories\n  nameWithType: DirectoryInfo.EnumerateDirectories\n  fullName: DirectoryInfo.EnumerateDirectories\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.EnumerateFiles*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFiles\n  nameWithType: DirectoryInfo.EnumerateFiles\n  fullName: DirectoryInfo.EnumerateFiles\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFileSystemInfos\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos\n  fullName: DirectoryInfo.EnumerateFileSystemInfos\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.Exists*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Exists\n  nameWithType: DirectoryInfo.Exists\n  fullName: DirectoryInfo.Exists\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.FullName*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: FullName\n  nameWithType: DirectoryInfo.FullName\n  fullName: DirectoryInfo.FullName\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.GetDirectories*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetDirectories\n  nameWithType: DirectoryInfo.GetDirectories\n  fullName: DirectoryInfo.GetDirectories\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.GetFiles*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFiles\n  nameWithType: DirectoryInfo.GetFiles\n  fullName: DirectoryInfo.GetFiles\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFileSystemInfos\n  nameWithType: DirectoryInfo.GetFileSystemInfos\n  fullName: DirectoryInfo.GetFileSystemInfos\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.MoveTo*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: MoveTo\n  nameWithType: DirectoryInfo.MoveTo\n  fullName: DirectoryInfo.MoveTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.Name*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Name\n  nameWithType: DirectoryInfo.Name\n  fullName: DirectoryInfo.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.Parent*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Parent\n  nameWithType: DirectoryInfo.Parent\n  fullName: DirectoryInfo.Parent\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.Root*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Root\n  nameWithType: DirectoryInfo.Root\n  fullName: DirectoryInfo.Root\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.SetAccessControl*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: SetAccessControl\n  nameWithType: DirectoryInfo.SetAccessControl\n  fullName: DirectoryInfo.SetAccessControl\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.IO.DirectoryInfo.ToString*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: ToString\n  nameWithType: DirectoryInfo.ToString\n  fullName: DirectoryInfo.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/DirectoryInfo.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.IO.FileSystemInfo.Attributes\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: FileSystemInfo.Attributes\n  fullName: FileSystemInfo.Attributes\n- uid: System.IO.FileSystemInfo.CreationTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTime\n  nameWithType: FileSystemInfo.CreationTime\n  fullName: FileSystemInfo.CreationTime\n- uid: System.IO.FileSystemInfo.CreationTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTimeUtc\n  nameWithType: FileSystemInfo.CreationTimeUtc\n  fullName: FileSystemInfo.CreationTimeUtc\n- uid: System.IO.FileSystemInfo.Extension\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Extension\n  nameWithType: FileSystemInfo.Extension\n  fullName: FileSystemInfo.Extension\n- uid: System.IO.FileSystemInfo.FullPath\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FullPath\n  nameWithType: FileSystemInfo.FullPath\n  fullName: FileSystemInfo.FullPath\n- uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: FileSystemInfo.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: FileSystemInfo.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.IO.FileSystemInfo.LastAccessTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTime\n  nameWithType: FileSystemInfo.LastAccessTime\n  fullName: FileSystemInfo.LastAccessTime\n- uid: System.IO.FileSystemInfo.LastAccessTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTimeUtc\n  nameWithType: FileSystemInfo.LastAccessTimeUtc\n  fullName: FileSystemInfo.LastAccessTimeUtc\n- uid: System.IO.FileSystemInfo.LastWriteTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTime\n  nameWithType: FileSystemInfo.LastWriteTime\n  fullName: FileSystemInfo.LastWriteTime\n- uid: System.IO.FileSystemInfo.LastWriteTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTimeUtc\n  nameWithType: FileSystemInfo.LastWriteTimeUtc\n  fullName: FileSystemInfo.LastWriteTimeUtc\n- uid: System.IO.FileSystemInfo.OriginalPath\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: OriginalPath\n  nameWithType: FileSystemInfo.OriginalPath\n  fullName: FileSystemInfo.OriginalPath\n- uid: System.IO.FileSystemInfo.Refresh\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Refresh()\n  nameWithType: FileSystemInfo.Refresh()\n  fullName: FileSystemInfo.Refresh()\n- uid: System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.DirectoryInfo)\n  parent: System.IO.FileSystemAclExtensions\n  isExternal: false\n  name: GetAccessControl(DirectoryInfo)\n  nameWithType: FileSystemAclExtensions.GetAccessControl(DirectoryInfo)\n  fullName: FileSystemAclExtensions.GetAccessControl(DirectoryInfo)\n- uid: System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.DirectoryInfo,System.Security.AccessControl.AccessControlSections)\n  parent: System.IO.FileSystemAclExtensions\n  isExternal: false\n  name: GetAccessControl(DirectoryInfo, AccessControlSections)\n  nameWithType: FileSystemAclExtensions.GetAccessControl(DirectoryInfo, AccessControlSections)\n  fullName: FileSystemAclExtensions.GetAccessControl(DirectoryInfo, AccessControlSections)\n- uid: System.IO.FileSystemAclExtensions.SetAccessControl(System.IO.DirectoryInfo,System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.FileSystemAclExtensions\n  isExternal: false\n  name: SetAccessControl(DirectoryInfo, DirectorySecurity)\n  nameWithType: FileSystemAclExtensions.SetAccessControl(DirectoryInfo, DirectorySecurity)\n  fullName: FileSystemAclExtensions.SetAccessControl(DirectoryInfo, DirectorySecurity)\n"}