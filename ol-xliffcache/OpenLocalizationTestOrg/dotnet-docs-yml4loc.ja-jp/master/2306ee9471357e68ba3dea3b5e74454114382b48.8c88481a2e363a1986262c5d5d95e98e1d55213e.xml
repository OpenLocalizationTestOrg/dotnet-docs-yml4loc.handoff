{"nodes":[{"content":"Specifies a property of the associated class that provides the XAML namescope value.","nodes":[{"pos":[0,84],"content":"Specifies a property of the associated class that provides the XAML namescope value.","nodes":[{"content":"Specifies a property of the associated class that provides the XAML namescope value.","pos":[0,84]}]}],"pos":[726,811],"yaml":true},{"content":"In a typical object model / application model combination where XAML is used, the classes that are used as a XAML namescope are the classes that are generally used as root elements, or that support a page metaphor. These classes generally implement <xref:System.Windows.Markup.INameScope> and the XAML namescope is created corresponding to the root by typical XAML processing behavior in context of a framework's programming model and application model.  \n  \n If <xref:System.Windows.Markup.NameScopePropertyAttribute> is used, the XAML namescope property value is expected to be an object that implements <xref:System.Windows.Markup.INameScope> and holds the actual XAML namescope and its behavior.  \n  \n There are two forms for this attribute: property name only, or type and property. The latter form should be used only for cases where the property that holds the XAML name scope is an attachable member. The attached member technique has the advantage that service classes can implement a XAML namescope concept that can support several different object types. Those object types then do not need to be explicitly related in class inheritance.  \n  \n In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.NameScopePropertyAttribute> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  \n  \n## WPF Usage Notes  \n In WPF, this attribute is applied to only a single type, <xref:System.Windows.DependencyObject>. In this case the attributed property is the service class <xref:System.Windows.NameScope> and its <xref:System.Windows.NameScope.NameScope%2A?displayProperty=fullName>attached property.","nodes":[{"pos":[0,453],"content":"In a typical object model / application model combination where XAML is used, the classes that are used as a XAML namescope are the classes that are generally used as root elements, or that support a page metaphor. These classes generally implement <xref:System.Windows.Markup.INameScope> and the XAML namescope is created corresponding to the root by typical XAML processing behavior in context of a framework's programming model and application model.","nodes":[{"content":"In a typical object model / application model combination where XAML is used, the classes that are used as a XAML namescope are the classes that are generally used as root elements, or that support a page metaphor. These classes generally implement <xref:System.Windows.Markup.INameScope> and the XAML namescope is created corresponding to the root by typical XAML processing behavior in context of a framework's programming model and application model.","pos":[0,453],"nodes":[{"content":"In a typical object model / application model combination where XAML is used, the classes that are used as a XAML namescope are the classes that are generally used as root elements, or that support a page metaphor.","pos":[0,214]},{"content":"These classes generally implement <ph id=\"ph1\">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> and the XAML namescope is created corresponding to the root by typical XAML processing behavior in context of a framework's programming model and application model.","pos":[215,453],"source":" These classes generally implement <xref:System.Windows.Markup.INameScope> and the XAML namescope is created corresponding to the root by typical XAML processing behavior in context of a framework's programming model and application model."}]}]},{"pos":[460,699],"content":"If <xref:System.Windows.Markup.NameScopePropertyAttribute> is used, the XAML namescope property value is expected to be an object that implements <xref:System.Windows.Markup.INameScope> and holds the actual XAML namescope and its behavior.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute&gt;</ph> is used, the XAML namescope property value is expected to be an object that implements <ph id=\"ph2\">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> and holds the actual XAML namescope and its behavior.","pos":[0,239],"source":"If <xref:System.Windows.Markup.NameScopePropertyAttribute> is used, the XAML namescope property value is expected to be an object that implements <xref:System.Windows.Markup.INameScope> and holds the actual XAML namescope and its behavior."}]},{"pos":[706,1148],"content":"There are two forms for this attribute: property name only, or type and property. The latter form should be used only for cases where the property that holds the XAML name scope is an attachable member. The attached member technique has the advantage that service classes can implement a XAML namescope concept that can support several different object types. Those object types then do not need to be explicitly related in class inheritance.","nodes":[{"content":"There are two forms for this attribute: property name only, or type and property. The latter form should be used only for cases where the property that holds the XAML name scope is an attachable member. The attached member technique has the advantage that service classes can implement a XAML namescope concept that can support several different object types. Those object types then do not need to be explicitly related in class inheritance.","pos":[0,442],"nodes":[{"content":"There are two forms for this attribute: property name only, or type and property.","pos":[0,81]},{"content":"The latter form should be used only for cases where the property that holds the XAML name scope is an attachable member.","pos":[82,202]},{"content":"The attached member technique has the advantage that service classes can implement a XAML namescope concept that can support several different object types.","pos":[203,359]},{"content":"Those object types then do not need to be explicitly related in class inheritance.","pos":[360,442]}]}]},{"pos":[1155,1549],"content":"In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.NameScopePropertyAttribute> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).","nodes":[{"content":"In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.","pos":[0,104]},{"content":"In <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute&gt;</ph> is in the System.Xaml assembly.","pos":[105,252],"source":" In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.NameScopePropertyAttribute> is in the System.Xaml assembly."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Types Migrated from WPF to System.Xaml<ept id=\"p1\">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.","pos":[253,394],"source":" For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)."}]},{"pos":[1558,1573],"content":"WPF Usage Notes","linkify":"WPF Usage Notes","nodes":[{"content":"WPF Usage Notes","pos":[0,15]}]},{"pos":[1577,1859],"content":"In WPF, this attribute is applied to only a single type, <xref:System.Windows.DependencyObject>. In this case the attributed property is the service class <xref:System.Windows.NameScope> and its <xref:System.Windows.NameScope.NameScope%2A?displayProperty=fullName>attached property.","nodes":[{"content":"In WPF, this attribute is applied to only a single type, <xref:System.Windows.DependencyObject>. In this case the attributed property is the service class <xref:System.Windows.NameScope> and its <xref:System.Windows.NameScope.NameScope%2A?displayProperty=fullName>attached property.","pos":[0,282],"nodes":[{"content":"In WPF, this attribute is applied to only a single type, <ph id=\"ph1\">&lt;xref:System.Windows.DependencyObject&gt;</ph>.","pos":[0,96],"source":"In WPF, this attribute is applied to only a single type, <xref:System.Windows.DependencyObject>."},{"content":"In this case the attributed property is the service class <ph id=\"ph1\">&lt;xref:System.Windows.NameScope&gt;</ph> and its <ph id=\"ph2\">&lt;xref:System.Windows.NameScope.NameScope%2A?displayProperty=fullName&gt;</ph>attached property.","pos":[97,282],"source":" In this case the attributed property is the service class <xref:System.Windows.NameScope> and its <xref:System.Windows.NameScope.NameScope%2A?displayProperty=fullName>attached property."}]}]}],"pos":[822,2693],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Markup.NameScopePropertyAttribute\"></xref> class with the specified name.","nodes":[{"pos":[0,134],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.NameScopePropertyAttribute\"&gt;&lt;/xref&gt;</ph> class with the specified name.","source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.NameScopePropertyAttribute\"></xref> class with the specified name."}],"pos":[7714,7849],"yaml":true},{"content":"The name of the property on the attributed type that provides the XAML namescope.","nodes":[{"pos":[0,81],"content":"The name of the property on the attributed type that provides the XAML namescope.","nodes":[{"content":"The name of the property on the attributed type that provides the XAML namescope.","pos":[0,81]}]}],"pos":[7997,8079],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Markup.NameScopePropertyAttribute\"></xref> class with the specified name and type.","nodes":[{"pos":[0,143],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.NameScopePropertyAttribute\"&gt;&lt;/xref&gt;</ph> class with the specified name and type.","source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.NameScopePropertyAttribute\"></xref> class with the specified name and type."}],"pos":[9283,9427],"yaml":true},{"content":"The name of the attachable member that provides the XAML name scope.","nodes":[{"pos":[0,68],"content":"The name of the attachable member that provides the XAML name scope.","nodes":[{"content":"The name of the attachable member that provides the XAML name scope.","pos":[0,68]}]}],"pos":[9586,9655],"yaml":true},{"content":"The owner type of the attachable member that provides the XAML name scope.","nodes":[{"pos":[0,74],"content":"The owner type of the attachable member that provides the XAML name scope.","nodes":[{"content":"The owner type of the attachable member that provides the XAML name scope.","pos":[0,74]}]}],"pos":[9713,9788],"yaml":true},{"content":"Gets the name of the property that provides the XAML namescope.","nodes":[{"pos":[0,63],"content":"Gets the name of the property that provides the XAML namescope.","nodes":[{"content":"Gets the name of the property that provides the XAML namescope.","pos":[0,63]}]}],"pos":[10795,10859],"yaml":true},{"content":"The meaning of <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> depends on whether <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is set. If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is null, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the type being attributed. If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> contains a value, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the indicated <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A>.","nodes":[{"pos":[0,624],"content":"The meaning of <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> depends on whether <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is set. If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is null, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the type being attributed. If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> contains a value, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the indicated <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A>.","nodes":[{"content":"The meaning of <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> depends on whether <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is set. If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is null, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the type being attributed. If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> contains a value, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the indicated <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A>.","pos":[0,624],"nodes":[{"content":"The meaning of <ph id=\"ph1\">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A&gt;</ph> depends on whether <ph id=\"ph2\">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A&gt;</ph> is set.","pos":[0,169],"source":"The meaning of <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> depends on whether <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is set."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A&gt;</ph> is null, then <ph id=\"ph2\">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A&gt;</ph> references a property on the type being attributed.","pos":[170,366],"source":" If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is null, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the type being attributed."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A&gt;</ph> contains a value, then <ph id=\"ph2\">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A&gt;</ph> references a property on the indicated <ph id=\"ph3\">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A&gt;</ph>.","pos":[367,624],"source":" If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> contains a value, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the indicated <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A>."}]}]}],"pos":[10870,11495],"yaml":true,"extradata":"MT"},{"content":"A string value that is the name of the property that provides the XAML namescope.","nodes":[{"pos":[0,81],"content":"A string value that is the name of the property that provides the XAML namescope.","nodes":[{"content":"A string value that is the name of the property that provides the XAML namescope.","pos":[0,81]}]}],"pos":[11603,11685],"yaml":true},{"content":"Gets the owner type of the attached property that provides the XAML namescope support.","nodes":[{"pos":[0,86],"content":"Gets the owner type of the attached property that provides the XAML namescope support.","nodes":[{"content":"Gets the owner type of the attached property that provides the XAML namescope support.","pos":[0,86]}]}],"pos":[12691,12778],"yaml":true},{"content":"This property only is relevant if the XAML namescope implementing property is an attachable member, in which case this is the attachable member's owner type. Otherwise, this value may be null. If you need general reflection-based logic that reports a namescope property's defining type in all cases, then you can substitute the type where the attribute is applied whenever you encounter `null` for this property.","nodes":[{"pos":[0,412],"content":"This property only is relevant if the XAML namescope implementing property is an attachable member, in which case this is the attachable member's owner type. Otherwise, this value may be null. If you need general reflection-based logic that reports a namescope property's defining type in all cases, then you can substitute the type where the attribute is applied whenever you encounter `null` for this property.","nodes":[{"content":"This property only is relevant if the XAML namescope implementing property is an attachable member, in which case this is the attachable member's owner type.","pos":[0,157]},{"content":"Otherwise, this value may be null.","pos":[158,192]},{"content":"If you need general reflection-based logic that reports a namescope property's defining type in all cases, then you can substitute the type where the attribute is applied whenever you encounter <ph id=\"ph1\">`null`</ph> for this property.","pos":[193,412],"source":" If you need general reflection-based logic that reports a namescope property's defining type in all cases, then you can substitute the type where the attribute is applied whenever you encounter `null` for this property."}]}],"pos":[12789,13202],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> value that is the owner type of the attached property that provides the XAML namescope support, or `null`.","nodes":[{"pos":[0,141],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> value that is the owner type of the attached property that provides the XAML namescope support, or <ph id=\"ph2\">`null`</ph>.","source":"A <xref href=\"System.Type\"></xref> value that is the owner type of the attached property that provides the XAML namescope support, or `null`."}],"pos":[13306,13448],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Markup.NameScopePropertyAttribute\n  commentId: T:System.Windows.Markup.NameScopePropertyAttribute\n  id: NameScopePropertyAttribute\n  children:\n  - System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)\n  - System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)\n  - System.Windows.Markup.NameScopePropertyAttribute.Name\n  - System.Windows.Markup.NameScopePropertyAttribute.Type\n  langs:\n  - csharp\n  name: NameScopePropertyAttribute\n  nameWithType: NameScopePropertyAttribute\n  fullName: System.Windows.Markup.NameScopePropertyAttribute\n  type: Class\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Specifies a property of the associated class that provides the XAML namescope value.\n  remarks: \"In a typical object model / application model combination where XAML is used, the classes that are used as a XAML namescope are the classes that are generally used as root elements, or that support a page metaphor. These classes generally implement <xref:System.Windows.Markup.INameScope> and the XAML namescope is created corresponding to the root by typical XAML processing behavior in context of a framework's programming model and application model.  \\n  \\n If <xref:System.Windows.Markup.NameScopePropertyAttribute> is used, the XAML namescope property value is expected to be an object that implements <xref:System.Windows.Markup.INameScope> and holds the actual XAML namescope and its behavior.  \\n  \\n There are two forms for this attribute: property name only, or type and property. The latter form should be used only for cases where the property that holds the XAML name scope is an attachable member. The attached member technique has the advantage that service classes can implement a XAML namescope concept that can support several different object types. Those object types then do not need to be explicitly related in class inheritance.  \\n  \\n In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.NameScopePropertyAttribute> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  \\n  \\n## WPF Usage Notes  \\n In WPF, this attribute is applied to only a single type, <xref:System.Windows.DependencyObject>. In this case the attributed property is the service class <xref:System.Windows.NameScope> and its <xref:System.Windows.NameScope.NameScope%2A?displayProperty=fullName>attached property.\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)]\n\n      public sealed class NameScopePropertyAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/NameScopePropertyAttribute.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)\n  commentId: M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  langs:\n  - csharp\n  name: NameScopePropertyAttribute(String)\n  nameWithType: NameScopePropertyAttribute.NameScopePropertyAttribute(String)\n  fullName: NameScopePropertyAttribute.NameScopePropertyAttribute(String)\n  type: Constructor\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.NameScopePropertyAttribute\"></xref> class with the specified name.\n  syntax:\n    content: public NameScopePropertyAttribute (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property on the attributed type that provides the XAML namescope.\n  overload: System.Windows.Markup.NameScopePropertyAttribute.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/NameScopePropertyAttribute.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)\n  commentId: M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)\n  id: '#ctor(System.String,System.Type)'\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  langs:\n  - csharp\n  name: NameScopePropertyAttribute(String, Type)\n  nameWithType: NameScopePropertyAttribute.NameScopePropertyAttribute(String, Type)\n  fullName: NameScopePropertyAttribute.NameScopePropertyAttribute(String, Type)\n  type: Constructor\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.NameScopePropertyAttribute\"></xref> class with the specified name and type.\n  syntax:\n    content: public NameScopePropertyAttribute (string name, Type type);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the attachable member that provides the XAML name scope.\n    - id: type\n      type: System.Type\n      description: The owner type of the attachable member that provides the XAML name scope.\n  overload: System.Windows.Markup.NameScopePropertyAttribute.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/NameScopePropertyAttribute.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.NameScopePropertyAttribute.Name\n  commentId: P:System.Windows.Markup.NameScopePropertyAttribute.Name\n  id: Name\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  langs:\n  - csharp\n  name: Name\n  nameWithType: NameScopePropertyAttribute.Name\n  fullName: NameScopePropertyAttribute.Name\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Gets the name of the property that provides the XAML namescope.\n  remarks: The meaning of <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> depends on whether <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is set. If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> is null, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the type being attributed. If <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A> contains a value, then <xref:System.Windows.Markup.NameScopePropertyAttribute.Name%2A> references a property on the indicated <xref:System.Windows.Markup.NameScopePropertyAttribute.Type%2A>.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: A string value that is the name of the property that provides the XAML namescope.\n  overload: System.Windows.Markup.NameScopePropertyAttribute.Name*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/NameScopePropertyAttribute.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.NameScopePropertyAttribute.Type\n  commentId: P:System.Windows.Markup.NameScopePropertyAttribute.Type\n  id: Type\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  langs:\n  - csharp\n  name: Type\n  nameWithType: NameScopePropertyAttribute.Type\n  fullName: NameScopePropertyAttribute.Type\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Gets the owner type of the attached property that provides the XAML namescope support.\n  remarks: This property only is relevant if the XAML namescope implementing property is an attachable member, in which case this is the attachable member's owner type. Otherwise, this value may be null. If you need general reflection-based logic that reports a namescope property's defining type in all cases, then you can substitute the type where the attribute is applied whenever you encounter `null` for this property.\n  syntax:\n    content: public Type Type { get; }\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> value that is the owner type of the attached property that provides the XAML namescope support, or `null`.\n  overload: System.Windows.Markup.NameScopePropertyAttribute.Type*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/NameScopePropertyAttribute.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  isExternal: false\n  name: NameScopePropertyAttribute(String)\n  nameWithType: NameScopePropertyAttribute.NameScopePropertyAttribute(String)\n  fullName: NameScopePropertyAttribute.NameScopePropertyAttribute(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  isExternal: false\n  name: NameScopePropertyAttribute(String, Type)\n  nameWithType: NameScopePropertyAttribute.NameScopePropertyAttribute(String, Type)\n  fullName: NameScopePropertyAttribute.NameScopePropertyAttribute(String, Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.Markup.NameScopePropertyAttribute.Name\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  isExternal: false\n  name: Name\n  nameWithType: NameScopePropertyAttribute.Name\n  fullName: NameScopePropertyAttribute.Name\n- uid: System.Windows.Markup.NameScopePropertyAttribute.Type\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  isExternal: false\n  name: Type\n  nameWithType: NameScopePropertyAttribute.Type\n  fullName: NameScopePropertyAttribute.Type\n- uid: System.Windows.Markup.NameScopePropertyAttribute.#ctor*\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  isExternal: false\n  name: NameScopePropertyAttribute\n  nameWithType: NameScopePropertyAttribute.NameScopePropertyAttribute\n  fullName: NameScopePropertyAttribute.NameScopePropertyAttribute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/NameScopePropertyAttribute.xml\n- uid: System.Windows.Markup.NameScopePropertyAttribute.Name*\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  isExternal: false\n  name: Name\n  nameWithType: NameScopePropertyAttribute.Name\n  fullName: NameScopePropertyAttribute.Name\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/NameScopePropertyAttribute.xml\n- uid: System.Windows.Markup.NameScopePropertyAttribute.Type*\n  parent: System.Windows.Markup.NameScopePropertyAttribute\n  isExternal: false\n  name: Type\n  nameWithType: NameScopePropertyAttribute.Type\n  fullName: NameScopePropertyAttribute.Type\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/NameScopePropertyAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}