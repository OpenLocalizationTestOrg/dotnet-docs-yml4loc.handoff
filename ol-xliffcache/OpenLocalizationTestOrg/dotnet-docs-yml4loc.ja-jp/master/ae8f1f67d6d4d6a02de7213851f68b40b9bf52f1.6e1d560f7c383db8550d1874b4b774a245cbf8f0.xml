{"nodes":[{"content":"Provides a systematic way to manage event handlers for the current document.","nodes":[{"pos":[0,76],"content":"Provides a systematic way to manage event handlers for the current document.","nodes":[{"content":"Provides a systematic way to manage event handlers for the current document.","pos":[0,76]}]}],"pos":[891,968],"yaml":true},{"content":"Developers may want to be able to write code in one place that handles events of a certain type.  \n  \n Also, developers may need to globally change the behavior of the handlers for specific events or types of events, which may be distributed among designer components.  \n  \n The designers for a typical project are many different objects so it can be useful to list and store reference to these events from a common place.  \n  \n This service implements an \"event stack\" that contains the current set of event handlers. The stack may have a variety of different types of handlers on the stack.  \n  \n For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack. When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.  \n  \n This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced. For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.","nodes":[{"pos":[0,96],"content":"Developers may want to be able to write code in one place that handles events of a certain type.","nodes":[{"content":"Developers may want to be able to write code in one place that handles events of a certain type.","pos":[0,96]}]},{"pos":[103,268],"content":"Also, developers may need to globally change the behavior of the handlers for specific events or types of events, which may be distributed among designer components.","nodes":[{"content":"Also, developers may need to globally change the behavior of the handlers for specific events or types of events, which may be distributed among designer components.","pos":[0,165]}]},{"pos":[275,422],"content":"The designers for a typical project are many different objects so it can be useful to list and store reference to these events from a common place.","nodes":[{"content":"The designers for a typical project are many different objects so it can be useful to list and store reference to these events from a common place.","pos":[0,147]}]},{"pos":[429,592],"content":"This service implements an \"event stack\" that contains the current set of event handlers. The stack may have a variety of different types of handlers on the stack.","nodes":[{"content":"This service implements an \"event stack\" that contains the current set of event handlers. The stack may have a variety of different types of handlers on the stack.","pos":[0,163],"nodes":[{"content":"This service implements an \"event stack\" that contains the current set of event handlers.","pos":[0,89]},{"content":"The stack may have a variety of different types of handlers on the stack.","pos":[90,163]}]}]},{"pos":[599,833],"content":"For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack. When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.","nodes":[{"content":"For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack. When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.","pos":[0,234],"nodes":[{"content":"For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack.","pos":[0,98]},{"content":"When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.","pos":[99,234]}]}]},{"pos":[840,1084],"content":"This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced. For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.","nodes":[{"content":"This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced. For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.","pos":[0,244],"nodes":[{"content":"This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced.","pos":[0,128]},{"content":"For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.","pos":[129,244]}]}]}],"pos":[979,2078],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Forms.Design.EventHandlerService\"></xref> class.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.Design.EventHandlerService\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.Design.EventHandlerService\"></xref> class."}],"pos":[3611,3721],"yaml":true},{"content":"The <xref href=\"System.Windows.Forms.Control\"></xref> which is being designed.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.Control\"&gt;&lt;/xref&gt;</ph> which is being designed.","source":"The <xref href=\"System.Windows.Forms.Control\"></xref> which is being designed."}],"pos":[3907,3986],"yaml":true},{"content":"Fires an OnEventHandlerChanged event.","nodes":[{"pos":[0,37],"content":"Fires an OnEventHandlerChanged event.","nodes":[{"content":"Fires an OnEventHandlerChanged event.","pos":[0,37]}]}],"pos":[5113,5151],"yaml":true},{"content":"Gets the control to which event handlers are attached.","nodes":[{"pos":[0,54],"content":"Gets the control to which event handlers are attached.","nodes":[{"content":"Gets the control to which event handlers are attached.","pos":[0,54]}]}],"pos":[6280,6335],"yaml":true},{"content":"The <xref href=\"System.Windows.Forms.Control\"></xref> which was attached through the constructor.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.Control\"&gt;&lt;/xref&gt;</ph> which was attached through the constructor.","source":"The <xref href=\"System.Windows.Forms.Control\"></xref> which was attached through the constructor."}],"pos":[6487,6585],"yaml":true},{"content":"Gets the currently active event handler of the specified type.","nodes":[{"pos":[0,62],"content":"Gets the currently active event handler of the specified type.","nodes":[{"content":"Gets the currently active event handler of the specified type.","pos":[0,62]}]}],"pos":[7722,7785],"yaml":true},{"content":"You should never cache this value because other components are free to change it. This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.","nodes":[{"pos":[0,195],"content":"You should never cache this value because other components are free to change it. This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.","nodes":[{"content":"You should never cache this value because other components are free to change it. This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.","pos":[0,195],"nodes":[{"content":"You should never cache this value because other components are free to change it.","pos":[0,81]},{"content":"This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.","pos":[82,195]}]}]}],"pos":[7796,7992],"yaml":true,"extradata":"MT"},{"content":"The type of the handler to get.","nodes":[{"pos":[0,31],"content":"The type of the handler to get.","nodes":[{"content":"The type of the handler to get.","pos":[0,31]}]}],"pos":[8141,8173],"yaml":true},{"content":"An instance of the handler, or `null` if there is no handler of the requested type.","nodes":[{"pos":[0,83],"content":"An instance of the handler, or <ph id=\"ph1\">`null`</ph> if there is no handler of the requested type.","source":"An instance of the handler, or `null` if there is no handler of the requested type."}],"pos":[8230,8314],"yaml":true},{"content":"Pops the given handler off of the stack.","nodes":[{"pos":[0,40],"content":"Pops the given handler off of the stack.","nodes":[{"content":"Pops the given handler off of the stack.","pos":[0,40]}]}],"pos":[9462,9503],"yaml":true},{"content":"If the handler is not the topmost component on the stack, this will pop all handlers up to and including handler.","nodes":[{"pos":[0,113],"content":"If the handler is not the topmost component on the stack, this will pop all handlers up to and including handler.","nodes":[{"content":"If the handler is not the topmost component on the stack, this will pop all handlers up to and including handler.","pos":[0,113]}]}],"pos":[9514,9628],"yaml":true,"extradata":"MT"},{"content":"The handler to remove from the stack.","nodes":[{"pos":[0,37],"content":"The handler to remove from the stack.","nodes":[{"content":"The handler to remove from the stack.","pos":[0,37]}]}],"pos":[9771,9809],"yaml":true},{"content":"Pushes a new event handler on the stack.","nodes":[{"pos":[0,40],"content":"Pushes a new event handler on the stack.","nodes":[{"content":"Pushes a new event handler on the stack.","pos":[0,40]}]}],"pos":[10963,11004],"yaml":true},{"content":"This handler will be used by all components that request a compatible handler type. If this handler does not support the requested type, the next handler on the stack will be used.","nodes":[{"pos":[0,180],"content":"This handler will be used by all components that request a compatible handler type. If this handler does not support the requested type, the next handler on the stack will be used.","nodes":[{"content":"This handler will be used by all components that request a compatible handler type. If this handler does not support the requested type, the next handler on the stack will be used.","pos":[0,180],"nodes":[{"content":"This handler will be used by all components that request a compatible handler type.","pos":[0,83]},{"content":"If this handler does not support the requested type, the next handler on the stack will be used.","pos":[84,180]}]}]}],"pos":[11015,11196],"yaml":true,"extradata":"MT"},{"content":"The handler to add to the stack.","nodes":[{"pos":[0,32],"content":"The handler to add to the stack.","nodes":[{"content":"The handler to add to the stack.","pos":[0,32]}]}],"pos":[11340,11373],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.Design.EventHandlerService\n  commentId: T:System.Windows.Forms.Design.EventHandlerService\n  id: EventHandlerService\n  children:\n  - System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)\n  - System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged\n  - System.Windows.Forms.Design.EventHandlerService.FocusWindow\n  - System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)\n  - System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)\n  - System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)\n  langs:\n  - csharp\n  name: EventHandlerService\n  nameWithType: EventHandlerService\n  fullName: System.Windows.Forms.Design.EventHandlerService\n  type: Class\n  assemblies:\n  - System.Design\n  namespace: System.Windows.Forms.Design\n  summary: Provides a systematic way to manage event handlers for the current document.\n  remarks: \"Developers may want to be able to write code in one place that handles events of a certain type.  \\n  \\n Also, developers may need to globally change the behavior of the handlers for specific events or types of events, which may be distributed among designer components.  \\n  \\n The designers for a typical project are many different objects so it can be useful to list and store reference to these events from a common place.  \\n  \\n This service implements an \\\"event stack\\\" that contains the current set of event handlers. The stack may have a variety of different types of handlers on the stack.  \\n  \\n For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack. When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.  \\n  \\n This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced. For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.\"\n  syntax:\n    content: public sealed class EventHandlerService\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)\n  commentId: M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)\n  id: '#ctor(System.Windows.Forms.Control)'\n  parent: System.Windows.Forms.Design.EventHandlerService\n  langs:\n  - csharp\n  name: EventHandlerService(Control)\n  nameWithType: EventHandlerService.EventHandlerService(Control)\n  fullName: EventHandlerService.EventHandlerService(Control)\n  type: Constructor\n  assemblies:\n  - System.Design\n  namespace: System.Windows.Forms.Design\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.Design.EventHandlerService\"></xref> class.\n  syntax:\n    content: public EventHandlerService (System.Windows.Forms.Control focusWnd);\n    parameters:\n    - id: focusWnd\n      type: System.Windows.Forms.Control\n      description: The <xref href=\"System.Windows.Forms.Control\"></xref> which is being designed.\n  overload: System.Windows.Forms.Design.EventHandlerService.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged\n  commentId: E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged\n  id: EventHandlerChanged\n  parent: System.Windows.Forms.Design.EventHandlerService\n  langs:\n  - csharp\n  name: EventHandlerChanged\n  nameWithType: EventHandlerService.EventHandlerChanged\n  fullName: EventHandlerService.EventHandlerChanged\n  type: Event\n  assemblies:\n  - System.Design\n  namespace: System.Windows.Forms.Design\n  summary: Fires an OnEventHandlerChanged event.\n  syntax:\n    content: public event EventHandler EventHandlerChanged;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n  ms.technology:\n  - dotnet-winforms\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Forms.Design.EventHandlerService.FocusWindow\n  commentId: P:System.Windows.Forms.Design.EventHandlerService.FocusWindow\n  id: FocusWindow\n  parent: System.Windows.Forms.Design.EventHandlerService\n  langs:\n  - csharp\n  name: FocusWindow\n  nameWithType: EventHandlerService.FocusWindow\n  fullName: EventHandlerService.FocusWindow\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.Windows.Forms.Design\n  summary: Gets the control to which event handlers are attached.\n  syntax:\n    content: public System.Windows.Forms.Control FocusWindow { get; }\n    return:\n      type: System.Windows.Forms.Control\n      description: The <xref href=\"System.Windows.Forms.Control\"></xref> which was attached through the constructor.\n  overload: System.Windows.Forms.Design.EventHandlerService.FocusWindow*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)\n  commentId: M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)\n  id: GetHandler(System.Type)\n  parent: System.Windows.Forms.Design.EventHandlerService\n  langs:\n  - csharp\n  name: GetHandler(Type)\n  nameWithType: EventHandlerService.GetHandler(Type)\n  fullName: EventHandlerService.GetHandler(Type)\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.Windows.Forms.Design\n  summary: Gets the currently active event handler of the specified type.\n  remarks: You should never cache this value because other components are free to change it. This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.\n  syntax:\n    content: public object GetHandler (Type handlerType);\n    parameters:\n    - id: handlerType\n      type: System.Type\n      description: The type of the handler to get.\n    return:\n      type: System.Object\n      description: An instance of the handler, or `null` if there is no handler of the requested type.\n  overload: System.Windows.Forms.Design.EventHandlerService.GetHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)\n  commentId: M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)\n  id: PopHandler(System.Object)\n  parent: System.Windows.Forms.Design.EventHandlerService\n  langs:\n  - csharp\n  name: PopHandler(Object)\n  nameWithType: EventHandlerService.PopHandler(Object)\n  fullName: EventHandlerService.PopHandler(Object)\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.Windows.Forms.Design\n  summary: Pops the given handler off of the stack.\n  remarks: If the handler is not the topmost component on the stack, this will pop all handlers up to and including handler.\n  syntax:\n    content: public void PopHandler (object handler);\n    parameters:\n    - id: handler\n      type: System.Object\n      description: The handler to remove from the stack.\n  overload: System.Windows.Forms.Design.EventHandlerService.PopHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)\n  commentId: M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)\n  id: PushHandler(System.Object)\n  parent: System.Windows.Forms.Design.EventHandlerService\n  langs:\n  - csharp\n  name: PushHandler(Object)\n  nameWithType: EventHandlerService.PushHandler(Object)\n  fullName: EventHandlerService.PushHandler(Object)\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.Windows.Forms.Design\n  summary: Pushes a new event handler on the stack.\n  remarks: This handler will be used by all components that request a compatible handler type. If this handler does not support the requested type, the next handler on the stack will be used.\n  syntax:\n    content: public void PushHandler (object handler);\n    parameters:\n    - id: handler\n      type: System.Object\n      description: The handler to add to the stack.\n  overload: System.Windows.Forms.Design.EventHandlerService.PushHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: EventHandlerService(Control)\n  nameWithType: EventHandlerService.EventHandlerService(Control)\n  fullName: EventHandlerService.EventHandlerService(Control)\n- uid: System.Windows.Forms.Control\n  parent: System.Windows.Forms\n  isExternal: false\n  name: Control\n  nameWithType: Control\n  fullName: System.Windows.Forms.Control\n- uid: System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: EventHandlerChanged\n  nameWithType: EventHandlerService.EventHandlerChanged\n  fullName: EventHandlerService.EventHandlerChanged\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Forms.Design.EventHandlerService.FocusWindow\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: FocusWindow\n  nameWithType: EventHandlerService.FocusWindow\n  fullName: EventHandlerService.FocusWindow\n- uid: System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: GetHandler(Type)\n  nameWithType: EventHandlerService.GetHandler(Type)\n  fullName: EventHandlerService.GetHandler(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: PopHandler(Object)\n  nameWithType: EventHandlerService.PopHandler(Object)\n  fullName: EventHandlerService.PopHandler(Object)\n- uid: System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: PushHandler(Object)\n  nameWithType: EventHandlerService.PushHandler(Object)\n  fullName: EventHandlerService.PushHandler(Object)\n- uid: System.Windows.Forms.Design.EventHandlerService.#ctor*\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: EventHandlerService\n  nameWithType: EventHandlerService.EventHandlerService\n  fullName: EventHandlerService.EventHandlerService\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n- uid: System.Windows.Forms.Design.EventHandlerService.FocusWindow*\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: FocusWindow\n  nameWithType: EventHandlerService.FocusWindow\n  fullName: EventHandlerService.FocusWindow\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n- uid: System.Windows.Forms.Design.EventHandlerService.GetHandler*\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: GetHandler\n  nameWithType: EventHandlerService.GetHandler\n  fullName: EventHandlerService.GetHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n- uid: System.Windows.Forms.Design.EventHandlerService.PopHandler*\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: PopHandler\n  nameWithType: EventHandlerService.PopHandler\n  fullName: EventHandlerService.PopHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n- uid: System.Windows.Forms.Design.EventHandlerService.PushHandler*\n  parent: System.Windows.Forms.Design.EventHandlerService\n  isExternal: false\n  name: PushHandler\n  nameWithType: EventHandlerService.PushHandler\n  fullName: EventHandlerService.PushHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms.Design/EventHandlerService.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}