<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca6abaec5f17b22b5a70ce68cf6d08c95bbe6178</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices.ICustomMarshaler.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1245053531879331deef4f06c380bb88eb0b491b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61c28fb017563f8c1615436255374a5b51a7f57b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides custom wrappers for handling method calls.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A marshaler provides a bridge between the functionality of old and new interfaces.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom marshaling provides the following benefits:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables client applications that were designed to work with an old interface to also work with servers that implement a new interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables client applications built to work with a new interface to work with servers that implement an old interface.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have an interface that introduces different marshaling behavior or that is exposed to the Component Object Model (COM) in a different way, you can design a custom marshaler instead of using the interop marshaler.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>By using a custom marshaler, you can minimize the distinction between new .NET Framework components and existing COM components.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose that you are developing a managed interface called <ph id="ph1">`INew`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this interface is exposed to COM through a standard COM callable wrapper (CCW), it has the same methods as the managed interface and uses the marshaling rules built into the interop marshaler.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Now suppose that a well-known COM interface called <ph id="ph1">`IOld`</ph> already provides the same functionality as the <ph id="ph2">`INew`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>By designing a custom marshaler, you can provide an unmanaged implementation of <ph id="ph1">`IOld`</ph> that simply delegates the calls to the managed implementation of the <ph id="ph2">`INew`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the custom marshaler acts as a bridge between the managed and unmanaged interfaces.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom marshalers are not invoked when calling from managed code to unmanaged code on a dispatch-only interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defining the Marshaling Type</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before you can build a custom marshaler, you must define the managed and unmanaged interfaces that will be marshaled.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>These interfaces commonly perform the same function but are exposed differently to managed and unmanaged objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>A managed compiler produces a managed interface from metadata, and the resulting interface looks like any other managed interface.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows a typical interface.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You define the unmanaged type in Interface Definition Language (IDL) and compile it with the Microsoft Interface Definition Language (MIDL) compiler.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You define the interface within a library statement and assign it an interface ID with the universal unique identifier (UUID) attribute, as the following example demonstrates.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MIDL compiler produces several output files.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the interface is defined in Old.idl, the output file Old_i.c defines a <ph id="ph1">`const`</ph> variable with the interface identifier (IID) of the interface, as the following example demonstrates.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Old.h file is also produced by MIDL.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>It contains a C++ definition of the interface that can be included in your C++ source code.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementing the ICustomMarshaler Interface</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your custom marshaler must implement the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler&gt;</ph> interface to provide the appropriate wrappers to the runtime.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code displays the base interface that must be implemented by all custom marshalers.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler&gt;</ph> interface includes methods that provide conversion support, cleanup support, and information about the data to be marshaled.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Type of operation</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>ICustomMarshaler method</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversion (from native to managed code)</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marshals a pointer to native data into a managed object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom RCW for that type.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversion (from managed to native code)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marshals a managed object into a pointer to native data.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom CCW for that type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cleanup (of native code)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enables the marshaler to clean up the native data (the CCW) that is returned by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cleanup (of managed code)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enables the marshaler to clean up the managed data (the RCW) that is returned by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Information (about native code)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Returns the size of the unmanaged data to be marshaled.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversion</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marshals a pointer to native data into a managed object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom RCW for that type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marshals a managed object into a pointer to native data.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom CCW for that type.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cleanup</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enables the marshaler to clean up the native data (the CCW) that is returned by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enables the marshaler to clean up the managed data (the RCW) that is returned by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Size Information</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Returns the size of the unmanaged data to be marshaled.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementing the GetInstance Method</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to implementing the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler&gt;</ph> interface, custom marshalers must implement a <ph id="ph2">`static`</ph> method called <ph id="ph3">`GetInstance`</ph> that accepts a <ph id="ph4">&lt;xref:System.String&gt;</ph> as a parameter and has a return type of <ph id="ph5">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`static`</ph> method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string that is passed to <ph id="ph1">`GetInstance`</ph> is a cookie that the method can use to customize the returned custom marshaler.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applying MarshalAsAttribute</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use a custom marshaler, you must apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute to the parameter or field that is being marshaled.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must also pass the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph> enumeration value to the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph>constructor.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you must specify the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</ph> field with one of the following named parameters:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</ph> (required): The assembly-qualified name of the custom marshaler.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name should include the namespace and class of the custom marshaler.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the custom marshaler is not defined in the assembly it is used in, you must specify the name of the assembly in which it is defined.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</ph> field instead of the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</ph> takes a type that is easier to specify.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt;</ph> (optional): A cookie that is passed to the custom marshaler.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the cookie to provide additional information to the marshaler.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the same marshaler is used to provide a number of wrappers, the cookie identifies a specific wrapper.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cookie is passed to the <ph id="ph1">`GetInstance`</ph> method of the marshaler.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute identifies the custom marshaler so it can activate the appropriate wrapper.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime's interop service then examines the attribute and creates the custom marshaler the first time the argument (parameter or field) needs to be marshaled.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime then calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;</ph> methods on the custom marshaler to activate the correct wrapper to handle the call.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a Custom Marshaler</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the custom marshaler is complete, you can use it as a custom wrapper for a particular type.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows the definition of the <ph id="ph1">`IUserData`</ph> managed interface:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, the <ph id="ph1">`IUserData`</ph> interface uses the <ph id="ph2">`NewOldMarshaler`</ph> custom marshaler to enable unmanaged client applications to pass an <ph id="ph3">`IOld`</ph> interface to the <ph id="ph4">`DoSomeStuff`</ph> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The managed description of the <ph id="ph1">`DoSomeStuff`</ph> method takes an <ph id="ph2">`INew`</ph> interface, as shown in the previous example, whereas the unmanaged version of <ph id="ph3">`DoSomeStuff`</ph> takes an <ph id="ph4">`IOld`</ph> interface pointer, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type library that is generated by exporting the managed definition of <ph id="ph1">`IUserData`</ph> yields the unmanaged definition shown in this example instead of the standard definition.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute applied to the <ph id="ph2">`INew`</ph> argument in the managed definition of the <ph id="ph3">`DoSomeStuff`</ph> method indicates that the argument uses a custom marshaler, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the previous examples, the first parameter provided to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute is the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph> enumeration value <ph id="ph3">`UnmanagedType.CustomMarshaler`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second parameter is the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</ph> field, which provides the assembly-qualified name of the custom marshaler.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>This name consists of the namespace and class of the custom marshaler (<ph id="ph1">`MarshalType="MyCompany.NewOldMarshaler"`</ph>).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the managed data when it is no longer needed.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The managed object to be destroyed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the unmanaged data when it is no longer needed.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be destroyed.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns the size of the native data to be marshaled.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the native data.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Converts the managed data to unmanaged data.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The managed object to be converted.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A pointer to the COM view of the managed object.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Converts the unmanaged data to managed data.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be wrapped.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An object that represents the managed view of the COM data.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>