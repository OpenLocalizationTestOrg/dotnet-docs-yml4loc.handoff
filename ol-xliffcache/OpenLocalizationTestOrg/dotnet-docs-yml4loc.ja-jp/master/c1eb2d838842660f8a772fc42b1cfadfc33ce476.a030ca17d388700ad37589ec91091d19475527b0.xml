{"nodes":[{"content":"Implements an event provider that logs ASP.NET health-monitoring events into the Windows Application Event Log.","nodes":[{"pos":[0,111],"content":"Implements an event provider that logs ASP.NET health-monitoring events into the Windows Application Event Log.","nodes":[{"content":"Implements an event provider that logs ASP.NET health-monitoring events into the Windows Application Event Log.","pos":[0,111]}]}],"pos":[782,894],"yaml":true},{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \n  \n The <xref:System.Web.Management.EventLogWebEventProvider>, the failure audit, and the error health-monitoring events are configured (enabled) by default. This means that the failure audit and the error health-monitoring events are logged in the Windows Application Event Log by default.  \n  \n> [!NOTE]\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom provider, see [How to: Implement the Health Monitoring Custom Provider Example](http://msdn.microsoft.com/library/bbb1c959-e6e4-42b2-be62-49b7ca5ab72c).","nodes":[{"pos":[0,378],"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.","nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.","pos":[0,378],"nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications.","pos":[0,101]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Management&gt;</ph> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data.","pos":[102,294],"source":" The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data."},{"content":"It also contains supporting types that help during the management of health events.","pos":[295,378]}]}]},{"pos":[385,671],"content":"The <xref:System.Web.Management.EventLogWebEventProvider>, the failure audit, and the error health-monitoring events are configured (enabled) by default. This means that the failure audit and the error health-monitoring events are logged in the Windows Application Event Log by default.","nodes":[{"content":"The <xref:System.Web.Management.EventLogWebEventProvider>, the failure audit, and the error health-monitoring events are configured (enabled) by default. This means that the failure audit and the error health-monitoring events are logged in the Windows Application Event Log by default.","pos":[0,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Management.EventLogWebEventProvider&gt;</ph>, the failure audit, and the error health-monitoring events are configured (enabled) by default.","pos":[0,153],"source":"The <xref:System.Web.Management.EventLogWebEventProvider>, the failure audit, and the error health-monitoring events are configured (enabled) by default."},{"content":"This means that the failure audit and the error health-monitoring events are logged in the Windows Application Event Log by default.","pos":[154,286]}]}]},{"pos":[679,1189],"content":"[!NOTE]\n In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom provider, see [How to: Implement the Health Monitoring Custom Provider Example](http://msdn.microsoft.com/library/bbb1c959-e6e4-42b2-be62-49b7ca5ab72c).","leadings":["","> "],"nodes":[{"content":" In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom provider, see [How to: Implement the Health Monitoring Custom Provider Example](http://msdn.microsoft.com/library/bbb1c959-e6e4-42b2-be62-49b7ca5ab72c).","pos":[8,508],"nodes":[{"content":"In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <ph id=\"ph1\">`healthMonitoring`</ph> configuration section.","pos":[1,210],"source":" In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section."},{"content":"You can also derive from the health-monitoring types to create your own custom events and providers.","pos":[211,311]},{"content":"For an example of creating a custom provider, see <bpt id=\"p1\">[</bpt>How to: Implement the Health Monitoring Custom Provider Example<ept id=\"p1\">](http://msdn.microsoft.com/library/bbb1c959-e6e4-42b2-be62-49b7ca5ab72c)</ept>.","pos":[312,500],"source":" For an example of creating a custom provider, see [How to: Implement the Health Monitoring Custom Provider Example](http://msdn.microsoft.com/library/bbb1c959-e6e4-42b2-be62-49b7ca5ab72c)."}]}]}],"pos":[905,2102],"yaml":true,"extradata":"MT"},{"content":"Moves events from the provider's buffer into the event log.","nodes":[{"pos":[0,59],"content":"Moves events from the provider's buffer into the event log.","nodes":[{"content":"Moves events from the provider's buffer into the event log.","pos":[0,59]}]}],"pos":[4464,4524],"yaml":true},{"content":"When this method is called, all the events in the provider's buffer are immediately written to the Windows Application Event Log, regardless of how much time has elapsed since last write or how many events are in the buffer. The time of the last write is reset to the time of the flushing action. If the buffering mechanism is not enabled, calling this method does not have any effect.","nodes":[{"pos":[0,385],"content":"When this method is called, all the events in the provider's buffer are immediately written to the Windows Application Event Log, regardless of how much time has elapsed since last write or how many events are in the buffer. The time of the last write is reset to the time of the flushing action. If the buffering mechanism is not enabled, calling this method does not have any effect.","nodes":[{"content":"When this method is called, all the events in the provider's buffer are immediately written to the Windows Application Event Log, regardless of how much time has elapsed since last write or how many events are in the buffer. The time of the last write is reset to the time of the flushing action. If the buffering mechanism is not enabled, calling this method does not have any effect.","pos":[0,385],"nodes":[{"content":"When this method is called, all the events in the provider's buffer are immediately written to the Windows Application Event Log, regardless of how much time has elapsed since last write or how many events are in the buffer.","pos":[0,224]},{"content":"The time of the last write is reset to the time of the flushing action.","pos":[225,296]},{"content":"If the buffering mechanism is not enabled, calling this method does not have any effect.","pos":[297,385]}]}]}],"pos":[4535,4921],"yaml":true,"extradata":"MT"},{"content":"Sets the initial values for this object.","nodes":[{"pos":[0,40],"content":"Sets the initial values for this object.","nodes":[{"content":"Sets the initial values for this object.","pos":[0,40]}]}],"pos":[6351,6392],"yaml":true},{"content":"This method is called to initialize the <xref:System.Web.Management.EventLogWebEventProvider> with the configuration settings and name as specified in the configuration file.","nodes":[{"pos":[0,174],"content":"This method is called to initialize the <xref:System.Web.Management.EventLogWebEventProvider> with the configuration settings and name as specified in the configuration file.","nodes":[{"content":"This method is called to initialize the <ph id=\"ph1\">&lt;xref:System.Web.Management.EventLogWebEventProvider&gt;</ph> with the configuration settings and name as specified in the configuration file.","pos":[0,174],"source":"This method is called to initialize the <xref:System.Web.Management.EventLogWebEventProvider> with the configuration settings and name as specified in the configuration file."}]}],"pos":[6403,6578],"yaml":true,"extradata":"MT"},{"content":"The name used in the configuration file to identify this provider.","nodes":[{"pos":[0,66],"content":"The name used in the configuration file to identify this provider.","nodes":[{"content":"The name used in the configuration file to identify this provider.","pos":[0,66]}]}],"pos":[6783,6850],"yaml":true},{"content":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that specifies the attributes assigned for this provider in the configuration file.","nodes":[{"pos":[0,157],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> that specifies the attributes assigned for this provider in the configuration file.","source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that specifies the attributes assigned for this provider in the configuration file."}],"pos":[6949,7107],"yaml":true},{"content":"Processes the event passed to the provider.","nodes":[{"pos":[0,43],"content":"Processes the event passed to the provider.","nodes":[{"content":"Processes the event passed to the provider.","pos":[0,43]}]}],"pos":[8346,8390],"yaml":true},{"content":"This is the method that ASP.NET health monitoring calls to start the processing of the event.","nodes":[{"pos":[0,93],"content":"This is the method that ASP.NET health monitoring calls to start the processing of the event.","nodes":[{"content":"This is the method that ASP.NET health monitoring calls to start the processing of the event.","pos":[0,93]}]}],"pos":[8401,8495],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Web.Management.WebBaseEvent\"></xref> object to process.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Web.Management.WebBaseEvent\"&gt;&lt;/xref&gt;</ph> object to process.","source":"The <xref href=\"System.Web.Management.WebBaseEvent\"></xref> object to process."}],"pos":[8706,8785],"yaml":true},{"content":"Performs tasks associated with shutting down the provider.","nodes":[{"pos":[0,58],"content":"Performs tasks associated with shutting down the provider.","nodes":[{"content":"Performs tasks associated with shutting down the provider.","pos":[0,58]}]}],"pos":[9858,9917],"yaml":true},{"content":"ASP.NET calls the <xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A> method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.","nodes":[{"pos":[0,247],"content":"ASP.NET calls the <xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A> method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.","nodes":[{"content":"ASP.NET calls the <xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A> method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.","pos":[0,247],"nodes":[{"content":"ASP.NET calls the <ph id=\"ph1\">&lt;xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A&gt;</ph> method when the application domain hosting the Web application terminates.","pos":[0,158],"source":"ASP.NET calls the <xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A> method when the application domain hosting the Web application terminates."},{"content":"The method is called to perform tasks that will allow the application to end gracefully.","pos":[159,247]}]}]}],"pos":[9928,10176],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Management.EventLogWebEventProvider\n  commentId: T:System.Web.Management.EventLogWebEventProvider\n  id: EventLogWebEventProvider\n  children:\n  - System.Web.Management.EventLogWebEventProvider.Flush\n  - System.Web.Management.EventLogWebEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Web.Management.EventLogWebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)\n  - System.Web.Management.EventLogWebEventProvider.Shutdown\n  langs:\n  - csharp\n  name: EventLogWebEventProvider\n  nameWithType: EventLogWebEventProvider\n  fullName: System.Web.Management.EventLogWebEventProvider\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Implements an event provider that logs ASP.NET health-monitoring events into the Windows Application Event Log.\n  remarks: \"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \\n  \\n The <xref:System.Web.Management.EventLogWebEventProvider>, the failure audit, and the error health-monitoring events are configured (enabled) by default. This means that the failure audit and the error health-monitoring events are logged in the Windows Application Event Log by default.  \\n  \\n> [!NOTE]\\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom provider, see [How to: Implement the Health Monitoring Custom Provider Example](http://msdn.microsoft.com/library/bbb1c959-e6e4-42b2-be62-49b7ca5ab72c).\"\n  example:\n  - \"The following configuration file excerpt shows how to specify a provider of type <xref:System.Web.Management.EventLogWebEventProvider> to handle success audit events. The <xref:System.Web.Management.EventLogWebEventProvider> and the failure audit health-event types to monitor are configured by default. To monitor the success audits, you need to configure them, as shown in the example code.  \\n  \\n```  \\n<healthMonitoring   \\n  enabled=\\\"true\\\" heartbeatInterval=\\\"10\\\">  \\n  \\n  <rule>  \\n    <add name=\\\"Success Audits Default\\\"  \\n      eventName=\\\"Success Audits\\\"  \\n      provider=\\\"EventLogProvider\\\"  \\n      profile=\\\"Default\\\"  \\n      minInterval=\\\"00:01:00\\\" />  \\n  </rule>  \\n  \\n</healthMonitoring>  \\n```\"\n  syntax:\n    content: 'public sealed class EventLogWebEventProvider : System.Web.Management.WebEventProvider'\n  inheritance:\n  - System.Object\n  - System.Configuration.Provider.ProviderBase\n  - System.Web.Management.WebEventProvider\n  implements: []\n  inheritedMembers:\n  - System.Configuration.Provider.ProviderBase.Description\n  - System.Configuration.Provider.ProviderBase.Name\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/EventLogWebEventProvider.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Management.EventLogWebEventProvider.Flush\n  commentId: M:System.Web.Management.EventLogWebEventProvider.Flush\n  id: Flush\n  parent: System.Web.Management.EventLogWebEventProvider\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: EventLogWebEventProvider.Flush()\n  fullName: EventLogWebEventProvider.Flush()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Moves events from the provider's buffer into the event log.\n  remarks: When this method is called, all the events in the provider's buffer are immediately written to the Windows Application Event Log, regardless of how much time has elapsed since last write or how many events are in the buffer. The time of the last write is reset to the time of the flushing action. If the buffering mechanism is not enabled, calling this method does not have any effect.\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.Web.Management.EventLogWebEventProvider.Flush*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/EventLogWebEventProvider.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Management.EventLogWebEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Web.Management.EventLogWebEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Web.Management.EventLogWebEventProvider\n  langs:\n  - csharp\n  name: Initialize(String, NameValueCollection)\n  nameWithType: EventLogWebEventProvider.Initialize(String, NameValueCollection)\n  fullName: EventLogWebEventProvider.Initialize(String, NameValueCollection)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Sets the initial values for this object.\n  remarks: This method is called to initialize the <xref:System.Web.Management.EventLogWebEventProvider> with the configuration settings and name as specified in the configuration file.\n  syntax:\n    content: public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name used in the configuration file to identify this provider.\n    - id: config\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that specifies the attributes assigned for this provider in the configuration file.\n  overload: System.Web.Management.EventLogWebEventProvider.Initialize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/EventLogWebEventProvider.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Management.EventLogWebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)\n  commentId: M:System.Web.Management.EventLogWebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)\n  id: ProcessEvent(System.Web.Management.WebBaseEvent)\n  parent: System.Web.Management.EventLogWebEventProvider\n  langs:\n  - csharp\n  name: ProcessEvent(WebBaseEvent)\n  nameWithType: EventLogWebEventProvider.ProcessEvent(WebBaseEvent)\n  fullName: EventLogWebEventProvider.ProcessEvent(WebBaseEvent)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Processes the event passed to the provider.\n  remarks: This is the method that ASP.NET health monitoring calls to start the processing of the event.\n  syntax:\n    content: public override void ProcessEvent (System.Web.Management.WebBaseEvent eventRaised);\n    parameters:\n    - id: eventRaised\n      type: System.Web.Management.WebBaseEvent\n      description: The <xref href=\"System.Web.Management.WebBaseEvent\"></xref> object to process.\n  overload: System.Web.Management.EventLogWebEventProvider.ProcessEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/EventLogWebEventProvider.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Management.EventLogWebEventProvider.Shutdown\n  commentId: M:System.Web.Management.EventLogWebEventProvider.Shutdown\n  id: Shutdown\n  parent: System.Web.Management.EventLogWebEventProvider\n  langs:\n  - csharp\n  name: Shutdown()\n  nameWithType: EventLogWebEventProvider.Shutdown()\n  fullName: EventLogWebEventProvider.Shutdown()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Performs tasks associated with shutting down the provider.\n  remarks: ASP.NET calls the <xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A> method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.\n  syntax:\n    content: public override void Shutdown ();\n    parameters: []\n  overload: System.Web.Management.EventLogWebEventProvider.Shutdown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/EventLogWebEventProvider.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\nreferences:\n- uid: System.Web.Management.WebEventProvider\n  parent: System.Web.Management\n  isExternal: false\n  name: WebEventProvider\n  nameWithType: WebEventProvider\n  fullName: System.Web.Management.WebEventProvider\n- uid: System.Web.Management.EventLogWebEventProvider.Flush\n  parent: System.Web.Management.EventLogWebEventProvider\n  isExternal: false\n  name: Flush()\n  nameWithType: EventLogWebEventProvider.Flush()\n  fullName: EventLogWebEventProvider.Flush()\n- uid: System.Web.Management.EventLogWebEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Web.Management.EventLogWebEventProvider\n  isExternal: false\n  name: Initialize(String, NameValueCollection)\n  nameWithType: EventLogWebEventProvider.Initialize(String, NameValueCollection)\n  fullName: EventLogWebEventProvider.Initialize(String, NameValueCollection)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Web.Management.EventLogWebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)\n  parent: System.Web.Management.EventLogWebEventProvider\n  isExternal: false\n  name: ProcessEvent(WebBaseEvent)\n  nameWithType: EventLogWebEventProvider.ProcessEvent(WebBaseEvent)\n  fullName: EventLogWebEventProvider.ProcessEvent(WebBaseEvent)\n- uid: System.Web.Management.WebBaseEvent\n  parent: System.Web.Management\n  isExternal: false\n  name: WebBaseEvent\n  nameWithType: WebBaseEvent\n  fullName: System.Web.Management.WebBaseEvent\n- uid: System.Web.Management.EventLogWebEventProvider.Shutdown\n  parent: System.Web.Management.EventLogWebEventProvider\n  isExternal: false\n  name: Shutdown()\n  nameWithType: EventLogWebEventProvider.Shutdown()\n  fullName: EventLogWebEventProvider.Shutdown()\n- uid: System.Web.Management.EventLogWebEventProvider.Flush*\n  parent: System.Web.Management.EventLogWebEventProvider\n  isExternal: false\n  name: Flush\n  nameWithType: EventLogWebEventProvider.Flush\n  fullName: EventLogWebEventProvider.Flush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/EventLogWebEventProvider.xml\n- uid: System.Web.Management.EventLogWebEventProvider.Initialize*\n  parent: System.Web.Management.EventLogWebEventProvider\n  isExternal: false\n  name: Initialize\n  nameWithType: EventLogWebEventProvider.Initialize\n  fullName: EventLogWebEventProvider.Initialize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/EventLogWebEventProvider.xml\n- uid: System.Web.Management.EventLogWebEventProvider.ProcessEvent*\n  parent: System.Web.Management.EventLogWebEventProvider\n  isExternal: false\n  name: ProcessEvent\n  nameWithType: EventLogWebEventProvider.ProcessEvent\n  fullName: EventLogWebEventProvider.ProcessEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/EventLogWebEventProvider.xml\n- uid: System.Web.Management.EventLogWebEventProvider.Shutdown*\n  parent: System.Web.Management.EventLogWebEventProvider\n  isExternal: false\n  name: Shutdown\n  nameWithType: EventLogWebEventProvider.Shutdown\n  fullName: EventLogWebEventProvider.Shutdown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/EventLogWebEventProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Configuration.Provider.ProviderBase.Description\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Description\n  nameWithType: ProviderBase.Description\n  fullName: ProviderBase.Description\n- uid: System.Configuration.Provider.ProviderBase.Name\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Name\n  nameWithType: ProviderBase.Name\n  fullName: ProviderBase.Name\n"}