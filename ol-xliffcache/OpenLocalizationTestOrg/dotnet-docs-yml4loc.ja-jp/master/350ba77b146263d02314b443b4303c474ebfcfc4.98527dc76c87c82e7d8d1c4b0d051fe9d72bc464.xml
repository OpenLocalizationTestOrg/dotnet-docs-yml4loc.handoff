{"nodes":[{"content":"Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.","nodes":[{"pos":[0,146],"content":"Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.","nodes":[{"content":"Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.","pos":[0,146]}]}],"pos":[7048,7195],"yaml":true},{"content":"Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server. Using <xref:System.Net.Security.NegotiateStream>, you can do the following.  \n  \n-   Send the client's credentials to the server for Impersonation or Delegation.  \n  \n-   Request server authentication.  \n  \n-   Encrypt and/or sign data before transmitting it.  \n  \n Authentication must be performed before transmitting information. Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete. Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods. The client, and optionally the server, is authenticated using the Negotiate security protocol. On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication. On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used. For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/. The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI).  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred. You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.  \n  \n If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.  \n  \n You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods. You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods. If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>.  \n  \n The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>. When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream.","nodes":[{"pos":[0,225],"content":"Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server. Using <xref:System.Net.Security.NegotiateStream>, you can do the following.","nodes":[{"content":"Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server. Using <xref:System.Net.Security.NegotiateStream>, you can do the following.","pos":[0,225],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class for authentication and to help secure information transmitted between a client and a server.","pos":[0,149],"source":"Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server."},{"content":"Using <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>, you can do the following.","pos":[150,225],"source":" Using <xref:System.Net.Security.NegotiateStream>, you can do the following."}]}]},{"pos":[235,311],"content":"Send the client's credentials to the server for Impersonation or Delegation.","nodes":[{"content":"Send the client's credentials to the server for Impersonation or Delegation.","pos":[0,76]}]},{"pos":[321,351],"content":"Request server authentication.","nodes":[{"content":"Request server authentication.","pos":[0,30]}]},{"pos":[361,409],"content":"Encrypt and/or sign data before transmitting it.","nodes":[{"content":"Encrypt and/or sign data before transmitting it.","pos":[0,48]}]},{"pos":[416,1624],"content":"Authentication must be performed before transmitting information. Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete. Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods. The client, and optionally the server, is authenticated using the Negotiate security protocol. On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication. On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used. For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/. The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI).","nodes":[{"content":"Authentication must be performed before transmitting information. Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete. Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods. The client, and optionally the server, is authenticated using the Negotiate security protocol. On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication. On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used. For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/. The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI).","pos":[0,1208],"nodes":[{"content":"Authentication must be performed before transmitting information.","pos":[0,65]},{"content":"Clients request authentication using the synchronous <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph> methods, which block until the authentication completes, or the asynchronous <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;</ph> methods, which do not block while waiting for the authentication to complete.","pos":[66,412],"source":" Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete."},{"content":"Servers request authentication using the synchronous <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph> or asynchronous <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> methods.","pos":[413,629],"source":" Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."},{"content":"The client, and optionally the server, is authenticated using the Negotiate security protocol.","pos":[630,724]},{"content":"On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication.","pos":[725,821]},{"content":"On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used.","pos":[822,951]},{"content":"For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/.","pos":[952,1073]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class performs the authentication using the Security Support Provider Interface (SSPI).","pos":[1074,1208],"source":" The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI)."}]}]},{"pos":[1631,2233],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred. You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred. You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.","pos":[0,602],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services will be used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> to help secure your data during transmission.","pos":[0,321],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[322,463],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"You can get information about the remote client or server using the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A&gt;</ph> property.","pos":[464,602],"source":" You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property."}]}]},{"pos":[2240,2497],"content":"If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,257],"nodes":[{"content":"If the authentication fails, you will receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or a <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,181],"source":"If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[182,257]}]}]},{"pos":[2504,3004],"content":"You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods. You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods. If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods. You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods. If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>.","pos":[0,500],"nodes":[{"content":"You send data using the synchronous <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.Write%2A&gt;</ph> or asynchronous <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginWrite%2A&gt;</ph> methods.","pos":[0,169],"source":"You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods."},{"content":"You receive data using the synchronous <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.Read%2A&gt;</ph> or asynchronous <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginRead%2A&gt;</ph> methods.","pos":[170,340],"source":" You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods."},{"content":"If security services such as encryption or signing are enabled, these are automatically applied to your data by the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[341,500],"source":" If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>."}]}]},{"pos":[3011,3334],"content":"The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>. When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream.","nodes":[{"content":"The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>. When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream.","pos":[0,323],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> transmits data using a stream that you supply when creating the <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,154],"source":"The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>."},{"content":"When you supply this underlying stream, you have the option to specify whether closing the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> also closes the underlying stream.","pos":[155,323],"source":" When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream."}]}]}],"pos":[7206,10559],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref href=\"System.IO.Stream\"></xref>.","nodes":[{"pos":[0,155],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph> class using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref href=\"System.IO.Stream\"></xref>."}],"pos":[14389,14545],"yaml":true},{"content":"A <xref href=\"System.IO.Stream\"></xref> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data.","nodes":[{"pos":[0,147],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object used by the <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph> for sending and receiving data.","source":"A <xref href=\"System.IO.Stream\"></xref> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data."}],"pos":[15091,15239],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref href=\"System.IO.Stream\"></xref> and stream closure behavior.","nodes":[{"pos":[0,183],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph> class using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> and stream closure behavior.","source":"Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref href=\"System.IO.Stream\"></xref> and stream closure behavior."}],"pos":[16668,16852],"yaml":true},{"content":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.","nodes":[{"pos":[0,226],"content":"When you specify <ph id=\"ph1\">`true`</ph> for the <ph id=\"ph2\">`leaveStreamOpen`</ph> parameter, closing the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> has no effect on the <ph id=\"ph4\">`innerStream`</ph> stream; you must explicitly close <ph id=\"ph5\">`innerStream`</ph> when you no longer need it.","source":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it."}],"pos":[16863,17090],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.Stream\"></xref> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data.","nodes":[{"pos":[0,147],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object used by the <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph> for sending and receiving data.","source":"A <xref href=\"System.IO.Stream\"></xref> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data."}],"pos":[17767,17915],"yaml":true},{"content":"`true` to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> has no effect on <code>innerstream</code>; `false` to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> also closes <code>innerStream</code>.","nodes":[{"pos":[0,269],"content":"<ph id=\"ph1\">`true`</ph> to indicate that closing this <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph> has no effect on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">innerstream</ph><ept id=\"p1\">&lt;/code&gt;</ept>; <ph id=\"ph4\">`false`</ph> to indicate that closing this <ph id=\"ph5\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph> also closes <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph6\">innerStream</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"`true` to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> has no effect on <code>innerstream</code>; `false` to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> also closes <code>innerStream</code>."}],"pos":[17992,18264],"yaml":true},{"content":"<code>innerStream</code> is `null`.  \n  \n \\- or -  \n  \n <code>innerStream</code> is equal to <xref href=\"System.IO.Stream.Null\"></xref>.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>innerStream</code> is `null`."},{"pos":[42,49],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[56,136],"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream.Null\"&gt;&lt;/xref&gt;</ph>.","source":"<code>innerStream</code> is equal to <xref href=\"System.IO.Stream.Null\"></xref>."}],"pos":[18435,18581],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","nodes":[{"pos":[0,103],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]}]}],"pos":[19847,19951],"yaml":true},{"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,483],"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","nodes":[{"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","pos":[0,483],"nodes":[{"content":"The authentication uses the client's <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>.","pos":[0,93],"source":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>, and mutual authentication is requested.","pos":[155,375],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class will construct the SPN used for mutual authentication.","pos":[376,483],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."}]}]},{"pos":[490,904],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[911,1164],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[19962,21133],"yaml":true,"extradata":"MT"},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[21492,21572],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[21732,21812],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[21918,21947],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[22057,22259],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.","nodes":[{"pos":[0,168],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.","pos":[0,168],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified client credential.","pos":[104,168]}]}]}],"pos":[23668,23837],"yaml":true},{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"pos":[0,328],"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","nodes":[{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","pos":[0,328],"nodes":[{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>, and mutual authentication is requested.","pos":[0,220],"source":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class will construct the SPN used for mutual authentication.","pos":[221,328],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."}]}]},{"pos":[335,749],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]}],"pos":[23848,24602],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[24859,24967],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[25033,25119],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[25357,25437],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[25597,25677],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[25783,25812],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[25922,26124],"yaml":true},{"content":"<code>targetName</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."}],"pos":[26226,26261],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.","nodes":[{"pos":[0,192],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.","pos":[0,192],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified client credential and the channel binding.","pos":[104,192]}]}]}],"pos":[27913,28106],"yaml":true},{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \n  \n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"pos":[0,328],"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","nodes":[{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","pos":[0,328],"nodes":[{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>, and mutual authentication is requested.","pos":[0,220],"source":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class will construct the SPN used for mutual authentication.","pos":[221,328],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."}]}]},{"pos":[335,660],"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt;</ph> used for extended protection that is passed to this method in the <ph id=\"ph2\">`binding`</ph> parameter would be retrieved by an application from <ph id=\"ph3\">&lt;xref:System.Net.Security.SslStream.TransportContext%2A&gt;</ph> property on the associated <ph id=\"ph4\">&lt;xref:System.Net.Security.SslStream&gt;</ph>.","source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>."},{"pos":[667,1081],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]}],"pos":[28117,29205],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[29536,29644],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.","nodes":[{"pos":[0,127],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection."}],"pos":[29758,29886],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[29952,30038],"yaml":true},{"content":"<code>targetName</code> is `null`.  \n  \n \\- or -  \n  \n <code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."},{"pos":[41,48],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[55,89],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[30224,30321],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[30475,30555],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[30715,30795],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[30905,31107],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[31213,31242],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.","nodes":[{"pos":[0,189],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.","pos":[0,189],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified credentials and authentication options.","pos":[104,189]}]}]}],"pos":[33035,33225],"yaml":true},{"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,622],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> value.","pos":[126,254],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value."},{"content":"Successful authentication does not guarantee that the requested <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel&gt;</ph> has been granted.","pos":[255,379],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[380,622],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."}]},{"pos":[629,882],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[33236,34123],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[34518,34626],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[34692,34778],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[34879,35004],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[35121,35291],"yaml":true},{"content":"<code>allowedImpersonationLevel</code> is not a valid value.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;allowedImpersonationLevel&lt;/code&gt;</ph> is not a valid value.","source":"<code>allowedImpersonationLevel</code> is not a valid value."}],"pos":[35489,35550],"yaml":true},{"content":"<code>targetName</code> is null.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is null.","source":"<code>targetName</code> is null."}],"pos":[35652,35685],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[35839,35919],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[36079,36159],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[36265,36294],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[36404,36606],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.","nodes":[{"pos":[0,206],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.","pos":[0,206],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified credential, authentication options, and channel binding.","pos":[104,206]}]}]}],"pos":[38642,38849],"yaml":true},{"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \n  \n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,622],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> value.","pos":[126,254],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value."},{"content":"Successful authentication does not guarantee that the requested <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel&gt;</ph> has been granted.","pos":[255,379],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[380,622],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."}]},{"pos":[629,954],"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt;</ph> used for extended protection that is passed to this method in the <ph id=\"ph2\">`binding`</ph> parameter would be retrieved by an application from <ph id=\"ph3\">&lt;xref:System.Net.Security.SslStream.TransportContext%2A&gt;</ph> property on the associated <ph id=\"ph4\">&lt;xref:System.Net.Security.SslStream&gt;</ph>.","source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>."},{"pos":[961,1214],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[38860,40081],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[40550,40658],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.","nodes":[{"pos":[0,127],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection."}],"pos":[40772,40900],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[40966,41052],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[41153,41278],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[41395,41565],"yaml":true},{"content":"<code>targetName</code> is `null`.  \n  \n \\- or -  \n  \n <code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."},{"pos":[41,48],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[55,89],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[41751,41848],"yaml":true},{"content":"<code>allowedImpersonationLevel</code> is not a valid value.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;allowedImpersonationLevel&lt;/code&gt;</ph> is not a valid value.","source":"<code>allowedImpersonationLevel</code> is not a valid value."}],"pos":[41962,42023],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[42177,42257],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[42417,42497],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[42607,42809],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[42915,42944],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","nodes":[{"pos":[0,132],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]}]}],"pos":[44176,44309],"yaml":true},{"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,483],"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","nodes":[{"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","pos":[0,483],"nodes":[{"content":"The authentication uses the client's <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>.","pos":[0,93],"source":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>, and mutual authentication is requested.","pos":[155,375],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class will construct the SPN used for mutual authentication.","pos":[376,483],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."}]}]},{"pos":[490,904],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[911,1164],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[44320,45491],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[45677,45803],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[46046,46126],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[46286,46366],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[46472,46501],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[46611,46813],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.","nodes":[{"pos":[0,197],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.","pos":[0,197],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified client credential.","pos":[133,197]}]}]}],"pos":[48276,48474],"yaml":true},{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"pos":[0,328],"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","nodes":[{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","pos":[0,328],"nodes":[{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>, and mutual authentication is requested.","pos":[0,220],"source":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class will construct the SPN used for mutual authentication.","pos":[221,328],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."}]}]},{"pos":[335,749],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]}],"pos":[48485,49239],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[49490,49598],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[49664,49750],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[49821,49947],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[50190,50270],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[50430,50510],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[50616,50645],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[50755,50957],"yaml":true},{"content":"<code>targetName</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."}],"pos":[51059,51094],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.","nodes":[{"pos":[0,221],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.","pos":[0,221],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified client credential and the channel binding.","pos":[133,221]}]}]}],"pos":[52800,53022],"yaml":true},{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \n  \n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"pos":[0,328],"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","nodes":[{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","pos":[0,328],"nodes":[{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>, and mutual authentication is requested.","pos":[0,220],"source":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class will construct the SPN used for mutual authentication.","pos":[221,328],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."}]}]},{"pos":[335,660],"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt;</ph> used for extended protection that is passed to this method in the <ph id=\"ph2\">`binding`</ph> parameter would be retrieved by an application from <ph id=\"ph3\">&lt;xref:System.Net.Security.SslStream.TransportContext%2A&gt;</ph> property on the associated <ph id=\"ph4\">&lt;xref:System.Net.Security.SslStream&gt;</ph>.","source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>."},{"pos":[667,1081],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]}],"pos":[53033,54121],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[54446,54554],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.","nodes":[{"pos":[0,127],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection."}],"pos":[54668,54796],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[54862,54948],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[55019,55145],"yaml":true},{"content":"<code>targetName</code> is `null`.  \n  \n \\- or -  \n  \n <code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."},{"pos":[41,48],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[55,89],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[55336,55433],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[55587,55667],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[55827,55907],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[56017,56219],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[56325,56354],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.","nodes":[{"pos":[0,218],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.","pos":[0,218],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified credentials and authentication options.","pos":[133,218]}]}]}],"pos":[58201,58420],"yaml":true},{"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,622],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> value.","pos":[126,254],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value."},{"content":"Successful authentication does not guarantee that the requested <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel&gt;</ph> has been granted.","pos":[255,379],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[380,622],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."}]},{"pos":[629,882],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[58431,59318],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[59707,59815],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[59881,59967],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[60068,60193],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[60310,60480],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[60551,60677],"yaml":true},{"content":"<code>allowedImpersonationLevel</code> is not a valid value.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;allowedImpersonationLevel&lt;/code&gt;</ph> is not a valid value.","source":"<code>allowedImpersonationLevel</code> is not a valid value."}],"pos":[60880,60941],"yaml":true},{"content":"<code>targetName</code> is null.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is null.","source":"<code>targetName</code> is null."}],"pos":[61043,61076],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[61230,61310],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[61470,61550],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[61656,61685],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[61795,61997],"yaml":true},{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.","nodes":[{"pos":[0,235],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.","nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.","pos":[0,235],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified credential, authentication options, and channel binding.","pos":[133,235]}]}]}],"pos":[64087,64323],"yaml":true},{"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \n  \n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,622],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> value.","pos":[126,254],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value."},{"content":"Successful authentication does not guarantee that the requested <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel&gt;</ph> has been granted.","pos":[255,379],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[380,622],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."}]},{"pos":[629,954],"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt;</ph> used for extended protection that is passed to this method in the <ph id=\"ph2\">`binding`</ph> parameter would be retrieved by an application from <ph id=\"ph3\">&lt;xref:System.Net.Security.SslStream.TransportContext%2A&gt;</ph> property on the associated <ph id=\"ph4\">&lt;xref:System.Net.Security.SslStream&gt;</ph>.","source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>."},{"pos":[961,1214],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[64334,65555],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[66018,66126],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.","nodes":[{"pos":[0,127],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection."}],"pos":[66240,66368],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[66434,66520],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[66621,66746],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[66863,67033],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[67104,67230],"yaml":true},{"content":"<code>targetName</code> is `null`.  \n  \n \\- or -  \n  \n <code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."},{"pos":[41,48],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[55,89],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[67421,67518],"yaml":true},{"content":"<code>allowedImpersonationLevel</code> is not a valid value.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;allowedImpersonationLevel&lt;/code&gt;</ph> is not a valid value.","source":"<code>allowedImpersonationLevel</code> is not a valid value."}],"pos":[67632,67693],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[67847,67927],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[68087,68167],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[68277,68479],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[68585,68614],"yaml":true},{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","nodes":[{"pos":[0,225],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[0,225],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[104,225]}]}]}],"pos":[70668,70894],"yaml":true},{"content":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,280],"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has <ph id=\"ph3\">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt;</ph> set to <ph id=\"ph4\">&lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never&gt;</ph>.","source":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>."},{"pos":[287,701],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[708,913],"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.","nodes":[{"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.","pos":[0,205],"nodes":[{"content":"This method blocks until the operation completes.","pos":[0,49]},{"content":"To prevent blocking until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> method overloads.","pos":[50,205],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads."}]}]},{"pos":[920,1173],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[70905,72087],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[72547,72655],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.","nodes":[{"pos":[0,137],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."}],"pos":[72778,72916],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[73017,73142],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[73260,73430],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.","nodes":[{"pos":[0,334],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"&gt;&lt;/xref&gt;</ph> on the extended protection policy passed in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter are both <ph id=\"ph4\">`null`</ph>.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`."}],"pos":[73608,73943],"yaml":true},{"content":"<code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[74045,74080],"yaml":true},{"content":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,","nodes":[{"pos":[0,306],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"&gt;&lt;/xref&gt;</ph>,","source":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,"}],"pos":[74194,74501],"yaml":true},{"content":"The authentication failed. You can use this object to try to r-authenticate.","nodes":[{"pos":[0,76],"content":"The authentication failed. You can use this object to try to r-authenticate.","nodes":[{"content":"The authentication failed. You can use this object to try to r-authenticate.","pos":[0,76],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to try to r-authenticate.","pos":[27,76]}]}]}],"pos":[74655,74732],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[74892,74972],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the client.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the server.","pos":[73,137]}]}]}],"pos":[75082,75284],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[75386,75431],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[75537,75566],"yaml":true},{"content":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.","nodes":[{"pos":[0,197],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"&gt;&lt;/xref&gt;</ph> on a platform that does not support extended protection.","source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection."}],"pos":[75684,75882],"yaml":true},{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.","nodes":[{"pos":[0,196],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.","nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.","pos":[0,196],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified server credentials and authentication options.","pos":[104,196]}]}]}],"pos":[77609,77806],"yaml":true},{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,414],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[421,626],"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.","nodes":[{"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.","pos":[0,205],"nodes":[{"content":"This method blocks until the operation completes.","pos":[0,49]},{"content":"To prevent blocking until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> method overloads.","pos":[50,205],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads."}]}]},{"pos":[633,886],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[77817,78710],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the server.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the server.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the server."}],"pos":[79087,79195],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[79296,79421],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[79539,79709],"yaml":true},{"content":"<code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[79895,79930],"yaml":true},{"content":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,","nodes":[{"pos":[0,306],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"&gt;&lt;/xref&gt;</ph>,","source":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,"}],"pos":[80044,80351],"yaml":true},{"content":"The authentication failed. You can use this object to try to r-authenticate.","nodes":[{"pos":[0,76],"content":"The authentication failed. You can use this object to try to r-authenticate.","nodes":[{"content":"The authentication failed. You can use this object to try to r-authenticate.","pos":[0,76],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to try to r-authenticate.","pos":[27,76]}]}]}],"pos":[80505,80582],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[80742,80822],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[80928,80957],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the client.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the server.","pos":[73,137]}]}]}],"pos":[81067,81269],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[81371,81416],"yaml":true},{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","nodes":[{"pos":[0,103],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]}]}],"pos":[82618,82722],"yaml":true},{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,339],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","nodes":[{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","pos":[0,339],"nodes":[{"content":"The authentication uses the server's <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, and the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>.","pos":[155,339],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>."}]}]},{"pos":[346,760],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[767,972],"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.","nodes":[{"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.","pos":[0,205],"nodes":[{"content":"This method blocks until the operation completes.","pos":[0,49]},{"content":"To prevent blocking until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> method overloads.","pos":[50,205],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads."}]}]},{"pos":[979,1232],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[82733,83974],"yaml":true,"extradata":"MT"},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[84333,84413],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[84573,84653],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[84759,84788],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[84890,84935],"yaml":true},{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.","nodes":[{"pos":[0,177],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.","nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.","pos":[0,177],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified extended protection policy.","pos":[104,177]}]}]}],"pos":[86437,86615],"yaml":true},{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \n  \n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,339],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","nodes":[{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","pos":[0,339],"nodes":[{"content":"The authentication uses the server's <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, and the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>.","pos":[155,339],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>."}]}]},{"pos":[346,626],"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has <ph id=\"ph3\">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt;</ph> set to <ph id=\"ph4\">&lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never&gt;</ph>.","source":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>."},{"pos":[633,1047],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[1054,1259],"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.","nodes":[{"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.","pos":[0,205],"nodes":[{"content":"This method blocks until the operation completes.","pos":[0,49]},{"content":"To prevent blocking until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> method overloads.","pos":[50,205],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads."}]}]},{"pos":[1266,1519],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[86626,88156],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.","nodes":[{"pos":[0,137],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."}],"pos":[88478,88616],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.","nodes":[{"pos":[0,334],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"&gt;&lt;/xref&gt;</ph> on the extended protection policy passed in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter are both <ph id=\"ph4\">`null`</ph>.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`."}],"pos":[88794,89129],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[89283,89363],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[89523,89603],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[89705,89750],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[89856,89885],"yaml":true},{"content":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.","nodes":[{"pos":[0,197],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"&gt;&lt;/xref&gt;</ph> on a platform that does not support extended protection.","source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection."}],"pos":[90003,90201],"yaml":true},{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","nodes":[{"pos":[0,132],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]}]}],"pos":[91433,91566],"yaml":true},{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,339],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","nodes":[{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","pos":[0,339],"nodes":[{"content":"The authentication uses the server's <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, and the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>.","pos":[155,339],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>."}]}]},{"pos":[346,760],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[767,1020],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[91577,92604],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[92790,92916],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[93159,93239],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[93399,93479],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[93585,93614],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[93716,93761],"yaml":true},{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.","nodes":[{"pos":[0,206],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.","nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.","pos":[0,206],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified extended protection policy.","pos":[133,206]}]}]}],"pos":[95317,95524],"yaml":true},{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \n  \n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,339],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","nodes":[{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","pos":[0,339],"nodes":[{"content":"The authentication uses the server's <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, and the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>.","pos":[155,339],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>."}]}]},{"pos":[346,626],"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has <ph id=\"ph3\">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt;</ph> set to <ph id=\"ph4\">&lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never&gt;</ph>.","source":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>."},{"pos":[633,1047],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[1054,1307],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[95535,96851],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.","nodes":[{"pos":[0,137],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."}],"pos":[97167,97305],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[97376,97502],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.","nodes":[{"pos":[0,334],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"&gt;&lt;/xref&gt;</ph> on the extended protection policy passed in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter are both <ph id=\"ph4\">`null`</ph>.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`."}],"pos":[97685,98020],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[98174,98254],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[98414,98494],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[98596,98641],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[98747,98776],"yaml":true},{"content":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.","nodes":[{"pos":[0,197],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"&gt;&lt;/xref&gt;</ph> on a platform that does not support extended protection.","source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection."}],"pos":[98894,99092],"yaml":true},{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.","nodes":[{"pos":[0,225],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.","nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.","pos":[0,225],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified server credentials and authentication options.","pos":[133,225]}]}]}],"pos":[100873,101099],"yaml":true},{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,414],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[421,674],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[101110,101789],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the server.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the server.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the server."}],"pos":[102160,102268],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[102369,102494],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[102612,102782],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[102853,102979],"yaml":true},{"content":"<code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[103170,103205],"yaml":true},{"content":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,","nodes":[{"pos":[0,306],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"&gt;&lt;/xref&gt;</ph>,","source":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,"}],"pos":[103319,103626],"yaml":true},{"content":"The authentication failed. You can use this object to try to r-authenticate.","nodes":[{"pos":[0,76],"content":"The authentication failed. You can use this object to try to r-authenticate.","nodes":[{"content":"The authentication failed. You can use this object to try to r-authenticate.","pos":[0,76],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to try to r-authenticate.","pos":[27,76]}]}]}],"pos":[103780,103857],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[104017,104097],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[104203,104232],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the client.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the server.","pos":[73,137]}]}]}],"pos":[104342,104544],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[104646,104691],"yaml":true},{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","nodes":[{"pos":[0,254],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[0,254],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[133,254]}]}]}],"pos":[106775,107030],"yaml":true},{"content":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,280],"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has <ph id=\"ph3\">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt;</ph> set to <ph id=\"ph4\">&lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never&gt;</ph>.","source":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>."},{"pos":[287,701],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[708,961],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[107041,108009],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[108463,108571],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.","nodes":[{"pos":[0,137],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."}],"pos":[108694,108832],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[108933,109058],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[109176,109346],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[109417,109543],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.","nodes":[{"pos":[0,334],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"&gt;&lt;/xref&gt;</ph> on the extended protection policy passed in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter are both <ph id=\"ph4\">`null`</ph>.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`."}],"pos":[109726,110061],"yaml":true},{"content":"<code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[110163,110198],"yaml":true},{"content":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,","nodes":[{"pos":[0,306],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"&gt;&lt;/xref&gt;</ph>,","source":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,"}],"pos":[110312,110619],"yaml":true},{"content":"The authentication failed. You can use this object to try to r-authenticate.","nodes":[{"pos":[0,76],"content":"The authentication failed. You can use this object to try to r-authenticate.","nodes":[{"content":"The authentication failed. You can use this object to try to r-authenticate.","pos":[0,76],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to try to r-authenticate.","pos":[27,76]}]}]}],"pos":[110773,110850],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[111010,111090],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the client.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the server.","pos":[73,137]}]}]}],"pos":[111200,111402],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[111504,111549],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[111655,111684],"yaml":true},{"content":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.","nodes":[{"pos":[0,197],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"&gt;&lt;/xref&gt;</ph> on a platform that does not support extended protection.","source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection."}],"pos":[111802,112000],"yaml":true},{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.","nodes":[{"pos":[0,270],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.","nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.","pos":[0,270],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified credentials, authentication options, and channel binding.","pos":[139,242]},{"content":"This method does not block.","pos":[243,270]}]}]}],"pos":[114264,114535],"yaml":true},{"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \n  \n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \n  \n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,622],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> value.","pos":[126,254],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value."},{"content":"Successful authentication does not guarantee that the requested <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel&gt;</ph> has been granted.","pos":[255,379],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[380,622],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."}]},{"pos":[629,846],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","nodes":[{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","pos":[0,217],"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph> method overloads.","pos":[78,217],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."}]}]},{"pos":[853,1290],"content":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"content":"The asynchronous authentication operation must be completed by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt;</ph> method.","pos":[0,152],"source":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[153,218],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","pos":[219,437],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}]},{"pos":[1297,1550],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[114546,116105],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[116635,116743],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.","nodes":[{"pos":[0,127],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection."}],"pos":[116857,116985],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[117051,117137],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[117238,117363],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[117480,117650],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the authentication is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete."}],"pos":[117726,117854],"yaml":true},{"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,166],"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[72,166],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[117920,118087],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[118150,118254],"yaml":true},{"content":"<code>credential</code> is `null`.  \n  \n \\- or -  \n  \n <code>targetName</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."},{"pos":[41,48],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[55,89],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."}],"pos":[118445,118542],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[118696,118776],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[118936,119016],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[119126,119328],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[119434,119463],"yaml":true},{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","nodes":[{"pos":[0,166],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","pos":[0,166],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"This method does not block.","pos":[139,166]}]}]}],"pos":[120866,121033],"yaml":true},{"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \n  \n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \n  \n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,447],"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","nodes":[{"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.","pos":[0,447],"nodes":[{"content":"The authentication uses the client's <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>.","pos":[0,93],"source":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, and the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>.","pos":[155,339],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class will construct the SPN used for mutual authentication.","pos":[340,447],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."}]}]},{"pos":[454,671],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","nodes":[{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","pos":[0,217],"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph> method overloads.","pos":[78,217],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."}]}]},{"pos":[678,1115],"content":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"content":"The asynchronous authentication operation must be completed by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt;</ph> method.","pos":[0,152],"source":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[153,218],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","pos":[219,437],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}]},{"pos":[1122,1375],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[121044,122428],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the authentication is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete."}],"pos":[123070,123198],"yaml":true},{"content":"A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,160],"content":"A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the operation.","pos":[0,65]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[66,160],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[123264,123425],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[123488,123592],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[123835,123915],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[124075,124155],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[124261,124290],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[124400,124602],"yaml":true},{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.","nodes":[{"pos":[0,225],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.","nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.","pos":[0,225],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified credentials.","pos":[139,197]},{"content":"This method does not block.","pos":[198,225]}]}]}],"pos":[126215,126441],"yaml":true},{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \n  \n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,217],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","nodes":[{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","pos":[0,217],"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph> method overloads.","pos":[78,217],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."}]}]},{"pos":[224,661],"content":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"content":"The asynchronous authentication operation must be completed by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt;</ph> method.","pos":[0,152],"source":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[153,218],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","pos":[219,437],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}]},{"pos":[668,921],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[126452,127380],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[127698,127806],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[127872,127958],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the authentication is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete."}],"pos":[128034,128162],"yaml":true},{"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,166],"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[72,166],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[128228,128395],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[128458,128562],"yaml":true},{"content":"<code>credential</code> is `null`.  \n  \n \\- or -  \n  \n <code>targetName</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."},{"pos":[41,48],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[55,89],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."}],"pos":[128753,128850],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[129004,129084],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[129244,129324],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[129430,129459],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[129569,129771],"yaml":true},{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.","nodes":[{"pos":[0,245],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.","nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.","pos":[0,245],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified credentials and channel binding.","pos":[139,217]},{"content":"This method does not block.","pos":[218,245]}]}]}],"pos":[131627,131873],"yaml":true},{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \n  \n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,217],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","nodes":[{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","pos":[0,217],"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph> method overloads.","pos":[78,217],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."}]}]},{"pos":[224,661],"content":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"content":"The asynchronous authentication operation must be completed by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt;</ph> method.","pos":[0,152],"source":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[153,218],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","pos":[219,437],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}]},{"pos":[668,921],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[131884,132812],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[133204,133312],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.","nodes":[{"pos":[0,127],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection."}],"pos":[133426,133554],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[133620,133706],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the authentication is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete."}],"pos":[133782,133910],"yaml":true},{"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,166],"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[72,166],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[133976,134143],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[134206,134310],"yaml":true},{"content":"<code>credential</code> is `null`.  \n  \n \\- or -  \n  \n <code>targetName</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."},{"pos":[41,48],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[55,89],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."}],"pos":[134501,134598],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[134752,134832],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[134992,135072],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[135182,135384],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[135490,135519],"yaml":true},{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.","nodes":[{"pos":[0,252],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.","nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.","pos":[0,252],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified credentials and authentication options.","pos":[139,224]},{"content":"This method does not block.","pos":[225,252]}]}]}],"pos":[137516,137769],"yaml":true},{"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \n  \n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \n  \n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,622],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> value.","pos":[126,254],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value."},{"content":"Successful authentication does not guarantee that the requested <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel&gt;</ph> has been granted.","pos":[255,379],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[380,622],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."}]},{"pos":[629,846],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","nodes":[{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.","pos":[0,217],"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph> method overloads.","pos":[78,217],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."}]}]},{"pos":[853,1290],"content":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"content":"The asynchronous authentication operation must be completed by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt;</ph> method.","pos":[0,152],"source":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[153,218],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","pos":[219,437],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}]},{"pos":[1297,1550],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[137780,139339],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[139795,139903],"yaml":true},{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"pos":[0,85],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]}],"pos":[139969,140055],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[140156,140281],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[140398,140568],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the authentication is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete."}],"pos":[140644,140772],"yaml":true},{"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,166],"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[72,166],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[140838,141005],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[141068,141172],"yaml":true},{"content":"<code>credential</code> is `null`.  \n  \n \\- or -  \n  \n <code>targetName</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."},{"pos":[41,48],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[55,89],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetName</code> is `null`."}],"pos":[141363,141460],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[141614,141694],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[141854,141934],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[142040,142069],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","nodes":[{"content":"This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the server.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the client.","pos":[73,137]}]}]}],"pos":[142179,142381],"yaml":true},{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.","nodes":[{"pos":[0,259],"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.","nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.","pos":[0,259],"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified server credentials and authentication options.","pos":[139,231]},{"content":"This method does not block.","pos":[232,259]}]}]}],"pos":[144312,144572],"yaml":true},{"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \n  \n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \n  \n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,623],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> value.","pos":[126,254],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value."},{"content":"Successful authentication does not guarantee that, the requested <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel&gt;</ph> has been granted.","pos":[255,380],"source":" Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[381,623],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."}]},{"pos":[630,847],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.","nodes":[{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.","pos":[0,217],"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph> method overloads.","pos":[78,217],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads."}]}]},{"pos":[854,1291],"content":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"content":"The asynchronous authentication operation must be completed by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A&gt;</ph> method.","pos":[0,152],"source":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[153,218],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","pos":[219,437],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}]},{"pos":[1298,1551],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[144583,146143],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[146581,146689],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[146790,146915],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[147033,147203],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the authentication is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete."}],"pos":[147279,147407],"yaml":true},{"content":"A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,160],"content":"A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the operation.","pos":[0,65]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[66,160],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[147473,147634],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[147697,147801],"yaml":true},{"content":"<code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[147992,148027],"yaml":true},{"content":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,","nodes":[{"pos":[0,306],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"&gt;&lt;/xref&gt;</ph>,","source":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,"}],"pos":[148141,148448],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[148602,148682],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[148842,148922],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[149028,149057],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the client.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the server.","pos":[73,137]}]}]}],"pos":[149167,149369],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[149471,149516],"yaml":true},{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.","nodes":[{"pos":[0,288],"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.","nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.","pos":[0,288],"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[139,260]},{"content":"This method does not block.","pos":[261,288]}]}]}],"pos":[151750,152039],"yaml":true},{"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \n  \n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \n  \n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \n  \n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,623],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> value.","pos":[126,254],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value."},{"content":"Successful authentication does not guarantee that, the requested <ph id=\"ph1\">&lt;xref:System.Net.Security.ProtectionLevel&gt;</ph> has been granted.","pos":[255,380],"source":" Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[381,623],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."}]},{"pos":[630,910],"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has <ph id=\"ph3\">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt;</ph> set to <ph id=\"ph4\">&lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never&gt;</ph>.","source":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>."},{"pos":[917,1134],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.","nodes":[{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.","pos":[0,217],"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph> method overloads.","pos":[78,217],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads."}]}]},{"pos":[1141,1578],"content":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"content":"The asynchronous authentication operation must be completed by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A&gt;</ph> method.","pos":[0,152],"source":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[153,218],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","pos":[219,437],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}]},{"pos":[1585,1838],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[152050,153899],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> that is used to establish the identity of the client.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client."}],"pos":[154420,154528],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.","nodes":[{"pos":[0,137],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."}],"pos":[154651,154789],"yaml":true},{"content":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;&lt;/xref&gt;</ph> values, indicating the security services for the stream.","source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."}],"pos":[154890,155015],"yaml":true},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values, indicating how the server can use the client's credentials to access resources.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources."}],"pos":[155133,155303],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the authentication is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete."}],"pos":[155379,155507],"yaml":true},{"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,166],"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[72,166],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[155573,155740],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[155803,155907],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.","nodes":[{"pos":[0,334],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"&gt;&lt;/xref&gt;</ph> on the extended protection policy passed in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter are both <ph id=\"ph4\">`null`</ph>.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`."}],"pos":[156090,156425],"yaml":true},{"content":"<code>credential</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>credential</code> is `null`."}],"pos":[156527,156562],"yaml":true},{"content":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,","nodes":[{"pos":[0,306],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"&gt;&lt;/xref&gt;</ph>,","source":"<code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,"}],"pos":[156676,156983],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[157137,157217],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[157377,157457],"yaml":true},{"content":"Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"pos":[0,36],"content":"Authentication has already occurred.","nodes":[{"content":"Authentication has already occurred.","pos":[0,36]}]},{"pos":[43,50],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[57,194],"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","nodes":[{"content":"This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.","pos":[0,137],"nodes":[{"content":"This stream was used previously to attempt authentication as the client.","pos":[0,72]},{"content":"You cannot use the stream to retry authentication as the server.","pos":[73,137]}]}]}],"pos":[157567,157769],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[157871,157916],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[158022,158051],"yaml":true},{"content":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.","nodes":[{"pos":[0,197],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"&gt;&lt;/xref&gt;</ph> on a platform that does not support extended protection.","source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection."}],"pos":[158169,158367],"yaml":true},{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","nodes":[{"pos":[0,166],"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","pos":[0,166],"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"This method does not block.","pos":[139,166]}]}]}],"pos":[159770,159937],"yaml":true},{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,335],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","nodes":[{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","pos":[0,335],"nodes":[{"content":"The authentication uses the server's <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>.","pos":[155,335],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>."}]}]},{"pos":[342,756],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[763,902],"content":"To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.","nodes":[{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph> method overloads.","pos":[0,139],"source":"To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads."}]},{"pos":[909,1162],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[159948,161119],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the authentication is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete."}],"pos":[161372,161500],"yaml":true},{"content":"A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,160],"content":"A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the operation.","pos":[0,65]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[66,160],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[161566,161727],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[161790,161894],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[162137,162217],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[162377,162457],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[162563,162592],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[162694,162739],"yaml":true},{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.","nodes":[{"pos":[0,240],"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.","nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.","pos":[0,240],"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified extended protection policy.","pos":[139,212]},{"content":"This method does not block.","pos":[213,240]}]}]}],"pos":[164445,164686],"yaml":true},{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \n  \n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"pos":[0,335],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","nodes":[{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.","pos":[0,335],"nodes":[{"content":"The authentication uses the server's <ph id=\"ph1\">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, the security level is <ph id=\"ph2\">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>.","pos":[155,335],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>."}]}]},{"pos":[342,622],"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has <ph id=\"ph3\">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt;</ph> set to <ph id=\"ph4\">&lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never&gt;</ph>.","source":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>."},{"pos":[629,1043],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[1050,1189],"content":"To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.","nodes":[{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph> method overloads.","pos":[0,139],"source":"To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads."}]},{"pos":[1196,1449],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]}],"pos":[164697,166157],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.","nodes":[{"pos":[0,137],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;&lt;/xref&gt;</ph> that is used for extended protection.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."}],"pos":[166540,166678],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the authentication is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete."}],"pos":[166754,166882],"yaml":true},{"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,166],"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[72,166],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[166948,167115],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[167178,167282],"yaml":true},{"content":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.","nodes":[{"pos":[0,334],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"&gt;&lt;/xref&gt;</ph> on the extended protection policy passed in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter are both <ph id=\"ph4\">`null`</ph>.","source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`."}],"pos":[167465,167800],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[167954,168034],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[168194,168274],"yaml":true},{"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"pos":[0,44],"content":"Windows 95 and Windows 98 are not supported.","nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]}],"pos":[168376,168421],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[168527,168556],"yaml":true},{"content":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.","nodes":[{"pos":[0,197],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"&gt;&lt;/xref&gt;</ph> on a platform that does not support extended protection.","source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection."}],"pos":[168674,168872],"yaml":true},{"content":"Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.","nodes":[{"pos":[0,107],"content":"Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.","nodes":[{"content":"Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.","pos":[0,107]}]}],"pos":[170365,170473],"yaml":true},{"content":"If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it. If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.  \n  \n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.  \n  \n The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \n  \n The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations. If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.  \n  \n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"pos":[0,322],"content":"If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it. If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.","nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it. If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.","pos":[0,322],"nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it.","pos":[0,175]},{"content":"If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.","pos":[176,322]}]}]},{"pos":[329,513],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.","nodes":[{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.","pos":[0,184],"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.Read%2A&gt;</ph> method.","pos":[78,184],"source":" To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method."}]}]},{"pos":[520,931],"content":"The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"content":"The asynchronous read operation must be completed by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.EndRead%2A&gt;</ph> method.","pos":[0,126],"source":"The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[127,192],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","pos":[193,411],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}]},{"pos":[938,1221],"content":"The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations. If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.","nodes":[{"content":"The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations. If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.","pos":[0,283],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class does not support multiple simultaneous read operations.","pos":[0,108],"source":"The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations."},{"content":"If you attempt to start a read operation while another read operation is already executing on the same stream, a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph> exception will be thrown.","pos":[109,283],"source":" If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown."}]}]},{"pos":[1228,1624],"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,396],"nodes":[{"content":"You cannot call this method until you have successfully authenticated.","pos":[0,70]},{"content":"To authenticate, call one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> methods.","pos":[71,396],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}]}],"pos":[170484,172119],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Byte\"></xref> array that receives the bytes read from the stream.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array that receives the bytes read from the stream.","source":"A <xref href=\"System.Byte\"></xref> array that receives the bytes read from the stream."}],"pos":[172848,172935],"yaml":true},{"content":"The zero-based location in <code>buffer</code> at which to begin storing the data read from this stream.","nodes":[{"pos":[0,104],"content":"The zero-based location in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin storing the data read from this stream.","source":"The zero-based location in <code>buffer</code> at which to begin storing the data read from this stream."}],"pos":[172996,173101],"yaml":true},{"content":"The maximum number of bytes to read from the stream.","nodes":[{"pos":[0,52],"content":"The maximum number of bytes to read from the stream.","nodes":[{"content":"The maximum number of bytes to read from the stream.","pos":[0,52]}]}],"pos":[173161,173214],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the read operation is complete.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the read operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the read operation is complete."}],"pos":[173290,173418],"yaml":true},{"content":"A user-defined object containing information about the read operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,165],"content":"A user-defined object containing information about the read operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the read operation.","pos":[0,70]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[71,165],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[173484,173650],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[173713,173817],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[173992,174023],"yaml":true},{"content":"<code>offset</code> is less than 0.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than 0.","source":"<code>offset</code> is less than 0."},{"pos":[42,49],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[56,126],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph2\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","source":"<code>offset</code> is greater than the length of <code>buffer</code>."},{"pos":[133,140],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[147,241],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph3\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","source":"<code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>."}],"pos":[174117,174371],"yaml":true},{"content":"The read operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be decrypted.","nodes":[{"pos":[0,26],"content":"The read operation failed.","nodes":[{"content":"The read operation failed.","pos":[0,26]}]},{"pos":[33,40],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[47,105],"content":"Encryption is in use, but the data could not be decrypted.","nodes":[{"content":"Encryption is in use, but the data could not be decrypted.","pos":[0,58]}]}],"pos":[174459,174572],"yaml":true},{"content":"There is already a read operation in progress.","nodes":[{"pos":[0,46],"content":"There is already a read operation in progress.","nodes":[{"content":"There is already a read operation in progress.","pos":[0,46]}]}],"pos":[174674,174721],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[174827,174856],"yaml":true},{"content":"Authentication has not occurred.","nodes":[{"pos":[0,32],"content":"Authentication has not occurred.","nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]}],"pos":[174966,174999],"yaml":true},{"content":"Begins an asynchronous write operation that writes <xref href=\"System.Byte\"></xref>s from the specified buffer to the stream.","nodes":[{"pos":[0,125],"content":"Begins an asynchronous write operation that writes <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph>s from the specified buffer to the stream.","source":"Begins an asynchronous write operation that writes <xref href=\"System.Byte\"></xref>s from the specified buffer to the stream."}],"pos":[176498,176624],"yaml":true},{"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.  \n  \n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.  \n  \n The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \n  \n The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.  \n  \n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"pos":[0,339],"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.","nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.","pos":[0,339],"nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.","pos":[0,191]},{"content":"If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.","pos":[192,339]}]}]},{"pos":[346,530],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.","nodes":[{"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.","pos":[0,184],"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.Read%2A&gt;</ph> method.","pos":[78,184],"source":" To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method."}]}]},{"pos":[537,949],"content":"The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"content":"The asynchronous read operation must be completed by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.EndWrite%2A&gt;</ph> method.","pos":[0,127],"source":"The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[128,193],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","pos":[194,412],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}]},{"pos":[956,1242],"content":"The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.","nodes":[{"content":"The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.","pos":[0,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class does not support multiple simultaneous write operations.","pos":[0,109],"source":"The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations."},{"content":"If you attempt to start a write operation while another write operation is already executing on the same stream, a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph> exception will be thrown.","pos":[110,286],"source":" If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown."}]}]},{"pos":[1249,1645],"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,396],"nodes":[{"content":"You cannot call this method until you have successfully authenticated.","pos":[0,70]},{"content":"To authenticate, call one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> methods.","pos":[71,396],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}]}],"pos":[176635,178291],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Byte\"></xref> array that supplies the bytes to be written to the stream.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array that supplies the bytes to be written to the stream.","source":"A <xref href=\"System.Byte\"></xref> array that supplies the bytes to be written to the stream."}],"pos":[179235,179329],"yaml":true},{"content":"The zero-based location in <code>buffer</code> at which to begin reading bytes to be written to the stream.","nodes":[{"pos":[0,107],"content":"The zero-based location in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin reading bytes to be written to the stream.","source":"The zero-based location in <code>buffer</code> at which to begin reading bytes to be written to the stream."}],"pos":[179390,179498],"yaml":true},{"content":"An <xref href=\"System.Int32\"></xref> value that specifies the number of bytes to read from <code>buffer</code>.","nodes":[{"pos":[0,111],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value that specifies the number of bytes to read from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Int32\"></xref> value that specifies the number of bytes to read from <code>buffer</code>."}],"pos":[179558,179670],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the write operation is complete.","nodes":[{"pos":[0,128],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the write operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the write operation is complete."}],"pos":[179746,179875],"yaml":true},{"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"pos":[0,166],"content":"A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.","nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation completes.","pos":[72,166],"source":" This object is passed to the <code>asyncCallback</code> delegate when the operation completes."}]}],"pos":[179941,180108],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object indicating the status of the asynchronous operation.","source":"An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation."}],"pos":[180171,180275],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[180451,180482],"yaml":true},{"content":"<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;offset is less than 0&lt;/code&gt;</ph>.","source":"<code>offset is less than 0</code>."},{"pos":[42,49],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[56,126],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph2\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","source":"<code>offset</code> is greater than the length of <code>buffer</code>."},{"pos":[133,140],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[147,228],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus count is greater than the length of <ph id=\"ph2\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","source":"<code>offset</code> plus count is greater than the length of <code>buffer</code>."}],"pos":[180576,180817],"yaml":true},{"content":"The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted.","nodes":[{"pos":[0,27],"content":"The write operation failed.","nodes":[{"content":"The write operation failed.","pos":[0,27]}]},{"pos":[34,41],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[48,106],"content":"Encryption is in use, but the data could not be encrypted.","nodes":[{"content":"Encryption is in use, but the data could not be encrypted.","pos":[0,58]}]}],"pos":[180905,181019],"yaml":true},{"content":"There is already a write operation in progress.","nodes":[{"pos":[0,47],"content":"There is already a write operation in progress.","nodes":[{"content":"There is already a write operation in progress.","pos":[0,47]}]}],"pos":[181121,181169],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[181275,181304],"yaml":true},{"content":"Authentication has not occurred.","nodes":[{"pos":[0,32],"content":"Authentication has not occurred.","nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]}],"pos":[181414,181447],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream is readable.","nodes":[{"pos":[0,106],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether the underlying stream is readable.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream is readable."}],"pos":[182567,182674],"yaml":true},{"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","nodes":[{"pos":[0,289],"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","pos":[0,289],"nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property on the underlying stream.","pos":[0,169],"source":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream."},{"content":"The underlying stream is specified when you create an instance of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class.","pos":[170,289],"source":" The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class."}]}]}],"pos":[182685,182975],"yaml":true,"extradata":"MT"},{"content":"`true` if authentication has occurred and the underlying stream is readable; otherwise, `false`.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">`true`</ph> if authentication has occurred and the underlying stream is readable; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if authentication has occurred and the underlying stream is readable; otherwise, `false`."}],"pos":[183441,183540],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream is seekable.","nodes":[{"pos":[0,106],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether the underlying stream is seekable.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream is seekable."}],"pos":[184758,184865],"yaml":true},{"content":"You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","nodes":[{"pos":[0,245],"content":"You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","nodes":[{"content":"You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","pos":[0,245],"nodes":[{"content":"You should not attempt to set the position of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> object or its underlying stream.","pos":[0,125],"source":"You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream."},{"content":"The underlying stream is specified when you create an instance of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class.","pos":[126,245],"source":" The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class."}]}]}],"pos":[184876,185122],"yaml":true,"extradata":"MT"},{"content":"This property always returns `false`.","nodes":[{"pos":[0,37],"content":"This property always returns <ph id=\"ph1\">`false`</ph>.","source":"This property always returns `false`."}],"pos":[185588,185626],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream supports time-outs.","nodes":[{"pos":[0,113],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether the underlying stream supports time-outs.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream supports time-outs."}],"pos":[186862,186976],"yaml":true},{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","nodes":[{"pos":[0,249],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","pos":[0,249],"nodes":[{"content":"This property returns the value returned by invoking the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> property on the underlying stream.","pos":[0,129],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream."},{"content":"The underlying stream is specified when you create an instance of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class.","pos":[130,249],"source":" The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class."}]}]}],"pos":[186987,187237],"yaml":true,"extradata":"MT"},{"content":"`true` if the underlying stream supports time-outs; otherwise, `false`.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">`true`</ph> if the underlying stream supports time-outs; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the underlying stream supports time-outs; otherwise, `false`."}],"pos":[187740,187814],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream is writable.","nodes":[{"pos":[0,106],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether the underlying stream is writable.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream is writable."}],"pos":[189081,189188],"yaml":true},{"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","nodes":[{"pos":[0,290],"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","pos":[0,290],"nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property on the underlying stream.","pos":[0,170],"source":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream."},{"content":"The underlying stream is specified when you create an instance of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class.","pos":[171,290],"source":" The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class."}]}]}],"pos":[189199,189490],"yaml":true,"extradata":"MT"},{"content":"`true` if authentication has occurred and the underlying stream is writable; otherwise, `false`.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">`true`</ph> if authentication has occurred and the underlying stream is writable; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if authentication has occurred and the underlying stream is writable; otherwise, `false`."}],"pos":[189957,190056],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,148],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> and optionally releases the managed resources."}],"pos":[191348,191497],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,293],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[210,293],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[300,537],"content":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> references.","pos":[0,167],"source":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[168,237],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[191508,192050],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[192239,192342],"yaml":true},{"content":"Ends a pending asynchronous client authentication operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"></xref>.","nodes":[{"pos":[0,176],"content":"Ends a pending asynchronous client authentication operation that was started with a call to <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"&gt;&lt;/xref&gt;</ph>.","source":"Ends a pending asynchronous client authentication operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"></xref>."}],"pos":[193735,193912],"yaml":true},{"content":"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.  \n  \n To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.","nodes":[{"pos":[0,488],"content":"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,488],"nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]},{"content":"When the authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[70,346],"source":" When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[347,488],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[495,748],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]},{"pos":[755,885],"content":"To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.","nodes":[{"content":"To perform this operation synchronously, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph> method.","pos":[0,130],"source":"To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method."}]}],"pos":[193923,194815],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"></xref>.","nodes":[{"pos":[0,159],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance returned by a call to <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"></xref>."}],"pos":[195033,195193],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[195382,195418],"yaml":true},{"content":"<code>asyncResult</code> was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"></xref>.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not created by a call to <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"&gt;&lt;/xref&gt;</ph>.","source":"<code>asyncResult</code> was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"></xref>."}],"pos":[195512,195651],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[195805,195885],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[196045,196125],"yaml":true},{"content":"There is no pending client authentication to complete.","nodes":[{"pos":[0,54],"content":"There is no pending client authentication to complete.","nodes":[{"content":"There is no pending client authentication to complete.","pos":[0,54]}]}],"pos":[196235,196290],"yaml":true},{"content":"Ends a pending asynchronous client authentication operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"></xref>.","nodes":[{"pos":[0,176],"content":"Ends a pending asynchronous client authentication operation that was started with a call to <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"&gt;&lt;/xref&gt;</ph>.","source":"Ends a pending asynchronous client authentication operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"></xref>."}],"pos":[197609,197786],"yaml":true},{"content":"If the operation has not completed, this method blocks until it does.  \n  \n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \n  \n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.","nodes":[{"pos":[0,69],"content":"If the operation has not completed, this method blocks until it does.","nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]}]},{"pos":[76,490],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,414],"nodes":[{"content":"When authentication succeeds, you must check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt;</ph> properties to determine what security services are used by the <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt;</ph> property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[497,750],"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","nodes":[{"content":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,253],"nodes":[{"content":"If the authentication fails, you receive an <ph id=\"ph1\">&lt;xref:System.Security.Authentication.AuthenticationException&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Security.Authentication.InvalidCredentialException&gt;</ph>.","pos":[0,177],"source":"If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[178,253]}]}]},{"pos":[757,880],"content":"To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.","nodes":[{"content":"To perform this operation synchronously, use the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph> method.","pos":[0,123],"source":"To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method."}]}],"pos":[197797,198686],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"></xref>.","nodes":[{"pos":[0,159],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance returned by a call to <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"></xref>."}],"pos":[198904,199064],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[199253,199289],"yaml":true},{"content":"<code>asyncResult</code> was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"></xref>.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not created by a call to <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"&gt;&lt;/xref&gt;</ph>.","source":"<code>asyncResult</code> was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"></xref>."}],"pos":[199383,199522],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[199676,199756],"yaml":true},{"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"pos":[0,79],"content":"The authentication failed. You can use this object to retry the authentication.","nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]}],"pos":[199916,199996],"yaml":true},{"content":"There is no pending authentication to complete.","nodes":[{"pos":[0,47],"content":"There is no pending authentication to complete.","nodes":[{"content":"There is no pending authentication to complete.","pos":[0,47]}]}],"pos":[200106,200154],"yaml":true},{"content":"Ends an asynchronous read operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>.","nodes":[{"pos":[0,211],"content":"Ends an asynchronous read operation that was started with a call to <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"Ends an asynchronous read operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>."}],"pos":[201377,201589],"yaml":true},{"content":"If the operation has not completed, this method blocks until it does.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.  \n  \n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"pos":[0,69],"content":"If the operation has not completed, this method blocks until it does.","nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]}]},{"pos":[76,183],"content":"To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.","nodes":[{"content":"To perform this operation synchronously, use the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.Read%2A&gt;</ph> method.","pos":[0,107],"source":"To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method."}]},{"pos":[190,586],"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,396],"nodes":[{"content":"You cannot call this method until you have successfully authenticated.","pos":[0,70]},{"content":"To authenticate, call one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> methods.","pos":[71,396],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}]}],"pos":[201600,202193],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>","nodes":[{"pos":[0,217],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance returned by a call to <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph>","source":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>"}],"pos":[202865,203083],"yaml":true},{"content":"A <xref href=\"System.Int32\"></xref> value that specifies the number of bytes read from the underlying stream.","nodes":[{"pos":[0,109],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value that specifies the number of bytes read from the underlying stream.","source":"A <xref href=\"System.Int32\"></xref> value that specifies the number of bytes read from the underlying stream."}],"pos":[203139,203249],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[203422,203458],"yaml":true},{"content":"The asyncResult was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>.","nodes":[{"pos":[0,188],"content":"The asyncResult was not created by a call to <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"The asyncResult was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>."}],"pos":[203552,203741],"yaml":true},{"content":"Authentication has not occurred.","nodes":[{"pos":[0,32],"content":"Authentication has not occurred.","nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]}],"pos":[203851,203884],"yaml":true},{"content":"The read operation failed.","nodes":[{"pos":[0,26],"content":"The read operation failed.","nodes":[{"content":"The read operation failed.","pos":[0,26]}]}],"pos":[203972,203999],"yaml":true},{"content":"Ends an asynchronous write operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>.","nodes":[{"pos":[0,213],"content":"Ends an asynchronous write operation that was started with a call to <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"Ends an asynchronous write operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>."}],"pos":[205228,205442],"yaml":true},{"content":"If the operation has not completed, this method blocks until it does.  \n  \n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.","nodes":[{"pos":[0,69],"content":"If the operation has not completed, this method blocks until it does.","nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]}]},{"pos":[76,472],"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,396],"nodes":[{"content":"You cannot call this method until you have successfully authenticated.","pos":[0,70]},{"content":"To authenticate, call one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> methods.","pos":[71,396],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}]},{"pos":[479,587],"content":"To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.","nodes":[{"content":"To perform this operation synchronously, use the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.Write%2A&gt;</ph> method.","pos":[0,108],"source":"To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method."}]}],"pos":[205453,206047],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>","nodes":[{"pos":[0,218],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance returned by a call to <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph>","source":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>"}],"pos":[206753,206972],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[207146,207182],"yaml":true},{"content":"The asyncResult was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>.","nodes":[{"pos":[0,189],"content":"The asyncResult was not created by a call to <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"The asyncResult was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>."}],"pos":[207276,207466],"yaml":true},{"content":"Authentication has not occurred.","nodes":[{"pos":[0,32],"content":"Authentication has not occurred.","nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]}],"pos":[207576,207609],"yaml":true},{"content":"The write operation failed.","nodes":[{"pos":[0,27],"content":"The write operation failed.","nodes":[{"content":"The write operation failed.","pos":[0,27]}]}],"pos":[207697,207725],"yaml":true},{"content":"Causes any buffered data to be written to the underlying device.","nodes":[{"pos":[0,64],"content":"Causes any buffered data to be written to the underlying device.","nodes":[{"content":"Causes any buffered data to be written to the underlying device.","pos":[0,64]}]}],"pos":[208837,208902],"yaml":true},{"content":"This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.","nodes":[{"pos":[0,78],"content":"This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.","nodes":[{"content":"This method invokes <ph id=\"ph1\">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> on the underlying stream.","pos":[0,78],"source":"This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream."}]}],"pos":[208913,208992],"yaml":true,"extradata":"MT"},{"content":"Gets a value that indicates how the server can use the client's credentials.","nodes":[{"pos":[0,76],"content":"Gets a value that indicates how the server can use the client's credentials.","nodes":[{"content":"Gets a value that indicates how the server can use the client's credentials.","pos":[0,76]}]}],"pos":[211860,211937],"yaml":true},{"content":"You must successfully authenticate before calling this method. Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used.","nodes":[{"pos":[0,489],"content":"You must successfully authenticate before calling this method. Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used.","nodes":[{"content":"You must successfully authenticate before calling this method. Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used.","pos":[0,489],"nodes":[{"content":"You must successfully authenticate before calling this method.","pos":[0,62]},{"content":"Clients specify the impersonation level when they request authentication by calling one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;</ph> methods.","pos":[63,308],"source":" Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods."},{"content":"If you authenticate without specifying a <ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph> , <ph id=\"ph2\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph> is used.","pos":[309,489],"source":" If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used."}]}]}],"pos":[211948,212438],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values.","nodes":[{"pos":[0,89],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values."}],"pos":[213028,213118],"yaml":true},{"content":"Authentication failed or has not occurred.","nodes":[{"pos":[0,42],"content":"Authentication failed or has not occurred.","nodes":[{"content":"Authentication failed or has not occurred.","pos":[0,42]}]}],"pos":[213310,213353],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether authentication was successful.","nodes":[{"pos":[0,102],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether authentication was successful.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether authentication was successful."}],"pos":[214585,214688],"yaml":true},{"content":"Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"pos":[0,373],"content":"Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"content":"Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,373],"nodes":[{"content":"Clients authenticate by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;</ph> methods.","pos":[0,186],"source":"Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods."},{"content":"Servers authenticate by calling the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> methods.","pos":[187,373],"source":" Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}]}],"pos":[214699,215073],"yaml":true,"extradata":"MT"},{"content":"`true` if successful authentication occurred; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if successful authentication occurred; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if successful authentication occurred; otherwise, `false`."}],"pos":[215581,215649],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether this <xref href=\"System.Net.Security.NegotiateStream\"></xref> uses data encryption.","nodes":[{"pos":[0,155],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether this <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph> uses data encryption.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether this <xref href=\"System.Net.Security.NegotiateStream\"></xref> uses data encryption."}],"pos":[216939,217095],"yaml":true},{"content":"Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.","nodes":[{"pos":[0,151],"content":"Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.","nodes":[{"content":"Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.","pos":[0,151]}]}],"pos":[217106,217258],"yaml":true,"extradata":"MT"},{"content":"`true` if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, `false`.","nodes":[{"pos":[0,140],"content":"<ph id=\"ph1\">`true`</ph> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, `false`."}],"pos":[217762,217905],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether both the server and the client have been authenticated.","nodes":[{"pos":[0,127],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether both the server and the client have been authenticated.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether both the server and the client have been authenticated."}],"pos":[219263,219391],"yaml":true},{"content":"Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication. By default, clients request mutual authentication.  \n  \n The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server. NTLM does not support mutual authentication.","nodes":[{"pos":[0,175],"content":"Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication. By default, clients request mutual authentication.","nodes":[{"content":"Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication. By default, clients request mutual authentication.","pos":[0,175],"nodes":[{"content":"Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication.","pos":[0,124]},{"content":"By default, clients request mutual authentication.","pos":[125,175]}]}]},{"pos":[182,353],"content":"The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server. NTLM does not support mutual authentication.","nodes":[{"content":"The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server. NTLM does not support mutual authentication.","pos":[0,171],"nodes":[{"content":"The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server.","pos":[0,126]},{"content":"NTLM does not support mutual authentication.","pos":[127,171]}]}]}],"pos":[219402,219760],"yaml":true,"extradata":"MT"},{"content":"`true` if the server has been authenticated; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> if the server has been authenticated; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the server has been authenticated; otherwise, `false`."}],"pos":[220276,220343],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the local side of the connection used by this <xref href=\"System.Net.Security.NegotiateStream\"></xref> was authenticated as the server.","nodes":[{"pos":[0,207],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether the local side of the connection used by this <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph> was authenticated as the server.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the local side of the connection used by this <xref href=\"System.Net.Security.NegotiateStream\"></xref> was authenticated as the server."}],"pos":[221623,221831],"yaml":true},{"content":"If authentication failed or did not occur, this property returns `false`.  \n  \n To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"pos":[0,73],"content":"If authentication failed or did not occur, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If authentication failed or did not occur, this property returns `false`."},{"pos":[80,270],"content":"To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"content":"To authenticate as the server, call the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> methods.","pos":[0,190],"source":"To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}],"pos":[221842,222117],"yaml":true,"extradata":"MT"},{"content":"`true` if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, `false`.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">`true`</ph> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, `false`."}],"pos":[222618,222752],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the data sent using this stream is signed.","nodes":[{"pos":[0,114],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether the data sent using this stream is signed.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the data sent using this stream is signed."}],"pos":[224017,224132],"yaml":true},{"content":"Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.","nodes":[{"pos":[0,155],"content":"Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.","nodes":[{"content":"Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.","pos":[0,155]}]}],"pos":[224143,224299],"yaml":true,"extradata":"MT"},{"content":"`true` if the data is signed before being transmitted; otherwise, `false`.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">`true`</ph> if the data is signed before being transmitted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the data is signed before being transmitted; otherwise, `false`."}],"pos":[224800,224877],"yaml":true},{"content":"Gets the length of the underlying stream.","nodes":[{"pos":[0,41],"content":"Gets the length of the underlying stream.","nodes":[{"content":"Gets the length of the underlying stream.","pos":[0,41]}]}],"pos":[226130,226172],"yaml":true},{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","nodes":[{"pos":[0,321],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[0,321],"nodes":[{"content":"This property returns the value returned by invoking the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> property on the underlying stream.","pos":[0,125],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream."},{"content":"If the underlying stream is not seekable, this property will typically throw an exception.","pos":[126,216]},{"content":"The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[217,321]}]}]}],"pos":[226183,226505],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Int64\"></xref> that specifies the length of the underlying stream.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> that specifies the length of the underlying stream.","source":"A <xref href=\"System.Int64\"></xref> that specifies the length of the underlying stream."}],"pos":[226968,227056],"yaml":true},{"content":"Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.","nodes":[{"pos":[0,138],"content":"Getting the value of this property is not supported when the underlying stream is a <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;&lt;/xref&gt;</ph>.","source":"Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."}],"pos":[227228,227367],"yaml":true},{"content":"Gets or sets the current position in the underlying stream.","nodes":[{"pos":[0,59],"content":"Gets or sets the current position in the underlying stream.","nodes":[{"content":"Gets or sets the current position in the underlying stream.","pos":[0,59]}]}],"pos":[228517,228577],"yaml":true},{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","nodes":[{"pos":[0,323],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[0,323],"nodes":[{"content":"This property returns the value returned by invoking the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> property on the underlying stream.","pos":[0,127],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream."},{"content":"If the underlying stream is not seekable, this property will typically throw an exception.","pos":[128,218]},{"content":"The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[219,323]}]}]}],"pos":[228588,228912],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Int64\"></xref> that specifies the current position in the underlying stream.","nodes":[{"pos":[0,97],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> that specifies the current position in the underlying stream.","source":"A <xref href=\"System.Int64\"></xref> that specifies the current position in the underlying stream."}],"pos":[229035,229133],"yaml":true},{"content":"Setting this property is not supported.  \n  \n \\- or -  \n  \n Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.","nodes":[{"pos":[0,39],"content":"Setting this property is not supported.","nodes":[{"content":"Setting this property is not supported.","pos":[0,39]}]},{"pos":[46,53],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[60,198],"content":"Getting the value of this property is not supported when the underlying stream is a <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;&lt;/xref&gt;</ph>.","source":"Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."}],"pos":[229307,229515],"yaml":true},{"content":"Reads data from this stream and stores it in the specified array.","nodes":[{"pos":[0,65],"content":"Reads data from this stream and stores it in the specified array.","nodes":[{"content":"Reads data from this stream and stores it in the specified array.","pos":[0,65]}]}],"pos":[230828,230894],"yaml":true},{"content":"The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`.  \n  \n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.  \n  \n To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.","nodes":[{"pos":[0,118],"content":"The method reads a maximum of <ph id=\"ph1\">`count`</ph> bytes from the current stream and stores them in <ph id=\"ph2\">`buffer`</ph> beginning at <ph id=\"ph3\">`offset`</ph>.","source":"The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`."},{"pos":[125,521],"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,396],"nodes":[{"content":"You cannot call this method until you have successfully authenticated.","pos":[0,70]},{"content":"To authenticate, call one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> methods.","pos":[71,396],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}]},{"pos":[528,641],"content":"To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.","nodes":[{"content":"To perform this operation asynchronously, use the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.BeginRead%2A&gt;</ph> method.","pos":[0,113],"source":"To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method."}]}],"pos":[230905,231553],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Byte\"></xref> array that receives the bytes read from the stream.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array that receives the bytes read from the stream.","source":"A <xref href=\"System.Byte\"></xref> array that receives the bytes read from the stream."}],"pos":[232120,232207],"yaml":true},{"content":"A <xref href=\"System.Int32\"></xref> containing the zero-based location in <code>buffer</code> at which to begin storing the data read from this stream.","nodes":[{"pos":[0,151],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> containing the zero-based location in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin storing the data read from this stream.","source":"A <xref href=\"System.Int32\"></xref> containing the zero-based location in <code>buffer</code> at which to begin storing the data read from this stream."}],"pos":[232268,232420],"yaml":true},{"content":"A <xref href=\"System.Int32\"></xref> containing the maximum number of bytes to read from the stream.","nodes":[{"pos":[0,99],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> containing the maximum number of bytes to read from the stream.","source":"A <xref href=\"System.Int32\"></xref> containing the maximum number of bytes to read from the stream."}],"pos":[232480,232580],"yaml":true},{"content":"A <xref href=\"System.Int32\"></xref> value that specifies the number of bytes read from the underlying stream. When there is no more data to be read, returns 0.","nodes":[{"pos":[0,159],"content":"A <xref href=\"System.Int32\"></xref> value that specifies the number of bytes read from the underlying stream. When there is no more data to be read, returns 0.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value that specifies the number of bytes read from the underlying stream.","pos":[0,109],"source":"A <xref href=\"System.Int32\"></xref> value that specifies the number of bytes read from the underlying stream."},{"content":"When there is no more data to be read, returns 0.","pos":[110,159]}]}],"pos":[232636,232796],"yaml":true},{"content":"The read operation failed.","nodes":[{"pos":[0,26],"content":"The read operation failed.","nodes":[{"content":"The read operation failed.","pos":[0,26]}]}],"pos":[232952,232979],"yaml":true},{"content":"Authentication has not occurred.","nodes":[{"pos":[0,32],"content":"Authentication has not occurred.","nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]}],"pos":[233089,233122],"yaml":true},{"content":"A <xref href=\"System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\"></xref> operation is already in progress.","nodes":[{"pos":[0,138],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\"&gt;&lt;/xref&gt;</ph> operation is already in progress.","source":"A <xref href=\"System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\"></xref> operation is already in progress."}],"pos":[233224,233363],"yaml":true},{"content":"Gets or sets the amount of time a read operation blocks waiting for data.","nodes":[{"pos":[0,73],"content":"Gets or sets the amount of time a read operation blocks waiting for data.","nodes":[{"content":"Gets or sets the amount of time a read operation blocks waiting for data.","pos":[0,73]}]}],"pos":[234571,234645],"yaml":true},{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.  \n  \n If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.","nodes":[{"pos":[0,263],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.","nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.","pos":[0,263],"nodes":[{"content":"This property returns the value returned by invoking the <ph id=\"ph1\">&lt;xref:System.IO.Stream.ReadTimeout%2A&gt;</ph> property on the underlying stream.","pos":[0,130],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream."},{"content":"When you set this property, the <ph id=\"ph1\">&lt;xref:System.IO.Stream.ReadTimeout%2A&gt;</ph> value on the underlying stream is set to the specified value.","pos":[131,263],"source":" When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value."}]}]},{"pos":[270,524],"content":"If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.","nodes":[{"content":"If the underlying stream is a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.ReadTimeout%2A&gt;</ph> is in milliseconds and is set to <ph id=\"ph3\">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> by default so that read operations do not time out.","pos":[0,254],"source":"If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out."}]}],"pos":[234656,235185],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Int32\"></xref> that specifies the amount of time that will elapse before a read operation fails.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> that specifies the amount of time that will elapse before a read operation fails.","source":"A <xref href=\"System.Int32\"></xref> that specifies the amount of time that will elapse before a read operation fails."}],"pos":[235657,235775],"yaml":true},{"content":"Gets information about the identity of the remote party sharing this authenticated stream.","nodes":[{"pos":[0,90],"content":"Gets information about the identity of the remote party sharing this authenticated stream.","nodes":[{"content":"Gets information about the identity of the remote party sharing this authenticated stream.","pos":[0,90]}]}],"pos":[237039,237130],"yaml":true},{"content":"When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used. When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client. If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.","nodes":[{"pos":[0,500],"content":"When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used. When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client. If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.","nodes":[{"content":"When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used. When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client. If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.","pos":[0,500],"nodes":[{"content":"When accessed by the client, this property returns a <ph id=\"ph1\">&lt;xref:System.Security.Principal.GenericIdentity&gt;</ph> containing the Service Principal Name (SPN) of the server and the authentication protocol used.","pos":[0,197],"source":"When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used."},{"content":"When accessed by the server, this property returns a <ph id=\"ph1\">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> that describes the client.","pos":[198,326],"source":" When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> is not available, client information is returned to the server in a <ph id=\"ph2\">&lt;xref:System.Security.Principal.GenericIdentity&gt;</ph>.","pos":[327,500],"source":" If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>."}]}]}],"pos":[237141,237642],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Principal.IIdentity\"></xref> object that describes the identity of the remote endpoint.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IIdentity\"&gt;&lt;/xref&gt;</ph> object that describes the identity of the remote endpoint.","source":"An <xref href=\"System.Security.Principal.IIdentity\"></xref> object that describes the identity of the remote endpoint."}],"pos":[238205,238324],"yaml":true},{"content":"Authentication failed or has not occurred.","nodes":[{"pos":[0,42],"content":"Authentication failed or has not occurred.","nodes":[{"content":"Authentication failed or has not occurred.","pos":[0,42]}]}],"pos":[238512,238555],"yaml":true},{"content":"Throws <xref href=\"System.NotSupportedException\"></xref>.","nodes":[{"pos":[0,57],"content":"Throws <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph>.","source":"Throws <xref href=\"System.NotSupportedException\"></xref>."}],"pos":[239881,239939],"yaml":true},{"content":"Do not call this method. It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.","nodes":[{"pos":[0,109],"content":"Do not call this method. It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.","nodes":[{"content":"Do not call this method. It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.","pos":[0,109],"nodes":[{"content":"Do not call this method.","pos":[0,24]},{"content":"It is inherited, but is not supported by <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph>.","pos":[25,109],"source":" It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>."}]}]}],"pos":[239950,240060],"yaml":true,"extradata":"MT"},{"content":"This value is ignored.","nodes":[{"pos":[0,22],"content":"This value is ignored.","nodes":[{"content":"This value is ignored.","pos":[0,22]}]}],"pos":[240264,240287],"yaml":true},{"content":"This value is ignored.","nodes":[{"pos":[0,22],"content":"This value is ignored.","nodes":[{"content":"This value is ignored.","pos":[0,22]}]}],"pos":[240356,240379],"yaml":true},{"content":"Always throws a <xref href=\"System.NotSupportedException\"></xref>.","nodes":[{"pos":[0,66],"content":"Always throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph>.","source":"Always throws a <xref href=\"System.NotSupportedException\"></xref>."}],"pos":[240435,240502],"yaml":true},{"content":"Seeking is not supported on <xref href=\"System.Net.Security.NegotiateStream\"></xref>.","nodes":[{"pos":[0,85],"content":"Seeking is not supported on <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;&lt;/xref&gt;</ph>.","source":"Seeking is not supported on <xref href=\"System.Net.Security.NegotiateStream\"></xref>."}],"pos":[240672,240758],"yaml":true},{"content":"Sets the length of the underlying stream.","nodes":[{"pos":[0,41],"content":"Sets the length of the underlying stream.","nodes":[{"content":"Sets the length of the underlying stream.","pos":[0,41]}]}],"pos":[242015,242057],"yaml":true},{"content":"An <xref href=\"System.Int64\"></xref> value that specifies the length of the stream.","nodes":[{"pos":[0,83],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> value that specifies the length of the stream.","source":"An <xref href=\"System.Int64\"></xref> value that specifies the length of the stream."}],"pos":[242235,242319],"yaml":true},{"content":"Write the specified number of <xref href=\"System.Byte\"></xref>s to the underlying stream using the specified buffer and offset.","nodes":[{"pos":[0,127],"content":"Write the specified number of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph>s to the underlying stream using the specified buffer and offset.","source":"Write the specified number of <xref href=\"System.Byte\"></xref>s to the underlying stream using the specified buffer and offset."}],"pos":[243754,243882],"yaml":true},{"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.  \n  \n This method blocks while the write operation completes. To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.  \n  \n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.  \n  \n The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.","nodes":[{"pos":[0,341],"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.","nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.","pos":[0,341],"nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.","pos":[0,191]},{"content":"If no security services such as data encryption or signing are in use, this method invokes <ph id=\"ph1\">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> on the underlying stream.","pos":[192,341],"source":" If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream."}]}]},{"pos":[348,522],"content":"This method blocks while the write operation completes. To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.","nodes":[{"content":"This method blocks while the write operation completes. To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.","pos":[0,174],"nodes":[{"content":"This method blocks while the write operation completes.","pos":[0,55]},{"content":"To prevent blocking while the operation completes, use the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.Write%2A&gt;</ph> method.","pos":[56,174],"source":" To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method."}]}]},{"pos":[529,925],"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","nodes":[{"content":"You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,396],"nodes":[{"content":"You cannot call this method until you have successfully authenticated.","pos":[0,70]},{"content":"To authenticate, call one of the <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt;</ph> methods.","pos":[71,396],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}]},{"pos":[932,1218],"content":"The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.","nodes":[{"content":"The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.","pos":[0,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> class does not support multiple simultaneous write operations.","pos":[0,109],"source":"The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations."},{"content":"If you attempt to start a write operation while another write operation is already executing on the same stream, a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph> exception will be thrown.","pos":[110,286],"source":" If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown."}]}]}],"pos":[243893,245120],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Byte\"></xref> array that supplies the bytes written to the stream.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array that supplies the bytes written to the stream.","source":"A <xref href=\"System.Byte\"></xref> array that supplies the bytes written to the stream."}],"pos":[245687,245775],"yaml":true},{"content":"An <xref href=\"System.Int32\"></xref> containing the zero-based location in <code>buffer</code> at which to begin reading bytes to be written to the stream.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> containing the zero-based location in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin reading bytes to be written to the stream.","source":"An <xref href=\"System.Int32\"></xref> containing the zero-based location in <code>buffer</code> at which to begin reading bytes to be written to the stream."}],"pos":[245836,245992],"yaml":true},{"content":"A <xref href=\"System.Int32\"></xref> containing the number of bytes to read from <code>buffer</code>.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> containing the number of bytes to read from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Int32\"></xref> containing the number of bytes to read from <code>buffer</code>."}],"pos":[246052,246153],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[246324,246355],"yaml":true},{"content":"<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;offset is less than 0&lt;/code&gt;</ph>.","source":"<code>offset is less than 0</code>."},{"pos":[42,49],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[56,126],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph2\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","source":"<code>offset</code> is greater than the length of <code>buffer</code>."},{"pos":[133,140],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[147,228],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus count is greater than the length of <ph id=\"ph2\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","source":"<code>offset</code> plus count is greater than the length of <code>buffer</code>."}],"pos":[246449,246690],"yaml":true},{"content":"The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted.","nodes":[{"pos":[0,27],"content":"The write operation failed.","nodes":[{"content":"The write operation failed.","pos":[0,27]}]},{"pos":[34,41],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[48,106],"content":"Encryption is in use, but the data could not be encrypted.","nodes":[{"content":"Encryption is in use, but the data could not be encrypted.","pos":[0,58]}]}],"pos":[246778,246892],"yaml":true},{"content":"There is already a write operation in progress.","nodes":[{"pos":[0,47],"content":"There is already a write operation in progress.","nodes":[{"content":"There is already a write operation in progress.","pos":[0,47]}]}],"pos":[246994,247042],"yaml":true},{"content":"This object has been closed.","nodes":[{"pos":[0,28],"content":"This object has been closed.","nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"pos":[247148,247177],"yaml":true},{"content":"Authentication has not occurred.","nodes":[{"pos":[0,32],"content":"Authentication has not occurred.","nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]}],"pos":[247287,247320],"yaml":true},{"content":"Gets or sets the amount of time a write operation blocks waiting for data.","nodes":[{"pos":[0,74],"content":"Gets or sets the amount of time a write operation blocks waiting for data.","nodes":[{"content":"Gets or sets the amount of time a write operation blocks waiting for data.","pos":[0,74]}]}],"pos":[248534,248609],"yaml":true},{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.  \n  \n If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.","nodes":[{"pos":[0,252],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.","nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.","pos":[0,252],"nodes":[{"content":"This property returns the value returned by invoking the <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteTimeout%2A&gt;</ph> property on the underlying stream.","pos":[0,131],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream."},{"content":"For set operations, the specified value sets the <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteTimeout%2A&gt;</ph> value on the underlying stream.","pos":[132,252],"source":" For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream."}]}]},{"pos":[259,515],"content":"If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.","nodes":[{"content":"If the underlying stream is a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.WriteTimeout%2A&gt;</ph> is in milliseconds and is set to <ph id=\"ph3\">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> by default so that write operations do not time out.","pos":[0,256],"source":"If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out."}]}],"pos":[248620,249140],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Int32\"></xref> that specifies the amount of time that will elapse before a write operation fails.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> that specifies the amount of time that will elapse before a write operation fails.","source":"A <xref href=\"System.Int32\"></xref> that specifies the amount of time that will elapse before a write operation fails."}],"pos":[249613,249732],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Security.NegotiateStream\n  commentId: T:System.Net.Security.NegotiateStream\n  id: NegotiateStream\n  children:\n  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)\n  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServer\n  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync\n  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.CanRead\n  - System.Net.Security.NegotiateStream.CanSeek\n  - System.Net.Security.NegotiateStream.CanTimeout\n  - System.Net.Security.NegotiateStream.CanWrite\n  - System.Net.Security.NegotiateStream.Dispose(System.Boolean)\n  - System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)\n  - System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)\n  - System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)\n  - System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)\n  - System.Net.Security.NegotiateStream.Flush\n  - System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)\n  - System.Net.Security.NegotiateStream.ImpersonationLevel\n  - System.Net.Security.NegotiateStream.IsAuthenticated\n  - System.Net.Security.NegotiateStream.IsEncrypted\n  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\n  - System.Net.Security.NegotiateStream.IsServer\n  - System.Net.Security.NegotiateStream.IsSigned\n  - System.Net.Security.NegotiateStream.Length\n  - System.Net.Security.NegotiateStream.Position\n  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Security.NegotiateStream.ReadTimeout\n  - System.Net.Security.NegotiateStream.RemoteIdentity\n  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.Net.Security.NegotiateStream.SetLength(System.Int64)\n  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Security.NegotiateStream.WriteTimeout\n  langs:\n  - csharp\n  name: NegotiateStream\n  nameWithType: NegotiateStream\n  fullName: System.Net.Security.NegotiateStream\n  type: Class\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.\n  remarks: \"Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server. Using <xref:System.Net.Security.NegotiateStream>, you can do the following.  \\n  \\n-   Send the client's credentials to the server for Impersonation or Delegation.  \\n  \\n-   Request server authentication.  \\n  \\n-   Encrypt and/or sign data before transmitting it.  \\n  \\n Authentication must be performed before transmitting information. Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete. Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods. The client, and optionally the server, is authenticated using the Negotiate security protocol. On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication. On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used. For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/. The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI).  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred. You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.  \\n  \\n If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.  \\n  \\n You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods. You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods. If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>. When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream.\"\n  example:\n  - \"The following code example demonstrates the client side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream>. The client authenticates and sends a message to the server asynchronously.  \\n  \\n [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]\\n [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  \\n  \\n The following code example demonstrates the server side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream> to authenticate the client and read a message sent by the client.  \\n  \\n [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]\\n [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]\"\n  syntax:\n    content: 'public class NegotiateStream : System.Net.Security.AuthenticatedStream'\n  inheritance:\n  - System.Object\n  - System.IO.Stream\n  - System.Net.Security.AuthenticatedStream\n  implements: []\n  inheritedMembers:\n  - System.IO.Stream.Close\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.CreateWaitHandle\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.Null\n  - System.IO.Stream.ObjectInvariant\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.ReadByte\n  - System.IO.Stream.Synchronized(System.IO.Stream)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.WriteByte(System.Byte)\n  - System.Net.Security.AuthenticatedStream.InnerStream\n  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)\n  commentId: M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: NegotiateStream(Stream)\n  nameWithType: NegotiateStream.NegotiateStream(Stream)\n  fullName: NegotiateStream.NegotiateStream(Stream)\n  type: Constructor\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref href=\"System.IO.Stream\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates calling this constructor.  \\n  \\n [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]\\n [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public NegotiateStream (System.IO.Stream innerStream);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data.\n  overload: System.Net.Security.NegotiateStream.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)\n  commentId: M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Boolean)'\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: NegotiateStream(Stream, Boolean)\n  nameWithType: NegotiateStream.NegotiateStream(Stream, Boolean)\n  fullName: NegotiateStream.NegotiateStream(Stream, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref href=\"System.IO.Stream\"></xref> and stream closure behavior.\n  remarks: When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.\n  example:\n  - \"The following code example demonstrates calling this constructor. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \\n  \\n [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]\\n [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data.\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: '`true` to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> has no effect on <code>innerstream</code>; `false` to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> also closes <code>innerStream</code>.'\n  overload: System.Net.Security.NegotiateStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>innerStream</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>innerStream</code> is equal to <xref href=\\\"System.IO.Stream.Null\\\"></xref>.\"\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClient\n  id: AuthenticateAsClient\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient()\n  nameWithType: NegotiateStream.AuthenticateAsClient()\n  fullName: NegotiateStream.AuthenticateAsClient()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection.\n  remarks: \"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void AuthenticateAsClient ();\n    parameters: []\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)\n  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(NetworkCredential, String)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential, String)\n  fullName: NegotiateStream.AuthenticateAsClient(NetworkCredential, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.\n  remarks: \"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetName</code> is `null`.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(NetworkCredential, ChannelBinding, String)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential, ChannelBinding, String)\n  fullName: NegotiateStream.AuthenticateAsClient(NetworkCredential, ChannelBinding, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.\n  remarks: \"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>targetName</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>credential</code> is `null`.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>allowedImpersonationLevel</code> is not a valid value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetName</code> is null.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>targetName</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>credential</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>allowedImpersonationLevel</code> is not a valid value.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync\n  id: AuthenticateAsClientAsync\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync()\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync()\n  fullName: NegotiateStream.AuthenticateAsClientAsync()\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.\n  remarks: \"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)\n  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(NetworkCredential, String)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, String)\n  fullName: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, String)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.\n  remarks: \"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetName</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String)\n  fullName: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.\n  remarks: \"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>targetName</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>credential</code> is `null`.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>allowedImpersonationLevel</code> is not a valid value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetName</code> is null.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>targetName</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>credential</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>allowedImpersonationLevel</code> is not a valid value.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.\n  remarks: \"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to try to r-authenticate.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.\n  remarks: \"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the server.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to try to r-authenticate.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServer\n  id: AuthenticateAsServer\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer()\n  nameWithType: NegotiateStream.AuthenticateAsServer()\n  fullName: NegotiateStream.AuthenticateAsServer()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void AuthenticateAsServer ();\n    parameters: []\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  id: AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer(ExtendedProtectionPolicy)\n  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)\n  fullName: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \\n  \\n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);\n    parameters:\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync\n  id: AuthenticateAsServerAsync\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync()\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync()\n  fullName: NegotiateStream.AuthenticateAsServerAsync()\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  fullName: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \\n  \\n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);\n    parameters:\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.\n  remarks: \"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the server.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to try to r-authenticate.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.\n  remarks: \"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to try to r-authenticate.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>credential</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>targetName</code> is `null`.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.\n  remarks: \"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  example:\n  - \"The following code example demonstrates calling this method to begin an asynchronous authentication for the client.  \\n  \\n [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]\\n [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(NetworkCredential, String, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, String, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, String, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.\n  remarks: \"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>credential</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>targetName</code> is `null`.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.\n  remarks: \"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\"></xref> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>credential</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>targetName</code> is `null`.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>credential</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>targetName</code> is `null`.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> that is used to establish the identity of the client.\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values, indicating how the server can use the client's credentials to access resources.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref href=\"System.Security.Principal.TokenImpersonationLevel.Identification\"></xref>, <xref href=\"System.Security.Principal.TokenImpersonationLevel.Impersonation\"></xref>, or <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  \\n  \\n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding\"></xref> and <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames\"></xref> on the extended protection policy passed in the <code>policy</code> parameter are both `null`.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always\"></xref> on a platform that does not support extended protection.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.\n  remarks: \"If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it. If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.  \\n  \\n The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \\n  \\n The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations. If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates starting an asynchronous read operation. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \\n  \\n [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]\\n [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array that receives the bytes read from the stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based location in <code>buffer</code> at which to begin storing the data read from this stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read from the stream.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the read operation is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the read operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset</code> is less than 0.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> is greater than the length of <code>buffer</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The read operation failed.  \\n  \\n \\\\- or -  \\n  \\n Encryption is in use, but the data could not be decrypted.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a read operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Begins an asynchronous write operation that writes <xref href=\"System.Byte\"></xref>s from the specified buffer to the stream.\n  remarks: \"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.  \\n  \\n The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  \\n  \\n The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates beginning an asynchronous write operation.  \\n  \\n [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]\\n [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  \\n  \\n The following method is called when the operation completes.  \\n  \\n [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]\\n [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array that supplies the bytes to be written to the stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based location in <code>buffer</code> at which to begin reading bytes to be written to the stream.\n    - id: count\n      type: System.Int32\n      description: An <xref href=\"System.Int32\"></xref> value that specifies the number of bytes to read from <code>buffer</code>.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the write operation is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset is less than 0</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> is greater than the length of <code>buffer</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> plus count is greater than the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The write operation failed.  \\n  \\n \\\\- or -  \\n  \\n Encryption is in use, but the data could not be encrypted.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a write operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.CanRead\n  commentId: P:System.Net.Security.NegotiateStream.CanRead\n  id: CanRead\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: NegotiateStream.CanRead\n  fullName: NegotiateStream.CanRead\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream is readable.\n  remarks: If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]\\n [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]\"\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if authentication has occurred and the underlying stream is readable; otherwise, `false`.'\n  overload: System.Net.Security.NegotiateStream.CanRead*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.CanSeek\n  commentId: P:System.Net.Security.NegotiateStream.CanSeek\n  id: CanSeek\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: NegotiateStream.CanSeek\n  fullName: NegotiateStream.CanSeek\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream is seekable.\n  remarks: You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]\\n [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]\"\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns `false`.\n  overload: System.Net.Security.NegotiateStream.CanSeek*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.CanTimeout\n  commentId: P:System.Net.Security.NegotiateStream.CanTimeout\n  id: CanTimeout\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: CanTimeout\n  nameWithType: NegotiateStream.CanTimeout\n  fullName: NegotiateStream.CanTimeout\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream supports time-outs.\n  remarks: This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]\\n [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override bool CanTimeout { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the underlying stream supports time-outs; otherwise, `false`.'\n  overload: System.Net.Security.NegotiateStream.CanTimeout*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.CanWrite\n  commentId: P:System.Net.Security.NegotiateStream.CanWrite\n  id: CanWrite\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: NegotiateStream.CanWrite\n  fullName: NegotiateStream.CanWrite\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the underlying stream is writable.\n  remarks: If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]\\n [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]\"\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if authentication has occurred and the underlying stream is writable; otherwise, `false`.'\n  overload: System.Net.Security.NegotiateStream.CanWrite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)\n  commentId: M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: NegotiateStream.Dispose(Boolean)\n  fullName: NegotiateStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Net.Security.NegotiateStream.Dispose*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)\n  commentId: M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)\n  id: EndAuthenticateAsClient(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: EndAuthenticateAsClient(IAsyncResult)\n  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)\n  fullName: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Ends a pending asynchronous client authentication operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"></xref>.\n  remarks: \"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.  \\n  \\n To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"></xref>.\n  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no pending client authentication to complete.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)\n  commentId: M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)\n  id: EndAuthenticateAsServer(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: EndAuthenticateAsServer(IAsyncResult)\n  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)\n  fullName: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Ends a pending asynchronous client authentication operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"></xref>.\n  remarks: \"If the operation has not completed, this method blocks until it does.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"></xref>.\n  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no pending authentication to complete.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)\n  commentId: M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)\n  id: EndRead(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: EndRead(IAsyncResult)\n  nameWithType: NegotiateStream.EndRead(IAsyncResult)\n  fullName: NegotiateStream.EndRead(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Ends an asynchronous read operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>.\n  remarks: \"If the operation has not completed, this method blocks until it does.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates ending an asynchronous read operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  \\n  \\n [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]\\n [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override int EndRead (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>\n    return:\n      type: System.Int32\n      description: A <xref href=\"System.Int32\"></xref> value that specifies the number of bytes read from the underlying stream.\n  overload: System.Net.Security.NegotiateStream.EndRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The asyncResult was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The read operation failed.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)\n  commentId: M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)\n  id: EndWrite(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: EndWrite(IAsyncResult)\n  nameWithType: NegotiateStream.EndWrite(IAsyncResult)\n  fullName: NegotiateStream.EndWrite(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Security\n  namespace: System.Net.Security\n  summary: Ends an asynchronous write operation that was started with a call to <xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>.\n  remarks: \"If the operation has not completed, this method blocks until it does.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.\"\n  example:\n  - \"The following code example demonstrates a method that is called to complete the asynchronous write operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  \\n  \\n [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]\\n [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override void EndWrite (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>\n  overload: System.Net.Security.NegotiateStream.EndWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The asyncResult was not created by a call to <xref href=\"System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The write operation failed.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.Flush\n  commentId: M:System.Net.Security.NegotiateStream.Flush\n  id: Flush\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: NegotiateStream.Flush()\n  fullName: NegotiateStream.Flush()\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Causes any buffered data to be written to the underlying device.\n  remarks: This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.\n  example:\n  - \"The following code example demonstrates flushing the stream.  \\n  \\n [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]\\n [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override void Flush ();\n    parameters: []\n  overload: System.Net.Security.NegotiateStream.Flush*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)\n  commentId: M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)\n  id: FlushAsync(System.Threading.CancellationToken)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: FlushAsync(CancellationToken)\n  nameWithType: NegotiateStream.FlushAsync(CancellationToken)\n  fullName: NegotiateStream.FlushAsync(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  namespace: System.Net.Security\n  syntax:\n    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Net.Security.NegotiateStream.FlushAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.ImpersonationLevel\n  commentId: P:System.Net.Security.NegotiateStream.ImpersonationLevel\n  id: ImpersonationLevel\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: ImpersonationLevel\n  nameWithType: NegotiateStream.ImpersonationLevel\n  fullName: NegotiateStream.ImpersonationLevel\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a value that indicates how the server can use the client's credentials.\n  remarks: You must successfully authenticate before calling this method. Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]\\n [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }\n    return:\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> values.\n  overload: System.Net.Security.NegotiateStream.ImpersonationLevel*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication failed or has not occurred.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.IsAuthenticated\n  commentId: P:System.Net.Security.NegotiateStream.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsAuthenticated\n  nameWithType: NegotiateStream.IsAuthenticated\n  fullName: NegotiateStream.IsAuthenticated\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether authentication was successful.\n  remarks: Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]\\n [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override bool IsAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if successful authentication occurred; otherwise, `false`.'\n  overload: System.Net.Security.NegotiateStream.IsAuthenticated*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.IsEncrypted\n  commentId: P:System.Net.Security.NegotiateStream.IsEncrypted\n  id: IsEncrypted\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsEncrypted\n  nameWithType: NegotiateStream.IsEncrypted\n  fullName: NegotiateStream.IsEncrypted\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether this <xref href=\"System.Net.Security.NegotiateStream\"></xref> uses data encryption.\n  remarks: Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]\\n [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override bool IsEncrypted { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, `false`.'\n  overload: System.Net.Security.NegotiateStream.IsEncrypted*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\n  commentId: P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\n  id: IsMutuallyAuthenticated\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsMutuallyAuthenticated\n  nameWithType: NegotiateStream.IsMutuallyAuthenticated\n  fullName: NegotiateStream.IsMutuallyAuthenticated\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether both the server and the client have been authenticated.\n  remarks: \"Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication. By default, clients request mutual authentication.  \\n  \\n The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server. NTLM does not support mutual authentication.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]\\n [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override bool IsMutuallyAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the server has been authenticated; otherwise, `false`.'\n  overload: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.IsServer\n  commentId: P:System.Net.Security.NegotiateStream.IsServer\n  id: IsServer\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsServer\n  nameWithType: NegotiateStream.IsServer\n  fullName: NegotiateStream.IsServer\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the local side of the connection used by this <xref href=\"System.Net.Security.NegotiateStream\"></xref> was authenticated as the server.\n  remarks: \"If authentication failed or did not occur, this property returns `false`.  \\n  \\n To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]\\n [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override bool IsServer { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, `false`.'\n  overload: System.Net.Security.NegotiateStream.IsServer*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.IsSigned\n  commentId: P:System.Net.Security.NegotiateStream.IsSigned\n  id: IsSigned\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsSigned\n  nameWithType: NegotiateStream.IsSigned\n  fullName: NegotiateStream.IsSigned\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the data sent using this stream is signed.\n  remarks: Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]\\n [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override bool IsSigned { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the data is signed before being transmitted; otherwise, `false`.'\n  overload: System.Net.Security.NegotiateStream.IsSigned*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.Length\n  commentId: P:System.Net.Security.NegotiateStream.Length\n  id: Length\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: NegotiateStream.Length\n  fullName: NegotiateStream.Length\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets the length of the underlying stream.\n  remarks: This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]\\n [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]\"\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: A <xref href=\"System.Int64\"></xref> that specifies the length of the underlying stream.\n  overload: System.Net.Security.NegotiateStream.Length*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.Position\n  commentId: P:System.Net.Security.NegotiateStream.Position\n  id: Position\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: NegotiateStream.Position\n  fullName: NegotiateStream.Position\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets or sets the current position in the underlying stream.\n  remarks: This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.\n  syntax:\n    content: public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: A <xref href=\"System.Int64\"></xref> that specifies the current position in the underlying stream.\n  overload: System.Net.Security.NegotiateStream.Position*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"Setting this property is not supported.  \\n  \\n \\\\- or -  \\n  \\n Getting the value of this property is not supported when the underlying stream is a <xref href=\\\"System.Net.Sockets.NetworkStream\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: NegotiateStream.Read(Byte[], Int32, Int32)\n  fullName: NegotiateStream.Read(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Reads data from this stream and stores it in the specified array.\n  remarks: \"The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.\"\n  example:\n  - \"The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.  \\n  \\n [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]\\n [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override int Read (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array that receives the bytes read from the stream.\n    - id: offset\n      type: System.Int32\n      description: A <xref href=\"System.Int32\"></xref> containing the zero-based location in <code>buffer</code> at which to begin storing the data read from this stream.\n    - id: count\n      type: System.Int32\n      description: A <xref href=\"System.Int32\"></xref> containing the maximum number of bytes to read from the stream.\n    return:\n      type: System.Int32\n      description: A <xref href=\"System.Int32\"></xref> value that specifies the number of bytes read from the underlying stream. When there is no more data to be read, returns 0.\n  overload: System.Net.Security.NegotiateStream.Read*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The read operation failed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A <xref href=\"System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\"></xref> operation is already in progress.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.ReadTimeout\n  commentId: P:System.Net.Security.NegotiateStream.ReadTimeout\n  id: ReadTimeout\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: ReadTimeout\n  nameWithType: NegotiateStream.ReadTimeout\n  fullName: NegotiateStream.ReadTimeout\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets or sets the amount of time a read operation blocks waiting for data.\n  remarks: \"This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.  \\n  \\n If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]\\n [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]\"\n  syntax:\n    content: public override int ReadTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A <xref href=\"System.Int32\"></xref> that specifies the amount of time that will elapse before a read operation fails.\n  overload: System.Net.Security.NegotiateStream.ReadTimeout*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.RemoteIdentity\n  commentId: P:System.Net.Security.NegotiateStream.RemoteIdentity\n  id: RemoteIdentity\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: RemoteIdentity\n  nameWithType: NegotiateStream.RemoteIdentity\n  fullName: NegotiateStream.RemoteIdentity\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets information about the identity of the remote party sharing this authenticated stream.\n  remarks: When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used. When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client. If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]\\n [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }\n    return:\n      type: System.Security.Principal.IIdentity\n      description: An <xref href=\"System.Security.Principal.IIdentity\"></xref> object that describes the identity of the remote endpoint.\n  overload: System.Net.Security.NegotiateStream.RemoteIdentity*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication failed or has not occurred.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)\n  commentId: M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: NegotiateStream.Seek(Int64, SeekOrigin)\n  fullName: NegotiateStream.Seek(Int64, SeekOrigin)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Throws <xref href=\"System.NotSupportedException\"></xref>.\n  remarks: Do not call this method. It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override long Seek (long offset, System.IO.SeekOrigin origin);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: This value is ignored.\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: This value is ignored.\n    return:\n      type: System.Int64\n      description: Always throws a <xref href=\"System.NotSupportedException\"></xref>.\n  overload: System.Net.Security.NegotiateStream.Seek*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Seeking is not supported on <xref href=\"System.Net.Security.NegotiateStream\"></xref>.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)\n  commentId: M:System.Net.Security.NegotiateStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: NegotiateStream.SetLength(Int64)\n  fullName: NegotiateStream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Sets the length of the underlying stream.\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: An <xref href=\"System.Int64\"></xref> value that specifies the length of the stream.\n  overload: System.Net.Security.NegotiateStream.SetLength*\n  exceptions: []\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: NegotiateStream.Write(Byte[], Int32, Int32)\n  fullName: NegotiateStream.Write(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Write the specified number of <xref href=\"System.Byte\"></xref>s to the underlying stream using the specified buffer and offset.\n  remarks: \"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.  \\n  \\n This method blocks while the write operation completes. To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.\"\n  example:\n  - \"The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.  \\n  \\n [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]\\n [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override void Write (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array that supplies the bytes written to the stream.\n    - id: offset\n      type: System.Int32\n      description: An <xref href=\"System.Int32\"></xref> containing the zero-based location in <code>buffer</code> at which to begin reading bytes to be written to the stream.\n    - id: count\n      type: System.Int32\n      description: A <xref href=\"System.Int32\"></xref> containing the number of bytes to read from <code>buffer</code>.\n  overload: System.Net.Security.NegotiateStream.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset is less than 0</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> is greater than the length of <code>buffer</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> plus count is greater than the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The write operation failed.  \\n  \\n \\\\- or -  \\n  \\n Encryption is in use, but the data could not be encrypted.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a write operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.NegotiateStream.WriteTimeout\n  commentId: P:System.Net.Security.NegotiateStream.WriteTimeout\n  id: WriteTimeout\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: WriteTimeout\n  nameWithType: NegotiateStream.WriteTimeout\n  fullName: NegotiateStream.WriteTimeout\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets or sets the amount of time a write operation blocks waiting for data.\n  remarks: \"This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.  \\n  \\n If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]\\n [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]\"\n  syntax:\n    content: public override int WriteTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A <xref href=\"System.Int32\"></xref> that specifies the amount of time that will elapse before a write operation fails.\n  overload: System.Net.Security.NegotiateStream.WriteTimeout*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Net.Security.AuthenticatedStream\n  parent: System.Net.Security\n  isExternal: false\n  name: AuthenticatedStream\n  nameWithType: AuthenticatedStream\n  fullName: System.Net.Security.AuthenticatedStream\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Authentication.AuthenticationException\n  parent: System.Security.Authentication\n  isExternal: false\n  name: AuthenticationException\n  nameWithType: AuthenticationException\n  fullName: System.Security.Authentication.AuthenticationException\n- uid: System.Security.Authentication.InvalidCredentialException\n  parent: System.Security.Authentication\n  isExternal: false\n  name: InvalidCredentialException\n  nameWithType: InvalidCredentialException\n  fullName: System.Security.Authentication.InvalidCredentialException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: NegotiateStream(Stream)\n  nameWithType: NegotiateStream.NegotiateStream(Stream)\n  fullName: NegotiateStream.NegotiateStream(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: NegotiateStream(Stream, Boolean)\n  nameWithType: NegotiateStream.NegotiateStream(Stream, Boolean)\n  fullName: NegotiateStream.NegotiateStream(Stream, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient()\n  nameWithType: NegotiateStream.AuthenticateAsClient()\n  fullName: NegotiateStream.AuthenticateAsClient()\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient(NetworkCredential, String)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential, String)\n  fullName: NegotiateStream.AuthenticateAsClient(NetworkCredential, String)\n- uid: System.Net.NetworkCredential\n  parent: System.Net\n  isExternal: false\n  name: NetworkCredential\n  nameWithType: NetworkCredential\n  fullName: System.Net.NetworkCredential\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient(NetworkCredential, ChannelBinding, String)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential, ChannelBinding, String)\n  fullName: NegotiateStream.AuthenticateAsClient(NetworkCredential, ChannelBinding, String)\n- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding\n  parent: System.Security.Authentication.ExtendedProtection\n  isExternal: false\n  name: ChannelBinding\n  nameWithType: ChannelBinding\n  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n- uid: System.Net.Security.ProtectionLevel\n  parent: System.Net.Security\n  isExternal: false\n  name: ProtectionLevel\n  nameWithType: ProtectionLevel\n  fullName: System.Net.Security.ProtectionLevel\n- uid: System.Security.Principal.TokenImpersonationLevel\n  parent: System.Security.Principal\n  isExternal: false\n  name: TokenImpersonationLevel\n  nameWithType: TokenImpersonationLevel\n  fullName: System.Security.Principal.TokenImpersonationLevel\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync()\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync()\n  fullName: NegotiateStream.AuthenticateAsClientAsync()\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(NetworkCredential, String)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, String)\n  fullName: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, String)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String)\n  fullName: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n  parent: System.Security.Authentication.ExtendedProtection\n  isExternal: false\n  name: ExtendedProtectionPolicy\n  nameWithType: ExtendedProtectionPolicy\n  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer()\n  nameWithType: NegotiateStream.AuthenticateAsServer()\n  fullName: NegotiateStream.AuthenticateAsServer()\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer(ExtendedProtectionPolicy)\n  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)\n  fullName: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync()\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync()\n  fullName: NegotiateStream.AuthenticateAsServerAsync()\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  fullName: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, ProtectionLevel, TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n  fullName: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback, Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(NetworkCredential, String, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, String, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, String, AsyncCallback, Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, ChannelBinding, String, AsyncCallback, Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential, String, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, TokenImpersonationLevel, AsyncCallback, Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback, Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy, AsyncCallback, Object)\n- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: NegotiateStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: NegotiateStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.Net.Security.NegotiateStream.CanRead\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanRead\n  nameWithType: NegotiateStream.CanRead\n  fullName: NegotiateStream.CanRead\n- uid: System.Net.Security.NegotiateStream.CanSeek\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: NegotiateStream.CanSeek\n  fullName: NegotiateStream.CanSeek\n- uid: System.Net.Security.NegotiateStream.CanTimeout\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: NegotiateStream.CanTimeout\n  fullName: NegotiateStream.CanTimeout\n- uid: System.Net.Security.NegotiateStream.CanWrite\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: NegotiateStream.CanWrite\n  fullName: NegotiateStream.CanWrite\n- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: NegotiateStream.Dispose(Boolean)\n  fullName: NegotiateStream.Dispose(Boolean)\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndAuthenticateAsClient(IAsyncResult)\n  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)\n  fullName: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndAuthenticateAsServer(IAsyncResult)\n  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)\n  fullName: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)\n- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: NegotiateStream.EndRead(IAsyncResult)\n  fullName: NegotiateStream.EndRead(IAsyncResult)\n- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: NegotiateStream.EndWrite(IAsyncResult)\n  fullName: NegotiateStream.EndWrite(IAsyncResult)\n- uid: System.Net.Security.NegotiateStream.Flush\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Flush()\n  nameWithType: NegotiateStream.Flush()\n  fullName: NegotiateStream.Flush()\n- uid: System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: FlushAsync(CancellationToken)\n  nameWithType: NegotiateStream.FlushAsync(CancellationToken)\n  fullName: NegotiateStream.FlushAsync(CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Net.Security.NegotiateStream.ImpersonationLevel\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: ImpersonationLevel\n  nameWithType: NegotiateStream.ImpersonationLevel\n  fullName: NegotiateStream.ImpersonationLevel\n- uid: System.Net.Security.NegotiateStream.IsAuthenticated\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: NegotiateStream.IsAuthenticated\n  fullName: NegotiateStream.IsAuthenticated\n- uid: System.Net.Security.NegotiateStream.IsEncrypted\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsEncrypted\n  nameWithType: NegotiateStream.IsEncrypted\n  fullName: NegotiateStream.IsEncrypted\n- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  nameWithType: NegotiateStream.IsMutuallyAuthenticated\n  fullName: NegotiateStream.IsMutuallyAuthenticated\n- uid: System.Net.Security.NegotiateStream.IsServer\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsServer\n  nameWithType: NegotiateStream.IsServer\n  fullName: NegotiateStream.IsServer\n- uid: System.Net.Security.NegotiateStream.IsSigned\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsSigned\n  nameWithType: NegotiateStream.IsSigned\n  fullName: NegotiateStream.IsSigned\n- uid: System.Net.Security.NegotiateStream.Length\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Length\n  nameWithType: NegotiateStream.Length\n  fullName: NegotiateStream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Net.Security.NegotiateStream.Position\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Position\n  nameWithType: NegotiateStream.Position\n  fullName: NegotiateStream.Position\n- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: NegotiateStream.Read(Byte[], Int32, Int32)\n  fullName: NegotiateStream.Read(Byte[], Int32, Int32)\n- uid: System.Net.Security.NegotiateStream.ReadTimeout\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: NegotiateStream.ReadTimeout\n  fullName: NegotiateStream.ReadTimeout\n- uid: System.Net.Security.NegotiateStream.RemoteIdentity\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: RemoteIdentity\n  nameWithType: NegotiateStream.RemoteIdentity\n  fullName: NegotiateStream.RemoteIdentity\n- uid: System.Security.Principal.IIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: IIdentity\n  nameWithType: IIdentity\n  fullName: System.Security.Principal.IIdentity\n- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: NegotiateStream.Seek(Int64, SeekOrigin)\n  fullName: NegotiateStream.Seek(Int64, SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: NegotiateStream.SetLength(Int64)\n  fullName: NegotiateStream.SetLength(Int64)\n- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: NegotiateStream.Write(Byte[], Int32, Int32)\n  fullName: NegotiateStream.Write(Byte[], Int32, Int32)\n- uid: System.Net.Security.NegotiateStream.WriteTimeout\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: NegotiateStream.WriteTimeout\n  fullName: NegotiateStream.WriteTimeout\n- uid: System.Net.Security.NegotiateStream.#ctor*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: NegotiateStream\n  nameWithType: NegotiateStream.NegotiateStream\n  fullName: NegotiateStream.NegotiateStream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer\n  nameWithType: NegotiateStream.AuthenticateAsServer\n  fullName: NegotiateStream.AuthenticateAsServer\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient\n  fullName: NegotiateStream.BeginAuthenticateAsClient\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer\n  fullName: NegotiateStream.BeginAuthenticateAsServer\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient\n  nameWithType: NegotiateStream.AuthenticateAsClient\n  fullName: NegotiateStream.AuthenticateAsClient\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync\n  fullName: NegotiateStream.AuthenticateAsClientAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync\n  fullName: NegotiateStream.AuthenticateAsServerAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.BeginRead*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginRead\n  nameWithType: NegotiateStream.BeginRead\n  fullName: NegotiateStream.BeginRead\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.BeginWrite*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginWrite\n  nameWithType: NegotiateStream.BeginWrite\n  fullName: NegotiateStream.BeginWrite\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.CanRead*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanRead\n  nameWithType: NegotiateStream.CanRead\n  fullName: NegotiateStream.CanRead\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.CanSeek*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: NegotiateStream.CanSeek\n  fullName: NegotiateStream.CanSeek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.CanTimeout*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: NegotiateStream.CanTimeout\n  fullName: NegotiateStream.CanTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.CanWrite*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: NegotiateStream.CanWrite\n  fullName: NegotiateStream.CanWrite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.Dispose*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Dispose\n  nameWithType: NegotiateStream.Dispose\n  fullName: NegotiateStream.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndAuthenticateAsClient\n  nameWithType: NegotiateStream.EndAuthenticateAsClient\n  fullName: NegotiateStream.EndAuthenticateAsClient\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndAuthenticateAsServer\n  nameWithType: NegotiateStream.EndAuthenticateAsServer\n  fullName: NegotiateStream.EndAuthenticateAsServer\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.EndRead*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndRead\n  nameWithType: NegotiateStream.EndRead\n  fullName: NegotiateStream.EndRead\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.EndWrite*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndWrite\n  nameWithType: NegotiateStream.EndWrite\n  fullName: NegotiateStream.EndWrite\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.Flush*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Flush\n  nameWithType: NegotiateStream.Flush\n  fullName: NegotiateStream.Flush\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.FlushAsync*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: FlushAsync\n  nameWithType: NegotiateStream.FlushAsync\n  fullName: NegotiateStream.FlushAsync\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.ImpersonationLevel*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: ImpersonationLevel\n  nameWithType: NegotiateStream.ImpersonationLevel\n  fullName: NegotiateStream.ImpersonationLevel\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.IsAuthenticated*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: NegotiateStream.IsAuthenticated\n  fullName: NegotiateStream.IsAuthenticated\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.IsEncrypted*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsEncrypted\n  nameWithType: NegotiateStream.IsEncrypted\n  fullName: NegotiateStream.IsEncrypted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  nameWithType: NegotiateStream.IsMutuallyAuthenticated\n  fullName: NegotiateStream.IsMutuallyAuthenticated\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.IsServer*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsServer\n  nameWithType: NegotiateStream.IsServer\n  fullName: NegotiateStream.IsServer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.IsSigned*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsSigned\n  nameWithType: NegotiateStream.IsSigned\n  fullName: NegotiateStream.IsSigned\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.Length*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Length\n  nameWithType: NegotiateStream.Length\n  fullName: NegotiateStream.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.Position*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Position\n  nameWithType: NegotiateStream.Position\n  fullName: NegotiateStream.Position\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.Read*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Read\n  nameWithType: NegotiateStream.Read\n  fullName: NegotiateStream.Read\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.ReadTimeout*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: NegotiateStream.ReadTimeout\n  fullName: NegotiateStream.ReadTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.RemoteIdentity*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: RemoteIdentity\n  nameWithType: NegotiateStream.RemoteIdentity\n  fullName: NegotiateStream.RemoteIdentity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.Seek*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Seek\n  nameWithType: NegotiateStream.Seek\n  fullName: NegotiateStream.Seek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.SetLength*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: SetLength\n  nameWithType: NegotiateStream.SetLength\n  fullName: NegotiateStream.SetLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.Write*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Write\n  nameWithType: NegotiateStream.Write\n  fullName: NegotiateStream.Write\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Net.Security.NegotiateStream.WriteTimeout*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: NegotiateStream.WriteTimeout\n  fullName: NegotiateStream.WriteTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/NegotiateStream.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IO.Stream.Close\n  parent: System.IO.Stream\n  isExternal: false\n  name: Close()\n  nameWithType: Stream.Close()\n  fullName: Stream.Close()\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream, Int32)\n  nameWithType: Stream.CopyTo(Stream, Int32)\n  fullName: Stream.CopyTo(Stream, Int32)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  nameWithType: Stream.CopyTo(Stream)\n  fullName: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n  fullName: Stream.CopyToAsync(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  fullName: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.IO.Stream.CreateWaitHandle\n  parent: System.IO.Stream\n  isExternal: false\n  name: CreateWaitHandle()\n  nameWithType: Stream.CreateWaitHandle()\n  fullName: Stream.CreateWaitHandle()\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  nameWithType: Stream.Dispose()\n  fullName: Stream.Dispose()\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: Stream.FlushAsync()\n  fullName: Stream.FlushAsync()\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  name: \"Null\"\n  nameWithType: Stream.Null\n  fullName: Stream.Null\n- uid: System.IO.Stream.ObjectInvariant\n  parent: System.IO.Stream\n  isExternal: false\n  name: ObjectInvariant()\n  nameWithType: Stream.ObjectInvariant()\n  fullName: Stream.ObjectInvariant()\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.ReadByte\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadByte()\n  nameWithType: Stream.ReadByte()\n  fullName: Stream.ReadByte()\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Synchronized(Stream)\n  nameWithType: Stream.Synchronized(Stream)\n  fullName: Stream.Synchronized(Stream)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.WriteByte(System.Byte)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: Stream.WriteByte(Byte)\n  fullName: Stream.WriteByte(Byte)\n- uid: System.Net.Security.AuthenticatedStream.InnerStream\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: InnerStream\n  nameWithType: AuthenticatedStream.InnerStream\n  fullName: AuthenticatedStream.InnerStream\n- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: LeaveInnerStreamOpen\n  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen\n  fullName: AuthenticatedStream.LeaveInnerStreamOpen\n"}