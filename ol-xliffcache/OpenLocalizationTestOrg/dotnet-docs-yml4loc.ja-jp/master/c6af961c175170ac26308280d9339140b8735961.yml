### YamlMime:ManagedReference
items:
- uid: System.Security.PermissionSet
  commentId: T:System.Security.PermissionSet
  id: PermissionSet
  children:
  - System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  - System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  - System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.Assert
  - System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  - System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  - System.Security.PermissionSet.Copy
  - System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  - System.Security.PermissionSet.Count
  - System.Security.PermissionSet.Demand
  - System.Security.PermissionSet.Deny
  - System.Security.PermissionSet.Equals(System.Object)
  - System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  - System.Security.PermissionSet.GetEnumerator
  - System.Security.PermissionSet.GetEnumeratorImpl
  - System.Security.PermissionSet.GetHashCode
  - System.Security.PermissionSet.GetPermission(System.Type)
  - System.Security.PermissionSet.GetPermissionImpl(System.Type)
  - System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsEmpty
  - System.Security.PermissionSet.IsReadOnly
  - System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsSynchronized
  - System.Security.PermissionSet.IsUnrestricted
  - System.Security.PermissionSet.PermitOnly
  - System.Security.PermissionSet.RemovePermission(System.Type)
  - System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  - System.Security.PermissionSet.RevertAssert
  - System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  - System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.SyncRoot
  - System.Security.PermissionSet.ToString
  - System.Security.PermissionSet.ToXml
  - System.Security.PermissionSet.Union(System.Security.PermissionSet)
  - System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  langs:
  - csharp
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
  type: Class
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Represents a collection that can contain many different types of permissions.
  remarks: You can use <xref:System.Security.PermissionSet> to perform operations on several different permissions as a group.
  example:
  - "The following code example demonstrates the use of the <xref:System.Security.PermissionSet> class and members.  \n  \n [!code-cpp[System.Security.PermissionSet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#1)]\n [!code-csharp[System.Security.PermissionSet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#1)]\n [!code-vb[System.Security.PermissionSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class PermissionSet : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Security.ISecurityEncodable, System.Security.IStackWalk
  inheritance:
  - System.Object
  derivedClasses:
  - System.Security.NamedPermissionSet
  - System.Security.ReadOnlyPermissionSet
  implements:
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Security.ISecurityEncodable
  - System.Security.IStackWalk
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  commentId: M:System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: PermissionSet.PermissionSet(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Initializes a new instance of the <xref href="System.Security.PermissionSet"></xref> class with the specified <xref href="System.Security.Permissions.PermissionState"></xref>.
  remarks: "The `Unrestricted` state allows all permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface, while `None` allows no permissions.  \n  \n Use <xref:System.Security.PermissionSet.AddPermission%2A> on an empty <xref:System.Security.PermissionSet> to define the set in greater detail."
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.%23ctor%2A> constructor to create a permission set with a permission state of <xref:System.Security.Permissions.PermissionState.None>. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#2)]\n [!code-csharp[System.Security.PermissionSet#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#2)]\n [!code-vb[System.Security.PermissionSet#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#2)]"
  syntax:
    content: public PermissionSet (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: One of the enumeration values that specifies the permission set's access to resources.
  overload: System.Security.PermissionSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>state</code> parameter is not a valid <xref href="System.Security.Permissions.PermissionState"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  commentId: M:System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  id: '#ctor(System.Security.PermissionSet)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: PermissionSet.PermissionSet(PermissionSet)
  type: Constructor
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Initializes a new instance of the <xref href="System.Security.PermissionSet"></xref> class with initial values taken from the <code>permSet</code> parameter.
  remarks: "The new <xref:System.Security.PermissionSet> contains copies of the permissions contained in the specified <xref:System.Security.PermissionSet>.  \n  \n> [!NOTE]\n>  This is equivalent to <xref:System.Security.PermissionSet.Copy%2A> when the `permSet` parameter is not `null`."
  syntax:
    content: public PermissionSet (System.Security.PermissionSet permSet);
    parameters:
    - id: permSet
      type: System.Security.PermissionSet
      description: The set from which to take the value of the new <xref href="System.Security.PermissionSet"></xref>, or `null` to create an empty <xref href="System.Security.PermissionSet"></xref>.
  overload: System.Security.PermissionSet.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  commentId: M:System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  id: AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: PermissionSet.AddPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Adds a specified permission to the <xref href="System.Security.PermissionSet"></xref>.
  remarks: If a permission of the same type as the added permission already exists in the <xref:System.Security.PermissionSet>, the new permission is the union of the existing permission object and the specified permission object. For example, if a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is added to an <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Security.PermissionSet>, the resulting union is the original `Unrestricted`<xref:System.Security.PermissionSet>.
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.AddPermission%2A> method to add a permission to a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#3)]\n [!code-csharp[System.Security.PermissionSet#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#3)]\n [!code-vb[System.Security.PermissionSet#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#3)]"
  syntax:
    content: public System.Security.IPermission AddPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: The permission to add.
    return:
      type: System.Security.IPermission
      description: The union of the permission added and any permission of the same type that already exists in the <xref href="System.Security.PermissionSet"></xref>.
  overload: System.Security.PermissionSet.AddPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method is called from a <xref href="System.Security.ReadOnlyPermissionSet"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  commentId: M:System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  id: AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: PermissionSet.AddPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Adds a specified permission to the <xref href="System.Security.PermissionSet"></xref>.
  remarks: "The <xref:System.Security.PermissionSet.AddPermissionImpl%2A> method is the implementation for the <xref:System.Security.PermissionSet.AddPermission%2A> method.  \n  \n If a permission of the same type as the added permission already exists in the <xref:System.Security.PermissionSet>, the new permission is the union of the existing permission object and the specified permission object. For example, if a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is added to an <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Security.PermissionSet>, the resulting union is the original `Unrestricted`<xref:System.Security.PermissionSet>."
  syntax:
    content: protected virtual System.Security.IPermission AddPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: The permission to add.
    return:
      type: System.Security.IPermission
      description: The union of the permission added and any permission of the same type that already exists in the <xref href="System.Security.PermissionSet"></xref>, or `null` if <code>perm</code> is `null`.
  overload: System.Security.PermissionSet.AddPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method is called from a <xref href="System.Security.ReadOnlyPermissionSet"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.Assert
  commentId: M:System.Security.PermissionSet.Assert
  id: Assert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: PermissionSet.Assert()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using <xref href="System.Security.PermissionSet.Assert"></xref> can create security vulnerabilities.
  remarks: "This is the only way to assert multiple permissions at the same time within a frame because only one <xref:System.Security.PermissionSet.Assert%2A> can be active on a frame. <xref:System.Security.PermissionSet.Assert%2A> is only effective for granted permissions. Call the <xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName> or <xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName> method to cancel an active <xref:System.Security.PermissionSet.Assert%2A>.  \n  \n> [!CAUTION]\n>  Because calling the <xref:System.Security.PermissionSet.Assert%2A> method removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately. Therefore, it should be used with great caution."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.PermissionSet.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The <xref href=\"System.Security.PermissionSet\"></xref> instance asserted has not been granted to the asserting code.  \n  \n -or-  \n  \n There is already an active <xref href=\"System.Security.PermissionSet.Assert\"></xref> for the current frame."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  commentId: M:System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  id: ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: PermissionSet.ContainsNonCodeAccessPermissions()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Gets a value indicating whether the <xref href="System.Security.PermissionSet"></xref> contains permissions that are not derived from <xref href="System.Security.CodeAccessPermission"></xref>.
  remarks: ''
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.ContainsNonCodeAccessPermissions%2A> method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#9)]\n [!code-csharp[System.Security.PermissionSet#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#9)]\n [!code-vb[System.Security.PermissionSet#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#9)]"
  syntax:
    content: public bool ContainsNonCodeAccessPermissions ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Security.PermissionSet"></xref> contains permissions that are not derived from <xref href="System.Security.CodeAccessPermission"></xref>; otherwise, `false`.'
  overload: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  commentId: M:System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  id: ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ConvertPermissionSet(String, Byte[], String)
  nameWithType: PermissionSet.ConvertPermissionSet(String, Byte[], String)
  fullName: PermissionSet.ConvertPermissionSet(String, Byte[], String)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Converts an encoded <xref href="System.Security.PermissionSet"></xref> from one XML encoding format to another XML encoding format.
  remarks: Do not use this method.
  syntax:
    content: public static byte[] ConvertPermissionSet (string inFormat, byte[] inData, string outFormat);
    parameters:
    - id: inFormat
      type: System.String
      description: 'A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are "XMLASCII" or "XML", "XMLUNICODE", and "BINARY".'
    - id: inData
      type: System.Byte[]
      description: An XML-encoded permission set.
    - id: outFormat
      type: System.String
      description: 'A string representing one of the following encoding formats: ASCII, Unicode, or Binary. Possible values are "XMLASCII" or "XML", "XMLUNICODE", and "BINARY".'
    return:
      type: System.Byte[]
      description: An encrypted permission set with the specified output format.
  overload: System.Security.PermissionSet.ConvertPermissionSet*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: In all cases.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.Copy
  commentId: M:System.Security.PermissionSet.Copy
  id: Copy
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: PermissionSet.Copy()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Creates a copy of the <xref href="System.Security.PermissionSet"></xref>.
  remarks: A copy of a <xref:System.Security.PermissionSet> represents the same access to resources as the original object. Changes made to the copy do not affect the original permission set.
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.Copy%2A> method to create a copy of a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#20)]\n [!code-csharp[System.Security.PermissionSet#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#20)]\n [!code-vb[System.Security.PermissionSet#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#20)]"
  syntax:
    content: public virtual System.Security.PermissionSet Copy ();
    parameters: []
    return:
      type: System.Security.PermissionSet
      description: A copy of the <xref href="System.Security.PermissionSet"></xref>.
  overload: System.Security.PermissionSet.Copy*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  commentId: M:System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: CopyTo(Array, Int32)
  nameWithType: PermissionSet.CopyTo(Array, Int32)
  fullName: PermissionSet.CopyTo(Array, Int32)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Copies the permission objects of the set to the indicated location in an <xref href="System.Array"></xref>.
  syntax:
    content: public virtual void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The target array to which to copy.
    - id: index
      type: System.Int32
      description: The starting position in the array to begin copying (zero based).
  overload: System.Security.PermissionSet.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>array</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>array</code> parameter has more than one dimension.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: The <code>index</code> parameter is out of the range of the <code>array</code> parameter.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.Count
  commentId: P:System.Security.PermissionSet.Count
  id: Count
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Count
  nameWithType: PermissionSet.Count
  fullName: PermissionSet.Count
  type: Property
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Gets the number of permission objects contained in the permission set.
  remarks: In the `None` or `Unrestricted` state this returns zero, because no actual permission object instances are used.
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.Count%2A> property to get the number of permission objects in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#5)]\n [!code-csharp[System.Security.PermissionSet#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#5)]\n [!code-vb[System.Security.PermissionSet#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#5)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: The number of permission objects contained in the <xref href="System.Security.PermissionSet"></xref>.
  overload: System.Security.PermissionSet.Count*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.Demand
  commentId: M:System.Security.PermissionSet.Demand
  id: Demand
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: PermissionSet.Demand()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Forces a <xref href="System.Security.SecurityException"></xref> at run time if all callers higher in the call stack have not been granted the permissions specified by the current instance.
  remarks: "Use <xref:System.Security.PermissionSet.Demand%2A> on a <xref:System.Security.PermissionSet> to ensure that all callers have all permissions in the set with one operation.  \n  \n The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <xref:System.Security.PermissionSet.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is thrown.  \n  \n If the <xref:System.Security.PermissionSet> contains permissions that do not inherit from <xref:System.Security.CodeAccessPermission>, the `Demand` methods of those permissions are called as well."
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.Demand%2A> method to demand all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#4)]\n [!code-csharp[System.Security.PermissionSet#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#4)]\n [!code-vb[System.Security.PermissionSet#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#4)]"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.PermissionSet.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call chain does not have the permission demanded.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.Deny
  commentId: M:System.Security.PermissionSet.Deny
  id: Deny
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: PermissionSet.Deny()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Causes any <xref href="System.Security.PermissionSet.Demand"></xref> that passes through the calling code for a permission that has an intersection with a permission of a type contained in the current <xref href="System.Security.PermissionSet"></xref> to fail.
  remarks: "This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  \n  \n <xref:System.Security.PermissionSet.Deny%2A> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <xref:System.Security.PermissionSet.Deny%2A> from being used to access the resource protected by the denied permission. If a method calls <xref:System.Security.PermissionSet.Deny%2A> on a permission, and if a <xref:System.Security.PermissionSet.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check fails when it reaches the <xref:System.Security.PermissionSet.Deny%2A>.  \n  \n <xref:System.Security.PermissionSet.Deny%2A> is ignored for a permission that is not granted because a demand for that permission cannot succeed."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.PermissionSet.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A previous call to <xref href="System.Security.PermissionSet.Deny"></xref> has already restricted the permissions for the current stack frame.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.Equals(System.Object)
  commentId: M:System.Security.PermissionSet.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: PermissionSet.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Determines whether the specified <xref href="System.Security.PermissionSet"></xref> or <xref href="System.Security.NamedPermissionSet"></xref> object is equal to the current <xref href="System.Security.PermissionSet"></xref>.
  remarks: "Equality is determined by the permissions contained in the permission set specified by `obj`. `obj` can be either a <xref:System.Security.PermissionSet> object or a <xref:System.Security.NamedPermissionSet> object. If `obj` is a <xref:System.Security.NamedPermissionSet>, the name and description are ignored.  \n  \n For more information, see <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current <xref href="System.Security.PermissionSet"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the specified object is equal to the current <xref href="System.Security.PermissionSet"></xref> object; otherwise, `false`.'
  overload: System.Security.PermissionSet.Equals*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  commentId: M:System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: PermissionSet.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Reconstructs a security object with a specified state from an XML encoding.
  remarks: ''
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.FromXml%2A> method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#17)]\n [!code-csharp[System.Security.PermissionSet#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#17)]\n [!code-vb[System.Security.PermissionSet#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#17)]"
  syntax:
    content: public virtual void FromXml (System.Security.SecurityElement et);
    parameters:
    - id: et
      type: System.Security.SecurityElement
      description: The XML encoding to use to reconstruct the security object.
  overload: System.Security.PermissionSet.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>et</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>et</code> parameter is not a valid permission element.  \n  \n -or-  \n  \n The <code>et</code> parameter's version number is not supported."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.GetEnumerator
  commentId: M:System.Security.PermissionSet.GetEnumerator
  id: GetEnumerator
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: PermissionSet.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Returns an enumerator for the permissions of the set.
  remarks: Use the enumerator as an index to access individual permission objects in the set.
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.GetEnumerator%2A> method to list all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#18)]\n [!code-csharp[System.Security.PermissionSet#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#18)]\n [!code-vb[System.Security.PermissionSet#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#18)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An enumerator object for the permissions of the set.
  overload: System.Security.PermissionSet.GetEnumerator*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  commentId: M:System.Security.PermissionSet.GetEnumeratorImpl
  id: GetEnumeratorImpl
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: PermissionSet.GetEnumeratorImpl()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Returns an enumerator for the permissions of the set.
  remarks: The <xref:System.Security.PermissionSet.GetEnumeratorImpl%2A> method is the implementation for the <xref:System.Security.PermissionSet.GetEnumerator%2A> method.
  syntax:
    content: protected virtual System.Collections.IEnumerator GetEnumeratorImpl ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An enumerator object for the permissions of the set.
  overload: System.Security.PermissionSet.GetEnumeratorImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.GetHashCode
  commentId: M:System.Security.PermissionSet.GetHashCode
  id: GetHashCode
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: PermissionSet.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Gets a hash code for the <xref href="System.Security.PermissionSet"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table.
  remarks: The hash code for two instances of the same permission set might be different, so a hash code should not be used to compare two <xref:System.Security.PermissionSet> objects.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A hash code for the current <xref href="System.Security.PermissionSet"></xref> object.
  overload: System.Security.PermissionSet.GetHashCode*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  commentId: M:System.Security.PermissionSet.GetPermission(System.Type)
  id: GetPermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: PermissionSet.GetPermission(Type)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Gets a permission object of the specified type, if it exists in the set.
  remarks: The method returns `null` for an `Unrestricted`<xref:System.Security.PermissionSet>. Although an `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions, it does not have any actual instances to return.
  syntax:
    content: public System.Security.IPermission GetPermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: The type of the desired permission object.
    return:
      type: System.Security.IPermission
      description: A copy of the permission object of the type specified by the <code>permClass</code> parameter contained in the <xref href="System.Security.PermissionSet"></xref>, or `null` if none exists.
  overload: System.Security.PermissionSet.GetPermission*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  commentId: M:System.Security.PermissionSet.GetPermissionImpl(System.Type)
  id: GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: PermissionSet.GetPermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Gets a permission object of the specified type, if it exists in the set.
  remarks: "The <xref:System.Security.PermissionSet.GetPermissionImpl%2A> method is the implementation for the <xref:System.Security.PermissionSet.GetPermission%2A> method.  \n  \n The method returns `null` for an `Unrestricted`<xref:System.Security.PermissionSet>. Although an `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions, it does not have any actual instances to return."
  syntax:
    content: protected virtual System.Security.IPermission GetPermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: The type of the permission object.
    return:
      type: System.Security.IPermission
      description: A copy of the permission object, of the type specified by the <code>permClass</code> parameter, contained in the <xref href="System.Security.PermissionSet"></xref>, or `null` if none exists.
  overload: System.Security.PermissionSet.GetPermissionImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  commentId: M:System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  id: Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: PermissionSet.Intersect(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Creates and returns a permission set that is the intersection of the current <xref href="System.Security.PermissionSet"></xref> and the specified <xref href="System.Security.PermissionSet"></xref>.
  remarks: "The intersection of two permission sets is a permission set that describes the set of operations they both describe in common. Specifically, it represents the minimum permissions such that any demand that passes both permission sets also passes their intersection.  \n  \n For each type of permission that is present in both sets, the two instances of those permissions are intersected using the permission's `Intersect` method; the resulting permission is included in the resulting <xref:System.Security.PermissionSet>. Permission types that exist in only one of the two sets are excluded from the resulting set."
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.Intersect%2A> method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#12)]\n [!code-csharp[System.Security.PermissionSet#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#12)]\n [!code-vb[System.Security.PermissionSet#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#12)]"
  syntax:
    content: public System.Security.PermissionSet Intersect (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: A permission set to intersect with the current <xref href="System.Security.PermissionSet"></xref>.
    return:
      type: System.Security.PermissionSet
      description: A new permission set that represents the intersection of the current <xref href="System.Security.PermissionSet"></xref> and the specified target. This object is `null` if the intersection is empty.
  overload: System.Security.PermissionSet.Intersect*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.IsEmpty
  commentId: M:System.Security.PermissionSet.IsEmpty
  id: IsEmpty
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: PermissionSet.IsEmpty()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Gets a value indicating whether the <xref href="System.Security.PermissionSet"></xref> is empty.
  remarks: A <xref:System.Security.PermissionSet> can be empty and yet contain instances of permissions if those permissions are in the fully-restricted state. Permissions are in a fully restricted state if their `IsSubsetOf` methods return `true` when `null` is passed as a parameter.
  syntax:
    content: public bool IsEmpty ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Security.PermissionSet"></xref> is empty; otherwise, `false`.'
  overload: System.Security.PermissionSet.IsEmpty*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.IsReadOnly
  commentId: P:System.Security.PermissionSet.IsReadOnly
  id: IsReadOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: PermissionSet.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Gets a value indicating whether the collection is read-only.
  remarks: A <xref:System.Security.PermissionSet> cannot be read-only, so this property is always `false`.
  example:
  - "The following code example shows the value returned by the <xref:System.Security.PermissionSet.IsReadOnly%2A> property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#7)]\n [!code-csharp[System.Security.PermissionSet#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#7)]\n [!code-vb[System.Security.PermissionSet#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#7)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: Always `false`.
  overload: System.Security.PermissionSet.IsReadOnly*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  commentId: M:System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  id: IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: PermissionSet.IsSubsetOf(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Determines whether the current <xref href="System.Security.PermissionSet"></xref> is a subset of the specified <xref href="System.Security.PermissionSet"></xref>.
  remarks: A <xref:System.Security.PermissionSet> is a subset of the target <xref:System.Security.PermissionSet> if all demands that succeed for the <xref:System.Security.PermissionSet> also succeed for the target. That is, the target contains at least the permissions contained in the subset.
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.IsSubsetOf%2A> method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#11)]\n [!code-csharp[System.Security.PermissionSet#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#11)]\n [!code-vb[System.Security.PermissionSet#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#11)]"
  syntax:
    content: public bool IsSubsetOf (System.Security.PermissionSet target);
    parameters:
    - id: target
      type: System.Security.PermissionSet
      description: The permission set to test for the subset relationship. This must be either a <xref href="System.Security.PermissionSet"></xref> or a <xref href="System.Security.NamedPermissionSet"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Security.PermissionSet"></xref> is a subset of the <code>target</code> parameter; otherwise, `false`.'
  overload: System.Security.PermissionSet.IsSubsetOf*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.IsSynchronized
  commentId: P:System.Security.PermissionSet.IsSynchronized
  id: IsSynchronized
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: PermissionSet.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Gets a value indicating whether the collection is guaranteed to be thread safe.
  remarks: "<xref:System.Security.PermissionSet> does not automatically handle thread safety, so this property is always `false`.  \n  \n This method is required to support <xref:System.Collections.ICollection>."
  example:
  - "The following code example shows the value returned by the <xref:System.Security.PermissionSet.IsSynchronized%2A> property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#6)]\n [!code-csharp[System.Security.PermissionSet#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#6)]\n [!code-vb[System.Security.PermissionSet#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#6)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: Always `false`.
  overload: System.Security.PermissionSet.IsSynchronized*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.IsUnrestricted
  commentId: M:System.Security.PermissionSet.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: PermissionSet.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Determines whether the <xref href="System.Security.PermissionSet"></xref> is `Unrestricted`.
  remarks: An `Unrestricted`<xref:System.Security.PermissionSet> effectively contains all permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface.
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.IsUnrestricted%2A> method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#19)]\n [!code-csharp[System.Security.PermissionSet#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#19)]\n [!code-vb[System.Security.PermissionSet#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#19)]"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Security.PermissionSet"></xref> is `Unrestricted`; otherwise, `false`.'
  overload: System.Security.PermissionSet.IsUnrestricted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.PermitOnly
  commentId: M:System.Security.PermissionSet.PermitOnly
  id: PermitOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: PermissionSet.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Causes any <xref href="System.Security.PermissionSet.Demand"></xref> that passes through the calling code for any <xref href="System.Security.PermissionSet"></xref> that is not a subset of the current <xref href="System.Security.PermissionSet"></xref> to fail.
  remarks: "<xref:System.Security.PermissionSet.PermitOnly%2A> is similar to <xref:System.Security.PermissionSet.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <xref:System.Security.PermissionSet.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.PermissionSet.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail. Call this method to ensure that your code can be used to access only the specified resources.  \n  \n <xref:System.Security.PermissionSet.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission cannot succeed. However, if code lower on the call stack later calls <xref:System.Security.PermissionSet.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.PermissionSet.PermitOnly%2A>. This is because the code that called <xref:System.Security.PermissionSet.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.PermissionSet.PermitOnly%2A> for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.PermissionSet.PermitOnly*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  commentId: M:System.Security.PermissionSet.RemovePermission(System.Type)
  id: RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: PermissionSet.RemovePermission(Type)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Removes a permission of a certain type from the set.
  remarks: "> [!IMPORTANT]\n>  You cannot remove permissions from an unrestricted permission set. The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown.  \n  \n The following C# code attempts to remove the <xref:System.Security.Permissions.FileIOPermission> from the `FullTrust` permission set, but the permission is not removed.  \n  \n```  \nPolicyLevel myPol = PolicyLevel.CreateAppDomainLevel();  \nPermissionSet myPermSet = myPol.GetNamedPermissionSet(\"FullTrust\");  \nmyPermSet.RemovePermission(typeof(FileIOPermission));  \n```"
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.RemovePermission%2A> method to remove a <xref:System.Security.Permissions.FileIOPermission> from a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#15)]\n [!code-csharp[System.Security.PermissionSet#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#15)]\n [!code-vb[System.Security.PermissionSet#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#15)]"
  syntax:
    content: public System.Security.IPermission RemovePermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: The type of permission to delete.
    return:
      type: System.Security.IPermission
      description: The permission removed from the set.
  overload: System.Security.PermissionSet.RemovePermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method is called from a <xref href="System.Security.ReadOnlyPermissionSet"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  commentId: M:System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  id: RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: PermissionSet.RemovePermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Removes a permission of a certain type from the set.
  remarks: "The <xref:System.Security.PermissionSet.RemovePermissionImpl%2A> method is the implementation for the <xref:System.Security.PermissionSet.RemovePermission%2A> method.  \n  \n> [!IMPORTANT]\n>  You cannot remove permissions from an unrestricted permission set. The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown."
  syntax:
    content: protected virtual System.Security.IPermission RemovePermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: The type of the permission to remove.
    return:
      type: System.Security.IPermission
      description: The permission removed from the set.
  overload: System.Security.PermissionSet.RemovePermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method is called from a <xref href="System.Security.ReadOnlyPermissionSet"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.RevertAssert
  commentId: M:System.Security.PermissionSet.RevertAssert
  id: RevertAssert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: PermissionSet.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Causes any previous <xref href="System.Security.CodeAccessPermission.Assert"></xref> for the current frame to be removed and no longer be in effect.
  remarks: If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.PermissionSet.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: There is no previous <xref href="System.Security.CodeAccessPermission.Assert"></xref> for the current frame.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  commentId: M:System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  id: SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: PermissionSet.SetPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Sets a permission to the <xref href="System.Security.PermissionSet"></xref>, replacing any existing permission of the same type.
  remarks: This method removes any existing permission object of the same type from the <xref:System.Security.PermissionSet> and replaces it with the `perm` parameter. If a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is set on a <xref:System.Security.PermissionSet> that is <xref:System.Security.Permissions.PermissionState.Unrestricted>, the resulting <xref:System.Security.PermissionSet> is no longer `Unrestricted`.
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.SetPermission%2A> method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#16)]\n [!code-csharp[System.Security.PermissionSet#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#16)]\n [!code-vb[System.Security.PermissionSet#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#16)]"
  syntax:
    content: public System.Security.IPermission SetPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: The permission to set.
    return:
      type: System.Security.IPermission
      description: The set permission.
  overload: System.Security.PermissionSet.SetPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method is called from a <xref href="System.Security.ReadOnlyPermissionSet"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  commentId: M:System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  id: SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: PermissionSet.SetPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Sets a permission to the <xref href="System.Security.PermissionSet"></xref>, replacing any existing permission of the same type.
  remarks: "The <xref:System.Security.PermissionSet.SetPermissionImpl%2A> method is the implementation for the <xref:System.Security.PermissionSet.SetPermission%2A> method.  \n  \n This method removes any existing permission object of the same type from the <xref:System.Security.PermissionSet> and replaces it with the `perm` parameter. If a permission that implements <xref:System.Security.Permissions.IUnrestrictedPermission> is set on a <xref:System.Security.PermissionSet> that is <xref:System.Security.Permissions.PermissionState.Unrestricted>, the resulting <xref:System.Security.PermissionSet> is no longer `Unrestricted`."
  syntax:
    content: protected virtual System.Security.IPermission SetPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: The permission to set.
    return:
      type: System.Security.IPermission
      description: The set permission.
  overload: System.Security.PermissionSet.SetPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method is called from a <xref href="System.Security.ReadOnlyPermissionSet"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.SyncRoot
  commentId: P:System.Security.PermissionSet.SyncRoot
  id: SyncRoot
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: PermissionSet.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Gets the root object of the current collection.
  remarks: This method is required to support <xref:System.Collections.ICollection>.
  example:
  - "The following code example shows the use of <xref:System.Security.PermissionSet.SyncRoot%2A> property to get the root object of the current collection. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#8)]\n [!code-csharp[System.Security.PermissionSet#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#8)]\n [!code-vb[System.Security.PermissionSet#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#8)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: The root object of the current collection.
  overload: System.Security.PermissionSet.SyncRoot*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.ToString
  commentId: M:System.Security.PermissionSet.ToString
  id: ToString
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: PermissionSet.ToString()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Returns a string representation of the <xref href="System.Security.PermissionSet"></xref>.
  remarks: The string representation is useful in debugging to see the state of a <xref:System.Security.PermissionSet>.
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.ToString%2A> method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#10)]\n [!code-csharp[System.Security.PermissionSet#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#10)]\n [!code-vb[System.Security.PermissionSet#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#10)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A representation of the <xref href="System.Security.PermissionSet"></xref>.
  overload: System.Security.PermissionSet.ToString*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.ToXml
  commentId: M:System.Security.PermissionSet.ToXml
  id: ToXml
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: PermissionSet.ToXml()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Creates an XML encoding of the security object and its current state.
  remarks: ''
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.ToXml%2A> method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#17)]\n [!code-csharp[System.Security.PermissionSet#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#17)]\n [!code-vb[System.Security.PermissionSet#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#17)]"
  syntax:
    content: public virtual System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: An XML encoding of the security object, including any state information.
  overload: System.Security.PermissionSet.ToXml*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  commentId: M:System.Security.PermissionSet.Union(System.Security.PermissionSet)
  id: Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: PermissionSet.Union(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Creates a <xref href="System.Security.PermissionSet"></xref> that is the union of the current <xref href="System.Security.PermissionSet"></xref> and the specified <xref href="System.Security.PermissionSet"></xref>.
  remarks: The result of a call to <xref:System.Security.PermissionSet.Union%2A> is a <xref:System.Security.PermissionSet> that represents all the operations represented by the current <xref:System.Security.PermissionSet> as well as all the operations represented by the specified <xref:System.Security.PermissionSet>. If either set is `Unrestricted`, the union is `Unrestricted` as well.
  example:
  - "The following code example shows the use of the <xref:System.Security.PermissionSet.Union%2A> method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cpp[System.Security.PermissionSet#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.PermissionSet/CPP/permissionset.cpp#13)]\n [!code-csharp[System.Security.PermissionSet#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.PermissionSet/CS/permissionset.cs#13)]\n [!code-vb[System.Security.PermissionSet#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.PermissionSet/VB/permissionset.vb#13)]"
  syntax:
    content: public System.Security.PermissionSet Union (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: The permission set to form the union with the current <xref href="System.Security.PermissionSet"></xref>.
    return:
      type: System.Security.PermissionSet
      description: A new permission set that represents the union of the current <xref href="System.Security.PermissionSet"></xref> and the specified <xref href="System.Security.PermissionSet"></xref>.
  overload: System.Security.PermissionSet.Union*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  commentId: M:System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.IDeserializationCallback.OnDeserialization(Object)
  fullName: PermissionSet.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Runs when the entire object graph has been deserialized.
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The object that initiated the callback. The functionality for this parameter is not currently implemented.
  overload: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  parent: System
  isExternal: false
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: PermissionSet.PermissionSet(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: PermissionSet.PermissionSet(PermissionSet)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: PermissionSet.AddPermission(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: PermissionSet.AddPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.Assert
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: PermissionSet.Assert()
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: PermissionSet.ContainsNonCodeAccessPermissions()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet(String, Byte[], String)
  nameWithType: PermissionSet.ConvertPermissionSet(String, Byte[], String)
  fullName: PermissionSet.ConvertPermissionSet(String, Byte[], String)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.PermissionSet.Copy
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: PermissionSet.Copy()
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo(Array, Int32)
  nameWithType: PermissionSet.CopyTo(Array, Int32)
  fullName: PermissionSet.CopyTo(Array, Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.PermissionSet.Count
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
  fullName: PermissionSet.Count
- uid: System.Security.PermissionSet.Demand
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: PermissionSet.Demand()
- uid: System.Security.PermissionSet.Deny
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: PermissionSet.Deny()
- uid: System.Security.PermissionSet.Equals(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: PermissionSet.Equals(Object)
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: PermissionSet.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.PermissionSet.GetEnumerator
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: PermissionSet.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: PermissionSet.GetEnumeratorImpl()
- uid: System.Security.PermissionSet.GetHashCode
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: PermissionSet.GetHashCode()
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: PermissionSet.GetPermission(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: PermissionSet.GetPermissionImpl(Type)
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: PermissionSet.Intersect(PermissionSet)
- uid: System.Security.PermissionSet.IsEmpty
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: PermissionSet.IsEmpty()
- uid: System.Security.PermissionSet.IsReadOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: PermissionSet.IsSubsetOf(PermissionSet)
- uid: System.Security.PermissionSet.IsSynchronized
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: PermissionSet.IsUnrestricted()
- uid: System.Security.PermissionSet.PermitOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: PermissionSet.PermitOnly()
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: PermissionSet.RemovePermission(Type)
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: PermissionSet.RemovePermissionImpl(Type)
- uid: System.Security.PermissionSet.RevertAssert
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: PermissionSet.RevertAssert()
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: PermissionSet.SetPermission(IPermission)
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: PermissionSet.SetPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.SyncRoot
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.ToString
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: PermissionSet.ToString()
- uid: System.Security.PermissionSet.ToXml
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: PermissionSet.ToXml()
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: PermissionSet.Union(PermissionSet)
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.IDeserializationCallback.OnDeserialization(Object)
  fullName: PermissionSet.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Security.PermissionSet.#ctor*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet.PermissionSet
  fullName: PermissionSet.PermissionSet
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.AddPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission
  nameWithType: PermissionSet.AddPermission
  fullName: PermissionSet.AddPermission
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.AddPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl
  nameWithType: PermissionSet.AddPermissionImpl
  fullName: PermissionSet.AddPermissionImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.Assert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert
  nameWithType: PermissionSet.Assert
  fullName: PermissionSet.Assert
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions
  fullName: PermissionSet.ContainsNonCodeAccessPermissions
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.ConvertPermissionSet*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet
  nameWithType: PermissionSet.ConvertPermissionSet
  fullName: PermissionSet.ConvertPermissionSet
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.Copy*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy
  nameWithType: PermissionSet.Copy
  fullName: PermissionSet.Copy
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.CopyTo*
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo
  nameWithType: PermissionSet.CopyTo
  fullName: PermissionSet.CopyTo
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.Count*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
  fullName: PermissionSet.Count
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.Demand*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand
  nameWithType: PermissionSet.Demand
  fullName: PermissionSet.Demand
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.Deny*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny
  nameWithType: PermissionSet.Deny
  fullName: PermissionSet.Deny
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.Equals*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals
  nameWithType: PermissionSet.Equals
  fullName: PermissionSet.Equals
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.FromXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml
  nameWithType: PermissionSet.FromXml
  fullName: PermissionSet.FromXml
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.GetEnumerator*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator
  nameWithType: PermissionSet.GetEnumerator
  fullName: PermissionSet.GetEnumerator
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.GetEnumeratorImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl
  nameWithType: PermissionSet.GetEnumeratorImpl
  fullName: PermissionSet.GetEnumeratorImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.GetHashCode*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode
  nameWithType: PermissionSet.GetHashCode
  fullName: PermissionSet.GetHashCode
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.GetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission
  nameWithType: PermissionSet.GetPermission
  fullName: PermissionSet.GetPermission
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.GetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl
  nameWithType: PermissionSet.GetPermissionImpl
  fullName: PermissionSet.GetPermissionImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.Intersect*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect
  nameWithType: PermissionSet.Intersect
  fullName: PermissionSet.Intersect
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.IsEmpty*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty
  nameWithType: PermissionSet.IsEmpty
  fullName: PermissionSet.IsEmpty
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.IsReadOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: PermissionSet.IsReadOnly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.IsSubsetOf*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf
  nameWithType: PermissionSet.IsSubsetOf
  fullName: PermissionSet.IsSubsetOf
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.IsSynchronized*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: PermissionSet.IsSynchronized
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.IsUnrestricted*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted
  nameWithType: PermissionSet.IsUnrestricted
  fullName: PermissionSet.IsUnrestricted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.PermitOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly
  nameWithType: PermissionSet.PermitOnly
  fullName: PermissionSet.PermitOnly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.RemovePermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission
  nameWithType: PermissionSet.RemovePermission
  fullName: PermissionSet.RemovePermission
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.RemovePermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl
  nameWithType: PermissionSet.RemovePermissionImpl
  fullName: PermissionSet.RemovePermissionImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.RevertAssert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert
  nameWithType: PermissionSet.RevertAssert
  fullName: PermissionSet.RevertAssert
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.SetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission
  nameWithType: PermissionSet.SetPermission
  fullName: PermissionSet.SetPermission
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.SetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl
  nameWithType: PermissionSet.SetPermissionImpl
  fullName: PermissionSet.SetPermissionImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.SyncRoot*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: PermissionSet.SyncRoot
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.ToString*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString
  nameWithType: PermissionSet.ToString
  fullName: PermissionSet.ToString
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.ToXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml
  nameWithType: PermissionSet.ToXml
  fullName: PermissionSet.ToXml
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.Union*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union
  nameWithType: PermissionSet.Union
  fullName: PermissionSet.Union
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  fullName: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/PermissionSet.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: Enumerable.Cast<TResult>(IEnumerable)
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: Enumerable.OfType<TResult>(IEnumerable)
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: Queryable.AsQueryable(IEnumerable)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Runtime.Serialization.IDeserializationCallback
  parent: System.Runtime.Serialization
  isExternal: false
  name: IDeserializationCallback
  nameWithType: IDeserializationCallback
  fullName: System.Runtime.Serialization.IDeserializationCallback
- uid: System.Security.ISecurityEncodable
  parent: System.Security
  isExternal: false
  name: ISecurityEncodable
  nameWithType: ISecurityEncodable
  fullName: System.Security.ISecurityEncodable
- uid: System.Security.IStackWalk
  parent: System.Security
  isExternal: false
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
