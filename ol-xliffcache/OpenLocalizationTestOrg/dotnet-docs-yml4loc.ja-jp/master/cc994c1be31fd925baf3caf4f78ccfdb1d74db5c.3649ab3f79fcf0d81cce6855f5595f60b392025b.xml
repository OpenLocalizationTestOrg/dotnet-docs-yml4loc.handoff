{"nodes":[{"content":"Represents a name of an XML element or attribute.","nodes":[{"pos":[0,49],"content":"Represents a name of an XML element or attribute.","nodes":[{"content":"Represents a name of an XML element or attribute.","pos":[0,49]}]}],"pos":[1202,1252],"yaml":true},{"content":"XML names include a namespace and a local name. A *fully qualified name* is the combination of the namespace and local name.  \n  \n## Creating an XName Object  \n <xref:System.Xml.Linq.XName> does not contain any public constructors. Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>. The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>. By passing a string, you take advantage of the implicit conversion. The following code creates an element with a name that is in no namespace:  \n  \n```csharp  \n  \n                XElement root = new XElement(\"ElementName\", \"content\");  \nConsole.WriteLine(root);  \n```  \n  \n In Visual Basic, it is more appropriate to use XML literals:  \n  \n```vb  \n  \n                Dim root As XElement = <ElementName>content</ElementName>  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<ElementName>content</ElementName>  \n```  \n  \n Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.  \n  \n The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals. Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.  \n  \n In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object. However, the recommended way is to use the implicit conversion from string.  \n  \n## Creating an XName in a Namespace  \n As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.  \n  \n For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.  \n  \n For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement root = new XElement(aw + \"ElementName\", \"content\");  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Imports <xmlns=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = <ElementName>content</ElementName>  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<ElementName xmlns=\"http://www.adventure-works.com\">content</ElementName>  \n```  \n  \n## Creating an XName in no Namespace  \n The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null. If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>. The following code demonstrates this:  \n  \n```csharp  \n  \n                XElement root = new XElement(\"ElementName\", \"content\");  \nif (root.Name.Namespace == XNamespace.None)  \n    Console.WriteLine(\"The element is in no namespace.\");  \nelse  \n    Console.WriteLine(\"The element is in a namespace.\");  \n```  \n  \n```vb  \n  \n                Dim root As XElement = <ElementName>content</ElementName>  \nIf (root.Name.Namespace Is XNamespace.None) Then  \n    Console.WriteLine(\"The element is in no namespace.\")  \nElse  \n    Console.WriteLine(\"The element is in a namespace.\")  \nEnd If  \n```  \n  \n This example produces the following output:  \n  \n```  \nThe element is in no namespace.  \n```  \n  \n## Using Expanded Names  \n You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:  \n  \n```csharp  \n  \n                XElement root = new XElement(\"{http://www.adventure-works.com}ElementName\", \"content\");  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = New XElement(\"{http://www.adventure-works.com}ElementName\", \"content\")  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<ElementName xmlns=\"http://www.adventure-works.com\">content</ElementName>  \n```  \n  \n Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator. It is also less efficient than importing a global namespace and using XML literals in Visual Basic.  \n  \n If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace. This work must be repeated for every use of an expanded name. This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.  \n  \n## XName Objects are Atomized  \n <xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance. The equality and comparison operators are also provided explicitly for this purpose.  \n  \n Among other benefits, this feature allows for faster execution of queries. When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison. It is much faster to determine that two references actually refer to the same object than to compare two strings.","nodes":[{"pos":[0,124],"content":"XML names include a namespace and a local name. A *fully qualified name* is the combination of the namespace and local name.","nodes":[{"content":"XML names include a namespace and a local name.","pos":[0,47]},{"content":"A <bpt id=\"p1\">*</bpt>fully qualified name<ept id=\"p1\">*</ept> is the combination of the namespace and local name.","pos":[48,124],"source":" A *fully qualified name* is the combination of the namespace and local name."}]},{"pos":[133,157],"content":"Creating an XName Object","linkify":"Creating an XName Object","nodes":[{"content":"Creating an XName Object","pos":[0,24]}]},{"pos":[161,709],"content":"<xref:System.Xml.Linq.XName> does not contain any public constructors. Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>. The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>. By passing a string, you take advantage of the implicit conversion. The following code creates an element with a name that is in no namespace:","nodes":[{"content":"<xref:System.Xml.Linq.XName> does not contain any public constructors. Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>. The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>. By passing a string, you take advantage of the implicit conversion. The following code creates an element with a name that is in no namespace:","pos":[0,548],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> does not contain any public constructors.","pos":[0,70],"source":"<xref:System.Xml.Linq.XName> does not contain any public constructors."},{"content":"Instead, this class provides an implicit conversion from <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> that allows you to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[71,207],"source":" Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>."},{"content":"The most common place you use this conversion is when constructing an element or attribute: The first argument to the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor is an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[208,405],"source":" The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>."},{"content":"By passing a string, you take advantage of the implicit conversion.","pos":[406,473]},{"content":"The following code creates an element with a name that is in no namespace:","pos":[474,548]}]}]},{"pos":[841,901],"content":"In Visual Basic, it is more appropriate to use XML literals:","nodes":[{"content":"In Visual Basic, it is more appropriate to use XML literals:","pos":[0,60]}]},{"pos":[1030,1073],"content":"This example produces the following output:","nodes":[{"content":"This example produces the following output:","pos":[0,43]}]},{"pos":[1138,1247],"content":"Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.","nodes":[{"content":"Assigning a string to an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> uses the implicit conversion from <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,109],"source":"Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>."}]},{"pos":[1254,1468],"content":"The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals. Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.","nodes":[{"content":"The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals. Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.","pos":[0,214],"nodes":[{"content":"The Visual Basic example creates the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> using XML literals.","pos":[0,88],"source":"The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals."},{"content":"Even though XML literals are used, an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is created for the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[89,214],"source":" Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>."}]}]},{"pos":[1475,1667],"content":"In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object. However, the recommended way is to use the implicit conversion from string.","nodes":[{"content":"In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object. However, the recommended way is to use the implicit conversion from string.","pos":[0,192],"nodes":[{"content":"In addition, you can call the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName.Get%2A&gt;</ph> method for an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> object.","pos":[0,116],"source":"In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object."},{"content":"However, the recommended way is to use the implicit conversion from string.","pos":[117,192]}]}]},{"pos":[1676,1708],"content":"Creating an XName in a Namespace","linkify":"Creating an XName in a Namespace","nodes":[{"content":"Creating an XName in a Namespace","pos":[0,32]}]},{"pos":[1712,1809],"content":"As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.","nodes":[{"content":"As with XML, an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> can be in a namespace, or it can be in no namespace.","pos":[0,97],"source":"As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace."}]},{"pos":[1816,2016],"content":"For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.","nodes":[{"content":"For C#, the recommended approach for creating an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> in a namespace is to declare the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object, then use the override of the addition operator.","pos":[0,200],"source":"For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator."}]},{"pos":[2023,2160],"content":"For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.","nodes":[{"content":"For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.","pos":[0,137]}]},{"pos":[2602,2645],"content":"This example produces the following output:","nodes":[{"content":"This example produces the following output:","pos":[0,43]}]},{"pos":[2751,2784],"content":"Creating an XName in no Namespace","linkify":"Creating an XName in no Namespace","nodes":[{"content":"Creating an XName in no Namespace","pos":[0,33]}]},{"pos":[2788,3126],"content":"The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null. If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>. The following code demonstrates this:","nodes":[{"content":"The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null. If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>. The following code demonstrates this:","pos":[0,338],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property of an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is guaranteed to not be null.","pos":[0,126],"source":"The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> is in no namespace, then the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property will be set to <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.","pos":[127,300],"source":" If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>."},{"content":"The following code demonstrates this:","pos":[301,338]}]}]},{"pos":[3683,3726],"content":"This example produces the following output:","nodes":[{"content":"This example produces the following output:","pos":[0,43]}]},{"pos":[3784,3804],"content":"Using Expanded Names","linkify":"Using Expanded Names","nodes":[{"content":"Using Expanded Names","pos":[0,20]}]},{"pos":[3808,3920],"content":"You can also create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a expanded XML name in the form <ph id=\"ph2\">`{namespace}localname`</ph>:","source":"You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:"},{"pos":[4242,4285],"content":"This example produces the following output:","nodes":[{"content":"This example produces the following output:","pos":[0,43]}]},{"pos":[4389,4693],"content":"Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator. It is also less efficient than importing a global namespace and using XML literals in Visual Basic.","nodes":[{"content":"Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator. It is also less efficient than importing a global namespace and using XML literals in Visual Basic.","pos":[0,304],"nodes":[{"content":"Be aware that creating an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> through an expanded name is less efficient than creating an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object and using the override of the addition operator.","pos":[0,204],"source":"Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator."},{"content":"It is also less efficient than importing a global namespace and using XML literals in Visual Basic.","pos":[205,304]}]}]},{"pos":[4700,5031],"content":"If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace. This work must be repeated for every use of an expanded name. This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.","nodes":[{"content":"If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace. This work must be repeated for every use of an expanded name. This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.","pos":[0,331],"nodes":[{"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> using an expanded name, LINQ to XML must find the atomized instance of a namespace.","pos":[0,129],"source":"If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace."},{"content":"This work must be repeated for every use of an expanded name.","pos":[130,191]},{"content":"This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.","pos":[192,331]}]}]},{"pos":[5040,5066],"content":"XName Objects are Atomized","linkify":"XName Objects are Atomized","nodes":[{"content":"XName Objects are Atomized","pos":[0,26]}]},{"pos":[5070,5375],"content":"<xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance. The equality and comparison operators are also provided explicitly for this purpose.","nodes":[{"content":"<xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance. The equality and comparison operators are also provided explicitly for this purpose.","pos":[0,305],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects are guaranteed to be atomized; that is, if two <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects have exactly the same namespace and exactly the same local name, they will share the same instance.","pos":[0,220],"source":"<xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance."},{"content":"The equality and comparison operators are also provided explicitly for this purpose.","pos":[221,305]}]}]},{"pos":[5382,5711],"content":"Among other benefits, this feature allows for faster execution of queries. When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison. It is much faster to determine that two references actually refer to the same object than to compare two strings.","nodes":[{"content":"Among other benefits, this feature allows for faster execution of queries. When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison. It is much faster to determine that two references actually refer to the same object than to compare two strings.","pos":[0,329],"nodes":[{"content":"Among other benefits, this feature allows for faster execution of queries.","pos":[0,74]},{"content":"When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.","pos":[75,215]},{"content":"It is much faster to determine that two references actually refer to the same object than to compare two strings.","pos":[216,329]}]}]}],"pos":[1263,7135],"yaml":true,"extradata":"MT"},{"content":"Determines whether the specified <xref href=\"System.Xml.Linq.XName\"></xref> is equal to this <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,136],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> is equal to this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the specified <xref href=\"System.Xml.Linq.XName\"></xref> is equal to this <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[9201,9338],"yaml":true},{"content":"For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.","nodes":[{"pos":[0,96],"content":"For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.","nodes":[{"content":"For two <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects to be equal, they must have the same expanded name.","pos":[0,96],"source":"For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name."}]}],"pos":[9349,9446],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XName\"></xref> to compare to the current <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to compare to the current <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Xml.Linq.XName\"></xref> to compare to the current <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[9586,9703],"yaml":true},{"content":"`true` if the specified <xref href=\"System.Xml.Linq.XName\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XName\"></xref>; otherwise `false`.","nodes":[{"pos":[0,153],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id=\"ph3\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>; otherwise <ph id=\"ph4\">`false`</ph>.","source":"`true` if the specified <xref href=\"System.Xml.Linq.XName\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XName\"></xref>; otherwise `false`."}],"pos":[9761,9917],"yaml":true},{"content":"Gets an <xref href=\"System.Xml.Linq.XName\"></xref> object from an expanded name.","nodes":[{"pos":[0,80],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> object from an expanded name.","source":"Gets an <xref href=\"System.Xml.Linq.XName\"></xref> object from an expanded name."}],"pos":[11390,11471],"yaml":true},{"content":"This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>. You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.  \n  \n A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.  \n  \n Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>. If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.","nodes":[{"pos":[0,227],"content":"This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>. You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.","nodes":[{"content":"This method contains overloads that allow you to create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,88],"source":"This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>."},{"content":"You can create it from a expanded XML name in the form <ph id=\"ph1\">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.","pos":[89,227],"source":" You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately."}]},{"pos":[234,356],"content":"A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.","nodes":[{"content":"A much more common and easier way to create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.","pos":[0,122],"source":"A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string."}]},{"pos":[363,670],"content":"Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>. If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.","nodes":[{"content":"Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>. If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.","pos":[0,307],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> are atomized, if there is an existing <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,210],"source":"Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>."},{"content":"If there is no existing <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.","pos":[211,307],"source":" If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized."}]}]}],"pos":[11482,12159],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains an expanded XML name in the format <code>{namespace}localname</code>.","nodes":[{"pos":[0,120],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains an expanded XML name in the format <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">{namespace}localname</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.String\"></xref> that contains an expanded XML name in the format <code>{namespace}localname</code>."}],"pos":[13606,13727],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> object constructed from the expanded name.","nodes":[{"pos":[0,88],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> object constructed from the expanded name.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> object constructed from the expanded name."}],"pos":[13792,13881],"yaml":true},{"content":"Gets an <xref href=\"System.Xml.Linq.XName\"></xref> object from a local name and a namespace.","nodes":[{"pos":[0,92],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> object from a local name and a namespace.","source":"Gets an <xref href=\"System.Xml.Linq.XName\"></xref> object from a local name and a namespace."}],"pos":[15417,15510],"yaml":true},{"content":"This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>. You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.  \n  \n A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.  \n  \n Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>. If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.","nodes":[{"pos":[0,228],"content":"This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>. You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.","nodes":[{"content":"This method contains overloads that allow you to create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,88],"source":"This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>."},{"content":"You can create it from an expanded XML name in the form <ph id=\"ph1\">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.","pos":[89,228],"source":" You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately."}]},{"pos":[235,357],"content":"A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.","nodes":[{"content":"A much more common and easier way to create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.","pos":[0,122],"source":"A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string."}]},{"pos":[364,671],"content":"Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>. If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.","nodes":[{"content":"Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>. If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.","pos":[0,307],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> are atomized, if there is an existing <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,210],"source":"Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>."},{"content":"If there is no existing <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.","pos":[211,307],"source":" If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized."}]}]}],"pos":[15521,16199],"yaml":true,"extradata":"MT"},{"content":"A local (unqualified) name.","nodes":[{"pos":[0,27],"content":"A local (unqualified) name.","nodes":[{"content":"A local (unqualified) name.","pos":[0,27]}]}],"pos":[17600,17628],"yaml":true},{"content":"An XML namespace.","nodes":[{"pos":[0,17],"content":"An XML namespace.","nodes":[{"content":"An XML namespace.","pos":[0,17]}]}],"pos":[17697,17715],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> object created from the specified local name and namespace.","nodes":[{"pos":[0,105],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> object created from the specified local name and namespace.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> object created from the specified local name and namespace."}],"pos":[17780,17886],"yaml":true},{"content":"Gets a hash code for this <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,69],"content":"Gets a hash code for this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a hash code for this <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[19341,19411],"yaml":true},{"content":"This method serves as a hash function for <xref:System.Xml.Linq.XName>. You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.","nodes":[{"pos":[0,194],"content":"This method serves as a hash function for <xref:System.Xml.Linq.XName>. You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.","nodes":[{"content":"This method serves as a hash function for <xref:System.Xml.Linq.XName>. You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.","pos":[0,194],"nodes":[{"content":"This method serves as a hash function for <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,71],"source":"This method serves as a hash function for <xref:System.Xml.Linq.XName>."},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName.GetHashCode%2A&gt;</ph> in hashing algorithms, or in data structures such as a hash table.","pos":[72,194],"source":" You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table."}]}]}],"pos":[19422,19617],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Int32\"></xref> that contains the hash code for the <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,116],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> that contains the hash code for the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Int32\"></xref> that contains the hash code for the <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[19751,19868],"yaml":true},{"content":"Gets the local (unqualified) part of the name.","nodes":[{"pos":[0,46],"content":"Gets the local (unqualified) part of the name.","nodes":[{"content":"Gets the local (unqualified) part of the name.","pos":[0,46]}]}],"pos":[21315,21362],"yaml":true},{"content":"This property is guaranteed to not be `null`.","nodes":[{"pos":[0,45],"content":"This property is guaranteed to not be <ph id=\"ph1\">`null`</ph>.","source":"This property is guaranteed to not be `null`."}],"pos":[21373,21419],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains the local (unqualified) part of the name.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the local (unqualified) part of the name.","source":"A <xref href=\"System.String\"></xref> that contains the local (unqualified) part of the name."}],"pos":[22379,22472],"yaml":true},{"content":"Gets the namespace part of the fully qualified name.","nodes":[{"pos":[0,52],"content":"Gets the namespace part of the fully qualified name.","nodes":[{"content":"Gets the namespace part of the fully qualified name.","pos":[0,52]}]}],"pos":[23917,23970],"yaml":true},{"content":"The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`. If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.","nodes":[{"pos":[0,206],"content":"The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`. If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property is guaranteed to not be <ph id=\"ph2\">`null`</ph>.","pos":[0,86],"source":"The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`."},{"content":"If an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> is in no namespace, this property returns <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.","pos":[87,206],"source":" If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>."}]}],"pos":[23981,24188],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> that contains the namespace part of the name.","nodes":[{"pos":[0,96],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> that contains the namespace part of the name.","source":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> that contains the namespace part of the name."}],"pos":[25181,25278],"yaml":true},{"content":"Returns the URI of the <xref href=\"System.Xml.Linq.XNamespace\"></xref> for this <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,123],"content":"Returns the URI of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> for this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the URI of the <xref href=\"System.Xml.Linq.XNamespace\"></xref> for this <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[26747,26871],"yaml":true},{"content":"This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.","nodes":[{"pos":[0,94],"content":"This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.","nodes":[{"content":"This is a convenience property to get the namespace name from an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,94],"source":"This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>."}]}],"pos":[26882,26977],"yaml":true,"extradata":"MT"},{"content":"The URI of the <xref href=\"System.Xml.Linq.XNamespace\"></xref> for this <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,115],"content":"The URI of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> for this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"The URI of the <xref href=\"System.Xml.Linq.XNamespace\"></xref> for this <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[27757,27873],"yaml":true},{"content":"Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XName\"></xref> are equal.","nodes":[{"pos":[0,105],"content":"Returns a value indicating whether two instances of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are equal.","source":"Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XName\"></xref> are equal."}],"pos":[29511,29617],"yaml":true},{"content":"The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == \"SomeElementName\"`. The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only. These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.  \n  \n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,418],"content":"The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == \"SomeElementName\"`. The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only. These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.","nodes":[{"content":"The operator overloads <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> are included to enable comparisons between <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XName&gt;</ph> and a <ph id=\"ph4\">`string`</ph>, such as<ph id=\"ph5\">`element.Name == \"SomeElementName\"`</ph>.","pos":[0,168],"source":"The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == \"SomeElementName\"`."},{"content":"The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.","pos":[169,317]},{"content":"These operators do not consider the implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[318,418],"source":" These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>."}]},{"pos":[425,503],"content":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"content":"The equivalent method for this operator is ?qualifyHint=True&amp;autoUpgrade=False","pos":[0,78],"source":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False"}]}],"pos":[29628,30138],"yaml":true,"extradata":"MT"},{"content":"The first <xref href=\"System.Xml.Linq.XName\"></xref> to compare.","nodes":[{"pos":[0,64],"content":"The first <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The first <xref href=\"System.Xml.Linq.XName\"></xref> to compare."}],"pos":[31285,31350],"yaml":true},{"content":"The second <xref href=\"System.Xml.Linq.XName\"></xref> to compare.","nodes":[{"pos":[0,65],"content":"The second <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The second <xref href=\"System.Xml.Linq.XName\"></xref> to compare."}],"pos":[31419,31485],"yaml":true},{"content":"`true` if <code>left</code> and <code>right</code> are equal; otherwise `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal; otherwise <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> and <code>right</code> are equal; otherwise `false`."}],"pos":[31543,31626],"yaml":true},{"content":"Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XName\"></xref> are not equal.","nodes":[{"pos":[0,109],"content":"Returns a value indicating whether two instances of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are not equal.","source":"Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XName\"></xref> are not equal."}],"pos":[35143,35253],"yaml":true},{"content":"The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == \"SomeElementName\"`. The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only. These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.  \n  \n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,416],"content":"The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == \"SomeElementName\"`. The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only. These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.","nodes":[{"content":"The operator overloads <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> are included to enable comparisons between <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XName&gt;</ph> and a string, such as<ph id=\"ph4\">`element.Name == \"SomeElementName\"`</ph>.","pos":[0,166],"source":"The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == \"SomeElementName\"`."},{"content":"The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.","pos":[167,315]},{"content":"These operators do not consider the implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[316,416],"source":" These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>."}]},{"pos":[423,501],"content":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False","nodes":[{"content":"The equivalent method for this operator is ?qualifyHint=True&amp;autoUpgrade=False","pos":[0,78],"source":"The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False"}]}],"pos":[35264,35772],"yaml":true,"extradata":"MT"},{"content":"The first <xref href=\"System.Xml.Linq.XName\"></xref> to compare.","nodes":[{"pos":[0,64],"content":"The first <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The first <xref href=\"System.Xml.Linq.XName\"></xref> to compare."}],"pos":[36957,37022],"yaml":true},{"content":"The second <xref href=\"System.Xml.Linq.XName\"></xref> to compare.","nodes":[{"pos":[0,65],"content":"The second <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The second <xref href=\"System.Xml.Linq.XName\"></xref> to compare."}],"pos":[37091,37157],"yaml":true},{"content":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise `false`.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are not equal; otherwise <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise `false`."}],"pos":[37215,37302],"yaml":true},{"content":"Returns the expanded XML name in the format <code>{namespace}localname</code>.","nodes":[{"pos":[0,78],"content":"Returns the expanded XML name in the format <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">{namespace}localname</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Returns the expanded XML name in the format <code>{namespace}localname</code>."}],"pos":[38749,38828],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that contains the expanded XML name in the format <code>{namespace}localname</code>.","nodes":[{"pos":[0,121],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the expanded XML name in the format <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">{namespace}localname</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.String\"></xref> that contains the expanded XML name in the format <code>{namespace}localname</code>."}],"pos":[39946,40068],"yaml":true},{"content":"Indicates whether the current <xref href=\"System.Xml.Linq.XName\"></xref> is equal to the specified <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,142],"content":"Indicates whether the current <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> is equal to the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"Indicates whether the current <xref href=\"System.Xml.Linq.XName\"></xref> is equal to the specified <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[41773,41916],"yaml":true},{"content":"The <xref href=\"System.Xml.Linq.XName\"></xref> to compare with this <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to compare with this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Xml.Linq.XName\"></xref> to compare with this <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[42085,42197],"yaml":true},{"content":"`true` if this <xref href=\"System.Xml.Linq.XName\"></xref> is equal to the specified <xref href=\"System.Xml.Linq.XName\"></xref>, otherwise `false`.","nodes":[{"pos":[0,146],"content":"<ph id=\"ph1\">`true`</ph> if this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> is equal to the specified <ph id=\"ph3\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>, otherwise <ph id=\"ph4\">`false`</ph>.","source":"`true` if this <xref href=\"System.Xml.Linq.XName\"></xref> is equal to the specified <xref href=\"System.Xml.Linq.XName\"></xref>, otherwise `false`."}],"pos":[42255,42404],"yaml":true},{"content":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with the data required to serialize the target object.","nodes":[{"pos":[0,134],"content":"Populates a <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> with the data required to serialize the target object.","source":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with the data required to serialize the target object."}],"pos":[44487,44622],"yaml":true},{"content":"This method is used internally to serialize object graphs that contain LINQ to XML objects.","nodes":[{"pos":[0,91],"content":"This method is used internally to serialize object graphs that contain LINQ to XML objects.","nodes":[{"content":"This method is used internally to serialize object graphs that contain LINQ to XML objects.","pos":[0,91]}]}],"pos":[44633,44725],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> to populate with data.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data."}],"pos":[45000,45095],"yaml":true},{"content":"The destination (see <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref>) for this serialization.","nodes":[{"pos":[0,112],"content":"The destination (see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph>) for this serialization.","source":"The destination (see <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref>) for this serialization."}],"pos":[45190,45303],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.Linq.XName\n  commentId: T:System.Xml.Linq.XName\n  id: XName\n  children:\n  - System.Xml.Linq.XName.Equals(System.Object)\n  - System.Xml.Linq.XName.Get(System.String)\n  - System.Xml.Linq.XName.Get(System.String,System.String)\n  - System.Xml.Linq.XName.GetHashCode\n  - System.Xml.Linq.XName.LocalName\n  - System.Xml.Linq.XName.Namespace\n  - System.Xml.Linq.XName.NamespaceName\n  - System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  - System.Xml.Linq.XName.op_Implicit(System.String to System.Xml.Linq.XName)\n  - System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  - System.Xml.Linq.XName.ToString\n  - System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)\n  - System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  langs:\n  - csharp\n  name: XName\n  nameWithType: XName\n  fullName: System.Xml.Linq.XName\n  type: Class\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Represents a name of an XML element or attribute.\n  remarks: \"XML names include a namespace and a local name. A *fully qualified name* is the combination of the namespace and local name.  \\n  \\n## Creating an XName Object  \\n <xref:System.Xml.Linq.XName> does not contain any public constructors. Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>. The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>. By passing a string, you take advantage of the implicit conversion. The following code creates an element with a name that is in no namespace:  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"ElementName\\\", \\\"content\\\");  \\nConsole.WriteLine(root);  \\n```  \\n  \\n In Visual Basic, it is more appropriate to use XML literals:  \\n  \\n```vb  \\n  \\n                Dim root As XElement = <ElementName>content</ElementName>  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<ElementName>content</ElementName>  \\n```  \\n  \\n Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.  \\n  \\n The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals. Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.  \\n  \\n In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object. However, the recommended way is to use the implicit conversion from string.  \\n  \\n## Creating an XName in a Namespace  \\n As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.  \\n  \\n For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.  \\n  \\n For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"ElementName\\\", \\\"content\\\");  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <ElementName>content</ElementName>  \\n        Console.WriteLine(root)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<ElementName xmlns=\\\"http://www.adventure-works.com\\\">content</ElementName>  \\n```  \\n  \\n## Creating an XName in no Namespace  \\n The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null. If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>. The following code demonstrates this:  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"ElementName\\\", \\\"content\\\");  \\nif (root.Name.Namespace == XNamespace.None)  \\n    Console.WriteLine(\\\"The element is in no namespace.\\\");  \\nelse  \\n    Console.WriteLine(\\\"The element is in a namespace.\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = <ElementName>content</ElementName>  \\nIf (root.Name.Namespace Is XNamespace.None) Then  \\n    Console.WriteLine(\\\"The element is in no namespace.\\\")  \\nElse  \\n    Console.WriteLine(\\\"The element is in a namespace.\\\")  \\nEnd If  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nThe element is in no namespace.  \\n```  \\n  \\n## Using Expanded Names  \\n You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"{http://www.adventure-works.com}ElementName\\\", \\\"content\\\");  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = New XElement(\\\"{http://www.adventure-works.com}ElementName\\\", \\\"content\\\")  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<ElementName xmlns=\\\"http://www.adventure-works.com\\\">content</ElementName>  \\n```  \\n  \\n Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator. It is also less efficient than importing a global namespace and using XML literals in Visual Basic.  \\n  \\n If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace. This work must be repeated for every use of an expanded name. This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.  \\n  \\n## XName Objects are Atomized  \\n <xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance. The equality and comparison operators are also provided explicitly for this purpose.  \\n  \\n Among other benefits, this feature allows for faster execution of queries. When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison. It is much faster to determine that two references actually refer to the same object than to compare two strings.\"\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))]\n\n      public sealed class XName : IEquatable<System.Xml.Linq.XName>, System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Xml.Linq.XName}\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.Serialization.KnownTypeAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.Equals(System.Object)\n  commentId: M:System.Xml.Linq.XName.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: XName.Equals(Object)\n  fullName: XName.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Determines whether the specified <xref href=\"System.Xml.Linq.XName\"></xref> is equal to this <xref href=\"System.Xml.Linq.XName\"></xref>.\n  remarks: For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref href=\"System.Xml.Linq.XName\"></xref> to compare to the current <xref href=\"System.Xml.Linq.XName\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified <xref href=\"System.Xml.Linq.XName\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XName\"></xref>; otherwise `false`.'\n  overload: System.Xml.Linq.XName.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.Get(System.String)\n  commentId: M:System.Xml.Linq.XName.Get(System.String)\n  id: Get(System.String)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: Get(String)\n  nameWithType: XName.Get(String)\n  fullName: XName.Get(String)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets an <xref href=\"System.Xml.Linq.XName\"></xref> object from an expanded name.\n  remarks: \"This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>. You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.  \\n  \\n A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.  \\n  \\n Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>. If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.\"\n  example:\n  - \"The following example shows the use of this method.  \\n  \\n```csharp  \\n  \\n                XName name = XName.Get(\\\"{http://www.adventure-works.com}Root\\\");  \\nXElement el = new XElement(name, \\\"content\\\");  \\nConsole.WriteLine(el);  \\n  \\n// This is the preferred approach for specifying the XName in the  \\n// constructor of XElement.  \\nXNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement el2 = new XElement(aw + \\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(el2);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim name As XName = XName.Get(\\\"{http://www.adventure-works.com}Root\\\")  \\n        Dim el As XElement = New XElement(name, \\\"content\\\")  \\n        Console.WriteLine(el)  \\n  \\n        ' The preferred approach for specifying an XName in a namespace  \\n        ' for Visual Basic is to import a global namespace.  \\n        Dim el2 As XElement = <Root>content</Root>  \\n        Console.WriteLine(el2)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n<Root xmlns=\\\"http://www.adventure-works.com\\\">content</Root>  \\n<Root xmlns=\\\"http://www.adventure-works.com\\\">content</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XName Get (string expandedName);\n    parameters:\n    - id: expandedName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains an expanded XML name in the format <code>{namespace}localname</code>.\n    return:\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> object constructed from the expanded name.\n  overload: System.Xml.Linq.XName.Get*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.Get(System.String,System.String)\n  commentId: M:System.Xml.Linq.XName.Get(System.String,System.String)\n  id: Get(System.String,System.String)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: Get(String, String)\n  nameWithType: XName.Get(String, String)\n  fullName: XName.Get(String, String)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets an <xref href=\"System.Xml.Linq.XName\"></xref> object from a local name and a namespace.\n  remarks: \"This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>. You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.  \\n  \\n A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.  \\n  \\n Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>. If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.\"\n  example:\n  - \"The following example shows the use of this method.  \\n  \\n```csharp  \\n  \\n                XName name = XName.Get(\\\"Root\\\", \\\"http://www.adventure-works.com\\\");  \\nXElement el = new XElement(name, \\\"content\\\");  \\nConsole.WriteLine(el);  \\n  \\n// This is the preferred form.  \\nXNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement el2 = new XElement(aw + \\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(el2);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim name As XName = XName.Get(\\\"{http://www.adventure-works.com}Root\\\")  \\n        Dim el As XElement = New XElement(name, \\\"content\\\")  \\n        Console.WriteLine(el)  \\n  \\n        ' The preferred approach for specifying an XName in a namespace  \\n        ' for Visual Basic is to import a global namespace.  \\n        Dim el2 As XElement = <Root>content</Root>  \\n        Console.WriteLine(el2)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n<Root xmlns=\\\"http://www.adventure-works.com\\\">content</Root>  \\n<Root xmlns=\\\"http://www.adventure-works.com\\\">content</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XName Get (string localName, string namespaceName);\n    parameters:\n    - id: localName\n      type: System.String\n      description: A local (unqualified) name.\n    - id: namespaceName\n      type: System.String\n      description: An XML namespace.\n    return:\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> object created from the specified local name and namespace.\n  overload: System.Xml.Linq.XName.Get*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.GetHashCode\n  commentId: M:System.Xml.Linq.XName.GetHashCode\n  id: GetHashCode\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: XName.GetHashCode()\n  fullName: XName.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a hash code for this <xref href=\"System.Xml.Linq.XName\"></xref>.\n  remarks: This method serves as a hash function for <xref:System.Xml.Linq.XName>. You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: An <xref href=\"System.Int32\"></xref> that contains the hash code for the <xref href=\"System.Xml.Linq.XName\"></xref>.\n  overload: System.Xml.Linq.XName.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.LocalName\n  commentId: P:System.Xml.Linq.XName.LocalName\n  id: LocalName\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: LocalName\n  nameWithType: XName.LocalName\n  fullName: XName.LocalName\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the local (unqualified) part of the name.\n  remarks: This property is guaranteed to not be `null`.\n  example:\n  - \"The following example shows the use of this property.  \\n  \\n```csharp  \\n  \\n                XNamespace ns = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(ns + \\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(root.Name);  \\nConsole.WriteLine(root.Name.LocalName);  \\nConsole.WriteLine(root.Name.Namespace);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <Root/>  \\n        Console.WriteLine(root.Name)  \\n        Console.WriteLine(root.Name.LocalName)  \\n        Console.WriteLine(root.Name.Namespace)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n{http://www.adventure-works.com}Root  \\nRoot  \\nhttp://www.adventure-works.com  \\n```\"\n  syntax:\n    content: public string LocalName { get; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the local (unqualified) part of the name.\n  overload: System.Xml.Linq.XName.LocalName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.Namespace\n  commentId: P:System.Xml.Linq.XName.Namespace\n  id: Namespace\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: XName.Namespace\n  fullName: XName.Namespace\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the namespace part of the fully qualified name.\n  remarks: The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`. If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.\n  example:\n  - \"The following example shows the use of this property.  \\n  \\n```csharp  \\n  \\n                XNamespace ns = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(ns + \\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(root.Name);  \\nConsole.WriteLine(root.Name.LocalName);  \\nConsole.WriteLine(root.Name.Namespace);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <Root/>  \\n        Console.WriteLine(root.Name)  \\n        Console.WriteLine(root.Name.LocalName)  \\n        Console.WriteLine(root.Name.Namespace)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n{http://www.adventure-works.com}Root  \\nRoot  \\nhttp://www.adventure-works.com  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XNamespace Namespace { get; }\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: An <xref href=\"System.Xml.Linq.XNamespace\"></xref> that contains the namespace part of the name.\n  overload: System.Xml.Linq.XName.Namespace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.NamespaceName\n  commentId: P:System.Xml.Linq.XName.NamespaceName\n  id: NamespaceName\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: NamespaceName\n  nameWithType: XName.NamespaceName\n  fullName: XName.NamespaceName\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns the URI of the <xref href=\"System.Xml.Linq.XNamespace\"></xref> for this <xref href=\"System.Xml.Linq.XName\"></xref>.\n  remarks: This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.\n  example:\n  - \"This example creates an element in a namespace, and then prints the element's namespace.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\");  \\nConsole.WriteLine(root.Name.NamespaceName);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <Root/>  \\n        Console.WriteLine(root.Name.NamespaceName)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nhttp://www.adventure-works.com  \\n```\"\n  syntax:\n    content: public string NamespaceName { get; }\n    return:\n      type: System.String\n      description: The URI of the <xref href=\"System.Xml.Linq.XNamespace\"></xref> for this <xref href=\"System.Xml.Linq.XName\"></xref>.\n  overload: System.Xml.Linq.XName.NamespaceName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  id: op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: op_Equality(XName, XName)\n  nameWithType: XName.op_Equality(XName, XName)\n  fullName: XName.op_Equality(XName, XName)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XName\"></xref> are equal.\n  remarks: \"The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == \\\"SomeElementName\\\"`. The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only. These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.  \\n  \\n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False\"\n  example:\n  - \"The following example shows some comparisons between <xref:System.Xml.Linq.XName> objects and strings.  \\n  \\n```csharp  \\n  \\n                XName xn;  \\nxn = XName.Get(\\\"Root\\\");  \\nConsole.WriteLine(xn == \\\"Root\\\");  \\n  \\nxn = XName.Get(\\\"Root\\\", \\\"http://www.adventure-works.com\\\");  \\nConsole.WriteLine(xn == \\\"{http://www.adventure-works.com}Root\\\");  \\n  \\nXElement root = new XElement(\\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(root.Name == \\\"Root\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim xn As XName  \\nxn = XName.Get(\\\"Root\\\")  \\nConsole.WriteLine(xn = \\\"Root\\\")  \\n  \\nxn = XName.Get(\\\"Root\\\", \\\"http://www.adventure-works.com\\\")  \\nConsole.WriteLine(xn = \\\"{http://www.adventure-works.com}Root\\\")  \\n  \\nDim root As XElement = New XElement(\\\"Root\\\", \\\"content\\\")  \\nConsole.WriteLine(root.Name = \\\"Root\\\")  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nTrue  \\nTrue  \\nTrue  \\n```\"\n  syntax:\n    content: public static bool op_Equality (System.Xml.Linq.XName left, System.Xml.Linq.XName right);\n    parameters:\n    - id: left\n      type: System.Xml.Linq.XName\n      description: The first <xref href=\"System.Xml.Linq.XName\"></xref> to compare.\n    - id: right\n      type: System.Xml.Linq.XName\n      description: The second <xref href=\"System.Xml.Linq.XName\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> and <code>right</code> are equal; otherwise `false`.'\n  overload: System.Xml.Linq.XName.op_Equality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.op_Implicit(System.String to System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName\n  id: op_Implicit(System.String to System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: op_Implicit(String to XName)\n  nameWithType: XName.op_Implicit(String to XName)\n  fullName: XName.op_Implicit(String to XName)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static System.Xml.Linq.XName op_Implicit (string expandedName);\n    parameters:\n    - id: expandedName\n      type: System.String\n      description: ''\n    return:\n      type: System.Xml.Linq.XName\n      description: ''\n  overload: System.Xml.Linq.XName.op_Implicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  id: op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: op_Inequality(XName, XName)\n  nameWithType: XName.op_Inequality(XName, XName)\n  fullName: XName.op_Inequality(XName, XName)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XName\"></xref> are not equal.\n  remarks: \"The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == \\\"SomeElementName\\\"`. The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only. These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.  \\n  \\n The equivalent method for this operator is ?qualifyHint=True&autoUpgrade=False\"\n  example:\n  - \"The following C# example compares an <xref:System.Xml.Linq.XName> object to a string, which invokes this operator.  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\", \\\"content\\\");  \\n  \\nConsole.WriteLine(root.Name != \\\"{http://www.adventure-works.com}Root\\\");  \\n  \\n// the following is the preferred idiom  \\nConsole.WriteLine(root.Name != aw + \\\"Root\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <Root>content</Root>  \\n        Console.WriteLine(root.Name <> \\\"{http://www.adventure-works.com}Root\\\")  \\n  \\n        ' the following is the preferred idiom  \\n        Console.WriteLine(root.Name <> GetXmlNamespace() + \\\"Root\\\")  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nFalse  \\nFalse  \\n```\"\n  syntax:\n    content: public static bool op_Inequality (System.Xml.Linq.XName left, System.Xml.Linq.XName right);\n    parameters:\n    - id: left\n      type: System.Xml.Linq.XName\n      description: The first <xref href=\"System.Xml.Linq.XName\"></xref> to compare.\n    - id: right\n      type: System.Xml.Linq.XName\n      description: The second <xref href=\"System.Xml.Linq.XName\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise `false`.'\n  overload: System.Xml.Linq.XName.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.ToString\n  commentId: M:System.Xml.Linq.XName.ToString\n  id: ToString\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: XName.ToString()\n  fullName: XName.ToString()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns the expanded XML name in the format <code>{namespace}localname</code>.\n  remarks: ''\n  example:\n  - \"The following example calls <xref:System.Console.WriteLine%2A>, passing an <xref:System.Xml.Linq.XName>. This causes the <xref:System.Xml.Linq.XName.ToString%2A> method to be called.  \\n  \\n```csharp  \\n  \\n                XNamespace ns = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(ns + \\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(root.Name);  \\nConsole.WriteLine(root.Name.LocalName);  \\nConsole.WriteLine(root.Name.Namespace);  \\n```  \\n  \\n```vb  \\nImports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root As XElement = <Root>content</Root>  \\n        Console.WriteLine(root.Name)  \\n        Console.WriteLine(root.Name.LocalName)  \\n        Console.WriteLine(root.Name.Namespace)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n{http://www.adventure-works.com}Root  \\nRoot  \\nhttp://www.adventure-works.com  \\n```\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the expanded XML name in the format <code>{namespace}localname</code>.\n  overload: System.Xml.Linq.XName.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XName.System#IEquatable<System#Xml#Linq#XName>#Equals(System.Xml.Linq.XName)\n  id: System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)\n  isEii: true\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: IEquatable<XName>.Equals(XName)\n  nameWithType: XName.IEquatable<XName>.Equals(XName)\n  fullName: XName.IEquatable<XName>.Equals(XName)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Indicates whether the current <xref href=\"System.Xml.Linq.XName\"></xref> is equal to the specified <xref href=\"System.Xml.Linq.XName\"></xref>.\n  syntax:\n    content: bool IEquatable<XName>.Equals (System.Xml.Linq.XName other);\n    parameters:\n    - id: other\n      type: System.Xml.Linq.XName\n      description: The <xref href=\"System.Xml.Linq.XName\"></xref> to compare with this <xref href=\"System.Xml.Linq.XName\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if this <xref href=\"System.Xml.Linq.XName\"></xref> is equal to the specified <xref href=\"System.Xml.Linq.XName\"></xref>, otherwise `false`.'\n  overload: System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: XName.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: XName.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with the data required to serialize the target object.\n  remarks: This method is used internally to serialize object graphs that contain LINQ to XML objects.\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination (see <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref>) for this serialization.\n  overload: System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xml.Linq.XName.Equals(System.Object)\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: XName.Equals(Object)\n  fullName: XName.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.Linq.XName.Get(System.String)\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: Get(String)\n  nameWithType: XName.Get(String)\n  fullName: XName.Get(String)\n- uid: System.Xml.Linq.XName\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XName\n  nameWithType: XName\n  fullName: System.Xml.Linq.XName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Xml.Linq.XName.Get(System.String,System.String)\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: Get(String, String)\n  nameWithType: XName.Get(String, String)\n  fullName: XName.Get(String, String)\n- uid: System.Xml.Linq.XName.GetHashCode\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: XName.GetHashCode()\n  fullName: XName.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Xml.Linq.XName.LocalName\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: LocalName\n  nameWithType: XName.LocalName\n  fullName: XName.LocalName\n- uid: System.Xml.Linq.XName.Namespace\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: Namespace\n  nameWithType: XName.Namespace\n  fullName: XName.Namespace\n- uid: System.Xml.Linq.XNamespace\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNamespace\n  nameWithType: XNamespace\n  fullName: System.Xml.Linq.XNamespace\n- uid: System.Xml.Linq.XName.NamespaceName\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: NamespaceName\n  nameWithType: XName.NamespaceName\n  fullName: XName.NamespaceName\n- uid: System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: op_Equality(XName, XName)\n  nameWithType: XName.op_Equality(XName, XName)\n  fullName: XName.op_Equality(XName, XName)\n- uid: System.Xml.Linq.XName.op_Implicit(System.String to System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: op_Implicit(String to XName)\n  nameWithType: XName.op_Implicit(String to XName)\n  fullName: XName.op_Implicit(String to XName)\n- uid: System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: op_Inequality(XName, XName)\n  nameWithType: XName.op_Inequality(XName, XName)\n  fullName: XName.op_Inequality(XName, XName)\n- uid: System.Xml.Linq.XName.ToString\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: ToString()\n  nameWithType: XName.ToString()\n  fullName: XName.ToString()\n- uid: System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: IEquatable<XName>.Equals(XName)\n  nameWithType: XName.IEquatable<XName>.Equals(XName)\n  fullName: XName.IEquatable<XName>.Equals(XName)\n- uid: System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: XName.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: XName.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Xml.Linq.XName.Get*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: Get\n  nameWithType: XName.Get\n  fullName: XName.Get\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.Equals*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: Equals\n  nameWithType: XName.Equals\n  fullName: XName.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.GetHashCode*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: GetHashCode\n  nameWithType: XName.GetHashCode\n  fullName: XName.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.LocalName*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: LocalName\n  nameWithType: XName.LocalName\n  fullName: XName.LocalName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.Namespace*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: Namespace\n  nameWithType: XName.Namespace\n  fullName: XName.Namespace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.NamespaceName*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: NamespaceName\n  nameWithType: XName.NamespaceName\n  fullName: XName.NamespaceName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.op_Equality*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: op_Equality\n  nameWithType: XName.op_Equality\n  fullName: XName.op_Equality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.op_Implicit*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: op_Implicit\n  nameWithType: XName.op_Implicit\n  fullName: XName.op_Implicit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.op_Inequality*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: op_Inequality\n  nameWithType: XName.op_Inequality\n  fullName: XName.op_Inequality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.ToString*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: ToString\n  nameWithType: XName.ToString\n  fullName: XName.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: System.IEquatable<System.Xml.Linq.XName>.Equals\n  nameWithType: XName.System.IEquatable<System.Xml.Linq.XName>.Equals\n  fullName: XName.System.IEquatable<System.Xml.Linq.XName>.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Xml.Linq.XName\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: XName.System.Runtime.Serialization.ISerializable.GetObjectData\n  fullName: XName.System.Runtime.Serialization.ISerializable.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XName.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.IEquatable`1\n  name: IEquatable<T>\n  nameWithType: IEquatable<T>\n  fullName: System.IEquatable<T>\n- uid: System.IEquatable{System.Xml.Linq.XName}\n  parent: System\n  isExternal: false\n  name: IEquatable<XName>\n  nameWithType: IEquatable<XName>\n  fullName: System.IEquatable<System.Xml.Linq.XName>\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XName\n    name: XName\n    nameWithType: XName\n    fullName: System.Xml.Linq.XName\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}