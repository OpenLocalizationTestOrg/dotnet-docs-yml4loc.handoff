{"nodes":[{"content":"Represents the method that will handle the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event.","nodes":[{"pos":[0,117],"content":"Represents the method that will handle the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding.CanExecute\"&gt;&lt;/xref&gt;</ph> event.","source":"Represents the method that will handle the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event."}],"pos":[454,572],"yaml":true},{"content":"The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target. If the command has a command source that specifies a target, then the target information can be obtained through `sender`. If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.  If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=fullName> property should be set to `true`; otherwise, set it to `false`.  \n  \n You do not need to rely on event data to determine the command, source, and target. You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.","nodes":[{"pos":[0,684],"content":"The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target. If the command has a command source that specifies a target, then the target information can be obtained through `sender`. If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.  If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=fullName> property should be set to `true`; otherwise, set it to `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> determines if the command associated with the event source is able to execute on the command target.","pos":[0,161],"source":"The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target."},{"content":"If the command has a command source that specifies a target, then the target information can be obtained through <ph id=\"ph1\">`sender`</ph>.","pos":[162,284],"source":" If the command has a command source that specifies a target, then the target information can be obtained through `sender`."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is not set, the element with keyboard focus is the target, and can also be obtained through <ph id=\"ph2\">`sender`</ph>.","pos":[285,453],"source":" If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`."},{"content":"If it is determined that the command can execute on the target, then the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=fullName&gt;</ph> property should be set to <ph id=\"ph2\">`true`</ph>; otherwise, set it to <ph id=\"ph3\">`false`</ph>.","pos":[455,684],"source":"  If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=fullName> property should be set to `true`; otherwise, set it to `false`."}]},{"pos":[691,1045],"content":"You do not need to rely on event data to determine the command, source, and target. You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.","nodes":[{"content":"You do not need to rely on event data to determine the command, source, and target. You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.","pos":[0,354],"nodes":[{"content":"You do not need to rely on event data to determine the command, source, and target.","pos":[0,83]},{"content":"You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.","pos":[84,354]}]}]}],"pos":[583,1633],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.CanExecuteRoutedEventHandler\n  commentId: T:System.Windows.Input.CanExecuteRoutedEventHandler\n  id: CanExecuteRoutedEventHandler\n  langs:\n  - csharp\n  name: CanExecuteRoutedEventHandler\n  nameWithType: CanExecuteRoutedEventHandler\n  fullName: System.Windows.Input.CanExecuteRoutedEventHandler\n  type: Delegate\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Represents the method that will handle the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event.\n  remarks: \"The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target. If the command has a command source that specifies a target, then the target information can be obtained through `sender`. If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.  If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=fullName> property should be set to `true`; otherwise, set it to `false`.  \\n  \\n You do not need to rely on event data to determine the command, source, and target. You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.\"\n  example:\n  - \"The following example shows a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \\n  \\n [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]\\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]\"\n  syntax:\n    content: public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventHandler.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}