{"nodes":[{"content":"Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.","nodes":[{"pos":[0,125],"content":"Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.","nodes":[{"content":"Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.","pos":[0,125]}]}],"pos":[712,838],"yaml":true},{"content":"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further. See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n Use the <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid> class whenever you need to safely wrap an unmanaged resource that does not have an existing managed wrapper.","nodes":[{"pos":[0,516],"content":"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further. See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.","nodes":[{"content":"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further. See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.","pos":[0,516],"nodes":[{"content":"This class derives from the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName&gt;</ph> class.","pos":[0,108],"source":"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class."},{"content":"It describes the format of an invalid handle.","pos":[109,154]},{"content":"For example, some handles use -1 as an invalid handle value, while others use 0.","pos":[155,235]},{"content":"Further derivations of this class (for example, file or registry handles) can specialize this further.","pos":[236,338]},{"content":"See the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph> class for an example of a class that derives from <ph id=\"ph2\">&lt;xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid&gt;</ph>.","pos":[339,516],"source":" See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>."}]}]},{"pos":[524,1050],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[1057,1242],"content":"Use the <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid> class whenever you need to safely wrap an unmanaged resource that does not have an existing managed wrapper.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid&gt;</ph> class whenever you need to safely wrap an unmanaged resource that does not have an existing managed wrapper.","pos":[0,185],"source":"Use the <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid> class whenever you need to safely wrap an unmanaged resource that does not have an existing managed wrapper."}]}],"pos":[849,2101],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\"></xref> class, specifying whether the handle is to be reliably released.","nodes":[{"pos":[0,181],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\"&gt;&lt;/xref&gt;</ph> class, specifying whether the handle is to be reliably released.","source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\"></xref> class, specifying whether the handle is to be reliably released."}],"pos":[4852,5034],"yaml":true},{"content":"`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended).","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">`true`</ph> to reliably release the handle during the finalization phase; <ph id=\"ph2\">`false`</ph> to prevent reliable release (not recommended).","source":"`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended)."}],"pos":[5203,5329],"yaml":true},{"content":"Gets a value that indicates whether the handle is invalid.","nodes":[{"pos":[0,58],"content":"Gets a value that indicates whether the handle is invalid.","nodes":[{"content":"Gets a value that indicates whether the handle is invalid.","pos":[0,58]}]}],"pos":[6738,6797],"yaml":true},{"content":"The common language runtime uses this property to determine whether critical finalization is required.","nodes":[{"pos":[0,102],"content":"The common language runtime uses this property to determine whether critical finalization is required.","nodes":[{"content":"The common language runtime uses this property to determine whether critical finalization is required.","pos":[0,102]}]}],"pos":[6808,6911],"yaml":true,"extradata":"MT"},{"content":"`true` if the handle is not valid; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> if the handle is not valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the handle is not valid; otherwise, `false`."}],"pos":[7088,7145],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  commentId: T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  id: SafeHandleZeroOrMinusOneIsInvalid\n  children:\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  langs:\n  - csharp\n  name: SafeHandleZeroOrMinusOneIsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.\n  remarks: \"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further. See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n Use the <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid> class whenever you need to safely wrap an unmanaged resource that does not have an existing managed wrapper.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public abstract class SafeHandleZeroOrMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle\n  inheritance:\n  - System.Object\n  - System.Runtime.InteropServices.SafeHandle\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Runtime.InteropServices.SafeHandle.Close\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeHandleZeroOrMinusOneIsInvalid.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)\n  commentId: M:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  langs:\n  - csharp\n  name: SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  fullName: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\"></xref> class, specifying whether the handle is to be reliably released.\n  syntax:\n    content: protected SafeHandleZeroOrMinusOneIsInvalid (bool ownsHandle);\n    parameters:\n    - id: ownsHandle\n      type: System.Boolean\n      description: '`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended).'\n  overload: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeHandleZeroOrMinusOneIsInvalid.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  commentId: P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  fullName: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Gets a value that indicates whether the handle is invalid.\n  remarks: The common language runtime uses this property to determine whether critical finalization is required.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the handle is not valid; otherwise, `false`.'\n  overload: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeHandleZeroOrMinusOneIsInvalid.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  nameWithType: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  fullName: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  fullName: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: SafeHandleZeroOrMinusOneIsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid\n  fullName: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeHandleZeroOrMinusOneIsInvalid.xml\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  fullName: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeHandleZeroOrMinusOneIsInvalid.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Close()\n  nameWithType: SafeHandle.Close()\n  fullName: SafeHandle.Close()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousAddRef(Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  fullName: SafeHandle.DangerousAddRef(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousGetHandle()\n  nameWithType: SafeHandle.DangerousGetHandle()\n  fullName: SafeHandle.DangerousGetHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousRelease()\n  nameWithType: SafeHandle.DangerousRelease()\n  fullName: SafeHandle.DangerousRelease()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: SafeHandle.Dispose()\n  fullName: SafeHandle.Dispose()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SafeHandle.Dispose(Boolean)\n  fullName: SafeHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: handle\n  nameWithType: SafeHandle.handle\n  fullName: SafeHandle.handle\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsClosed\n  nameWithType: SafeHandle.IsClosed\n  fullName: SafeHandle.IsClosed\n- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeHandle.ReleaseHandle()\n  fullName: SafeHandle.ReleaseHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandle(IntPtr)\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  fullName: SafeHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  fullName: SafeHandle.SetHandleAsInvalid()\n"}