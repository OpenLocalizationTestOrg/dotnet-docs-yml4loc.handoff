### YamlMime:ManagedReference
items:
- uid: System.TimeZoneInfo.AdjustmentRule
  commentId: T:System.TimeZoneInfo.AdjustmentRule
  id: TimeZoneInfo.AdjustmentRule
  children:
  - System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)
  - System.TimeZoneInfo.AdjustmentRule.DateEnd
  - System.TimeZoneInfo.AdjustmentRule.DateStart
  - System.TimeZoneInfo.AdjustmentRule.DaylightDelta
  - System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
  - System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
  - System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)
  - System.TimeZoneInfo.AdjustmentRule.GetHashCode
  - System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: TimeZoneInfo.AdjustmentRule
  nameWithType: TimeZoneInfo.AdjustmentRule
  fullName: System.TimeZoneInfo.AdjustmentRule
  type: Class
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Provides information about a time zone adjustment, such as the transition to and from daylight saving time.
  remarks: "The <xref:System.TimeZoneInfo.AdjustmentRule> class defines the effective start and end dates of a particular time change to and from daylight saving time, respectively, as well as its delta (the exact amount by which the adjustment causes the time zone's standard time to change). In addition, two properties return <xref:System.TimeZoneInfo.TransitionTime> objects that define when each transition to and from standard time occurs.  \n  \n> [!NOTE]\n>  An instance of the <xref:System.TimeZoneInfo.AdjustmentRule> class is immutable. Once an object has been created, its values cannot be modified.  \n  \n To create a <xref:System.TimeZoneInfo.AdjustmentRule> object, call the `static` (`Shared` in Visual Basic) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=fullName> method. You can then supply an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects to two of the overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method. To retrieve the adjustment rules of a particular time zone, call its <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=fullName> method, which returns an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects."
  example:
  - "The following example retrieves all time zones defined on the local system and displays complete information about their adjustment rules.  \n  \n [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]\n [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  \n  \n The following is a small portion of the output that is generated by the example. The exact output will vary depending on the operating system and the date on which the example is run.  \n  \n```  \nMorocco Standard Time Adjustment rules  \n   Adjustment rule #1  \n      Start Date: Tuesday, January 01, 2008  \n      End Date: Wednesday, December 31, 2008  \n      Time Change: 1:00 hours  \n      Annual Start: The Last Saturday of May at 11:59 PM  \n      Annual End: The Last Sunday of August at 11:59 PM  \n   Adjustment rule #2  \n      Start Date: Thursday, January 01, 2009  \n      End Date: Thursday, December 31, 2009  \n      Time Change: 1:00 hours  \n      Annual Start: The Last Sunday of May at 11:59 PM  \n      Annual End: The Third Thursday of August at 11:59 PM  \n  \nCoordinated Universal Time has no adjustment rules  \n  \nGMT Standard Time Adjustment rules  \n   Start Date: Monday, January 01, 0001  \n   End Date: Friday, December 31, 9999  \n   Time Change: 1:00 hours  \n   Annual Start: The Last Sunday of March at 1:00 AM  \n   Annual End: The Last Sunday of October at 2:00 AM  \n  \nGreenwich Standard Time has no adjustment rules  \n  \nW. Europe Standard Time Adjustment rules  \n   Start Date: Monday, January 01, 0001  \n   End Date: Friday, December 31, 9999  \n   Time Change: 1:00 hours  \n   Annual Start: The Last Sunday of March at 2:00 AM  \n   Annual End: The Last Sunday of October at 3:00 AM  \n  \nCentral Europe Standard Time Adjustment rules  \n   Start Date: Monday, January 01, 0001  \n   End Date: Friday, December 31, 9999  \n   Time Change: 1:00 hours  \n   Annual Start: The Last Sunday of March at 2:00 AM  \n   Annual End: The Last Sunday of October at 3:00 AM  \n  \nRomance Standard Time Adjustment rules  \n   Start Date: Monday, January 01, 0001  \n   End Date: Friday, December 31, 9999  \n   Time Change: 1:00 hours  \n   Annual Start: The Last Sunday of March at 2:00 AM  \n   Annual End: The Last Sunday of October at 3:00 AM  \n  \nCentral European Standard Time Adjustment rules  \n   Start Date: Monday, January 01, 0001  \n   End Date: Friday, December 31, 9999  \n   Time Change: 1:00 hours  \n   Annual Start: The Last Sunday of March at 2:00 AM  \n   Annual End: The Last Sunday of October at 3:00 AM  \n  \nW. Central Africa Standard Time has no adjustment rules  \n```"
  syntax:
    content: 'public sealed class TimeZoneInfo.AdjustmentRule : IEquatable<TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.TimeZoneInfo}
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)
  commentId: M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)
  id: CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)
  nameWithType: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)
  fullName: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates a new adjustment rule for a particular time zone.
  remarks: "You can use this method to create one or more adjustment rules for a custom time zone. An array of the <xref:System.TimeZoneInfo.AdjustmentRule> objects returned by calls to this method can then be passed as the `adjustmentRules` parameter to two overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method. The example illustrates this procedure.  \n  \n> [!NOTE]\n>  The <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> method can be used only to define an adjustment rule for a new time zone; it cannot be used to modify an adjustment rule for an existing time zone.  \n  \n The `dateStart` and `dateEnd` parameters must be date values without a time component or an <xref:System.ArgumentException> is thrown. The time component can be removed by retrieving a <xref:System.DateTime> value from the date and time's <xref:System.DateTime.Date%2A> property as shown in the following statements:  \n  \n```  \nDateTime.MinValue.Date  \nDateTime.MaxValue.Date  \nDateTime.Now.Date   \ndateVariable.Date  \n```  \n  \n The <xref:System.DateTime.Kind%2A> property of the `dateStart` and `dateEnd` parameters must also be <xref:System.DateTimeKind?displayProperty=fullName>.  \n  \n The value of the `daylightDelta` parameter can range from -14 to 14. The sum of the `daylightDelta` parameter and the `baseUtcOffset` parameter used in the call to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method must also range from -14 to 14 or an <xref:System.InvalidTimeZoneException> is thrown.  \n  \n> [!NOTE]\n>  The `daylightDelta` parameter defines the difference between a time zone's standard time and its daylight saving time. It is not intended to define the time zone's standard time offset from Coordinated Universal Time (UTC). The <xref:System.TimeZoneInfo> class assumes that this offset from UTC is constant throughout the life of the time zone. To reflect a change in a time zone's offset from UTC that is not caused by the application of an adjustment rule, you must use the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new custom time zone."
  example:
  - "The following example creates an alternate Central Standard Time zone and defines three adjustment rules for the periods 1976-1986, 1987-2006, and 2007 and beyond. These rules are added to a generic <xref:System.Collections.Generic.List%601> object whose elements are then copied to a <xref:System.TimeZoneInfo.AdjustmentRule> array. This array is then used in the call to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=fullName> method.  \n  \n [!code-csharp[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#1)]\n [!code-vb[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#1)]"
  syntax:
    content: public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);
    parameters:
    - id: dateStart
      type: System.DateTime
      description: The effective date of the adjustment rule. If the value of the <code>dateStart</code> parameter is `DateTime.MinValue.Date`, this is the first adjustment rule in effect for a time zone.
    - id: dateEnd
      type: System.DateTime
      description: The last date that the adjustment rule is in force. If the value of the <code>dateEnd</code> parameter is `DateTime.MaxValue.Date`, the adjustment rule has no end date.
    - id: daylightDelta
      type: System.TimeSpan
      description: The time change that results from the adjustment. This value is added to the time zone's <xref href="System.TimeZoneInfo.BaseUtcOffset"></xref> property to obtain the correct daylight offset from Coordinated Universal Time (UTC). This value can range from -14 to 14.
    - id: daylightTransitionStart
      type: System.TimeZoneInfo+TransitionTime
      description: An object that defines the start of daylight saving time.
    - id: daylightTransitionEnd
      type: System.TimeZoneInfo+TransitionTime
      description: An object that defines the end of daylight saving time.
    return:
      type: System.TimeZoneInfo+AdjustmentRule
      description: An object that represents the new adjustment rule.
  overload: System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref href=\"System.DateTime.Kind\"></xref> property of the <code>dateStart</code> or <code>dateEnd</code> parameter does not equal <xref href=\"System.DateTimeKind.Unspecified\"></xref>.  \n  \n -or-  \n  \n The <code>daylightTransitionStart</code> parameter is equal to the <code>daylightTransitionEnd</code> parameter.  \n  \n -or-  \n  \n The <code>dateStart</code> or <code>dateEnd</code> parameter includes a time of day value."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>dateEnd</code> is earlier than <code>dateStart</code>.  \n  \n -or-  \n  \n <code>daylightDelta</code> is less than -14 or greater than 14.  \n  \n -or-  \n  \n The <xref href=\"System.TimeSpan.Milliseconds\"></xref> property of the <code>daylightDelta</code> parameter is not equal to 0.  \n  \n -or-  \n  \n The <xref href=\"System.TimeSpan.Ticks\"></xref> property of the <code>daylightDelta</code> parameter does not equal a whole number of seconds."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.DateEnd
  commentId: P:System.TimeZoneInfo.AdjustmentRule.DateEnd
  id: DateEnd
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: DateEnd
  nameWithType: TimeZoneInfo.AdjustmentRule.DateEnd
  fullName: TimeZoneInfo.AdjustmentRule.DateEnd
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the date when the adjustment rule ceases to be in effect.
  remarks: "The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property is a date value without a time component.  \n  \n Because the end date of the current adjustment rule is typically not known, you can assign `DateTime.MaxValue.Date` to the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property when you create a custom adjustment rule.  \n  \n> [!IMPORTANT]\n>  Unless there is a compelling reason to do otherwise, you should define the adjustment rule's end date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's end date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective end date of the adjustment rule should not be December 31 of a particular year, since that date occurs within the period of daylight saving time.  \n  \n By default, the registry in Windows XP defines a single adjustment rule whose end date is Friday, December 31, 9999 (the value of `DateTime.MaxValue.Date`), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:  \n  \n-   Monday, January 01, 0001, to Sunday, December 31, 2006.  \n  \n-   Monday, January 01, 2007, to Friday, December 31, 9999.  \n  \n This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)."
  example:
  - "The following example displays information about all of the time zones defined in the local computer's system registry, including the starting and ending dates of their adjustment rules.  \n  \n [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]\n [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]"
  syntax:
    content: public DateTime DateEnd { get; }
    return:
      type: System.DateTime
      description: A <xref href="System.DateTime"></xref> value that indicates the end date of the adjustment rule.
  overload: System.TimeZoneInfo.AdjustmentRule.DateEnd*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.DateStart
  commentId: P:System.TimeZoneInfo.AdjustmentRule.DateStart
  id: DateStart
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: DateStart
  nameWithType: TimeZoneInfo.AdjustmentRule.DateStart
  fullName: TimeZoneInfo.AdjustmentRule.DateStart
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the date when the adjustment rule takes effect.
  remarks: "The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> property is a date value without a time component. It defines the date on which a particular adjustment rule goes into effect.  This is the date in which a set of transitions (which typically are defined by one transition to daylight savings time and one transition back to standard time) go into effect. For example, an adjustment rule might go into effect on January 1, 2017, that provides for a transition to daylight savings time on the second Sunday of March and for a transition back to standard time on the first Sunday of November. Note that the starting date of the adjustment rule is not tied to the date of the first transition.  \n  \n You can assign `DateTime.MinValue.Date` to the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property when you create a custom adjustment rule for use in a time zone-aware application that does not have to work with historic time zone information.  \n  \n> [!IMPORTANT]\n>  Unless there is a compelling reason to do otherwise, you should define the adjustment rule's start date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's start date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective start date of the adjustment rule should not be January 1 of a particular year, since that date occurs within the period of daylight saving time.  \n  \n By default, the registry in Windows XP defines a single adjustment rule whose start date is Monday, January 01, 0001 (the value of `DateTime.MinValue.Date`), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:  \n  \n-   Monday, January 01, 0001, to Sunday, December 31, 2006.  \n  \n-   Monday, January 01, 2007, to Friday, December 31, 9999.  \n  \n This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)."
  example:
  - "The following example displays information about all of the time zones defined in the local computer's system registry, including the starting and ending dates of their adjustment rules.  \n  \n [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]\n [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]"
  syntax:
    content: public DateTime DateStart { get; }
    return:
      type: System.DateTime
      description: A <xref href="System.DateTime"></xref> value that indicates when the adjustment rule takes effect.
  overload: System.TimeZoneInfo.AdjustmentRule.DateStart*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.DaylightDelta
  commentId: P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta
  id: DaylightDelta
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: DaylightDelta
  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightDelta
  fullName: TimeZoneInfo.AdjustmentRule.DaylightDelta
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the amount of time that is required to form the time zone's daylight saving time. This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).
  remarks: "The following formula defines a time zone's daylight saving time:  \n  \n```  \nTimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  \n```  \n  \n The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property can range from 14 hours to -14 hours.  \n  \n> [!NOTE]\n>  The <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property measures the difference between the time zone’s standard time and its daylight saving time. It does not apply to changes in a time zone's standard offset from Coordinated Universal Time (UTC). To represent a time zone that has changed its standard time offset from UTC, you must call the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new time zone.  \n  \n The most common value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property is 1.0 hours. The application of the daylight saving time adjustment rule increases the time zone's offset from Coordinated Universal Time (UTC) by one hour."
  syntax:
    content: public TimeSpan DaylightDelta { get; }
    return:
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan"></xref> object that indicates the amount of time to add to the standard time changes as a result of the adjustment rule.
  overload: System.TimeZoneInfo.AdjustmentRule.DaylightDelta*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
  commentId: P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
  id: DaylightTransitionEnd
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: DaylightTransitionEnd
  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets information about the annual transition from daylight saving time back to standard time.
  remarks: The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> property defines either a fixed-date rule or a floating-date rule for the return to standard time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, week, day of the week, and time of day on which the transition occurs.
  syntax:
    content: public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }
    return:
      type: System.TimeZoneInfo+TransitionTime
      description: A <xref href="System.TimeZoneInfo.TransitionTime"></xref> object that defines the annual transition from daylight saving time back to the time zone's standard time.
  overload: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
  commentId: P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
  id: DaylightTransitionStart
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: DaylightTransitionStart
  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets information about the annual transition from standard time to daylight saving time.
  remarks: The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> property defines either a fixed-date rule or a floating-date rule for the transition to daylight saving time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, the week, the day of the week, and the time of day on which the transition occurs.
  syntax:
    content: public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }
    return:
      type: System.TimeZoneInfo+TransitionTime
      description: A <xref href="System.TimeZoneInfo.TransitionTime"></xref> object that defines the annual transition from a time zone's standard time to daylight saving time.
  overload: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)
  commentId: M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)
  id: Equals(System.TimeZoneInfo.AdjustmentRule)
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: Equals(TimeZoneInfo+AdjustmentRule)
  nameWithType: TimeZoneInfo.AdjustmentRule.Equals(TimeZoneInfo+AdjustmentRule)
  fullName: TimeZoneInfo.AdjustmentRule.Equals(TimeZoneInfo+AdjustmentRule)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Determines whether the current <xref href="System.TimeZoneInfo.AdjustmentRule"></xref> object is equal to a second <xref href="System.TimeZoneInfo.AdjustmentRule"></xref> object.
  remarks: To determine whether two <xref:System.TimeZoneInfo.AdjustmentRule> objects are equal, the <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> method compares the member values of each object. Two adjustment rules are equal if they have the same effective dates, the same delta, and identical values for the <xref:System.TimeZoneInfo.TransitionTime> objects returned by their <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> and <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> properties.
  example:
  - "The following example calls the <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29?displayProperty=fullName> method to compare the adjustment rules for Central Standard Time with those for Canada Central Standard Time and Mexico Standard Time.  \n  \n [!code-csharp[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#2)]\n [!code-vb[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#2)]  \n  \n This code displays the following output to the console:  \n  \n```  \nComparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  \n   Canada Central Standard Time has no adjustment rules.  \n   Mexican CST for 1/1/0001 to 12/31/9999: Equal  \n```"
  syntax:
    content: public bool Equals (TimeZoneInfo.AdjustmentRule other);
    parameters:
    - id: other
      type: System.TimeZoneInfo+AdjustmentRule
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: '`true` if both <xref href="System.TimeZoneInfo.AdjustmentRule"></xref> objects have equal values; otherwise, `false`.'
  overload: System.TimeZoneInfo.AdjustmentRule.Equals*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.GetHashCode
  commentId: M:System.TimeZoneInfo.AdjustmentRule.GetHashCode
  id: GetHashCode
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: TimeZoneInfo.AdjustmentRule.GetHashCode()
  fullName: TimeZoneInfo.AdjustmentRule.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Serves as a hash function for hashing algorithms and data structures such as hash tables.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer that serves as the hash code for the current <xref href="System.TimeZoneInfo.AdjustmentRule"></xref> object.
  overload: System.TimeZoneInfo.AdjustmentRule.GetHashCode*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  commentId: M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: TimeZoneInfo.AdjustmentRule.IDeserializationCallback.OnDeserialization(Object)
  fullName: TimeZoneInfo.AdjustmentRule.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Runs when the deserialization of a <xref href="System.TimeZoneInfo.AdjustmentRule"></xref> object is completed.
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The object that initiated the callback. The functionality for this parameter is not currently implemented.
  overload: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.TimeZoneInfo.AdjustmentRule
  langs:
  - csharp
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: TimeZoneInfo.AdjustmentRule.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: TimeZoneInfo.AdjustmentRule.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Populates a <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object with the data that is required to serialize this object.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization (see <xref href="System.Runtime.Serialization.StreamingContext"></xref>).
  overload: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)
  nameWithType: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)
  fullName: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)
- uid: System.TimeZoneInfo
  parent: System
  isExternal: false
  name: TimeZoneInfo
  nameWithType: TimeZoneInfo
  fullName: System.TimeZoneInfo+AdjustmentRule
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.TimeZoneInfo.AdjustmentRule.DateEnd
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DateEnd
  nameWithType: TimeZoneInfo.AdjustmentRule.DateEnd
  fullName: TimeZoneInfo.AdjustmentRule.DateEnd
- uid: System.TimeZoneInfo.AdjustmentRule.DateStart
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DateStart
  nameWithType: TimeZoneInfo.AdjustmentRule.DateStart
  fullName: TimeZoneInfo.AdjustmentRule.DateStart
- uid: System.TimeZoneInfo.AdjustmentRule.DaylightDelta
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DaylightDelta
  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightDelta
  fullName: TimeZoneInfo.AdjustmentRule.DaylightDelta
- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DaylightTransitionEnd
  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DaylightTransitionStart
  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
- uid: System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: Equals(TimeZoneInfo+AdjustmentRule)
  nameWithType: TimeZoneInfo.AdjustmentRule.Equals(TimeZoneInfo+AdjustmentRule)
  fullName: TimeZoneInfo.AdjustmentRule.Equals(TimeZoneInfo+AdjustmentRule)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeZoneInfo.AdjustmentRule.GetHashCode
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: GetHashCode()
  nameWithType: TimeZoneInfo.AdjustmentRule.GetHashCode()
  fullName: TimeZoneInfo.AdjustmentRule.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: TimeZoneInfo.AdjustmentRule.IDeserializationCallback.OnDeserialization(Object)
  fullName: TimeZoneInfo.AdjustmentRule.IDeserializationCallback.OnDeserialization(Object)
- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: TimeZoneInfo.AdjustmentRule.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: TimeZoneInfo.AdjustmentRule.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: CreateAdjustmentRule
  nameWithType: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule
  fullName: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.TimeZoneInfo.AdjustmentRule.DateEnd*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DateEnd
  nameWithType: TimeZoneInfo.AdjustmentRule.DateEnd
  fullName: TimeZoneInfo.AdjustmentRule.DateEnd
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.TimeZoneInfo.AdjustmentRule.DateStart*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DateStart
  nameWithType: TimeZoneInfo.AdjustmentRule.DateStart
  fullName: TimeZoneInfo.AdjustmentRule.DateStart
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.TimeZoneInfo.AdjustmentRule.DaylightDelta*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DaylightDelta
  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightDelta
  fullName: TimeZoneInfo.AdjustmentRule.DaylightDelta
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DaylightTransitionEnd
  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: DaylightTransitionStart
  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.TimeZoneInfo.AdjustmentRule.Equals*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: Equals
  nameWithType: TimeZoneInfo.AdjustmentRule.Equals
  fullName: TimeZoneInfo.AdjustmentRule.Equals
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.TimeZoneInfo.AdjustmentRule.GetHashCode*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: GetHashCode
  nameWithType: TimeZoneInfo.AdjustmentRule.GetHashCode
  fullName: TimeZoneInfo.AdjustmentRule.GetHashCode
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: TimeZoneInfo.AdjustmentRule.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  fullName: TimeZoneInfo.AdjustmentRule.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.TimeZoneInfo.AdjustmentRule
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: TimeZoneInfo.AdjustmentRule.System.Runtime.Serialization.ISerializable.GetObjectData
  fullName: TimeZoneInfo.AdjustmentRule.System.Runtime.Serialization.ISerializable.GetObjectData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IEquatable`1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
- uid: System.IEquatable{System.TimeZoneInfo}
  parent: System
  isExternal: false
  name: IEquatable<TimeZoneInfo>
  nameWithType: IEquatable<TimeZoneInfo>
  fullName: System.IEquatable<System.TimeZoneInfo+AdjustmentRule>
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Serialization.IDeserializationCallback
  parent: System.Runtime.Serialization
  isExternal: false
  name: IDeserializationCallback
  nameWithType: IDeserializationCallback
  fullName: System.Runtime.Serialization.IDeserializationCallback
- uid: System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
