<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a49cbb0b6ef808f4be7b100ebd6fe01f514be912</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ComponentModel.Design.IComponentChangeService.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc1f9f5b2d4935fd4e85747bc89a2e4c080f15ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">518a66d905b4f370492311514aa84a5387b84f02</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <ph id="ph1">&lt;xref href="System.ComponentModel.Design.IComponentChangeService.ComponentChanged"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.ComponentModel.Design.IComponentChangeService.ComponentChanging"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService&gt;</ph> provides an interface that can be used to indicate the methods that handle the following events:</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&gt;</ph>, raised when a component is added.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&gt;</ph>, raised when a component is about to be added.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph>, raised when a component is changed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&gt;</ph>, raised when a component is about to be changed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&gt;</ph>, raised when a component is removed.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&gt;</ph>, raised when a component is about to be removed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename&gt;</ph>, raised when a component is renamed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the design environment raises these component add, change, remove, or rename events.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Designers should call the methods of this interface when using <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph> objects to provide undo and redo functionality for design-time actions that affect components.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>More information is available in the documentation for <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, only the root designer handles these change notifications.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This service also provides methods that raise a component changed event or component changing event.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> or a component can indicate that a component has changed or is changing with the <ph id="ph2">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Occurs when a component has been added.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs during load and when new components are created by the user, after the component has been sited.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Occurs when a component is in the process of being added.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs during load and when the user creates a new component.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the process of adding a component by throwing an exception here.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Occurs when a component has been changed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs when any component on the form changes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event will not occur during form load and unload, because changes are expected at this time.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph> can raise multiple <ph id="ph2">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event handler can also impair performance if it draws after each change while a <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to allow a <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph> in process to complete without interruption or interference by your <ph id="ph2">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event handler, you can test the state of the <ph id="ph3">&lt;xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A&gt;</ph> property, and defer handling the change events until the completion of the transaction by adding a <ph id="ph4">&lt;xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler&gt;</ph> which will raise your <ph id="ph5">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event handler and remove itself upon completion of the transaction.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Occurs when a component is in the process of being changed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event does not occur during form load and unload, because changes are expected at this time.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Occurs when a component has been removed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs during unload and when a component is deleted by the user.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event occurs before the site has been removed from the component.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Occurs when a component is in the process of being removed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs during unload and when the user deletes a component.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the process of removing a component by throwing an exception here.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Occurs when a component is renamed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs after the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event when a component has been renamed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Announces to the component change service that a particular component has changed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method raises the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most designers that ship with the <ph id="ph1">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>, as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The appropriate <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService&gt;</ph> events are automatically raised when a <ph id="ph2">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> is used to change a property value or components are added or removed from the <ph id="ph3">&lt;xref:System.ComponentModel.Design.IDesignerHost&gt;</ph> container.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before calling <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;</ph>, first call <ph id="ph2">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt;</ph> to indicate that a component is about to change, and make the change.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then call <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;</ph> to raise the <ph id="ph2">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The component that has changed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The member that has changed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is <ph id="ph1">`null`</ph> if this change is not related to a single member.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The old value of the member.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is valid only if the member is not <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The new value of the member.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This is valid only if the member is not <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Announces to the component change service that a particular component is changing.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method raises the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most designers included with the <ph id="ph1">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>, as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The appropriate <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentChangeService&gt;</ph> events are automatically raised when a <ph id="ph2">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> is used to change a property value or components are added or removed from the <ph id="ph3">&lt;xref:System.ComponentModel.Design.IDesignerHost&gt;</ph> container.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The component that is about to change.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The member that is changing.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is <ph id="ph1">`null`</ph> if this change is not related to a single member.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>