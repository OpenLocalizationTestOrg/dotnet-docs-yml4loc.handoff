### YamlMime:ManagedReference
items:
- uid: System.StringComparer
  commentId: T:System.StringComparer
  id: StringComparer
  children:
  - System.StringComparer.#ctor
  - System.StringComparer.Compare(System.Object,System.Object)
  - System.StringComparer.Compare(System.String,System.String)
  - System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)
  - System.StringComparer.CurrentCulture
  - System.StringComparer.CurrentCultureIgnoreCase
  - System.StringComparer.Equals(System.Object,System.Object)
  - System.StringComparer.Equals(System.String,System.String)
  - System.StringComparer.FromComparison(System.StringComparison)
  - System.StringComparer.GetHashCode(System.Object)
  - System.StringComparer.GetHashCode(System.String)
  - System.StringComparer.InvariantCulture
  - System.StringComparer.InvariantCultureIgnoreCase
  - System.StringComparer.Ordinal
  - System.StringComparer.OrdinalIgnoreCase
  - System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)
  - System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)
  - System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)
  langs:
  - csharp
  name: StringComparer
  nameWithType: StringComparer
  fullName: System.StringComparer
  type: Class
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.
  remarks: "An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules. You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection. Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.  \n  \n A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules. For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n## Implemented Properties  \n You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction. The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class. The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.  \n  \n You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class. Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself. Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules."
  example:
  - "The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class StringComparer : System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>, System.Collections.IComparer, System.Collections.IEqualityComparer
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IComparer{System.String}
  - System.Collections.Generic.IEqualityComparer{System.String}
  - System.Collections.IComparer
  - System.Collections.IEqualityComparer
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.#ctor
  commentId: M:System.StringComparer.#ctor
  id: '#ctor'
  parent: System.StringComparer
  langs:
  - csharp
  name: StringComparer()
  nameWithType: StringComparer.StringComparer()
  fullName: StringComparer.StringComparer()
  type: Constructor
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Initializes a new instance of the <xref href="System.StringComparer"></xref> class.
  syntax:
    content: protected StringComparer ();
    parameters: []
  overload: System.StringComparer.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.Compare(System.Object,System.Object)
  commentId: M:System.StringComparer.Compare(System.Object,System.Object)
  id: Compare(System.Object,System.Object)
  parent: System.StringComparer
  langs:
  - csharp
  name: Compare(Object, Object)
  nameWithType: StringComparer.Compare(Object, Object)
  fullName: StringComparer.Compare(Object, Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
  remarks: The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.
  syntax:
    content: public int Compare (object x, object y);
    parameters:
    - id: x
      type: System.Object
      description: An object to compare to <code>y</code>.
    - id: y
      type: System.Object
      description: An object to compare to <code>x</code>.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> precedes  <code>y</code> in the sort order.  \n  \n -or-  \n  \n <code>x</code> is `null` and <code>y</code> is not `null`.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> is equal to <code>y</code>.  \n  \n -or-  \n  \n <code>x</code> and <code>y</code> are both `null`.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> follows <code>y</code> in the sort order.  \n  \n -or-  \n  \n <code>y</code> is `null` and <code>x</code> is not `null`.  \n  \n </td></tr></tbody></table>"
  overload: System.StringComparer.Compare*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Neither <code>x</code> nor <code>y</code> is a <xref href="System.String"></xref> object, and neither <code>x</code> nor <code>y</code> implements the <xref href="System.IComparable"></xref> interface.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.Compare(System.String,System.String)
  commentId: M:System.StringComparer.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: System.StringComparer
  langs:
  - csharp
  name: Compare(String, String)
  nameWithType: StringComparer.Compare(String, String)
  fullName: StringComparer.Compare(String, String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: When overridden in a derived class, compares two strings and returns an indication of their relative sort order.
  remarks: The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.
  syntax:
    content: public abstract int Compare (string x, string y);
    parameters:
    - id: x
      type: System.String
      description: A string to compare to <code>y</code>.
    - id: y
      type: System.String
      description: A string to compare to <code>x</code>.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> precedes <code>y</code> in the sort order.  \n  \n -or-  \n  \n <code>x</code> is `null` and <code>y</code> is not `null`.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> is equal to <code>y</code>.  \n  \n -or-  \n  \n <code>x</code> and <code>y</code> are both `null`.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> follows <code>y</code> in the sort order.  \n  \n -or-  \n  \n <code>y</code> is `null` and <code>x</code> is not `null`.  \n  \n </td></tr></tbody></table>"
  overload: System.StringComparer.Compare*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)
  commentId: M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)
  id: Create(System.Globalization.CultureInfo,System.Boolean)
  parent: System.StringComparer
  langs:
  - csharp
  name: Create(CultureInfo, Boolean)
  nameWithType: StringComparer.Create(CultureInfo, Boolean)
  fullName: StringComparer.Create(CultureInfo, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Creates a <xref href="System.StringComparer"></xref> object that compares strings according to the rules of a specified culture.
  remarks: ''
  example:
  - "The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]"
  syntax:
    content: public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: A culture whose linguistic rules are used to perform a string comparison.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that comparison operations be case-insensitive; `false` to specify that comparison operations be case-sensitive.'
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object that performs string comparisons according to the comparison rules used by the <code>culture</code> parameter and the case rule specified by the <code>ignoreCase</code> parameter.
  overload: System.StringComparer.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>culture</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.CurrentCulture
  commentId: P:System.StringComparer.CurrentCulture
  id: CurrentCulture
  parent: System.StringComparer
  langs:
  - csharp
  name: CurrentCulture
  nameWithType: StringComparer.CurrentCulture
  fullName: StringComparer.CurrentCulture
  type: Property
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.
  remarks: "The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant. For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.  \n  \n The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.  \n  \n The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.  \n  \n Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.  \n  \n [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]\n [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  \n  \n To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times."
  example:
  - "The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]"
  syntax:
    content: public static StringComparer CurrentCulture { get; }
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.CurrentCulture*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.CurrentCultureIgnoreCase
  commentId: P:System.StringComparer.CurrentCultureIgnoreCase
  id: CurrentCultureIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  name: CurrentCultureIgnoreCase
  nameWithType: StringComparer.CurrentCultureIgnoreCase
  fullName: StringComparer.CurrentCultureIgnoreCase
  type: Property
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.
  remarks: "The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.  \n  \n The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not. For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.  \n  \n The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.  \n  \n Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.  \n  \n [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]\n [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  \n  \n To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times."
  syntax:
    content: public static StringComparer CurrentCultureIgnoreCase { get; }
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.CurrentCultureIgnoreCase*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.Equals(System.Object,System.Object)
  commentId: M:System.StringComparer.Equals(System.Object,System.Object)
  id: Equals(System.Object,System.Object)
  parent: System.StringComparer
  langs:
  - csharp
  name: Equals(Object, Object)
  nameWithType: StringComparer.Equals(Object, Object)
  fullName: StringComparer.Equals(Object, Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: When overridden in a derived class, indicates whether two objects are equal.
  remarks: Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.
  syntax:
    content: public bool Equals (object x, object y);
    parameters:
    - id: x
      type: System.Object
      description: An object to compare to <code>y</code>.
    - id: y
      type: System.Object
      description: An object to compare to <code>x</code>.
    return:
      type: System.Boolean
      description: '`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are both the same type of object and those objects are equal, or both <code>x</code> and <code>y</code> are `null`; otherwise, `false`.'
  overload: System.StringComparer.Equals*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.Equals(System.String,System.String)
  commentId: M:System.StringComparer.Equals(System.String,System.String)
  id: Equals(System.String,System.String)
  parent: System.StringComparer
  langs:
  - csharp
  name: Equals(String, String)
  nameWithType: StringComparer.Equals(String, String)
  fullName: StringComparer.Equals(String, String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: When overridden in a derived class, indicates whether two strings are equal.
  remarks: Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.
  syntax:
    content: public abstract bool Equals (string x, string y);
    parameters:
    - id: x
      type: System.String
      description: A string to compare to <code>y</code>.
    - id: y
      type: System.String
      description: A string to compare to <code>x</code>.
    return:
      type: System.Boolean
      description: '`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are equal, or <code>x</code> and <code>y</code> are `null`; otherwise, `false`.'
  overload: System.StringComparer.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.FromComparison(System.StringComparison)
  commentId: M:System.StringComparer.FromComparison(System.StringComparison)
  id: FromComparison(System.StringComparison)
  parent: System.StringComparer
  langs:
  - csharp
  name: FromComparison(StringComparison)
  nameWithType: StringComparer.FromComparison(StringComparison)
  fullName: StringComparer.FromComparison(StringComparison)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  syntax:
    content: public static StringComparer FromComparison (StringComparison comparisonType);
    parameters:
    - id: comparisonType
      type: System.StringComparison
      description: ''
    return:
      type: System.StringComparer
      description: ''
  overload: System.StringComparer.FromComparison*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.GetHashCode(System.Object)
  commentId: M:System.StringComparer.GetHashCode(System.Object)
  id: GetHashCode(System.Object)
  parent: System.StringComparer
  langs:
  - csharp
  name: GetHashCode(Object)
  nameWithType: StringComparer.GetHashCode(Object)
  fullName: StringComparer.GetHashCode(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: When overridden in a derived class, gets the hash code for the specified object.
  remarks: "The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.  \n  \n The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file."
  syntax:
    content: public int GetHashCode (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object.
    return:
      type: System.Int32
      description: A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.
  overload: System.StringComparer.GetHashCode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Not enough memory is available to allocate the buffer that is required to compute the hash code.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>obj</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.GetHashCode(System.String)
  commentId: M:System.StringComparer.GetHashCode(System.String)
  id: GetHashCode(System.String)
  parent: System.StringComparer
  langs:
  - csharp
  name: GetHashCode(String)
  nameWithType: StringComparer.GetHashCode(String)
  fullName: StringComparer.GetHashCode(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: When overridden in a derived class, gets the hash code for the specified string.
  remarks: "The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.  \n  \n The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file."
  syntax:
    content: public abstract int GetHashCode (string obj);
    parameters:
    - id: obj
      type: System.String
      description: A string.
    return:
      type: System.Int32
      description: A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.
  overload: System.StringComparer.GetHashCode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Not enough memory is available to allocate the buffer that is required to compute the hash code.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>obj</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.InvariantCulture
  commentId: P:System.StringComparer.InvariantCulture
  id: InvariantCulture
  parent: System.StringComparer
  langs:
  - csharp
  name: InvariantCulture
  nameWithType: StringComparer.InvariantCulture
  fullName: StringComparer.InvariantCulture
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.
  remarks: "The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  \n  \n The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \n  \n The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."
  example:
  - "The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]"
  syntax:
    content: public static StringComparer InvariantCulture { get; }
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.InvariantCulture*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.InvariantCultureIgnoreCase
  commentId: P:System.StringComparer.InvariantCultureIgnoreCase
  id: InvariantCultureIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  name: InvariantCultureIgnoreCase
  nameWithType: StringComparer.InvariantCultureIgnoreCase
  fullName: StringComparer.InvariantCultureIgnoreCase
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.
  remarks: "The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  \n  \n The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \n  \n The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."
  syntax:
    content: public static StringComparer InvariantCultureIgnoreCase { get; }
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.InvariantCultureIgnoreCase*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.Ordinal
  commentId: P:System.StringComparer.Ordinal
  id: Ordinal
  parent: System.StringComparer
  langs:
  - csharp
  name: Ordinal
  nameWithType: StringComparer.Ordinal
  fullName: StringComparer.Ordinal
  type: Property
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-sensitive ordinal string comparison.
  remarks: "The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.  \n  \n The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."
  example:
  - "The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]"
  syntax:
    content: public static StringComparer Ordinal { get; }
    return:
      type: System.StringComparer
      description: A <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.Ordinal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.OrdinalIgnoreCase
  commentId: P:System.StringComparer.OrdinalIgnoreCase
  id: OrdinalIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  name: OrdinalIgnoreCase
  nameWithType: StringComparer.OrdinalIgnoreCase
  fullName: StringComparer.OrdinalIgnoreCase
  type: Property
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-insensitive ordinal string comparison.
  remarks: "The<xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.  \n  \n The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."
  example:
  - "The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]"
  syntax:
    content: public static StringComparer OrdinalIgnoreCase { get; }
    return:
      type: System.StringComparer
      description: A <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.OrdinalIgnoreCase*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)
  commentId: M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)
  id: System#Collections#IComparer#Compare(System.Object,System.Object)
  isEii: true
  parent: System.StringComparer
  langs:
  - csharp
  name: IComparer.Compare(Object, Object)
  nameWithType: StringComparer.IComparer.Compare(Object, Object)
  fullName: StringComparer.IComparer.Compare(Object, Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  syntax:
    content: int IComparer.Compare (object x, object y);
    parameters:
    - id: x
      type: System.Object
      description: ''
    - id: y
      type: System.Object
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.StringComparer.System#Collections#IComparer#Compare*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)
  commentId: M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)
  id: System#Collections#IEqualityComparer#Equals(System.Object,System.Object)
  isEii: true
  parent: System.StringComparer
  langs:
  - csharp
  name: IEqualityComparer.Equals(Object, Object)
  nameWithType: StringComparer.IEqualityComparer.Equals(Object, Object)
  fullName: StringComparer.IEqualityComparer.Equals(Object, Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  syntax:
    content: bool IEqualityComparer.Equals (object x, object y);
    parameters:
    - id: x
      type: System.Object
      description: ''
    - id: y
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.StringComparer.System#Collections#IEqualityComparer#Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)
  commentId: M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)
  id: System#Collections#IEqualityComparer#GetHashCode(System.Object)
  isEii: true
  parent: System.StringComparer
  langs:
  - csharp
  name: IEqualityComparer.GetHashCode(Object)
  nameWithType: StringComparer.IEqualityComparer.GetHashCode(Object)
  fullName: StringComparer.IEqualityComparer.GetHashCode(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  syntax:
    content: int IEqualityComparer.GetHashCode (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.StringComparer.#ctor
  parent: System.StringComparer
  isExternal: false
  name: StringComparer()
  nameWithType: StringComparer.StringComparer()
  fullName: StringComparer.StringComparer()
- uid: System.StringComparer.Compare(System.Object,System.Object)
  parent: System.StringComparer
  isExternal: false
  name: Compare(Object, Object)
  nameWithType: StringComparer.Compare(Object, Object)
  fullName: StringComparer.Compare(Object, Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.StringComparer.Compare(System.String,System.String)
  parent: System.StringComparer
  isExternal: false
  name: Compare(String, String)
  nameWithType: StringComparer.Compare(String, String)
  fullName: StringComparer.Compare(String, String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)
  parent: System.StringComparer
  isExternal: false
  name: Create(CultureInfo, Boolean)
  nameWithType: StringComparer.Create(CultureInfo, Boolean)
  fullName: StringComparer.Create(CultureInfo, Boolean)
- uid: System.StringComparer
  parent: System
  isExternal: false
  name: StringComparer
  nameWithType: StringComparer
  fullName: System.StringComparer
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.StringComparer.CurrentCulture
  parent: System.StringComparer
  isExternal: false
  name: CurrentCulture
  nameWithType: StringComparer.CurrentCulture
  fullName: StringComparer.CurrentCulture
- uid: System.StringComparer.CurrentCultureIgnoreCase
  parent: System.StringComparer
  isExternal: false
  name: CurrentCultureIgnoreCase
  nameWithType: StringComparer.CurrentCultureIgnoreCase
  fullName: StringComparer.CurrentCultureIgnoreCase
- uid: System.StringComparer.Equals(System.Object,System.Object)
  parent: System.StringComparer
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: StringComparer.Equals(Object, Object)
  fullName: StringComparer.Equals(Object, Object)
- uid: System.StringComparer.Equals(System.String,System.String)
  parent: System.StringComparer
  isExternal: false
  name: Equals(String, String)
  nameWithType: StringComparer.Equals(String, String)
  fullName: StringComparer.Equals(String, String)
- uid: System.StringComparer.FromComparison(System.StringComparison)
  parent: System.StringComparer
  isExternal: false
  name: FromComparison(StringComparison)
  nameWithType: StringComparer.FromComparison(StringComparison)
  fullName: StringComparer.FromComparison(StringComparison)
- uid: System.StringComparison
  parent: System
  isExternal: false
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: System.StringComparer.GetHashCode(System.Object)
  parent: System.StringComparer
  isExternal: false
  name: GetHashCode(Object)
  nameWithType: StringComparer.GetHashCode(Object)
  fullName: StringComparer.GetHashCode(Object)
- uid: System.StringComparer.GetHashCode(System.String)
  parent: System.StringComparer
  isExternal: false
  name: GetHashCode(String)
  nameWithType: StringComparer.GetHashCode(String)
  fullName: StringComparer.GetHashCode(String)
- uid: System.StringComparer.InvariantCulture
  parent: System.StringComparer
  isExternal: false
  name: InvariantCulture
  nameWithType: StringComparer.InvariantCulture
  fullName: StringComparer.InvariantCulture
- uid: System.StringComparer.InvariantCultureIgnoreCase
  parent: System.StringComparer
  isExternal: false
  name: InvariantCultureIgnoreCase
  nameWithType: StringComparer.InvariantCultureIgnoreCase
  fullName: StringComparer.InvariantCultureIgnoreCase
- uid: System.StringComparer.Ordinal
  parent: System.StringComparer
  isExternal: false
  name: Ordinal
  nameWithType: StringComparer.Ordinal
  fullName: StringComparer.Ordinal
- uid: System.StringComparer.OrdinalIgnoreCase
  parent: System.StringComparer
  isExternal: false
  name: OrdinalIgnoreCase
  nameWithType: StringComparer.OrdinalIgnoreCase
  fullName: StringComparer.OrdinalIgnoreCase
- uid: System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)
  parent: System.StringComparer
  isExternal: false
  name: IComparer.Compare(Object, Object)
  nameWithType: StringComparer.IComparer.Compare(Object, Object)
  fullName: StringComparer.IComparer.Compare(Object, Object)
- uid: System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)
  parent: System.StringComparer
  isExternal: false
  name: IEqualityComparer.Equals(Object, Object)
  nameWithType: StringComparer.IEqualityComparer.Equals(Object, Object)
  fullName: StringComparer.IEqualityComparer.Equals(Object, Object)
- uid: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)
  parent: System.StringComparer
  isExternal: false
  name: IEqualityComparer.GetHashCode(Object)
  nameWithType: StringComparer.IEqualityComparer.GetHashCode(Object)
  fullName: StringComparer.IEqualityComparer.GetHashCode(Object)
- uid: System.StringComparer.#ctor*
  parent: System.StringComparer
  isExternal: false
  name: StringComparer
  nameWithType: StringComparer.StringComparer
  fullName: StringComparer.StringComparer
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.Compare*
  parent: System.StringComparer
  isExternal: false
  name: Compare
  nameWithType: StringComparer.Compare
  fullName: StringComparer.Compare
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.Create*
  parent: System.StringComparer
  isExternal: false
  name: Create
  nameWithType: StringComparer.Create
  fullName: StringComparer.Create
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.CurrentCulture*
  parent: System.StringComparer
  isExternal: false
  name: CurrentCulture
  nameWithType: StringComparer.CurrentCulture
  fullName: StringComparer.CurrentCulture
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.CurrentCultureIgnoreCase*
  parent: System.StringComparer
  isExternal: false
  name: CurrentCultureIgnoreCase
  nameWithType: StringComparer.CurrentCultureIgnoreCase
  fullName: StringComparer.CurrentCultureIgnoreCase
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.Equals*
  parent: System.StringComparer
  isExternal: false
  name: Equals
  nameWithType: StringComparer.Equals
  fullName: StringComparer.Equals
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.FromComparison*
  parent: System.StringComparer
  isExternal: false
  name: FromComparison
  nameWithType: StringComparer.FromComparison
  fullName: StringComparer.FromComparison
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.GetHashCode*
  parent: System.StringComparer
  isExternal: false
  name: GetHashCode
  nameWithType: StringComparer.GetHashCode
  fullName: StringComparer.GetHashCode
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.InvariantCulture*
  parent: System.StringComparer
  isExternal: false
  name: InvariantCulture
  nameWithType: StringComparer.InvariantCulture
  fullName: StringComparer.InvariantCulture
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.InvariantCultureIgnoreCase*
  parent: System.StringComparer
  isExternal: false
  name: InvariantCultureIgnoreCase
  nameWithType: StringComparer.InvariantCultureIgnoreCase
  fullName: StringComparer.InvariantCultureIgnoreCase
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.Ordinal*
  parent: System.StringComparer
  isExternal: false
  name: Ordinal
  nameWithType: StringComparer.Ordinal
  fullName: StringComparer.Ordinal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.OrdinalIgnoreCase*
  parent: System.StringComparer
  isExternal: false
  name: OrdinalIgnoreCase
  nameWithType: StringComparer.OrdinalIgnoreCase
  fullName: StringComparer.OrdinalIgnoreCase
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.System#Collections#IComparer#Compare*
  parent: System.StringComparer
  isExternal: false
  name: System.Collections.IComparer.Compare
  nameWithType: StringComparer.System.Collections.IComparer.Compare
  fullName: StringComparer.System.Collections.IComparer.Compare
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.System#Collections#IEqualityComparer#Equals*
  parent: System.StringComparer
  isExternal: false
  name: System.Collections.IEqualityComparer.Equals
  nameWithType: StringComparer.System.Collections.IEqualityComparer.Equals
  fullName: StringComparer.System.Collections.IEqualityComparer.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode*
  parent: System.StringComparer
  isExternal: false
  name: System.Collections.IEqualityComparer.GetHashCode
  nameWithType: StringComparer.System.Collections.IEqualityComparer.GetHashCode
  fullName: StringComparer.System.Collections.IEqualityComparer.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Collections.Generic.IComparer{System.String}
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<String>
  nameWithType: IComparer<String>
  fullName: System.Collections.Generic.IComparer<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
- uid: System.Collections.Generic.IEqualityComparer{System.String}
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<String>
  nameWithType: IEqualityComparer<String>
  fullName: System.Collections.Generic.IEqualityComparer<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
