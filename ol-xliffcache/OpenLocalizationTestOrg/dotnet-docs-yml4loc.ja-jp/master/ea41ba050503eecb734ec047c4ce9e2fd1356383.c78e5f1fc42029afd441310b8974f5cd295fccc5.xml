{"nodes":[{"content":"Represents the base class for Triple Data Encryption Standard algorithms from which all <xref href=\"System.Security.Cryptography.TripleDES\"></xref> implementations must derive.","nodes":[{"pos":[0,176],"content":"Represents the base class for Triple Data Encryption Standard algorithms from which all <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;&lt;/xref&gt;</ph> implementations must derive.","source":"Represents the base class for Triple Data Encryption Standard algorithms from which all <xref href=\"System.Security.Cryptography.TripleDES\"></xref> implementations must derive."}],"pos":[828,1005],"yaml":true},{"content":"<xref:System.Security.Cryptography.TripleDES> uses three successive iterations of the <xref:System.Security.Cryptography.DES> algorithm. It can use either two or three 56-bit keys.  \n  \n> [!NOTE]\n>  A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> class and its derived classes instead of the <xref:System.Security.Cryptography.TripleDES> class. Use <xref:System.Security.Cryptography.TripleDES> only for compatibility with legacy applications and data.  \n  \n This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.","nodes":[{"pos":[0,180],"content":"<xref:System.Security.Cryptography.TripleDES> uses three successive iterations of the <xref:System.Security.Cryptography.DES> algorithm. It can use either two or three 56-bit keys.","nodes":[{"content":"<xref:System.Security.Cryptography.TripleDES> uses three successive iterations of the <xref:System.Security.Cryptography.DES> algorithm. It can use either two or three 56-bit keys.","pos":[0,180],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> uses three successive iterations of the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DES&gt;</ph> algorithm.","pos":[0,136],"source":"<xref:System.Security.Cryptography.TripleDES> uses three successive iterations of the <xref:System.Security.Cryptography.DES> algorithm."},{"content":"It can use either two or three 56-bit keys.","pos":[137,180]}]}]},{"pos":[188,553],"content":"[!NOTE]\n A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> class and its derived classes instead of the <xref:System.Security.Cryptography.TripleDES> class. Use <xref:System.Security.Cryptography.TripleDES> only for compatibility with legacy applications and data.","leadings":["","> "],"nodes":[{"content":" A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> class and its derived classes instead of the <xref:System.Security.Cryptography.TripleDES> class. Use <xref:System.Security.Cryptography.TripleDES> only for compatibility with legacy applications and data.","pos":[8,363],"nodes":[{"content":"A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available.","pos":[1,90]},{"content":"Consider using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.Aes&gt;</ph> class and its derived classes instead of the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> class.","pos":[91,247],"source":" Consider using the <xref:System.Security.Cryptography.Aes> class and its derived classes instead of the <xref:System.Security.Cryptography.TripleDES> class."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> only for compatibility with legacy applications and data.","pos":[248,355],"source":" Use <xref:System.Security.Cryptography.TripleDES> only for compatibility with legacy applications and data."}]}]},{"pos":[560,647],"content":"This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.","nodes":[{"content":"This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.","pos":[0,87]}]}],"pos":[1016,1671],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> class.","nodes":[{"pos":[0,100],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> class."}],"pos":[6901,7002],"yaml":true},{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \n  \n This method initializes the protected fields of the <xref:System.Security.Cryptography.SymmetricAlgorithm> class to the default values listed in the following table.  \n  \n|Field|Default Value|  \n|-----------|-------------------|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|192|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|64|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|","nodes":[{"pos":[0,115],"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","nodes":[{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","pos":[0,115],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code will create a new instance of a derived class.","pos":[52,115]}]}]},{"pos":[122,287],"content":"This method initializes the protected fields of the <xref:System.Security.Cryptography.SymmetricAlgorithm> class to the default values listed in the following table.","nodes":[{"content":"This method initializes the protected fields of the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> class to the default values listed in the following table.","pos":[0,165],"source":"This method initializes the protected fields of the <xref:System.Security.Cryptography.SymmetricAlgorithm> class to the default values listed in the following table."}]},{"pos":[294,299],"content":"Field","nodes":[{"content":"Field","pos":[0,5]}]},{"pos":[300,313],"content":"Default Value","nodes":[{"content":"Default Value","pos":[0,13]}]},{"pos":[354,421],"content":"<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>","nodes":[]},{"pos":[422,425],"content":"192","nodes":[{"content":"192","pos":[0,3]}]},{"pos":[430,499],"content":"<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>","nodes":[]},{"pos":[500,502],"content":"64","nodes":[{"content":"64","pos":[0,2]}]},{"pos":[507,579],"content":"<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>","nodes":[]},{"pos":[580,582],"content":"64","nodes":[{"content":"64","pos":[0,2]}]}],"pos":[7013,7607],"yaml":true,"extradata":"MT"},{"content":"Creates an instance of a cryptographic object to perform the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm.","nodes":[{"pos":[0,131],"content":"Creates an instance of a cryptographic object to perform the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"Creates an instance of a cryptographic object to perform the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm."}],"pos":[9098,9230],"yaml":true},{"content":"Creates a new instance of the <xref:System.Security.Cryptography.TripleDES> class.","nodes":[{"pos":[0,82],"content":"Creates a new instance of the <xref:System.Security.Cryptography.TripleDES> class.","nodes":[{"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> class.","pos":[0,82],"source":"Creates a new instance of the <xref:System.Security.Cryptography.TripleDES> class."}]}],"pos":[9241,9324],"yaml":true,"extradata":"MT"},{"content":"An instance of a cryptographic object.","nodes":[{"pos":[0,38],"content":"An instance of a cryptographic object.","nodes":[{"content":"An instance of a cryptographic object.","pos":[0,38]}]}],"pos":[10568,10607],"yaml":true},{"content":"Creates an instance of a cryptographic object to perform the specified implementation of the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm.","nodes":[{"pos":[0,163],"content":"Creates an instance of a cryptographic object to perform the specified implementation of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"Creates an instance of a cryptographic object to perform the specified implementation of the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm."}],"pos":[12096,12260],"yaml":true},{"content":"The name of the specific implementation of <xref href=\"System.Security.Cryptography.TripleDES\"></xref> to use.","nodes":[{"pos":[0,110],"content":"The name of the specific implementation of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;&lt;/xref&gt;</ph> to use.","source":"The name of the specific implementation of <xref href=\"System.Security.Cryptography.TripleDES\"></xref> to use."}],"pos":[13723,13834],"yaml":true},{"content":"An instance of a cryptographic object.","nodes":[{"pos":[0,38],"content":"An instance of a cryptographic object.","nodes":[{"content":"An instance of a cryptographic object.","pos":[0,38]}]}],"pos":[13916,13955],"yaml":true},{"content":"Determines whether the specified key is weak.","nodes":[{"pos":[0,45],"content":"Determines whether the specified key is weak.","nodes":[{"content":"Determines whether the specified key is weak.","pos":[0,45]}]}],"pos":[15278,15324],"yaml":true},{"content":"Weak keys are keys that result in ciphers that are easy to break. If text is encrypted with a weak key, encrypting the resulting cipher again with the same weak key returns the original text. In 128-bit mode, if the first 64 bits are the same as the last 64 bits, the key is weak. In 192-bit mode, if the first 64 bits are the same as the second 64 bits or if the second 64 bits are the same as the last 64 bits, the key is weak.  \n  \n Attempting to set a weak key results in a <xref:System.Security.Cryptography.CryptographicException>. When <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A> is called to create a random key, a weak key will never be returned.","nodes":[{"pos":[0,429],"content":"Weak keys are keys that result in ciphers that are easy to break. If text is encrypted with a weak key, encrypting the resulting cipher again with the same weak key returns the original text. In 128-bit mode, if the first 64 bits are the same as the last 64 bits, the key is weak. In 192-bit mode, if the first 64 bits are the same as the second 64 bits or if the second 64 bits are the same as the last 64 bits, the key is weak.","nodes":[{"content":"Weak keys are keys that result in ciphers that are easy to break. If text is encrypted with a weak key, encrypting the resulting cipher again with the same weak key returns the original text. In 128-bit mode, if the first 64 bits are the same as the last 64 bits, the key is weak. In 192-bit mode, if the first 64 bits are the same as the second 64 bits or if the second 64 bits are the same as the last 64 bits, the key is weak.","pos":[0,429],"nodes":[{"content":"Weak keys are keys that result in ciphers that are easy to break.","pos":[0,65]},{"content":"If text is encrypted with a weak key, encrypting the resulting cipher again with the same weak key returns the original text.","pos":[66,191]},{"content":"In 128-bit mode, if the first 64 bits are the same as the last 64 bits, the key is weak.","pos":[192,280]},{"content":"In 192-bit mode, if the first 64 bits are the same as the second 64 bits or if the second 64 bits are the same as the last 64 bits, the key is weak.","pos":[281,429]}]}]},{"pos":[436,693],"content":"Attempting to set a weak key results in a <xref:System.Security.Cryptography.CryptographicException>. When <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A> is called to create a random key, a weak key will never be returned.","nodes":[{"content":"Attempting to set a weak key results in a <xref:System.Security.Cryptography.CryptographicException>. When <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A> is called to create a random key, a weak key will never be returned.","pos":[0,257],"nodes":[{"content":"Attempting to set a weak key results in a <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptographicException&gt;</ph>.","pos":[0,101],"source":"Attempting to set a weak key results in a <xref:System.Security.Cryptography.CryptographicException>."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A&gt;</ph> is called to create a random key, a weak key will never be returned.","pos":[102,257],"source":" When <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A> is called to create a random key, a weak key will never be returned."}]}]}],"pos":[15335,16033],"yaml":true,"extradata":"MT"},{"content":"The secret key to test for weakness.","nodes":[{"pos":[0,36],"content":"The secret key to test for weakness.","nodes":[{"content":"The secret key to test for weakness.","pos":[0,36]}]}],"pos":[16180,16217],"yaml":true},{"content":"`true` if the key is weak; otherwise, `false`.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">`true`</ph> if the key is weak; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the key is weak; otherwise, `false`."}],"pos":[16275,16324],"yaml":true},{"content":"The size of the <code>rgbKey</code> parameter is not valid.","nodes":[{"pos":[0,59],"content":"The size of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbKey</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The size of the <code>rgbKey</code> parameter is not valid."}],"pos":[16548,16608],"yaml":true},{"content":"Gets or sets the secret key for the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm.","nodes":[{"pos":[0,106],"content":"Gets or sets the secret key for the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"Gets or sets the secret key for the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm."}],"pos":[17936,18043],"yaml":true},{"content":"This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.","nodes":[{"pos":[0,87],"content":"This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.","nodes":[{"content":"This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.","pos":[0,87]}]}],"pos":[18054,18142],"yaml":true,"extradata":"MT"},{"content":"The secret key for the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm.","nodes":[{"pos":[0,93],"content":"The secret key for the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"The secret key for the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm."}],"pos":[18263,18357],"yaml":true},{"content":"An attempt was made to set the key to `null`.","nodes":[{"pos":[0,45],"content":"An attempt was made to set the key to <ph id=\"ph1\">`null`</ph>.","source":"An attempt was made to set the key to `null`."}],"pos":[18529,18575],"yaml":true},{"content":"An attempt was made to set a key whose length is invalid.  \n  \n -or-  \n  \n An attempt was made to set a weak key (see <xref href=\"System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\"></xref>).","nodes":[{"pos":[0,57],"content":"An attempt was made to set a key whose length is invalid.","nodes":[{"content":"An attempt was made to set a key whose length is invalid.","pos":[0,57]}]},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,204],"content":"An attempt was made to set a weak key (see <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\"&gt;&lt;/xref&gt;</ph>).","source":"An attempt was made to set a weak key (see <xref href=\"System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\"></xref>)."}],"pos":[18723,18936],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.TripleDES\n  commentId: T:System.Security.Cryptography.TripleDES\n  id: TripleDES\n  children:\n  - System.Security.Cryptography.TripleDES.#ctor\n  - System.Security.Cryptography.TripleDES.Create\n  - System.Security.Cryptography.TripleDES.Create(System.String)\n  - System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  - System.Security.Cryptography.TripleDES.Key\n  - System.Security.Cryptography.TripleDES.LegalBlockSizes\n  - System.Security.Cryptography.TripleDES.LegalKeySizes\n  langs:\n  - csharp\n  name: TripleDES\n  nameWithType: TripleDES\n  fullName: System.Security.Cryptography.TripleDES\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Represents the base class for Triple Data Encryption Standard algorithms from which all <xref href=\"System.Security.Cryptography.TripleDES\"></xref> implementations must derive.\n  remarks: \"<xref:System.Security.Cryptography.TripleDES> uses three successive iterations of the <xref:System.Security.Cryptography.DES> algorithm. It can use either two or three 56-bit keys.  \\n  \\n> [!NOTE]\\n>  A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> class and its derived classes instead of the <xref:System.Security.Cryptography.TripleDES> class. Use <xref:System.Security.Cryptography.TripleDES> only for compatibility with legacy applications and data.  \\n  \\n This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.\"\n  example:\n  - \"The following code example method uses <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> with the specified key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`. It then outputs the encrypted result to the file specified by `outName`.  \\n  \\n [!code-cpp[Classic TripleDESCryptoServiceProvider Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TripleDESCryptoServiceProvider Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic TripleDESCryptoServiceProvider Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TripleDESCryptoServiceProvider Example/CS/source.cs#1)]\\n [!code-vb[Classic TripleDESCryptoServiceProvider Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TripleDESCryptoServiceProvider Example/VB/source.vb#1)]  \\n  \\n Decryption can be handled in the same way; use <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor%2A> instead of <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor%2A>. The same key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) used to encrypt the file must be used to decrypt it.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class TripleDES : System.Security.Cryptography.SymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.SymmetricAlgorithm\n  derivedClasses:\n  - System.Security.Cryptography.TripleDESCng\n  - System.Security.Cryptography.TripleDESCryptoServiceProvider\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Clear\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.TripleDES.#ctor\n  commentId: M:System.Security.Cryptography.TripleDES.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  name: TripleDES()\n  nameWithType: TripleDES.TripleDES()\n  fullName: TripleDES.TripleDES()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> class.\n  remarks: \"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \\n  \\n This method initializes the protected fields of the <xref:System.Security.Cryptography.SymmetricAlgorithm> class to the default values listed in the following table.  \\n  \\n|Field|Default Value|  \\n|-----------|-------------------|  \\n|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|192|  \\n|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|64|  \\n|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|\"\n  syntax:\n    content: protected TripleDES ();\n    parameters: []\n  overload: System.Security.Cryptography.TripleDES.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.TripleDES.Create\n  commentId: M:System.Security.Cryptography.TripleDES.Create\n  id: Create\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: TripleDES.Create()\n  fullName: TripleDES.Create()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of a cryptographic object to perform the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm.\n  remarks: Creates a new instance of the <xref:System.Security.Cryptography.TripleDES> class.\n  example:\n  - \"The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in a file.  \\n  \\n [!code-cpp[Cryptography.3DES.Create.File#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.3DES.Create.File/CPP/fileexample.cpp#1)]\\n [!code-csharp[Cryptography.3DES.Create.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.3DES.Create.File/CS/fileexample.cs#1)]\\n [!code-vb[Cryptography.3DES.Create.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.3DES.Create.File/VB/fileexample.vb#1)]  \\n  \\n The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in memory.  \\n  \\n [!code-cpp[Cryptography.3DES.Create.Memory#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.3DES.Create.Memory/CPP/memoryexample.cpp#1)]\\n [!code-vb[Cryptography.3DES.Create.Memory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.3DES.Create.Memory/VB/memoryexample.vb#1)]\"\n  syntax:\n    content: public static System.Security.Cryptography.TripleDES Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.TripleDES\n      description: An instance of a cryptographic object.\n  overload: System.Security.Cryptography.TripleDES.Create*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.TripleDES.Create(System.String)\n  commentId: M:System.Security.Cryptography.TripleDES.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: TripleDES.Create(String)\n  fullName: TripleDES.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of a cryptographic object to perform the specified implementation of the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in a file.  \\n  \\n [!code-cpp[Cryptography.3DES.Createstring.File#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.3DES.Createstring.File/CPP/fileexample.cpp#1)]\\n [!code-csharp[Cryptography.3DES.Createstring.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.3DES.Createstring.File/CS/fileexample.cs#1)]\\n [!code-vb[Cryptography.3DES.Createstring.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.3DES.Createstring.File/VB/fileexample.vb#1)]  \\n  \\n The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in memory.  \\n  \\n [!code-cpp[Cryptography.3DES.Createstring.Memory#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.3DES.Createstring.Memory/CPP/memoryexample.cpp#1)]\\n [!code-csharp[Cryptography.3DES.Createstring.Memory#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.3DES.Createstring.Memory/CS/memoryexample.cs#1)]\\n [!code-vb[Cryptography.3DES.Createstring.Memory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.3DES.Createstring.Memory/VB/memoryexample.vb#1)]\"\n  syntax:\n    content: public static System.Security.Cryptography.TripleDES Create (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: The name of the specific implementation of <xref href=\"System.Security.Cryptography.TripleDES\"></xref> to use.\n    return:\n      type: System.Security.Cryptography.TripleDES\n      description: An instance of a cryptographic object.\n  overload: System.Security.Cryptography.TripleDES.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  commentId: M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  id: IsWeakKey(System.Byte[])\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  name: IsWeakKey(Byte[])\n  nameWithType: TripleDES.IsWeakKey(Byte[])\n  fullName: TripleDES.IsWeakKey(Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Determines whether the specified key is weak.\n  remarks: \"Weak keys are keys that result in ciphers that are easy to break. If text is encrypted with a weak key, encrypting the resulting cipher again with the same weak key returns the original text. In 128-bit mode, if the first 64 bits are the same as the last 64 bits, the key is weak. In 192-bit mode, if the first 64 bits are the same as the second 64 bits or if the second 64 bits are the same as the last 64 bits, the key is weak.  \\n  \\n Attempting to set a weak key results in a <xref:System.Security.Cryptography.CryptographicException>. When <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A> is called to create a random key, a weak key will never be returned.\"\n  syntax:\n    content: public static bool IsWeakKey (byte[] rgbKey);\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: The secret key to test for weakness.\n    return:\n      type: System.Boolean\n      description: '`true` if the key is weak; otherwise, `false`.'\n  overload: System.Security.Cryptography.TripleDES.IsWeakKey*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The size of the <code>rgbKey</code> parameter is not valid.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.TripleDES.Key\n  commentId: P:System.Security.Cryptography.TripleDES.Key\n  id: Key\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  name: Key\n  nameWithType: TripleDES.Key\n  fullName: TripleDES.Key\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the secret key for the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm.\n  remarks: This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.\n  syntax:\n    content: public override byte[] Key { get; set; }\n    return:\n      type: System.Byte[]\n      description: The secret key for the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> algorithm.\n  overload: System.Security.Cryptography.TripleDES.Key*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: An attempt was made to set the key to `null`.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"An attempt was made to set a key whose length is invalid.  \\n  \\n -or-  \\n  \\n An attempt was made to set a weak key (see <xref href=\\\"System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\\\"></xref>).\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.TripleDES.LegalBlockSizes\n  commentId: P:System.Security.Cryptography.TripleDES.LegalBlockSizes\n  id: LegalBlockSizes\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  name: LegalBlockSizes\n  nameWithType: TripleDES.LegalBlockSizes\n  fullName: TripleDES.LegalBlockSizes\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override System.Security.Cryptography.KeySizes[] LegalBlockSizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: ''\n  overload: System.Security.Cryptography.TripleDES.LegalBlockSizes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n- uid: System.Security.Cryptography.TripleDES.LegalKeySizes\n  commentId: P:System.Security.Cryptography.TripleDES.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  name: LegalKeySizes\n  nameWithType: TripleDES.LegalKeySizes\n  fullName: TripleDES.LegalKeySizes\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: ''\n  overload: System.Security.Cryptography.TripleDES.LegalKeySizes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\nreferences:\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.TripleDES.#ctor\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: TripleDES()\n  nameWithType: TripleDES.TripleDES()\n  fullName: TripleDES.TripleDES()\n- uid: System.Security.Cryptography.TripleDES.Create\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: Create()\n  nameWithType: TripleDES.Create()\n  fullName: TripleDES.Create()\n- uid: System.Security.Cryptography.TripleDES\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: TripleDES\n  nameWithType: TripleDES\n  fullName: System.Security.Cryptography.TripleDES\n- uid: System.Security.Cryptography.TripleDES.Create(System.String)\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: Create(String)\n  nameWithType: TripleDES.Create(String)\n  fullName: TripleDES.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: IsWeakKey(Byte[])\n  nameWithType: TripleDES.IsWeakKey(Byte[])\n  fullName: TripleDES.IsWeakKey(Byte[])\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.TripleDES.Key\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: Key\n  nameWithType: TripleDES.Key\n  fullName: TripleDES.Key\n- uid: System.Security.Cryptography.TripleDES.LegalBlockSizes\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: LegalBlockSizes\n  nameWithType: TripleDES.LegalBlockSizes\n  fullName: TripleDES.LegalBlockSizes\n- uid: System.Security.Cryptography.KeySizes\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes[]\n  nameWithType: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.TripleDES.LegalKeySizes\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: TripleDES.LegalKeySizes\n  fullName: TripleDES.LegalKeySizes\n- uid: System.Security.Cryptography.TripleDES.#ctor*\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: TripleDES\n  nameWithType: TripleDES.TripleDES\n  fullName: TripleDES.TripleDES\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n- uid: System.Security.Cryptography.TripleDES.Create*\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: Create\n  nameWithType: TripleDES.Create\n  fullName: TripleDES.Create\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n- uid: System.Security.Cryptography.TripleDES.IsWeakKey*\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: IsWeakKey\n  nameWithType: TripleDES.IsWeakKey\n  fullName: TripleDES.IsWeakKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n- uid: System.Security.Cryptography.TripleDES.Key*\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: Key\n  nameWithType: TripleDES.Key\n  fullName: TripleDES.Key\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n- uid: System.Security.Cryptography.TripleDES.LegalBlockSizes*\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: LegalBlockSizes\n  nameWithType: TripleDES.LegalBlockSizes\n  fullName: TripleDES.LegalBlockSizes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n- uid: System.Security.Cryptography.TripleDES.LegalKeySizes*\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: TripleDES.LegalKeySizes\n  fullName: TripleDES.LegalKeySizes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/TripleDES.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n  fullName: SymmetricAlgorithm.BlockSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n  fullName: SymmetricAlgorithm.BlockSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: SymmetricAlgorithm.Clear()\n  fullName: SymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor()\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n  fullName: SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor(Byte[], Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n  fullName: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor()\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n  fullName: SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor(Byte[], Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n  fullName: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: SymmetricAlgorithm.Dispose()\n  fullName: SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n  fullName: SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n  fullName: SymmetricAlgorithm.FeedbackSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n  fullName: SymmetricAlgorithm.FeedbackSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateIV()\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n  fullName: SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateKey()\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n  fullName: SymmetricAlgorithm.GenerateKey()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IV\n  nameWithType: SymmetricAlgorithm.IV\n  fullName: SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n  fullName: SymmetricAlgorithm.IVValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n  fullName: SymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n  fullName: SymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n  fullName: SymmetricAlgorithm.KeyValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n  fullName: SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n  fullName: SymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Mode\n  nameWithType: SymmetricAlgorithm.Mode\n  fullName: SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n  fullName: SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Padding\n  nameWithType: SymmetricAlgorithm.Padding\n  fullName: SymmetricAlgorithm.Padding\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n  fullName: SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ValidKeySize(Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n  fullName: SymmetricAlgorithm.ValidKeySize(Int32)\n"}