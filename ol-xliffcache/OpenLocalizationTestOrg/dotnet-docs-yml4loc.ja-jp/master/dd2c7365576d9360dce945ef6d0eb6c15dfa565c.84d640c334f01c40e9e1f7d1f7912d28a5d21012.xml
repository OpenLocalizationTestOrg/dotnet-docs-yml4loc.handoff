{"nodes":[{"content":"Represents a writer that can write a sequential series of characters. This class is abstract.","nodes":[{"pos":[0,93],"content":"Represents a writer that can write a sequential series of characters. This class is abstract.","nodes":[{"content":"Represents a writer that can write a sequential series of characters. This class is abstract.","pos":[0,93],"nodes":[{"content":"Represents a writer that can write a sequential series of characters.","pos":[0,69]},{"content":"This class is abstract.","pos":[70,93]}]}]}],"pos":[3290,3384],"yaml":true},{"content":"<xref:System.IO.TextWriter> is the abstract base class of <xref:System.IO.StreamWriter> and <xref:System.IO.StringWriter>, which write characters to streams and strings, respectively. Create an instance of <xref:System.IO.TextWriter> to write an object to a string, write strings to a file, or to serialize XML. You can also use an instance of <xref:System.IO.TextWriter> to write text to a custom backing store using the same APIs you would use for a string or a stream, or to add support for text formatting.  \n  \n All the `Write` methods of <xref:System.IO.TextWriter> having primitive data types as parameters write out the values as strings.  \n  \n By default, a <xref:System.IO.TextWriter> is not thread safe. See <xref:System.IO.TextWriter.Synchronized%2A?displayProperty=fullName> for a thread-safe wrapper.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IO.TextWriter.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,510],"content":"<xref:System.IO.TextWriter> is the abstract base class of <xref:System.IO.StreamWriter> and <xref:System.IO.StringWriter>, which write characters to streams and strings, respectively. Create an instance of <xref:System.IO.TextWriter> to write an object to a string, write strings to a file, or to serialize XML. You can also use an instance of <xref:System.IO.TextWriter> to write text to a custom backing store using the same APIs you would use for a string or a stream, or to add support for text formatting.","nodes":[{"content":"<xref:System.IO.TextWriter> is the abstract base class of <xref:System.IO.StreamWriter> and <xref:System.IO.StringWriter>, which write characters to streams and strings, respectively. Create an instance of <xref:System.IO.TextWriter> to write an object to a string, write strings to a file, or to serialize XML. You can also use an instance of <xref:System.IO.TextWriter> to write text to a custom backing store using the same APIs you would use for a string or a stream, or to add support for text formatting.","pos":[0,510],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> is the abstract base class of <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IO.StringWriter&gt;</ph>, which write characters to streams and strings, respectively.","pos":[0,183],"source":"<xref:System.IO.TextWriter> is the abstract base class of <xref:System.IO.StreamWriter> and <xref:System.IO.StringWriter>, which write characters to streams and strings, respectively."},{"content":"Create an instance of <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> to write an object to a string, write strings to a file, or to serialize XML.","pos":[184,311],"source":" Create an instance of <xref:System.IO.TextWriter> to write an object to a string, write strings to a file, or to serialize XML."},{"content":"You can also use an instance of <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> to write text to a custom backing store using the same APIs you would use for a string or a stream, or to add support for text formatting.","pos":[312,510],"source":" You can also use an instance of <xref:System.IO.TextWriter> to write text to a custom backing store using the same APIs you would use for a string or a stream, or to add support for text formatting."}]}]},{"pos":[517,646],"content":"All the <ph id=\"ph1\">`Write`</ph> methods of <ph id=\"ph2\">&lt;xref:System.IO.TextWriter&gt;</ph> having primitive data types as parameters write out the values as strings.","source":"All the `Write` methods of <xref:System.IO.TextWriter> having primitive data types as parameters write out the values as strings."},{"pos":[653,814],"content":"By default, a <xref:System.IO.TextWriter> is not thread safe. See <xref:System.IO.TextWriter.Synchronized%2A?displayProperty=fullName> for a thread-safe wrapper.","nodes":[{"content":"By default, a <xref:System.IO.TextWriter> is not thread safe. See <xref:System.IO.TextWriter.Synchronized%2A?displayProperty=fullName> for a thread-safe wrapper.","pos":[0,161],"nodes":[{"content":"By default, a <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> is not thread safe.","pos":[0,61],"source":"By default, a <xref:System.IO.TextWriter> is not thread safe."},{"content":"See <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Synchronized%2A?displayProperty=fullName&gt;</ph> for a thread-safe wrapper.","pos":[62,161],"source":" See <xref:System.IO.TextWriter.Synchronized%2A?displayProperty=fullName> for a thread-safe wrapper."}]}]},{"pos":[822,1390],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IO.TextWriter.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IO.TextWriter.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,566],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly.","pos":[63,185]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[186,299],"source":" To dispose of the type directly, call its <xref:System.IO.TextWriter.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[300,407],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[408,553],"source":" For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[1397,1492],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[3395,4901],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.TextWriter\"></xref> class.","nodes":[{"pos":[0,82],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IO.TextWriter\"></xref> class."}],"pos":[7904,7987],"yaml":true},{"content":"Use this constructor overload when you do not want to provide a value for the <xref:System.IO.TextWriter.FormatProvider%2A> property. When the <xref:System.IO.TextWriter.FormatProvider%2A> property is `null`, the culture of the current thread is used for formatting.  \n  \n Use this constructor for derived classes.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,266],"content":"Use this constructor overload when you do not want to provide a value for the <xref:System.IO.TextWriter.FormatProvider%2A> property. When the <xref:System.IO.TextWriter.FormatProvider%2A> property is `null`, the culture of the current thread is used for formatting.","nodes":[{"content":"Use this constructor overload when you do not want to provide a value for the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property.","pos":[0,133],"source":"Use this constructor overload when you do not want to provide a value for the <xref:System.IO.TextWriter.FormatProvider%2A> property."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>, the culture of the current thread is used for formatting.","pos":[134,266],"source":" When the <xref:System.IO.TextWriter.FormatProvider%2A> property is `null`, the culture of the current thread is used for formatting."}]},{"pos":[273,314],"content":"Use this constructor for derived classes.","nodes":[{"content":"Use this constructor for derived classes.","pos":[0,41]}]},{"pos":[321,416],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[7998,8421],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.TextWriter\"></xref> class with the specified format provider.","nodes":[{"pos":[0,117],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> class with the specified format provider.","source":"Initializes a new instance of the <xref href=\"System.IO.TextWriter\"></xref> class with the specified format provider."}],"pos":[10099,10217],"yaml":true},{"content":"Use this constructor overload to provide a value for the <xref:System.IO.TextWriter.FormatProvider%2A> property. The value of the <xref:System.IO.TextWriter.FormatProvider%2A> property specifies the culture-specific formatting that is used when you call the <xref:System.IO.TextWriter.Write%2A> and <xref:System.IO.TextWriter.WriteLine%2A> methods. If you do not want to provide a format provider, you create an instance by using the <xref:System.IO.TextWriter.%23ctor> constructor, which sets the <xref:System.IO.TextWriter.FormatProvider%2A> property to `null`. When the <xref:System.IO.TextWriter.FormatProvider%2A> property is `null`, the culture of the current thread is used for formatting.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,696],"content":"Use this constructor overload to provide a value for the <xref:System.IO.TextWriter.FormatProvider%2A> property. The value of the <xref:System.IO.TextWriter.FormatProvider%2A> property specifies the culture-specific formatting that is used when you call the <xref:System.IO.TextWriter.Write%2A> and <xref:System.IO.TextWriter.WriteLine%2A> methods. If you do not want to provide a format provider, you create an instance by using the <xref:System.IO.TextWriter.%23ctor> constructor, which sets the <xref:System.IO.TextWriter.FormatProvider%2A> property to `null`. When the <xref:System.IO.TextWriter.FormatProvider%2A> property is `null`, the culture of the current thread is used for formatting.","nodes":[{"content":"Use this constructor overload to provide a value for the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property.","pos":[0,112],"source":"Use this constructor overload to provide a value for the <xref:System.IO.TextWriter.FormatProvider%2A> property."},{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property specifies the culture-specific formatting that is used when you call the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter.Write%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph> methods.","pos":[113,348],"source":" The value of the <xref:System.IO.TextWriter.FormatProvider%2A> property specifies the culture-specific formatting that is used when you call the <xref:System.IO.TextWriter.Write%2A> and <xref:System.IO.TextWriter.WriteLine%2A> methods."},{"content":"If you do not want to provide a format provider, you create an instance by using the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.%23ctor&gt;</ph> constructor, which sets the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property to <ph id=\"ph3\">`null`</ph>.","pos":[349,563],"source":" If you do not want to provide a format provider, you create an instance by using the <xref:System.IO.TextWriter.%23ctor> constructor, which sets the <xref:System.IO.TextWriter.FormatProvider%2A> property to `null`."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>, the culture of the current thread is used for formatting.","pos":[564,696],"source":" When the <xref:System.IO.TextWriter.FormatProvider%2A> property is `null`, the culture of the current thread is used for formatting."}]},{"pos":[703,798],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[10228,11031],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IFormatProvider\"></xref> object that controls formatting.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IFormatProvider\"&gt;&lt;/xref&gt;</ph> object that controls formatting.","source":"An <xref href=\"System.IFormatProvider\"></xref> object that controls formatting."}],"pos":[11204,11284],"yaml":true},{"content":"Closes the current writer and releases any system resources associated with the writer.","nodes":[{"pos":[0,87],"content":"Closes the current writer and releases any system resources associated with the writer.","nodes":[{"content":"Closes the current writer and releases any system resources associated with the writer.","pos":[0,87]}]}],"pos":[12742,12830],"yaml":true},{"content":"This implementation of `Close` calls the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method and passes it a `true` value.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.TextWriter.Flush%2A> or `Close`. Setting the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.  \n  \n> [!NOTE]\n>  In derived classes, do not override the <xref:System.IO.TextWriter.Close%2A> method. Instead, override the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources.","nodes":[{"pos":[0,158],"content":"This implementation of <ph id=\"ph1\">`Close`</ph> calls the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName&gt;</ph> method and passes it a <ph id=\"ph3\">`true`</ph> value.","source":"This implementation of `Close` calls the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method and passes it a `true` value."},{"pos":[165,774],"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.TextWriter.Flush%2A> or `Close`. Setting the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.","nodes":[{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Flush%2A&gt;</ph> or <ph id=\"ph2\">`Close`</ph>.","pos":[0,133],"source":"Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.TextWriter.Flush%2A> or `Close`."},{"content":"Setting the <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName&gt;</ph> property to <ph id=\"ph2\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[134,338],"source":" Setting the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[339,463]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.","pos":[464,609]}]},{"pos":[782,1024],"content":"[!NOTE]\n In derived classes, do not override the <xref:System.IO.TextWriter.Close%2A> method. Instead, override the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources.","leadings":["","> "],"nodes":[{"content":" In derived classes, do not override the <xref:System.IO.TextWriter.Close%2A> method. Instead, override the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources.","pos":[8,240],"nodes":[{"content":"In derived classes, do not override the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Close%2A&gt;</ph> method.","pos":[1,85],"source":" In derived classes, do not override the <xref:System.IO.TextWriter.Close%2A> method."},{"content":"Instead, override the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName&gt;</ph> method to add code for releasing resources.","pos":[86,232],"source":" Instead, override the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources."}]}]}],"pos":[12841,13873],"yaml":true,"extradata":"MT"},{"content":"Stores the newline characters used for this `TextWriter`.","nodes":[{"pos":[0,57],"content":"Stores the newline characters used for this <ph id=\"ph1\">`TextWriter`</ph>.","source":"Stores the newline characters used for this `TextWriter`."}],"pos":[15102,15160],"yaml":true},{"content":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,95],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[15171,15267],"yaml":true,"extradata":"MT"},{"content":"Releases all resources used by the <xref href=\"System.IO.TextWriter\"></xref> object.","nodes":[{"pos":[0,84],"content":"Releases all resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> object.","source":"Releases all resources used by the <xref href=\"System.IO.TextWriter\"></xref> object."}],"pos":[16824,16909],"yaml":true},{"content":"Call <xref:System.IO.TextWriter.Dispose%2A> when you are finished using the <xref:System.IO.TextWriter>. The <xref:System.IO.TextWriter.Dispose%2A> method leaves the <xref:System.IO.TextWriter> in an unusable state. After calling <xref:System.IO.TextWriter.Dispose%2A>, you must release all references to the <xref:System.IO.TextWriter> so the garbage collector can reclaim the memory that the <xref:System.IO.TextWriter> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n **Note** Always call <xref:System.IO.TextWriter.Dispose%2A> before you release your last reference to the <xref:System.IO.TextWriter>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextWriter> object's <xref:System.Object.Finalize%2A> method.","nodes":[{"pos":[0,436],"content":"Call <xref:System.IO.TextWriter.Dispose%2A> when you are finished using the <xref:System.IO.TextWriter>. The <xref:System.IO.TextWriter.Dispose%2A> method leaves the <xref:System.IO.TextWriter> in an unusable state. After calling <xref:System.IO.TextWriter.Dispose%2A>, you must release all references to the <xref:System.IO.TextWriter> so the garbage collector can reclaim the memory that the <xref:System.IO.TextWriter> was occupying.","nodes":[{"content":"Call <xref:System.IO.TextWriter.Dispose%2A> when you are finished using the <xref:System.IO.TextWriter>. The <xref:System.IO.TextWriter.Dispose%2A> method leaves the <xref:System.IO.TextWriter> in an unusable state. After calling <xref:System.IO.TextWriter.Dispose%2A>, you must release all references to the <xref:System.IO.TextWriter> so the garbage collector can reclaim the memory that the <xref:System.IO.TextWriter> was occupying.","pos":[0,436],"nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter&gt;</ph>.","pos":[0,104],"source":"Call <xref:System.IO.TextWriter.Dispose%2A> when you are finished using the <xref:System.IO.TextWriter>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter&gt;</ph> in an unusable state.","pos":[105,215],"source":" The <xref:System.IO.TextWriter.Dispose%2A> method leaves the <xref:System.IO.TextWriter> in an unusable state."},{"content":"After calling <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.IO.TextWriter&gt;</ph> was occupying.","pos":[216,436],"source":" After calling <xref:System.IO.TextWriter.Dispose%2A>, you must release all references to the <xref:System.IO.TextWriter> so the garbage collector can reclaim the memory that the <xref:System.IO.TextWriter> was occupying."}]}]},{"pos":[443,648],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[655,960],"content":"**Note** Always call <xref:System.IO.TextWriter.Dispose%2A> before you release your last reference to the <xref:System.IO.TextWriter>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextWriter> object's <xref:System.Object.Finalize%2A> method.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> Always call <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter&gt;</ph>.","pos":[0,134],"source":"**Note** Always call <xref:System.IO.TextWriter.Dispose%2A> before you release your last reference to the <xref:System.IO.TextWriter>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[135,305],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextWriter> object's <xref:System.Object.Finalize%2A> method."}]}],"pos":[16920,17887],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.IO.TextWriter\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,133],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.IO.TextWriter\"></xref> and optionally releases the managed resources."}],"pos":[19508,19642],"yaml":true},{"content":"This method is called by `Dispose` and <xref:System.Object.Finalize%2A>. By default, this method specifies the `disposing` parameter as `true`. <xref:System.Object.Finalize%2A> specifies the `disposing` parameter as `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.TextWriter> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"pos":[0,224],"content":"This method is called by `Dispose` and <xref:System.Object.Finalize%2A>. By default, this method specifies the `disposing` parameter as `true`. <xref:System.Object.Finalize%2A> specifies the `disposing` parameter as `false`.","nodes":[{"content":"This method is called by <ph id=\"ph1\">`Dispose`</ph> and <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph>.","pos":[0,72],"source":"This method is called by `Dispose` and <xref:System.Object.Finalize%2A>."},{"content":"By default, this method specifies the <ph id=\"ph1\">`disposing`</ph> parameter as <ph id=\"ph2\">`true`</ph>.","pos":[73,143],"source":" By default, this method specifies the `disposing` parameter as `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> specifies the <ph id=\"ph2\">`disposing`</ph> parameter as <ph id=\"ph3\">`false`</ph>.","pos":[144,224],"source":" <xref:System.Object.Finalize%2A> specifies the `disposing` parameter as `false`."}]},{"pos":[231,453],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.TextWriter> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.IO.TextWriter&gt;</ph> references.","pos":[0,154],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.TextWriter> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[155,222],"source":" This method invokes the `Dispose` method of each referenced object."}]}],"pos":[19653,20111],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[20265,20368],"yaml":true},{"content":"When overridden in a derived class, returns the character encoding in which the output is written.","nodes":[{"pos":[0,98],"content":"When overridden in a derived class, returns the character encoding in which the output is written.","nodes":[{"content":"When overridden in a derived class, returns the character encoding in which the output is written.","pos":[0,98]}]}],"pos":[21856,21955],"yaml":true},{"content":"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the `TextWriter`. This enables the XML code to consume an arbitrary `TextWriter` and generate the correct XML header.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,230],"content":"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the `TextWriter`. This enables the XML code to consume an arbitrary `TextWriter` and generate the correct XML header.","nodes":[{"content":"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the <ph id=\"ph1\">`TextWriter`</ph>.","pos":[0,130],"source":"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the `TextWriter`."},{"content":"This enables the XML code to consume an arbitrary <ph id=\"ph1\">`TextWriter`</ph> and generate the correct XML header.","pos":[131,230],"source":" This enables the XML code to consume an arbitrary `TextWriter` and generate the correct XML header."}]},{"pos":[237,332],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[21966,22303],"yaml":true,"extradata":"MT"},{"content":"The character encoding in which the output is written.","nodes":[{"pos":[0,54],"content":"The character encoding in which the output is written.","nodes":[{"content":"The character encoding in which the output is written.","pos":[0,54]}]}],"pos":[22445,22500],"yaml":true},{"content":"Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.","nodes":[{"pos":[0,110],"content":"Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.","nodes":[{"content":"Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.","pos":[0,110]}]}],"pos":[23975,24086],"yaml":true},{"content":"This default method does nothing, but derived classes can override the method to provide the appropriate functionality.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call `Flush` or <xref:System.IO.TextWriter.Close%2A>. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","nodes":[{"pos":[0,119],"content":"This default method does nothing, but derived classes can override the method to provide the appropriate functionality.","nodes":[{"content":"This default method does nothing, but derived classes can override the method to provide the appropriate functionality.","pos":[0,119]}]},{"pos":[126,697],"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call `Flush` or <xref:System.IO.TextWriter.Close%2A>. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","nodes":[{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id=\"ph1\">`Flush`</ph> or <ph id=\"ph2\">&lt;xref:System.IO.TextWriter.Close%2A&gt;</ph>.","pos":[0,133],"source":"Flushing the stream will not flush its underlying encoder unless you explicitly call `Flush` or <xref:System.IO.TextWriter.Close%2A>."},{"content":"Setting <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[134,300],"source":" Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[301,425]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","pos":[426,571]}]}],"pos":[24097,24799],"yaml":true,"extradata":"MT"},{"content":"Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.","nodes":[{"pos":[0,125],"content":"Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.","nodes":[{"content":"Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.","pos":[0,125]}]}],"pos":[26373,26499],"yaml":true},{"content":"A task that represents the asynchronous flush operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous flush operation.","nodes":[{"content":"A task that represents the asynchronous flush operation.","pos":[0,56]}]}],"pos":[26737,26794],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[26959,26988],"yaml":true},{"content":"The writer is currently in use by a previous write operation.","nodes":[{"pos":[0,61],"content":"The writer is currently in use by a previous write operation.","nodes":[{"content":"The writer is currently in use by a previous write operation.","pos":[0,61]}]}],"pos":[27098,27160],"yaml":true},{"content":"Gets an object that controls formatting.","nodes":[{"pos":[0,40],"content":"Gets an object that controls formatting.","nodes":[{"content":"Gets an object that controls formatting.","pos":[0,40]}]}],"pos":[28700,28741],"yaml":true},{"content":"The value of the <xref:System.IO.TextWriter.FormatProvider%2A> property specifies the culture-specific formatting that is used when you call the <xref:System.IO.TextWriter.Write%2A> and <xref:System.IO.TextWriter.WriteLine%2A> methods. If you do not want to provide a format provider, you create an instance by using the <xref:System.IO.TextWriter.%23ctor> constructor, which sets the <xref:System.IO.TextWriter.FormatProvider%2A> property to `null`. When the <xref:System.IO.TextWriter.FormatProvider%2A> property contains `null`, the culture of the current thread is used for formatting.  \n  \n For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,589],"content":"The value of the <xref:System.IO.TextWriter.FormatProvider%2A> property specifies the culture-specific formatting that is used when you call the <xref:System.IO.TextWriter.Write%2A> and <xref:System.IO.TextWriter.WriteLine%2A> methods. If you do not want to provide a format provider, you create an instance by using the <xref:System.IO.TextWriter.%23ctor> constructor, which sets the <xref:System.IO.TextWriter.FormatProvider%2A> property to `null`. When the <xref:System.IO.TextWriter.FormatProvider%2A> property contains `null`, the culture of the current thread is used for formatting.","nodes":[{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property specifies the culture-specific formatting that is used when you call the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter.Write%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph> methods.","pos":[0,235],"source":"The value of the <xref:System.IO.TextWriter.FormatProvider%2A> property specifies the culture-specific formatting that is used when you call the <xref:System.IO.TextWriter.Write%2A> and <xref:System.IO.TextWriter.WriteLine%2A> methods."},{"content":"If you do not want to provide a format provider, you create an instance by using the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.%23ctor&gt;</ph> constructor, which sets the <ph id=\"ph2\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property to <ph id=\"ph3\">`null`</ph>.","pos":[236,450],"source":" If you do not want to provide a format provider, you create an instance by using the <xref:System.IO.TextWriter.%23ctor> constructor, which sets the <xref:System.IO.TextWriter.FormatProvider%2A> property to `null`."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property contains <ph id=\"ph2\">`null`</ph>, the culture of the current thread is used for formatting.","pos":[451,589],"source":" When the <xref:System.IO.TextWriter.FormatProvider%2A> property contains `null`, the culture of the current thread is used for formatting."}]},{"pos":[596,1071],"content":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).","nodes":[{"content":"For an example of creating a file and writing text to a file, see <bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>.","pos":[0,148],"source":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)."},{"content":"For an example of reading text from a file, see <bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>.","pos":[149,281],"source":" For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)."},{"content":"For an example of reading from and writing to a binary file, see <bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>.","pos":[282,475],"source":" For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)."}]},{"pos":[1078,1173],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[28752,29932],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IFormatProvider\"></xref> object for a specific culture, or the formatting of the current culture if no other culture is specified.","nodes":[{"pos":[0,152],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IFormatProvider\"&gt;&lt;/xref&gt;</ph> object for a specific culture, or the formatting of the current culture if no other culture is specified.","source":"An <xref href=\"System.IFormatProvider\"></xref> object for a specific culture, or the formatting of the current culture if no other culture is specified."}],"pos":[30076,30229],"yaml":true},{"content":"Gets or sets the line terminator string used by the current `TextWriter`.","nodes":[{"pos":[0,73],"content":"Gets or sets the line terminator string used by the current <ph id=\"ph1\">`TextWriter`</ph>.","source":"Gets or sets the line terminator string used by the current `TextWriter`."}],"pos":[31718,31792],"yaml":true},{"content":"The default line terminator string is a carriage return followed by a line feed (\"\\r\\n\").  \n  \n The line terminator string is written to the text stream whenever one of the `WriteLine` methods is called. In order for text written by the `TextWriter` to be readable by a <xref:System.IO.TextReader>, only \"\\n\" or \"\\r\\n\" should be used as terminator strings. If `NewLine` is set to `null`, the default newline character is used instead.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,89],"content":"The default line terminator string is a carriage return followed by a line feed (\"\\r\\n\").","nodes":[{"content":"The default line terminator string is a carriage return followed by a line feed (\"\\r\\n\").","pos":[0,89]}]},{"pos":[96,434],"content":"The line terminator string is written to the text stream whenever one of the `WriteLine` methods is called. In order for text written by the `TextWriter` to be readable by a <xref:System.IO.TextReader>, only \"\\n\" or \"\\r\\n\" should be used as terminator strings. If `NewLine` is set to `null`, the default newline character is used instead.","nodes":[{"content":"The line terminator string is written to the text stream whenever one of the <ph id=\"ph1\">`WriteLine`</ph> methods is called.","pos":[0,107],"source":"The line terminator string is written to the text stream whenever one of the `WriteLine` methods is called."},{"content":"In order for text written by the <ph id=\"ph1\">`TextWriter`</ph> to be readable by a <ph id=\"ph2\">&lt;xref:System.IO.TextReader&gt;</ph>, only \"\\n\" or \"\\r\\n\" should be used as terminator strings.","pos":[108,260],"source":" In order for text written by the `TextWriter` to be readable by a <xref:System.IO.TextReader>, only \"\\n\" or \"\\r\\n\" should be used as terminator strings."},{"content":"If <ph id=\"ph1\">`NewLine`</ph> is set to <ph id=\"ph2\">`null`</ph>, the default newline character is used instead.","pos":[261,338],"source":" If `NewLine` is set to `null`, the default newline character is used instead."}]},{"pos":[441,536],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[31803,32357],"yaml":true,"extradata":"MT"},{"content":"The line terminator string for the current `TextWriter`.","nodes":[{"pos":[0,56],"content":"The line terminator string for the current <ph id=\"ph1\">`TextWriter`</ph>.","source":"The line terminator string for the current `TextWriter`."}],"pos":[32481,32538],"yaml":true},{"content":"Provides a `TextWriter` with no backing store that can be written to, but not read from.","nodes":[{"pos":[0,88],"content":"Provides a <ph id=\"ph1\">`TextWriter`</ph> with no backing store that can be written to, but not read from.","source":"Provides a `TextWriter` with no backing store that can be written to, but not read from."}],"pos":[34003,34092],"yaml":true},{"content":"Use `Null` to redirect output to a stream that will not consume any operating system resources.  \n  \n When the <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName> methods are invoked on `Null`, the call simply returns, and no data is actually written to any backing store.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,95],"content":"Use <ph id=\"ph1\">`Null`</ph> to redirect output to a stream that will not consume any operating system resources.","source":"Use `Null` to redirect output to a stream that will not consume any operating system resources."},{"pos":[102,282],"content":"When the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%2A?displayProperty=fullName&gt;</ph> methods are invoked on <ph id=\"ph2\">`Null`</ph>, the call simply returns, and no data is actually written to any backing store.","source":"When the <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName> methods are invoked on `Null`, the call simply returns, and no data is actually written to any backing store."},{"pos":[289,384],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[34103,34494],"yaml":true,"extradata":"MT"},{"content":"Creates a thread-safe wrapper around the specified `TextWriter`.","nodes":[{"pos":[0,64],"content":"Creates a thread-safe wrapper around the specified <ph id=\"ph1\">`TextWriter`</ph>.","source":"Creates a thread-safe wrapper around the specified `TextWriter`."}],"pos":[36190,36255],"yaml":true},{"content":"All write operations to the returned wrapper will be thread safe. You call this method to ensure that only one thread at a time can execute the methods on the <xref:System.IO.TextWriter> instance that is returned. For more information about synchronization and threading, see [Synchronizing Data for Multithreading](~/docs/standard/threading/synchronizing-data-for-multithreading.md).  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,384],"content":"All write operations to the returned wrapper will be thread safe. You call this method to ensure that only one thread at a time can execute the methods on the <xref:System.IO.TextWriter> instance that is returned. For more information about synchronization and threading, see [Synchronizing Data for Multithreading](~/docs/standard/threading/synchronizing-data-for-multithreading.md).","nodes":[{"content":"All write operations to the returned wrapper will be thread safe.","pos":[0,65]},{"content":"You call this method to ensure that only one thread at a time can execute the methods on the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> instance that is returned.","pos":[66,213],"source":" You call this method to ensure that only one thread at a time can execute the methods on the <xref:System.IO.TextWriter> instance that is returned."},{"content":"For more information about synchronization and threading, see <bpt id=\"p1\">[</bpt>Synchronizing Data for Multithreading<ept id=\"p1\">](~/docs/standard/threading/synchronizing-data-for-multithreading.md)</ept>.","pos":[214,384],"source":" For more information about synchronization and threading, see [Synchronizing Data for Multithreading](~/docs/standard/threading/synchronizing-data-for-multithreading.md)."}]},{"pos":[391,486],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[36266,36757],"yaml":true,"extradata":"MT"},{"content":"The `TextWriter` to synchronize.","nodes":[{"pos":[0,32],"content":"The <ph id=\"ph1\">`TextWriter`</ph> to synchronize.","source":"The `TextWriter` to synchronize."}],"pos":[36944,36977],"yaml":true},{"content":"A thread-safe wrapper.","nodes":[{"pos":[0,22],"content":"A thread-safe wrapper.","nodes":[{"content":"A thread-safe wrapper.","pos":[0,22]}]}],"pos":[37041,37064],"yaml":true},{"content":"<code>writer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;writer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>writer</code> is `null`."}],"pos":[37227,37258],"yaml":true},{"content":"Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object,System.Object)\"></xref> method.","nodes":[{"pos":[0,194],"content":"Writes a formatted string to the text string or stream, using the same semantics as the <ph id=\"ph1\">&lt;xref href=\"System.String.Format(System.String,System.Object,System.Object,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object,System.Object)\"></xref> method."}],"pos":[38590,38785],"yaml":true},{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has three objects in its parameter list, the value of *index* must always be 0, 1, or 2. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \n  \n The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".  \n  \n This method does not search the specified string  for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \n  \n If a specified object is not referenced in the format string, it is ignored.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,263],"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,263],"nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.","pos":[0,146]},{"content":".NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[147,263]}]}]},{"pos":[273,413],"content":"For more information about the composite formatting feature, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."},{"pos":[423,675],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[685,967],"content":"For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","source":"For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"pos":[977,1126],"content":"For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","source":"For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."},{"pos":[1136,1246],"content":"For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[1253,1574],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[0,199],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the value of the corresponding object.","pos":[200,321]}]},{"pos":[1581,1623],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[1630,1667],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[1674,1939],"content":"Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]},{"content":"For more information about the composite formatting feature, including the syntax of a format item, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","pos":[86,265],"source":" For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."}]},{"pos":[1946,1953],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1954,1965],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2006,2011],"content":"index","nodes":[{"content":"index","pos":[0,5]}]},{"pos":[2012,2416],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has three objects in its parameter list, the value of *index* must always be 0, 1, or 2. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[77,200],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>."},{"content":"Because this overload has three objects in its parameter list, the value of <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> must always be 0, 1, or 2.","pos":[201,311],"source":" Because this overload has three objects in its parameter list, the value of *index* must always be 0, 1, or 2."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[312,404],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[2421,2430],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[2431,2588],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[2593,2608],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[2609,3088],"content":"A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.","nodes":[{"content":"A standard or custom format string that is supported by the object to be formatted.","pos":[0,83]},{"content":"Possible values for <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> are the same as the values supported by the object's <ph id=\"ph1\">`ToString(string format)`</ph> method.","pos":[84,205],"source":" Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method."},{"content":"If <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> is not specified and the object to be formatted implements the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id=\"ph2\">`null`</ph> is passed as the value of the <ph id=\"ph3\">`format`</ph> parameter that is used as the <ph id=\"ph4\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.","pos":[206,479],"source":" If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string."}]},{"pos":[3096,3295],"content":"The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","nodes":[{"content":"The leading and trailing brace characters, \"{\" and \"}\", are required.","pos":[0,69]},{"content":"To specify a single literal brace character in <ph id=\"ph1\">`format`</ph>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","pos":[70,199],"source":" To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\"."}]},{"pos":[3302,3493],"content":"This method does not search the specified string  for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.","nodes":[{"content":"This method does not search the specified string  for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.","pos":[0,191],"source":"This method does not search the specified string  for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>."}]},{"pos":[3500,3576],"content":"If a specified object is not referenced in the format string, it is ignored.","nodes":[{"content":"If a specified object is not referenced in the format string, it is ignored.","pos":[0,76]}]},{"pos":[3583,3678],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[38796,42517],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[42700,42727],"yaml":true},{"content":"The first object to format and write.","nodes":[{"pos":[0,37],"content":"The first object to format and write.","nodes":[{"content":"The first object to format and write.","pos":[0,37]}]}],"pos":[42787,42825],"yaml":true},{"content":"The second object to format and write.","nodes":[{"pos":[0,38],"content":"The second object to format and write.","nodes":[{"content":"The second object to format and write.","pos":[0,38]}]}],"pos":[42885,42924],"yaml":true},{"content":"The third object to format and write.","nodes":[{"pos":[0,37],"content":"The third object to format and write.","nodes":[{"content":"The third object to format and write.","pos":[0,37]}]}],"pos":[42984,43022],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[43178,43209],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[43315,43372],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[43460,43481],"yaml":true},{"content":"<code>format</code> is not a valid composite format string.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.","source":"<code>format</code> is not a valid composite format string."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,237],"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).","pos":[0,160]}]}],"pos":[43571,43815],"yaml":true},{"content":"Writes a subarray of characters to the text string or stream.","nodes":[{"pos":[0,61],"content":"Writes a subarray of characters to the text string or stream.","nodes":[{"content":"Writes a subarray of characters to the text string or stream.","pos":[0,61]}]}],"pos":[45293,45355],"yaml":true},{"content":"This method will write `count` characters of data into this `TextWriter` from the `buffer` character array starting at position `index`.  \n  \n This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload for each character in `buffer` between `index` and (`index` + `count`).  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,136],"content":"This method will write <ph id=\"ph1\">`count`</ph> characters of data into this <ph id=\"ph2\">`TextWriter`</ph> from the <ph id=\"ph3\">`buffer`</ph> character array starting at position <ph id=\"ph4\">`index`</ph>.","source":"This method will write `count` characters of data into this `TextWriter` from the `buffer` character array starting at position `index`."},{"pos":[143,315],"content":"This overload is equivalent to the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> overload for each character in <ph id=\"ph2\">`buffer`</ph> between <ph id=\"ph3\">`index`</ph> and (<ph id=\"ph4\">`index`</ph><ph id=\"ph5\"> + </ph><ph id=\"ph6\">`count`</ph>).","source":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload for each character in `buffer` between `index` and (`index` + `count`)."},{"pos":[322,417],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[45366,45790],"yaml":true,"extradata":"MT"},{"content":"The character array to write data from.","nodes":[{"pos":[0,39],"content":"The character array to write data from.","nodes":[{"content":"The character array to write data from.","pos":[0,39]}]}],"pos":[45956,45996],"yaml":true},{"content":"The character position in the buffer at which to start retrieving data.","nodes":[{"pos":[0,71],"content":"The character position in the buffer at which to start retrieving data.","nodes":[{"content":"The character position in the buffer at which to start retrieving data.","pos":[0,71]}]}],"pos":[46056,46128],"yaml":true},{"content":"The number of characters to write.","nodes":[{"pos":[0,34],"content":"The number of characters to write.","nodes":[{"content":"The number of characters to write.","pos":[0,34]}]}],"pos":[46188,46223],"yaml":true},{"content":"The buffer length minus <code>index</code> is less than <code>count</code>.","nodes":[{"pos":[0,75],"content":"The buffer length minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The buffer length minus <code>index</code> is less than <code>count</code>."}],"pos":[46371,46447],"yaml":true},{"content":"The <code>buffer</code> parameter is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>buffer</code> parameter is `null`."}],"pos":[46549,46594],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[46708,46762],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[46868,46925],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[47013,47034],"yaml":true},{"content":"Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object[])\"></xref> method.","nodes":[{"pos":[0,168],"content":"Writes a formatted string to the text string or stream, using the same semantics as the <ph id=\"ph1\">&lt;xref href=\"System.String.Format(System.String,System.Object[])\"&gt;&lt;/xref&gt;</ph> method.","source":"Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object[])\"></xref> method."}],"pos":[48590,48759],"yaml":true},{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has an array in its parameter list, the value of *index* must always be less than the length of the array. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \n  \n The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".  \n  \n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \n  \n If a specified object is not referenced in the format string, it is ignored.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,263],"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,263],"nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.","pos":[0,146]},{"content":".NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[147,263]}]}]},{"pos":[273,413],"content":"For more information about the composite formatting feature, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."},{"pos":[423,675],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[685,967],"content":"For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","source":"For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"pos":[977,1126],"content":"For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","source":"For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."},{"pos":[1136,1246],"content":"For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[1253,1574],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[0,199],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the value of the corresponding object.","pos":[200,321]}]},{"pos":[1581,1623],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[1630,1667],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[1674,1939],"content":"Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]},{"content":"For more information about the composite formatting feature, including the syntax of a format item, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","pos":[86,265],"source":" For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."}]},{"pos":[1946,1953],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1954,1965],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2006,2011],"content":"index","nodes":[{"content":"index","pos":[0,5]}]},{"pos":[2012,2434],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has an array in its parameter list, the value of *index* must always be less than the length of the array. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[77,200],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>."},{"content":"Because this overload has an array in its parameter list, the value of <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> must always be less than the length of the array.","pos":[201,329],"source":" Because this overload has an array in its parameter list, the value of *index* must always be less than the length of the array."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[330,422],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[2439,2448],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[2449,2606],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[2611,2626],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[2627,3106],"content":"A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.","nodes":[{"content":"A standard or custom format string that is supported by the object to be formatted.","pos":[0,83]},{"content":"Possible values for <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> are the same as the values supported by the object's <ph id=\"ph1\">`ToString(string format)`</ph> method.","pos":[84,205],"source":" Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method."},{"content":"If <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> is not specified and the object to be formatted implements the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id=\"ph2\">`null`</ph> is passed as the value of the <ph id=\"ph3\">`format`</ph> parameter that is used as the <ph id=\"ph4\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.","pos":[206,479],"source":" If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string."}]},{"pos":[3114,3313],"content":"The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","nodes":[{"content":"The leading and trailing brace characters, \"{\" and \"}\", are required.","pos":[0,69]},{"content":"To specify a single literal brace character in <ph id=\"ph1\">`format`</ph>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","pos":[70,199],"source":" To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\"."}]},{"pos":[3320,3510],"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.","nodes":[{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.","pos":[0,190],"source":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>."}]},{"pos":[3517,3593],"content":"If a specified object is not referenced in the format string, it is ignored.","nodes":[{"content":"If a specified object is not referenced in the format string, it is ignored.","pos":[0,76]}]},{"pos":[3600,3695],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[48770,52508],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[52666,52693],"yaml":true},{"content":"An object array that contains zero or more objects to format and write.","nodes":[{"pos":[0,71],"content":"An object array that contains zero or more objects to format and write.","nodes":[{"content":"An object array that contains zero or more objects to format and write.","pos":[0,71]}]}],"pos":[52754,52826],"yaml":true},{"content":"<code>format</code> or <code>arg</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;arg&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>format</code> or <code>arg</code> is `null`."}],"pos":[52982,53033],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[53139,53196],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[53284,53305],"yaml":true},{"content":"<code>format</code> is not a valid composite format string.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>arg</code> array.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.","source":"<code>format</code> is not a valid composite format string."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,196],"content":"The index of a format item is less than 0 (zero), or greater than or equal to the length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arg</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","source":"The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>arg</code> array."}],"pos":[53395,53598],"yaml":true},{"content":"Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object)\"></xref> method.","nodes":[{"pos":[0,166],"content":"Writes a formatted string to the text string or stream, using the same semantics as the <ph id=\"ph1\">&lt;xref href=\"System.String.Format(System.String,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object)\"></xref> method."}],"pos":[55142,55309],"yaml":true},{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has only a single object in its parameter list, the value of *index* must always be 0. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \n  \n The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".  \n  \n . This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \n  \n If a specified object is not referenced in the format string, it is ignored.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,263],"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,263],"nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.","pos":[0,146]},{"content":".NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[147,263]}]}]},{"pos":[273,413],"content":"For more information about the composite formatting feature, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."},{"pos":[423,675],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[685,967],"content":"For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","source":"For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"pos":[977,1126],"content":"For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","source":"For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."},{"pos":[1136,1246],"content":"For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[1253,1574],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[0,199],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the value of the corresponding object.","pos":[200,321]}]},{"pos":[1581,1623],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[1630,1667],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[1674,1939],"content":"Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]},{"content":"For more information about the composite formatting feature, including the syntax of a format item, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","pos":[86,265],"source":" For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."}]},{"pos":[1946,1953],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1954,1965],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2006,2011],"content":"index","nodes":[{"content":"index","pos":[0,5]}]},{"pos":[2012,2414],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has only a single object in its parameter list, the value of *index* must always be 0. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[77,200],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>."},{"content":"Because this overload has only a single object in its parameter list, the value of <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> must always be 0.","pos":[201,309],"source":" Because this overload has only a single object in its parameter list, the value of *index* must always be 0."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[310,402],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[2419,2428],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[2429,2586],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[2591,2606],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[2607,3086],"content":"A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.","nodes":[{"content":"A standard or custom format string that is supported by the object to be formatted.","pos":[0,83]},{"content":"Possible values for <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> are the same as the values supported by the object's <ph id=\"ph1\">`ToString(string format)`</ph> method.","pos":[84,205],"source":" Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method."},{"content":"If <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> is not specified and the object to be formatted implements the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id=\"ph2\">`null`</ph> is passed as the value of the <ph id=\"ph3\">`format`</ph> parameter that is used as the <ph id=\"ph4\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.","pos":[206,479],"source":" If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string."}]},{"pos":[3094,3293],"content":"The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","nodes":[{"content":"The leading and trailing brace characters, \"{\" and \"}\", are required.","pos":[0,69]},{"content":"To specify a single literal brace character in <ph id=\"ph1\">`format`</ph>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","pos":[70,199],"source":" To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\"."}]},{"pos":[3300,3492],"content":". This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.","nodes":[{"content":". This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.","pos":[0,192],"nodes":[{"content":".","pos":[0,1]},{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.","pos":[2,192],"source":" This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>."}]}]},{"pos":[3499,3575],"content":"If a specified object is not referenced in the format string, it is ignored.","nodes":[{"content":"If a specified object is not referenced in the format string, it is ignored.","pos":[0,76]}]},{"pos":[3582,3677],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[55320,59040],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[59197,59224],"yaml":true},{"content":"The object to format and write.","nodes":[{"pos":[0,31],"content":"The object to format and write.","nodes":[{"content":"The object to format and write.","pos":[0,31]}]}],"pos":[59284,59316],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[59472,59503],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[59609,59666],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[59754,59775],"yaml":true},{"content":"<code>format</code> is not a valid composite format string.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.","source":"<code>format</code> is not a valid composite format string."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,235],"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).","pos":[0,158]}]}],"pos":[59865,60107],"yaml":true},{"content":"Writes the text representation of an 8-byte unsigned integer to the text string or stream.","nodes":[{"pos":[0,90],"content":"Writes the text representation of an 8-byte unsigned integer to the text string or stream.","nodes":[{"content":"Writes the text representation of an 8-byte unsigned integer to the text string or stream.","pos":[0,90]}]}],"pos":[61465,61556],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,282],"content":"The text representation of the specified value is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,139],"source":"The text representation of the specified value is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[140,282],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[289,384],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[61567,61956],"yaml":true,"extradata":"MT"},{"content":"The 8-byte unsigned integer to write.","nodes":[{"pos":[0,37],"content":"The 8-byte unsigned integer to write.","nodes":[{"content":"The 8-byte unsigned integer to write.","pos":[0,37]}]}],"pos":[62142,62180],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[62340,62397],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[62485,62506],"yaml":true},{"content":"Writes the text representation of a 4-byte unsigned integer to the text string or stream.","nodes":[{"pos":[0,89],"content":"Writes the text representation of a 4-byte unsigned integer to the text string or stream.","nodes":[{"content":"Writes the text representation of a 4-byte unsigned integer to the text string or stream.","pos":[0,89]}]}],"pos":[64037,64127],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,282],"content":"The text representation of the specified value is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,139],"source":"The text representation of the specified value is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[140,282],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[289,384],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[64138,64527],"yaml":true,"extradata":"MT"},{"content":"The 4-byte unsigned integer to write.","nodes":[{"pos":[0,37],"content":"The 4-byte unsigned integer to write.","nodes":[{"content":"The 4-byte unsigned integer to write.","pos":[0,37]}]}],"pos":[64712,64750],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[64910,64967],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[65055,65076],"yaml":true},{"content":"Writes a string to the text string or stream.","nodes":[{"pos":[0,45],"content":"Writes a string to the text string or stream.","nodes":[{"content":"Writes a string to the text string or stream.","pos":[0,45]}]}],"pos":[66607,66653],"yaml":true},{"content":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload.  \n  \n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \n  \n If `value` is `null`, nothing is written to the text stream.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,101],"content":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload.","nodes":[{"content":"This overload is equivalent to the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> overload.","pos":[0,101],"source":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload."}]},{"pos":[108,298],"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.","nodes":[{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.","pos":[0,190],"source":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>."}]},{"pos":[305,365],"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, nothing is written to the text stream.","source":"If `value` is `null`, nothing is written to the text stream."},{"pos":[372,467],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[66664,67140],"yaml":true,"extradata":"MT"},{"content":"The string to write.","nodes":[{"pos":[0,20],"content":"The string to write.","nodes":[{"content":"The string to write.","pos":[0,20]}]}],"pos":[67282,67303],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[67463,67520],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[67608,67629],"yaml":true},{"content":"Writes the text representation of a 4-byte floating-point value to the text string or stream.","nodes":[{"pos":[0,93],"content":"Writes the text representation of a 4-byte floating-point value to the text string or stream.","nodes":[{"content":"Writes the text representation of a 4-byte floating-point value to the text string or stream.","pos":[0,93]}]}],"pos":[69107,69201],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,282],"content":"The text representation of the specified value is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,139],"source":"The text representation of the specified value is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[140,282],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[289,384],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[69212,69601],"yaml":true,"extradata":"MT"},{"content":"The 4-byte floating-point value to write.","nodes":[{"pos":[0,41],"content":"The 4-byte floating-point value to write.","nodes":[{"content":"The 4-byte floating-point value to write.","pos":[0,41]}]}],"pos":[69742,69784],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[69944,70001],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[70089,70110],"yaml":true},{"content":"Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object)\"></xref> method.","nodes":[{"pos":[0,180],"content":"Writes a formatted string to the text string or stream, using the same semantics as the <ph id=\"ph1\">&lt;xref href=\"System.String.Format(System.String,System.Object,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object)\"></xref> method."}],"pos":[71720,71901],"yaml":true},{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has two objects in its parameter list, the value of *index* must always be 0 or 1. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \n  \n The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".  \n  \n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \n  \n If a specified object is not referenced in the format string, it is ignored.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,263],"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,263],"nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.","pos":[0,146]},{"content":".NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[147,263]}]}]},{"pos":[273,413],"content":"For more information about the composite formatting feature, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."},{"pos":[423,675],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[685,967],"content":"For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","source":"For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"pos":[977,1126],"content":"For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","source":"For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."},{"pos":[1136,1246],"content":"For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[1253,1574],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[0,199],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the value of the corresponding object.","pos":[200,321]}]},{"pos":[1581,1623],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[1630,1667],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[1674,1939],"content":"Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]},{"content":"For more information about the composite formatting feature, including the syntax of a format item, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","pos":[86,265],"source":" For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."}]},{"pos":[1946,1953],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1954,1965],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2006,2011],"content":"index","nodes":[{"content":"index","pos":[0,5]}]},{"pos":[2012,2410],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has two objects in its parameter list, the value of *index* must always be 0 or 1. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[77,200],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>."},{"content":"Because this overload has two objects in its parameter list, the value of <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> must always be 0 or 1.","pos":[201,305],"source":" Because this overload has two objects in its parameter list, the value of *index* must always be 0 or 1."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[306,398],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[2415,2424],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[2425,2582],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[2587,2602],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[2603,3082],"content":"A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.","nodes":[{"content":"A standard or custom format string that is supported by the object to be formatted.","pos":[0,83]},{"content":"Possible values for <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> are the same as the values supported by the object's <ph id=\"ph1\">`ToString(string format)`</ph> method.","pos":[84,205],"source":" Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method."},{"content":"If <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> is not specified and the object to be formatted implements the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id=\"ph2\">`null`</ph> is passed as the value of the <ph id=\"ph3\">`format`</ph> parameter that is used as the <ph id=\"ph4\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.","pos":[206,479],"source":" If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string."}]},{"pos":[3090,3289],"content":"The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","nodes":[{"content":"The leading and trailing brace characters, \"{\" and \"}\", are required.","pos":[0,69]},{"content":"To specify a single literal brace character in <ph id=\"ph1\">`format`</ph>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","pos":[70,199],"source":" To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\"."}]},{"pos":[3296,3486],"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.","nodes":[{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.","pos":[0,190],"source":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>."}]},{"pos":[3493,3569],"content":"If a specified object is not referenced in the format string, it is ignored.","nodes":[{"content":"If a specified object is not referenced in the format string, it is ignored.","pos":[0,76]}]},{"pos":[3576,3671],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[71912,75626],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[75796,75823],"yaml":true},{"content":"The first object to format and write.","nodes":[{"pos":[0,37],"content":"The first object to format and write.","nodes":[{"content":"The first object to format and write.","pos":[0,37]}]}],"pos":[75883,75921],"yaml":true},{"content":"The second object to format and write.","nodes":[{"pos":[0,38],"content":"The second object to format and write.","nodes":[{"content":"The second object to format and write.","pos":[0,38]}]}],"pos":[75981,76020],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[76176,76207],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[76313,76370],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[76458,76479],"yaml":true},{"content":"<code>format</code> is not a valid composite format string.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.","source":"<code>format</code> is not a valid composite format string."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,234],"content":"The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).","nodes":[{"content":"The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).","pos":[0,157]}]}],"pos":[76569,76810],"yaml":true},{"content":"Writes the text representation of an 8-byte signed integer to the text string or stream.","nodes":[{"pos":[0,88],"content":"Writes the text representation of an 8-byte signed integer to the text string or stream.","nodes":[{"content":"Writes the text representation of an 8-byte signed integer to the text string or stream.","pos":[0,88]}]}],"pos":[78162,78251],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \n  \n [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)","nodes":[{"pos":[0,281],"content":"The text representation of the specified value is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,138],"source":"The text representation of the specified value is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[139,281],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[288,383],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."},{"pos":[390,471],"content":"<bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)"}],"pos":[78262,78740],"yaml":true,"extradata":"MT"},{"content":"The 8-byte signed integer to write.","nodes":[{"pos":[0,35],"content":"The 8-byte signed integer to write.","nodes":[{"content":"The 8-byte signed integer to write.","pos":[0,35]}]}],"pos":[78879,78915],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[79075,79132],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[79220,79241],"yaml":true},{"content":"Writes the text representation of a 4-byte signed integer to the text string or stream.","nodes":[{"pos":[0,87],"content":"Writes the text representation of a 4-byte signed integer to the text string or stream.","nodes":[{"content":"Writes the text representation of a 4-byte signed integer to the text string or stream.","pos":[0,87]}]}],"pos":[80713,80801],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,281],"content":"The text representation of the specified value is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,138],"source":"The text representation of the specified value is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[139,281],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[288,383],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[80812,81200],"yaml":true,"extradata":"MT"},{"content":"The 4-byte signed integer to write.","nodes":[{"pos":[0,35],"content":"The 4-byte signed integer to write.","nodes":[{"content":"The 4-byte signed integer to write.","pos":[0,35]}]}],"pos":[81338,81374],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[81534,81591],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[81679,81700],"yaml":true},{"content":"Writes the text representation of an 8-byte floating-point value to the text string or stream.","nodes":[{"pos":[0,94],"content":"Writes the text representation of an 8-byte floating-point value to the text string or stream.","nodes":[{"content":"Writes the text representation of an 8-byte floating-point value to the text string or stream.","pos":[0,94]}]}],"pos":[83178,83273],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,282],"content":"The text representation of the specified value is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.Double.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,139],"source":"The text representation of the specified value is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[140,282],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[289,384],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[83284,83673],"yaml":true,"extradata":"MT"},{"content":"The 8-byte floating-point value to write.","nodes":[{"pos":[0,41],"content":"The 8-byte floating-point value to write.","nodes":[{"content":"The 8-byte floating-point value to write.","pos":[0,41]}]}],"pos":[83815,83857],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[84017,84074],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[84162,84183],"yaml":true},{"content":"Writes the text representation of a decimal value to the text string or stream.","nodes":[{"pos":[0,79],"content":"Writes the text representation of a decimal value to the text string or stream.","nodes":[{"content":"Writes the text representation of a decimal value to the text string or stream.","pos":[0,79]}]}],"pos":[85667,85747],"yaml":true},{"content":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","source":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting."}],"pos":[85758,85876],"yaml":true,"extradata":"MT"},{"content":"The decimal value to write.","nodes":[{"pos":[0,27],"content":"The decimal value to write.","nodes":[{"content":"The decimal value to write.","pos":[0,27]}]}],"pos":[86020,86048],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[86208,86265],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[86353,86374],"yaml":true},{"content":"Writes a character array to the text string or stream.","nodes":[{"pos":[0,54],"content":"Writes a character array to the text string or stream.","nodes":[{"content":"Writes a character array to the text string or stream.","pos":[0,54]}]}],"pos":[87852,87907],"yaml":true},{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \n  \n This default method calls the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method and passes the entire character array. If the character array is `null`, nothing is written.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,165],"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.","nodes":[{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.","pos":[0,165],"source":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>."}]},{"pos":[172,388],"content":"This default method calls the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method and passes the entire character array. If the character array is `null`, nothing is written.","nodes":[{"content":"This default method calls the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method and passes the entire character array.","pos":[0,162],"source":"This default method calls the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method and passes the entire character array."},{"content":"If the character array is <ph id=\"ph1\">`null`</ph>, nothing is written.","pos":[163,216],"source":" If the character array is `null`, nothing is written."}]},{"pos":[395,490],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[87918,88415],"yaml":true,"extradata":"MT"},{"content":"The character array to write to the text stream.","nodes":[{"pos":[0,48],"content":"The character array to write to the text stream.","nodes":[{"content":"The character array to write to the text stream.","pos":[0,48]}]}],"pos":[88559,88608],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[88768,88825],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[88913,88934],"yaml":true},{"content":"Writes a character to the text string or stream.","nodes":[{"pos":[0,48],"content":"Writes a character to the text string or stream.","nodes":[{"content":"Writes a character to the text string or stream.","pos":[0,48]}]}],"pos":[90400,90449],"yaml":true},{"content":"This default method does nothing, but derived classes can override the method to provide the appropriate functionality.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,119],"content":"This default method does nothing, but derived classes can override the method to provide the appropriate functionality.","nodes":[{"content":"This default method does nothing, but derived classes can override the method to provide the appropriate functionality.","pos":[0,119]}]},{"pos":[126,221],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[90460,90686],"yaml":true,"extradata":"MT"},{"content":"The character to write to the text stream.","nodes":[{"pos":[0,42],"content":"The character to write to the text stream.","nodes":[{"content":"The character to write to the text stream.","pos":[0,42]}]}],"pos":[90824,90867],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[91027,91084],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[91172,91193],"yaml":true},{"content":"Writes the text representation of an object to the text string or stream by calling the `ToString` method on that object.","nodes":[{"pos":[0,121],"content":"Writes the text representation of an object to the text string or stream by calling the <ph id=\"ph1\">`ToString`</ph> method on that object.","source":"Writes the text representation of an object to the text string or stream by calling the `ToString` method on that object."}],"pos":[92671,92793],"yaml":true},{"content":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.String%29> overload.  \n  \n If the specified object is `null`, no action is taken and no exception is thrown. Otherwise, the object's `ToString` method is called to produce the string representation, and the resulting string is then written to the output stream. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,97],"content":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.String%29> overload.","nodes":[{"content":"This overload is equivalent to the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%28System.String%29&gt;</ph> overload.","pos":[0,97],"source":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.String%29> overload."}]},{"pos":[104,456],"content":"If the specified object is `null`, no action is taken and no exception is thrown. Otherwise, the object's `ToString` method is called to produce the string representation, and the resulting string is then written to the output stream. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"If the specified object is <ph id=\"ph1\">`null`</ph>, no action is taken and no exception is thrown.","pos":[0,81],"source":"If the specified object is `null`, no action is taken and no exception is thrown."},{"content":"Otherwise, the object's <ph id=\"ph1\">`ToString`</ph> method is called to produce the string representation, and the resulting string is then written to the output stream.","pos":[82,234],"source":" Otherwise, the object's `ToString` method is called to produce the string representation, and the resulting string is then written to the output stream."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[235,352],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[463,558],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[92804,93369],"yaml":true,"extradata":"MT"},{"content":"The object to write.","nodes":[{"pos":[0,20],"content":"The object to write.","nodes":[{"content":"The object to write.","pos":[0,20]}]}],"pos":[93511,93532],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[93692,93749],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[93837,93858],"yaml":true},{"content":"Writes the text representation of a `Boolean` value to the text string or stream.","nodes":[{"pos":[0,81],"content":"Writes the text representation of a <ph id=\"ph1\">`Boolean`</ph> value to the text string or stream.","source":"Writes the text representation of a `Boolean` value to the text string or stream."}],"pos":[95342,95424],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method.  \n  \n This method outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,140],"content":"The text representation of the specified value is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,140],"source":"The text representation of the specified value is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method."}]},{"pos":[147,294],"content":"This method outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.","nodes":[{"content":"This method outputs either <ph id=\"ph1\">&lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;</ph>.","pos":[0,147],"source":"This method outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>."}]},{"pos":[301,396],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[95435,95838],"yaml":true,"extradata":"MT"},{"content":"The `Boolean` value to write.","nodes":[{"pos":[0,29],"content":"The <ph id=\"ph1\">`Boolean`</ph> value to write.","source":"The `Boolean` value to write."}],"pos":[95979,96009],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[96169,96226],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[96314,96335],"yaml":true},{"content":"Writes a subarray of characters to the text string or stream asynchronously.","nodes":[{"pos":[0,76],"content":"Writes a subarray of characters to the text string or stream asynchronously.","nodes":[{"content":"Writes a subarray of characters to the text string or stream asynchronously.","pos":[0,76]}]}],"pos":[97963,98040],"yaml":true},{"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,273],"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.","pos":[0,273],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.WriteAsync%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,273],"source":" For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method."}]}]}],"pos":[98051,98325],"yaml":true,"extradata":"MT"},{"content":"The character array to write data from.","nodes":[{"pos":[0,39],"content":"The character array to write data from.","nodes":[{"content":"The character array to write data from.","pos":[0,39]}]}],"pos":[98586,98626],"yaml":true},{"content":"The character position in the buffer at which to start retrieving data.","nodes":[{"pos":[0,71],"content":"The character position in the buffer at which to start retrieving data.","nodes":[{"content":"The character position in the buffer at which to start retrieving data.","pos":[0,71]}]}],"pos":[98686,98758],"yaml":true},{"content":"The number of characters to write.","nodes":[{"pos":[0,34],"content":"The number of characters to write.","nodes":[{"content":"The number of characters to write.","pos":[0,34]}]}],"pos":[98818,98853],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[98924,98981],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[99142,99173],"yaml":true},{"content":"The <code>index</code> plus <code>count</code> is greater than the buffer length.","nodes":[{"pos":[0,81],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> plus <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than the buffer length.","source":"The <code>index</code> plus <code>count</code> is greater than the buffer length."}],"pos":[99267,99349],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[99463,99517],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[99623,99652],"yaml":true},{"content":"The text writer is currently in use by a previous write operation.","nodes":[{"pos":[0,66],"content":"The text writer is currently in use by a previous write operation.","nodes":[{"content":"The text writer is currently in use by a previous write operation.","pos":[0,66]}]}],"pos":[99762,99829],"yaml":true},{"content":"Writes a string to the text string or stream asynchronously.","nodes":[{"pos":[0,60],"content":"Writes a string to the text string or stream asynchronously.","nodes":[{"content":"Writes a string to the text string or stream asynchronously.","pos":[0,60]}]}],"pos":[101412,101473],"yaml":true},{"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,273],"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.","pos":[0,273],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.WriteAsync%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,273],"source":" For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method."}]}]}],"pos":[101484,101758],"yaml":true,"extradata":"MT"},{"content":"The string to write. If <code>value</code> is `null`, nothing is written to the text stream.","nodes":[{"pos":[0,92],"content":"The string to write. If <code>value</code> is `null`, nothing is written to the text stream.","nodes":[{"content":"The string to write.","pos":[0,20]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, nothing is written to the text stream.","pos":[21,92],"source":" If <code>value</code> is `null`, nothing is written to the text stream."}]}],"pos":[101995,102088],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[102159,102216],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[102381,102410],"yaml":true},{"content":"The text writer is currently in use by a previous write operation.","nodes":[{"pos":[0,66],"content":"The text writer is currently in use by a previous write operation.","nodes":[{"content":"The text writer is currently in use by a previous write operation.","pos":[0,66]}]}],"pos":[102520,102587],"yaml":true},{"content":"Writes a character to the text string or stream asynchronously.","nodes":[{"pos":[0,63],"content":"Writes a character to the text string or stream asynchronously.","nodes":[{"content":"Writes a character to the text string or stream asynchronously.","pos":[0,63]}]}],"pos":[104158,104222],"yaml":true},{"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,273],"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.","pos":[0,273],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.WriteAsync%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,273],"source":" For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method."}]}]}],"pos":[104233,104507],"yaml":true,"extradata":"MT"},{"content":"The character to write to the text stream.","nodes":[{"pos":[0,42],"content":"The character to write to the text stream.","nodes":[{"content":"The character to write to the text stream.","pos":[0,42]}]}],"pos":[104740,104783],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[104854,104911],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[105076,105105],"yaml":true},{"content":"The text writer is currently in use by a previous write operation.","nodes":[{"pos":[0,66],"content":"The text writer is currently in use by a previous write operation.","nodes":[{"content":"The text writer is currently in use by a previous write operation.","pos":[0,66]}]}],"pos":[105215,105282],"yaml":true},{"content":"Writes a character array to the text string or stream asynchronously.","nodes":[{"pos":[0,69],"content":"Writes a character array to the text string or stream asynchronously.","nodes":[{"content":"Writes a character array to the text string or stream asynchronously.","pos":[0,69]}]}],"pos":[106865,106935],"yaml":true},{"content":"The character array to write to the text stream. If <code>buffer</code> is `null`, nothing is written.","nodes":[{"pos":[0,102],"content":"The character array to write to the text stream. If <code>buffer</code> is `null`, nothing is written.","nodes":[{"content":"The character array to write to the text stream.","pos":[0,48]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, nothing is written.","pos":[49,102],"source":" If <code>buffer</code> is `null`, nothing is written."}]}],"pos":[107166,107269],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[107340,107397],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[107562,107591],"yaml":true},{"content":"The text writer is currently in use by a previous write operation.","nodes":[{"pos":[0,66],"content":"The text writer is currently in use by a previous write operation.","nodes":[{"content":"The text writer is currently in use by a previous write operation.","pos":[0,66]}]}],"pos":[107701,107768],"yaml":true},{"content":"Writes a string followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,75],"content":"Writes a string followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes a string followed by a line terminator to the text string or stream.","pos":[0,75]}]}],"pos":[109345,109421],"yaml":true},{"content":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,101],"content":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload.","nodes":[{"content":"This overload is equivalent to the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> overload.","pos":[0,101],"source":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload."}]},{"pos":[108,192],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[199,364],"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.","nodes":[{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.","pos":[0,165],"source":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>."}]},{"pos":[371,466],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[109432,109907],"yaml":true,"extradata":"MT"},{"content":"The string to write. If <code>value</code> is `null`, only the line terminator is written.","nodes":[{"pos":[0,90],"content":"The string to write. If <code>value</code> is `null`, only the line terminator is written.","nodes":[{"content":"The string to write.","pos":[0,20]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, only the line terminator is written.","pos":[21,90],"source":" If <code>value</code> is `null`, only the line terminator is written."}]}],"pos":[110053,110144],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[110308,110365],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[110453,110474],"yaml":true},{"content":"Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object)\"></xref> method.","nodes":[{"pos":[0,195],"content":"Writes a formatted string and a new line to the text string or stream, using the same semantics as the <ph id=\"ph1\">&lt;xref href=\"System.String.Format(System.String,System.Object,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object)\"></xref> method."}],"pos":[112108,112304],"yaml":true},{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has two objects in its parameter list, the value of *index* must always be 0 or 1. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \n  \n The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".  \n  \n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \n  \n If a specified object is not referenced in the format string, it is ignored.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,263],"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,263],"nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.","pos":[0,146]},{"content":".NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[147,263]}]}]},{"pos":[273,413],"content":"For more information about the composite formatting feature, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."},{"pos":[423,675],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[685,967],"content":"For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","source":"For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"pos":[977,1126],"content":"For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","source":"For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."},{"pos":[1136,1246],"content":"For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[1253,1574],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[0,199],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the value of the corresponding object.","pos":[200,321]}]},{"pos":[1581,1623],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[1630,1667],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[1674,1939],"content":"Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]},{"content":"For more information about the composite formatting feature, including the syntax of a format item, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","pos":[86,265],"source":" For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."}]},{"pos":[1946,1953],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1954,1965],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2006,2011],"content":"index","nodes":[{"content":"index","pos":[0,5]}]},{"pos":[2012,2410],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has two objects in its parameter list, the value of *index* must always be 0 or 1. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[77,200],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>."},{"content":"Because this overload has two objects in its parameter list, the value of <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> must always be 0 or 1.","pos":[201,305],"source":" Because this overload has two objects in its parameter list, the value of *index* must always be 0 or 1."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[306,398],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[2415,2424],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[2425,2582],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[2587,2602],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[2603,3082],"content":"A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.","nodes":[{"content":"A standard or custom format string that is supported by the object to be formatted.","pos":[0,83]},{"content":"Possible values for <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> are the same as the values supported by the object's <ph id=\"ph1\">`ToString(string format)`</ph> method.","pos":[84,205],"source":" Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method."},{"content":"If <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> is not specified and the object to be formatted implements the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id=\"ph2\">`null`</ph> is passed as the value of the <ph id=\"ph3\">`format`</ph> parameter that is used as the <ph id=\"ph4\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.","pos":[206,479],"source":" If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string."}]},{"pos":[3090,3289],"content":"The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","nodes":[{"content":"The leading and trailing brace characters, \"{\" and \"}\", are required.","pos":[0,69]},{"content":"To specify a single literal brace character in <ph id=\"ph1\">`format`</ph>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","pos":[70,199],"source":" To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\"."}]},{"pos":[3296,3461],"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.","nodes":[{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.","pos":[0,165],"source":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>."}]},{"pos":[3468,3544],"content":"If a specified object is not referenced in the format string, it is ignored.","nodes":[{"content":"If a specified object is not referenced in the format string, it is ignored.","pos":[0,76]}]},{"pos":[3551,3635],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[3642,3737],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[112315,116097],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[116271,116298],"yaml":true},{"content":"The first object to format and write.","nodes":[{"pos":[0,37],"content":"The first object to format and write.","nodes":[{"content":"The first object to format and write.","pos":[0,37]}]}],"pos":[116358,116396],"yaml":true},{"content":"The second object to format and write.","nodes":[{"pos":[0,38],"content":"The second object to format and write.","nodes":[{"content":"The second object to format and write.","pos":[0,38]}]}],"pos":[116456,116495],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[116655,116686],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[116792,116849],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[116937,116958],"yaml":true},{"content":"<code>format</code> is not a valid composite format string.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.","source":"<code>format</code> is not a valid composite format string."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,235],"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).","pos":[0,158]}]}],"pos":[117048,117290],"yaml":true},{"content":"Writes a subarray of characters followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,91],"content":"Writes a subarray of characters followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes a subarray of characters followed by a line terminator to the text string or stream.","pos":[0,91]}]}],"pos":[118792,118884],"yaml":true},{"content":"This method will write `count` characters of data into this `TextWriter` from the `buffer` character array starting at position `index`.  \n  \n This overload is equivalent to calling the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> method followed by <xref:System.IO.TextWriter.WriteLine%2A> for each character in `buffer` between `index` and (`index` + `count`).  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,136],"content":"This method will write <ph id=\"ph1\">`count`</ph> characters of data into this <ph id=\"ph2\">`TextWriter`</ph> from the <ph id=\"ph3\">`buffer`</ph> character array starting at position <ph id=\"ph4\">`index`</ph>.","source":"This method will write `count` characters of data into this `TextWriter` from the `buffer` character array starting at position `index`."},{"pos":[143,374],"content":"This overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> method followed by <ph id=\"ph2\">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph> for each character in <ph id=\"ph3\">`buffer`</ph> between <ph id=\"ph4\">`index`</ph> and (<ph id=\"ph5\">`index`</ph><ph id=\"ph6\"> + </ph><ph id=\"ph7\">`count`</ph>).","source":"This overload is equivalent to calling the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> method followed by <xref:System.IO.TextWriter.WriteLine%2A> for each character in `buffer` between `index` and (`index` + `count`)."},{"pos":[381,465],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[472,567],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[118895,119471],"yaml":true,"extradata":"MT"},{"content":"The character array from which data is read.","nodes":[{"pos":[0,44],"content":"The character array from which data is read.","nodes":[{"content":"The character array from which data is read.","pos":[0,44]}]}],"pos":[119641,119686],"yaml":true},{"content":"The character position in <code>buffer</code> at which to start reading data.","nodes":[{"pos":[0,77],"content":"The character position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to start reading data.","source":"The character position in <code>buffer</code> at which to start reading data."}],"pos":[119746,119824],"yaml":true},{"content":"The maximum number of characters to write.","nodes":[{"pos":[0,42],"content":"The maximum number of characters to write.","nodes":[{"content":"The maximum number of characters to write.","pos":[0,42]}]}],"pos":[119884,119927],"yaml":true},{"content":"The buffer length minus <code>index</code> is less than <code>count</code>.","nodes":[{"pos":[0,75],"content":"The buffer length minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The buffer length minus <code>index</code> is less than <code>count</code>."}],"pos":[120079,120155],"yaml":true},{"content":"The <code>buffer</code> parameter is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>buffer</code> parameter is `null`."}],"pos":[120257,120302],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[120416,120470],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[120576,120633],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[120721,120742],"yaml":true},{"content":"Writes out a formatted string and a new line, using the same semantics as <xref href=\"System.String.Format(System.String,System.Object)\"></xref>.","nodes":[{"pos":[0,145],"content":"Writes out a formatted string and a new line, using the same semantics as <ph id=\"ph1\">&lt;xref href=\"System.String.Format(System.String,System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"Writes out a formatted string and a new line, using the same semantics as <xref href=\"System.String.Format(System.String,System.Object)\"></xref>."}],"pos":[122322,122468],"yaml":true},{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has an array in its parameter list, the value of *index* must always be less than the length of the array. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \n  \n The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".  \n  \n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \n  \n If a specified object is not referenced in the format string, it is ignored.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,263],"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,263],"nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.","pos":[0,146]},{"content":".NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[147,263]}]}]},{"pos":[273,413],"content":"For more information about the composite formatting feature, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."},{"pos":[423,675],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[685,967],"content":"For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","source":"For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"pos":[977,1126],"content":"For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","source":"For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."},{"pos":[1136,1246],"content":"For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[1253,1574],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[0,199],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the value of the corresponding object.","pos":[200,321]}]},{"pos":[1581,1623],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[1630,1667],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[1674,1939],"content":"Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]},{"content":"For more information about the composite formatting feature, including the syntax of a format item, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","pos":[86,265],"source":" For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."}]},{"pos":[1946,1953],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1954,1965],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2006,2011],"content":"index","nodes":[{"content":"index","pos":[0,5]}]},{"pos":[2012,2434],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has an array in its parameter list, the value of *index* must always be less than the length of the array. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[77,200],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>."},{"content":"Because this overload has an array in its parameter list, the value of <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> must always be less than the length of the array.","pos":[201,329],"source":" Because this overload has an array in its parameter list, the value of *index* must always be less than the length of the array."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[330,422],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[2439,2448],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[2449,2606],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[2611,2626],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[2627,3106],"content":"A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.","nodes":[{"content":"A standard or custom format string that is supported by the object to be formatted.","pos":[0,83]},{"content":"Possible values for <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> are the same as the values supported by the object's <ph id=\"ph1\">`ToString(string format)`</ph> method.","pos":[84,205],"source":" Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method."},{"content":"If <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> is not specified and the object to be formatted implements the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id=\"ph2\">`null`</ph> is passed as the value of the <ph id=\"ph3\">`format`</ph> parameter that is used as the <ph id=\"ph4\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.","pos":[206,479],"source":" If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string."}]},{"pos":[3114,3313],"content":"The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","nodes":[{"content":"The leading and trailing brace characters, \"{\" and \"}\", are required.","pos":[0,69]},{"content":"To specify a single literal brace character in <ph id=\"ph1\">`format`</ph>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","pos":[70,199],"source":" To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\"."}]},{"pos":[3320,3485],"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.","nodes":[{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.","pos":[0,165],"source":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>."}]},{"pos":[3492,3568],"content":"If a specified object is not referenced in the format string, it is ignored.","nodes":[{"content":"If a specified object is not referenced in the format string, it is ignored.","pos":[0,76]}]},{"pos":[3575,3659],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[3666,3761],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[122479,126285],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[126447,126474],"yaml":true},{"content":"An object array that contains zero or more objects to format and write.","nodes":[{"pos":[0,71],"content":"An object array that contains zero or more objects to format and write.","nodes":[{"content":"An object array that contains zero or more objects to format and write.","pos":[0,71]}]}],"pos":[126535,126607],"yaml":true},{"content":"A string or object is passed in as `null`.","nodes":[{"pos":[0,42],"content":"A string or object is passed in as <ph id=\"ph1\">`null`</ph>.","source":"A string or object is passed in as `null`."}],"pos":[126767,126810],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[126916,126973],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[127061,127082],"yaml":true},{"content":"<code>format</code> is not a valid composite format string.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>arg</code> array.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.","source":"<code>format</code> is not a valid composite format string."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,196],"content":"The index of a format item is less than 0 (zero), or greater than or equal to the length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arg</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","source":"The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>arg</code> array."}],"pos":[127172,127375],"yaml":true},{"content":"Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object)\"></xref> method.","nodes":[{"pos":[0,181],"content":"Writes a formatted string and a new line to the text string or stream, using the same semantics as the <ph id=\"ph1\">&lt;xref href=\"System.String.Format(System.String,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object)\"></xref> method."}],"pos":[128943,129125],"yaml":true},{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has only a single object in its parameter list, the value of *index* must always be 0. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \n  \n The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".  \n  \n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \n  \n If a specified object is not referenced in the format string, it is ignored.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,263],"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,263],"nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.","pos":[0,146]},{"content":".NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[147,263]}]}]},{"pos":[273,413],"content":"For more information about the composite formatting feature, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."},{"pos":[423,675],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[685,967],"content":"For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","source":"For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"pos":[977,1126],"content":"For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","source":"For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."},{"pos":[1136,1246],"content":"For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[1253,1574],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[0,199],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the value of the corresponding object.","pos":[200,321]}]},{"pos":[1581,1623],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[1630,1667],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[1674,1939],"content":"Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]},{"content":"For more information about the composite formatting feature, including the syntax of a format item, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","pos":[86,265],"source":" For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."}]},{"pos":[1946,1953],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1954,1965],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2006,2011],"content":"index","nodes":[{"content":"index","pos":[0,5]}]},{"pos":[2012,2414],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has only a single object in its parameter list, the value of *index* must always be 0. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[77,200],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>."},{"content":"Because this overload has only a single object in its parameter list, the value of <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> must always be 0.","pos":[201,309],"source":" Because this overload has only a single object in its parameter list, the value of *index* must always be 0."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[310,402],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[2419,2428],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[2429,2586],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[2591,2606],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[2607,3086],"content":"A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.","nodes":[{"content":"A standard or custom format string that is supported by the object to be formatted.","pos":[0,83]},{"content":"Possible values for <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> are the same as the values supported by the object's <ph id=\"ph1\">`ToString(string format)`</ph> method.","pos":[84,205],"source":" Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method."},{"content":"If <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> is not specified and the object to be formatted implements the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id=\"ph2\">`null`</ph> is passed as the value of the <ph id=\"ph3\">`format`</ph> parameter that is used as the <ph id=\"ph4\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.","pos":[206,479],"source":" If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string."}]},{"pos":[3094,3293],"content":"The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","nodes":[{"content":"The leading and trailing brace characters, \"{\" and \"}\", are required.","pos":[0,69]},{"content":"To specify a single literal brace character in <ph id=\"ph1\">`format`</ph>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","pos":[70,199],"source":" To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\"."}]},{"pos":[3300,3465],"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.","nodes":[{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.","pos":[0,165],"source":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>."}]},{"pos":[3472,3548],"content":"If a specified object is not referenced in the format string, it is ignored.","nodes":[{"content":"If a specified object is not referenced in the format string, it is ignored.","pos":[0,76]}]},{"pos":[3555,3639],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[3646,3741],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[129136,132922],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[133083,133110],"yaml":true},{"content":"The object to format and write.","nodes":[{"pos":[0,31],"content":"The object to format and write.","nodes":[{"content":"The object to format and write.","pos":[0,31]}]}],"pos":[133170,133202],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[133362,133393],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[133499,133556],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[133644,133665],"yaml":true},{"content":"<code>format</code> is not a valid composite format string.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.","source":"<code>format</code> is not a valid composite format string."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,235],"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).","pos":[0,158]}]}],"pos":[133755,133997],"yaml":true},{"content":"Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,120],"content":"Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.","pos":[0,120]}]}],"pos":[135379,135500],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,257],"content":"The text representation of the specified value is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,139],"source":"The text representation of the specified value is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[140,257],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[264,348],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[355,450],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[135511,135968],"yaml":true,"extradata":"MT"},{"content":"The 8-byte unsigned integer to write.","nodes":[{"pos":[0,37],"content":"The 8-byte unsigned integer to write.","nodes":[{"content":"The 8-byte unsigned integer to write.","pos":[0,37]}]}],"pos":[136158,136196],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[136360,136417],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[136505,136526],"yaml":true},{"content":"Writes out a formatted string and a new line, using the same semantics as <xref href=\"System.String.Format(System.String,System.Object)\"></xref>.","nodes":[{"pos":[0,145],"content":"Writes out a formatted string and a new line, using the same semantics as <ph id=\"ph1\">&lt;xref href=\"System.String.Format(System.String,System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"Writes out a formatted string and a new line, using the same semantics as <xref href=\"System.String.Format(System.String,System.Object)\"></xref>."}],"pos":[138279,138425],"yaml":true},{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has three objects in its parameter list, the value of *index* must always be 0, 1, or 2. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \n  \n The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".  \n  \n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \n  \n If a specified object is not referenced in the format string, it is ignored.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,263],"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,263],"nodes":[{"content":"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.","pos":[0,146]},{"content":".NET provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[147,263]}]}]},{"pos":[273,413],"content":"For more information about the composite formatting feature, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","source":"For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."},{"pos":[423,675],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[685,967],"content":"For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","source":"For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"pos":[977,1126],"content":"For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","source":"For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."},{"pos":[1136,1246],"content":"For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[1253,1574],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[0,199],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the value of the corresponding object.","pos":[200,321]}]},{"pos":[1581,1623],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[1630,1667],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[1674,1939],"content":"Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).","nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]},{"content":"For more information about the composite formatting feature, including the syntax of a format item, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","pos":[86,265],"source":" For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md)."}]},{"pos":[1946,1953],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1954,1965],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2006,2011],"content":"index","nodes":[{"content":"index","pos":[0,5]}]},{"pos":[2012,2416],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has three objects in its parameter list, the value of *index* must always be 0, 1, or 2. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[77,200],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>."},{"content":"Because this overload has three objects in its parameter list, the value of <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> must always be 0, 1, or 2.","pos":[201,311],"source":" Because this overload has three objects in its parameter list, the value of *index* must always be 0, 1, or 2."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[312,404],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[2421,2430],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[2431,2588],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[2593,2608],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[2609,3088],"content":"A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.","nodes":[{"content":"A standard or custom format string that is supported by the object to be formatted.","pos":[0,83]},{"content":"Possible values for <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> are the same as the values supported by the object's <ph id=\"ph1\">`ToString(string format)`</ph> method.","pos":[84,205],"source":" Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method."},{"content":"If <bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept> is not specified and the object to be formatted implements the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id=\"ph2\">`null`</ph> is passed as the value of the <ph id=\"ph3\">`format`</ph> parameter that is used as the <ph id=\"ph4\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.","pos":[206,479],"source":" If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string."}]},{"pos":[3096,3295],"content":"The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","nodes":[{"content":"The leading and trailing brace characters, \"{\" and \"}\", are required.","pos":[0,69]},{"content":"To specify a single literal brace character in <ph id=\"ph1\">`format`</ph>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".","pos":[70,199],"source":" To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\"."}]},{"pos":[3302,3467],"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.","nodes":[{"content":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.","pos":[0,165],"source":"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>."}]},{"pos":[3474,3550],"content":"If a specified object is not referenced in the format string, it is ignored.","nodes":[{"content":"If a specified object is not referenced in the format string, it is ignored.","pos":[0,76]}]},{"pos":[3557,3641],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[3648,3743],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[138436,142224],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[142411,142438],"yaml":true},{"content":"The first object to format and write.","nodes":[{"pos":[0,37],"content":"The first object to format and write.","nodes":[{"content":"The first object to format and write.","pos":[0,37]}]}],"pos":[142498,142536],"yaml":true},{"content":"The second object to format and write.","nodes":[{"pos":[0,38],"content":"The second object to format and write.","nodes":[{"content":"The second object to format and write.","pos":[0,38]}]}],"pos":[142596,142635],"yaml":true},{"content":"The third object to format and write.","nodes":[{"pos":[0,37],"content":"The third object to format and write.","nodes":[{"content":"The third object to format and write.","pos":[0,37]}]}],"pos":[142695,142733],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[142893,142924],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[143030,143087],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[143175,143196],"yaml":true},{"content":"<code>format</code> is not a valid composite format string.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.","source":"<code>format</code> is not a valid composite format string."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,237],"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).","pos":[0,160]}]}],"pos":[143286,143530],"yaml":true},{"content":"Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,119],"content":"Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.","pos":[0,119]}]}],"pos":[144912,145032],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,257],"content":"The text representation of the specified value is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,139],"source":"The text representation of the specified value is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[140,257],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[264,348],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[355,450],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[145043,145500],"yaml":true,"extradata":"MT"},{"content":"The 4-byte unsigned integer to write.","nodes":[{"pos":[0,37],"content":"The 4-byte unsigned integer to write.","nodes":[{"content":"The 4-byte unsigned integer to write.","pos":[0,37]}]}],"pos":[145689,145727],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[145891,145948],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[146036,146057],"yaml":true},{"content":"Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,123],"content":"Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.","pos":[0,123]}]}],"pos":[147612,147736],"yaml":true},{"content":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting. For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"pos":[0,213],"content":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting. For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[0,117],"source":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting."},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","pos":[118,213],"source":" For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}]},{"pos":[220,304],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]}],"pos":[147747,148056],"yaml":true,"extradata":"MT"},{"content":"The 4-byte floating-point value to write.","nodes":[{"pos":[0,41],"content":"The 4-byte floating-point value to write.","nodes":[{"content":"The 4-byte floating-point value to write.","pos":[0,41]}]}],"pos":[148201,148243],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[148407,148464],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[148552,148573],"yaml":true},{"content":"Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,123],"content":"Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.","pos":[0,123]}]}],"pos":[150075,150199],"yaml":true},{"content":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting. For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"pos":[0,213],"content":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting. For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[0,117],"source":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting."},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","pos":[118,213],"source":" For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}]},{"pos":[220,304],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]}],"pos":[150210,150519],"yaml":true,"extradata":"MT"},{"content":"The 8-byte floating-point value to write.","nodes":[{"pos":[0,41],"content":"The 8-byte floating-point value to write.","nodes":[{"content":"The 8-byte floating-point value to write.","pos":[0,41]}]}],"pos":[150665,150707],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[150871,150928],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[151016,151037],"yaml":true},{"content":"Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,118],"content":"Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.","pos":[0,118]}]}],"pos":[152533,152652],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,281],"content":"The text representation of the specified value is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,138],"source":"The text representation of the specified value is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[139,281],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[288,372],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[379,474],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[152663,153144],"yaml":true,"extradata":"MT"},{"content":"The 8-byte signed integer to write.","nodes":[{"pos":[0,35],"content":"The 8-byte signed integer to write.","nodes":[{"content":"The 8-byte signed integer to write.","pos":[0,35]}]}],"pos":[153287,153323],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[153487,153544],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[153632,153653],"yaml":true},{"content":"Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,117],"content":"Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.","pos":[0,117]}]}],"pos":[155149,155267],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,281],"content":"The text representation of the specified value is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,138],"source":"The text representation of the specified value is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[139,281],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[288,372],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[379,474],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[155278,155759],"yaml":true,"extradata":"MT"},{"content":"The 4-byte signed integer to write.","nodes":[{"pos":[0,35],"content":"The 4-byte signed integer to write.","nodes":[{"content":"The 4-byte signed integer to write.","pos":[0,35]}]}],"pos":[155901,155937],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[156101,156158],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[156246,156267],"yaml":true},{"content":"Writes the text representation of a decimal value followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,109],"content":"Writes the text representation of a decimal value followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes the text representation of a decimal value followed by a line terminator to the text string or stream.","pos":[0,109]}]}],"pos":[157775,157885],"yaml":true},{"content":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting. For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"pos":[0,213],"content":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting. For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[0,117],"source":"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting."},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","pos":[118,213],"source":" For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}]},{"pos":[220,304],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]}],"pos":[157896,158205],"yaml":true,"extradata":"MT"},{"content":"The decimal value to write.","nodes":[{"pos":[0,27],"content":"The decimal value to write.","nodes":[{"content":"The decimal value to write.","pos":[0,27]}]}],"pos":[158353,158381],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[158545,158602],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[158690,158711],"yaml":true},{"content":"Writes an array of characters followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,89],"content":"Writes an array of characters followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes an array of characters followed by a line terminator to the text string or stream.","pos":[0,89]}]}],"pos":[160213,160303],"yaml":true},{"content":"All the characters in `buffer` are written to the underlying stream. If the character array is `null`, only the line terminator is written.  \n  \n This overload is equivalent to <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> followed by <xref:System.IO.TextWriter.WriteLine> .  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,139],"content":"All the characters in `buffer` are written to the underlying stream. If the character array is `null`, only the line terminator is written.","nodes":[{"content":"All the characters in <ph id=\"ph1\">`buffer`</ph> are written to the underlying stream.","pos":[0,68],"source":"All the characters in `buffer` are written to the underlying stream."},{"content":"If the character array is <ph id=\"ph1\">`null`</ph>, only the line terminator is written.","pos":[69,139],"source":" If the character array is `null`, only the line terminator is written."}]},{"pos":[146,285],"content":"This overload is equivalent to <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> followed by <xref:System.IO.TextWriter.WriteLine> .","nodes":[{"content":"This overload is equivalent to <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> followed by <ph id=\"ph2\">&lt;xref:System.IO.TextWriter.WriteLine&gt;</ph> .","pos":[0,139],"source":"This overload is equivalent to <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> followed by <xref:System.IO.TextWriter.WriteLine> ."}]},{"pos":[292,376],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[383,478],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[160314,160801],"yaml":true,"extradata":"MT"},{"content":"The character array from which data is read.","nodes":[{"pos":[0,44],"content":"The character array from which data is read.","nodes":[{"content":"The character array from which data is read.","pos":[0,44]}]}],"pos":[160949,160994],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[161158,161215],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[161303,161324],"yaml":true},{"content":"Writes a character followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,78],"content":"Writes a character followed by a line terminator to the text string or stream.","nodes":[{"content":"Writes a character followed by a line terminator to the text string or stream.","pos":[0,78]}]}],"pos":[162814,162893],"yaml":true},{"content":"This overload is equivalent to <xref:System.IO.TextWriter.Write%28System.Char%29> followed by <xref:System.IO.TextWriter.WriteLine> .  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,133],"content":"This overload is equivalent to <xref:System.IO.TextWriter.Write%28System.Char%29> followed by <xref:System.IO.TextWriter.WriteLine> .","nodes":[{"content":"This overload is equivalent to <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%28System.Char%29&gt;</ph> followed by <ph id=\"ph2\">&lt;xref:System.IO.TextWriter.WriteLine&gt;</ph> .","pos":[0,133],"source":"This overload is equivalent to <xref:System.IO.TextWriter.Write%28System.Char%29> followed by <xref:System.IO.TextWriter.WriteLine> ."}]},{"pos":[140,224],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[231,326],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[162904,163237],"yaml":true,"extradata":"MT"},{"content":"The character to write to the text stream.","nodes":[{"pos":[0,42],"content":"The character to write to the text stream.","nodes":[{"content":"The character to write to the text stream.","pos":[0,42]}]}],"pos":[163379,163422],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[163586,163643],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[163731,163752],"yaml":true},{"content":"Writes the text representation of a `Boolean` value followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,111],"content":"Writes the text representation of a <ph id=\"ph1\">`Boolean`</ph> value followed by a line terminator to the text string or stream.","source":"Writes the text representation of a `Boolean` value followed by a line terminator to the text string or stream."}],"pos":[165260,165372],"yaml":true},{"content":"The text representation of the specified value is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method.  \n  \n This method outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,140],"content":"The text representation of the specified value is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method.","nodes":[{"content":"The text representation of the specified value is produced by calling the <ph id=\"ph1\">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,140],"source":"The text representation of the specified value is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method."}]},{"pos":[147,294],"content":"This method outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.","nodes":[{"content":"This method outputs either <ph id=\"ph1\">&lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;</ph>.","pos":[0,147],"source":"This method outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>."}]},{"pos":[301,385],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[392,487],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[165383,165879],"yaml":true,"extradata":"MT"},{"content":"The `Boolean` value to write.","nodes":[{"pos":[0,29],"content":"The <ph id=\"ph1\">`Boolean`</ph> value to write.","source":"The `Boolean` value to write."}],"pos":[166024,166054],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[166218,166275],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[166363,166384],"yaml":true},{"content":"Writes a line terminator to the text string or stream.","nodes":[{"pos":[0,54],"content":"Writes a line terminator to the text string or stream.","nodes":[{"content":"Writes a line terminator to the text string or stream.","pos":[0,54]}]}],"pos":[167823,167878],"yaml":true},{"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,84],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[91,186],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[167889,168080],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[168320,168377],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[168465,168486],"yaml":true},{"content":"Writes the text representation of an object by calling the `ToString` method on that object, followed by a line terminator to the text string or stream.","nodes":[{"pos":[0,152],"content":"Writes the text representation of an object by calling the <ph id=\"ph1\">`ToString`</ph> method on that object, followed by a line terminator to the text string or stream.","source":"Writes the text representation of an object by calling the `ToString` method on that object, followed by a line terminator to the text string or stream."}],"pos":[169988,170141],"yaml":true},{"content":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.String%2CSystem.Object%29> overload. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.  \n  \n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,231],"content":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.String%2CSystem.Object%29> overload. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.","nodes":[{"content":"This overload is equivalent to the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.Write%28System.String%2CSystem.Object%29&gt;</ph> overload.","pos":[0,113],"source":"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.String%2CSystem.Object%29> overload."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id=\"ph2\">`null`</ph>, specifies the culture-specific formatting.","pos":[114,231],"source":" The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting."}]},{"pos":[238,322],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[329,424],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[170152,170583],"yaml":true,"extradata":"MT"},{"content":"The object to write. If <code>value</code> is `null`, only the line terminator is written.","nodes":[{"pos":[0,90],"content":"The object to write. If <code>value</code> is `null`, only the line terminator is written.","nodes":[{"content":"The object to write.","pos":[0,20]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, only the line terminator is written.","pos":[21,90],"source":" If <code>value</code> is `null`, only the line terminator is written."}]}],"pos":[170729,170820],"yaml":true},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextWriter\"></xref> is closed."}],"pos":[170984,171041],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[171129,171150],"yaml":true},{"content":"Writes a string followed by a line terminator asynchronously to the text string or stream.","nodes":[{"pos":[0,90],"content":"Writes a string followed by a line terminator asynchronously to the text string or stream.","nodes":[{"content":"Writes a string followed by a line terminator asynchronously to the text string or stream.","pos":[0,90]}]}],"pos":[172682,172773],"yaml":true},{"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,84],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[91,372],"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.","pos":[0,281],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.WriteLineAsync%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,281],"source":" For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method."}]}]}],"pos":[172784,173161],"yaml":true,"extradata":"MT"},{"content":"The string to write. If the value is `null`, only a line terminator is written.","nodes":[{"pos":[0,79],"content":"The string to write. If the value is `null`, only a line terminator is written.","nodes":[{"content":"The string to write.","pos":[0,20]},{"content":"If the value is <ph id=\"ph1\">`null`</ph>, only a line terminator is written.","pos":[21,79],"source":" If the value is `null`, only a line terminator is written."}]}],"pos":[173402,173482],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[173553,173610],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[173779,173808],"yaml":true},{"content":"The text writer is currently in use by a previous write operation.","nodes":[{"pos":[0,66],"content":"The text writer is currently in use by a previous write operation.","nodes":[{"content":"The text writer is currently in use by a previous write operation.","pos":[0,66]}]}],"pos":[173918,173985],"yaml":true},{"content":"Writes a line terminator asynchronously to the text string or stream.","nodes":[{"pos":[0,69],"content":"Writes a line terminator asynchronously to the text string or stream.","nodes":[{"content":"Writes a line terminator asynchronously to the text string or stream.","pos":[0,69]}]}],"pos":[175529,175599],"yaml":true},{"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"pos":[0,84],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]}],"pos":[175610,175695],"yaml":true,"extradata":"MT"},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[175937,175994],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[176163,176192],"yaml":true},{"content":"The text writer is currently in use by a previous write operation.","nodes":[{"pos":[0,66],"content":"The text writer is currently in use by a previous write operation.","nodes":[{"content":"The text writer is currently in use by a previous write operation.","pos":[0,66]}]}],"pos":[176302,176369],"yaml":true},{"content":"Writes a character followed by a line terminator asynchronously to the text string or stream.","nodes":[{"pos":[0,93],"content":"Writes a character followed by a line terminator asynchronously to the text string or stream.","nodes":[{"content":"Writes a character followed by a line terminator asynchronously to the text string or stream.","pos":[0,93]}]}],"pos":[177964,178058],"yaml":true},{"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,84],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[91,372],"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.","pos":[0,281],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.WriteLineAsync%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,281],"source":" For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method."}]}]}],"pos":[178069,178446],"yaml":true,"extradata":"MT"},{"content":"The character to write to the text stream.","nodes":[{"pos":[0,42],"content":"The character to write to the text stream.","nodes":[{"content":"The character to write to the text stream.","pos":[0,42]}]}],"pos":[178683,178726],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[178797,178854],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[179023,179052],"yaml":true},{"content":"The text writer is currently in use by a previous write operation.","nodes":[{"pos":[0,66],"content":"The text writer is currently in use by a previous write operation.","nodes":[{"content":"The text writer is currently in use by a previous write operation.","pos":[0,66]}]}],"pos":[179162,179229],"yaml":true},{"content":"Writes an array of characters followed by a line terminator asynchronously to the text string or stream.","nodes":[{"pos":[0,104],"content":"Writes an array of characters followed by a line terminator asynchronously to the text string or stream.","nodes":[{"content":"Writes an array of characters followed by a line terminator asynchronously to the text string or stream.","pos":[0,104]}]}],"pos":[180836,180941],"yaml":true},{"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"pos":[0,84],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]}],"pos":[180952,181037],"yaml":true,"extradata":"MT"},{"content":"The character array to write to the text stream. If the character array is `null`, only the line terminator is written.","nodes":[{"pos":[0,119],"content":"The character array to write to the text stream. If the character array is `null`, only the line terminator is written.","nodes":[{"content":"The character array to write to the text stream.","pos":[0,48]},{"content":"If the character array is <ph id=\"ph1\">`null`</ph>, only the line terminator is written.","pos":[49,119],"source":" If the character array is `null`, only the line terminator is written."}]}],"pos":[181272,181392],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[181463,181520],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[181689,181718],"yaml":true},{"content":"The text writer is currently in use by a previous write operation.","nodes":[{"pos":[0,66],"content":"The text writer is currently in use by a previous write operation.","nodes":[{"content":"The text writer is currently in use by a previous write operation.","pos":[0,66]}]}],"pos":[181828,181895],"yaml":true},{"content":"Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.","nodes":[{"pos":[0,106],"content":"Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.","nodes":[{"content":"Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.","pos":[0,106]}]}],"pos":[183622,183729],"yaml":true},{"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \n  \n The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,84],"content":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.","nodes":[{"content":"The line terminator is defined by the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.","pos":[0,84],"source":"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field."}]},{"pos":[91,372],"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.","pos":[0,281],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextWriter> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter.WriteLineAsync%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,281],"source":" For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method."}]}]}],"pos":[183740,184117],"yaml":true,"extradata":"MT"},{"content":"The character array to write data from.","nodes":[{"pos":[0,39],"content":"The character array to write data from.","nodes":[{"content":"The character array to write data from.","pos":[0,39]}]}],"pos":[184382,184422],"yaml":true},{"content":"The character position in the buffer at which to start retrieving data.","nodes":[{"pos":[0,71],"content":"The character position in the buffer at which to start retrieving data.","nodes":[{"content":"The character position in the buffer at which to start retrieving data.","pos":[0,71]}]}],"pos":[184482,184554],"yaml":true},{"content":"The number of characters to write.","nodes":[{"pos":[0,34],"content":"The number of characters to write.","nodes":[{"content":"The number of characters to write.","pos":[0,34]}]}],"pos":[184614,184649],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[184720,184777],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[184942,184973],"yaml":true},{"content":"The <code>index</code> plus <code>count</code> is greater than the buffer length.","nodes":[{"pos":[0,81],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> plus <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than the buffer length.","source":"The <code>index</code> plus <code>count</code> is greater than the buffer length."}],"pos":[185067,185149],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[185263,185317],"yaml":true},{"content":"The text writer is disposed.","nodes":[{"pos":[0,28],"content":"The text writer is disposed.","nodes":[{"content":"The text writer is disposed.","pos":[0,28]}]}],"pos":[185423,185452],"yaml":true},{"content":"The text writer is currently in use by a previous write operation.","nodes":[{"pos":[0,66],"content":"The text writer is currently in use by a previous write operation.","nodes":[{"content":"The text writer is currently in use by a previous write operation.","pos":[0,66]}]}],"pos":[185562,185629],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.TextWriter\n  commentId: T:System.IO.TextWriter\n  id: TextWriter\n  children:\n  - System.IO.TextWriter.#ctor\n  - System.IO.TextWriter.#ctor(System.IFormatProvider)\n  - System.IO.TextWriter.Close\n  - System.IO.TextWriter.CoreNewLine\n  - System.IO.TextWriter.Dispose\n  - System.IO.TextWriter.Dispose(System.Boolean)\n  - System.IO.TextWriter.Encoding\n  - System.IO.TextWriter.Flush\n  - System.IO.TextWriter.FlushAsync\n  - System.IO.TextWriter.FormatProvider\n  - System.IO.TextWriter.NewLine\n  - System.IO.TextWriter.Null\n  - System.IO.TextWriter.Synchronized(System.IO.TextWriter)\n  - System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)\n  - System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextWriter.Write(System.String,System.Object[])\n  - System.IO.TextWriter.Write(System.String,System.Object)\n  - System.IO.TextWriter.Write(System.UInt64)\n  - System.IO.TextWriter.Write(System.UInt32)\n  - System.IO.TextWriter.Write(System.String)\n  - System.IO.TextWriter.Write(System.Single)\n  - System.IO.TextWriter.Write(System.String,System.Object,System.Object)\n  - System.IO.TextWriter.Write(System.Int64)\n  - System.IO.TextWriter.Write(System.Int32)\n  - System.IO.TextWriter.Write(System.Double)\n  - System.IO.TextWriter.Write(System.Decimal)\n  - System.IO.TextWriter.Write(System.Char[])\n  - System.IO.TextWriter.Write(System.Char)\n  - System.IO.TextWriter.Write(System.Object)\n  - System.IO.TextWriter.Write(System.Boolean)\n  - System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextWriter.WriteAsync(System.String)\n  - System.IO.TextWriter.WriteAsync(System.Char)\n  - System.IO.TextWriter.WriteAsync(System.Char[])\n  - System.IO.TextWriter.WriteLine(System.String)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)\n  - System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object[])\n  - System.IO.TextWriter.WriteLine(System.String,System.Object)\n  - System.IO.TextWriter.WriteLine(System.UInt64)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)\n  - System.IO.TextWriter.WriteLine(System.UInt32)\n  - System.IO.TextWriter.WriteLine(System.Single)\n  - System.IO.TextWriter.WriteLine(System.Double)\n  - System.IO.TextWriter.WriteLine(System.Int64)\n  - System.IO.TextWriter.WriteLine(System.Int32)\n  - System.IO.TextWriter.WriteLine(System.Decimal)\n  - System.IO.TextWriter.WriteLine(System.Char[])\n  - System.IO.TextWriter.WriteLine(System.Char)\n  - System.IO.TextWriter.WriteLine(System.Boolean)\n  - System.IO.TextWriter.WriteLine\n  - System.IO.TextWriter.WriteLine(System.Object)\n  - System.IO.TextWriter.WriteLineAsync(System.String)\n  - System.IO.TextWriter.WriteLineAsync\n  - System.IO.TextWriter.WriteLineAsync(System.Char)\n  - System.IO.TextWriter.WriteLineAsync(System.Char[])\n  - System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n  type: Class\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Represents a writer that can write a sequential series of characters. This class is abstract.\n  remarks: \"<xref:System.IO.TextWriter> is the abstract base class of <xref:System.IO.StreamWriter> and <xref:System.IO.StringWriter>, which write characters to streams and strings, respectively. Create an instance of <xref:System.IO.TextWriter> to write an object to a string, write strings to a file, or to serialize XML. You can also use an instance of <xref:System.IO.TextWriter> to write text to a custom backing store using the same APIs you would use for a string or a stream, or to add support for text formatting.  \\n  \\n All the `Write` methods of <xref:System.IO.TextWriter> having primitive data types as parameters write out the values as strings.  \\n  \\n By default, a <xref:System.IO.TextWriter> is not thread safe. See <xref:System.IO.TextWriter.Synchronized%2A?displayProperty=fullName> for a thread-safe wrapper.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IO.TextWriter.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see Dispose and the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. The <xref:System.IO.StreamWriter> class derives from <xref:System.IO.TextWriter> and provides implementations of the members for writing to a stream. The following example shows how to write two lines that consist of string values to a text file by using the <xref:System.IO.StreamWriter.WriteLineAsync%28System.String%29> method.  \\n  \\n Override Dispose in a derived class to provide  \\n  \\n [!code-csharp[System.IO.StreamWriter#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example23.cs#23)]\\n [!code-vb[System.IO.StreamWriter#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example23.vb#23)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class TextWriter : MarshalByRefObject, IDisposable\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.CodeDom.Compiler.IndentedTextWriter\n  - System.IO.StreamWriter\n  - System.IO.StringWriter\n  - System.Web.HttpWriter\n  - System.Web.UI.HtmlTextWriter\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.#ctor\n  commentId: M:System.IO.TextWriter.#ctor\n  id: '#ctor'\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: TextWriter()\n  nameWithType: TextWriter.TextWriter()\n  fullName: TextWriter.TextWriter()\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.TextWriter\"></xref> class.\n  remarks: \"Use this constructor overload when you do not want to provide a value for the <xref:System.IO.TextWriter.FormatProvider%2A> property. When the <xref:System.IO.TextWriter.FormatProvider%2A> property is `null`, the culture of the current thread is used for formatting.  \\n  \\n Use this constructor for derived classes.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: protected TextWriter ();\n    parameters: []\n  overload: System.IO.TextWriter.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.#ctor(System.IFormatProvider)\n  commentId: M:System.IO.TextWriter.#ctor(System.IFormatProvider)\n  id: '#ctor(System.IFormatProvider)'\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: TextWriter(IFormatProvider)\n  nameWithType: TextWriter.TextWriter(IFormatProvider)\n  fullName: TextWriter.TextWriter(IFormatProvider)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.TextWriter\"></xref> class with the specified format provider.\n  remarks: \"Use this constructor overload to provide a value for the <xref:System.IO.TextWriter.FormatProvider%2A> property. The value of the <xref:System.IO.TextWriter.FormatProvider%2A> property specifies the culture-specific formatting that is used when you call the <xref:System.IO.TextWriter.Write%2A> and <xref:System.IO.TextWriter.WriteLine%2A> methods. If you do not want to provide a format provider, you create an instance by using the <xref:System.IO.TextWriter.%23ctor> constructor, which sets the <xref:System.IO.TextWriter.FormatProvider%2A> property to `null`. When the <xref:System.IO.TextWriter.FormatProvider%2A> property is `null`, the culture of the current thread is used for formatting.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: protected TextWriter (IFormatProvider formatProvider);\n    parameters:\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: An <xref href=\"System.IFormatProvider\"></xref> object that controls formatting.\n  overload: System.IO.TextWriter.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Close\n  commentId: M:System.IO.TextWriter.Close\n  id: Close\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: TextWriter.Close()\n  fullName: TextWriter.Close()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Closes the current writer and releases any system resources associated with the writer.\n  remarks: \"This implementation of `Close` calls the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method and passes it a `true` value.  \\n  \\n Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.TextWriter.Flush%2A> or `Close`. Setting the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.  \\n  \\n> [!NOTE]\\n>  In derived classes, do not override the <xref:System.IO.TextWriter.Close%2A> method. Instead, override the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources.\"\n  syntax:\n    content: public virtual void Close ();\n    parameters: []\n  overload: System.IO.TextWriter.Close*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.CoreNewLine\n  commentId: F:System.IO.TextWriter.CoreNewLine\n  id: CoreNewLine\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: CoreNewLine\n  nameWithType: TextWriter.CoreNewLine\n  fullName: TextWriter.CoreNewLine\n  type: Field\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Stores the newline characters used for this `TextWriter`.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\n  syntax:\n    content: protected char[] CoreNewLine;\n    return:\n      type: System.Char[]\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Dispose\n  commentId: M:System.IO.TextWriter.Dispose\n  id: Dispose\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: TextWriter.Dispose()\n  fullName: TextWriter.Dispose()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Releases all resources used by the <xref href=\"System.IO.TextWriter\"></xref> object.\n  remarks: \"Call <xref:System.IO.TextWriter.Dispose%2A> when you are finished using the <xref:System.IO.TextWriter>. The <xref:System.IO.TextWriter.Dispose%2A> method leaves the <xref:System.IO.TextWriter> in an unusable state. After calling <xref:System.IO.TextWriter.Dispose%2A>, you must release all references to the <xref:System.IO.TextWriter> so the garbage collector can reclaim the memory that the <xref:System.IO.TextWriter> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n **Note** Always call <xref:System.IO.TextWriter.Dispose%2A> before you release your last reference to the <xref:System.IO.TextWriter>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextWriter> object's <xref:System.Object.Finalize%2A> method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.IO.TextWriter.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Dispose(System.Boolean)\n  commentId: M:System.IO.TextWriter.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: TextWriter.Dispose(Boolean)\n  fullName: TextWriter.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.TextWriter\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by `Dispose` and <xref:System.Object.Finalize%2A>. By default, this method specifies the `disposing` parameter as `true`. <xref:System.Object.Finalize%2A> specifies the `disposing` parameter as `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.TextWriter> references. This method invokes the `Dispose` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.IO.TextWriter.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Encoding\n  commentId: P:System.IO.TextWriter.Encoding\n  id: Encoding\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Encoding\n  nameWithType: TextWriter.Encoding\n  fullName: TextWriter.Encoding\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: When overridden in a derived class, returns the character encoding in which the output is written.\n  remarks: \"This property is necessary for some XML scenarios where a header must be written containing the encoding used by the `TextWriter`. This enables the XML code to consume an arbitrary `TextWriter` and generate the correct XML header.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public abstract System.Text.Encoding Encoding { get; }\n    return:\n      type: System.Text.Encoding\n      description: The character encoding in which the output is written.\n  overload: System.IO.TextWriter.Encoding*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Flush\n  commentId: M:System.IO.TextWriter.Flush\n  id: Flush\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: TextWriter.Flush()\n  fullName: TextWriter.Flush()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.\n  remarks: \"This default method does nothing, but derived classes can override the method to provide the appropriate functionality.  \\n  \\n Flushing the stream will not flush its underlying encoder unless you explicitly call `Flush` or <xref:System.IO.TextWriter.Close%2A>. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.\"\n  syntax:\n    content: public virtual void Flush ();\n    parameters: []\n  overload: System.IO.TextWriter.Flush*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.FlushAsync\n  commentId: M:System.IO.TextWriter.FlushAsync\n  id: FlushAsync\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: FlushAsync()\n  nameWithType: TextWriter.FlushAsync()\n  fullName: TextWriter.FlushAsync()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task FlushAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous flush operation.\n  overload: System.IO.TextWriter.FlushAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.FormatProvider\n  commentId: P:System.IO.TextWriter.FormatProvider\n  id: FormatProvider\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: FormatProvider\n  nameWithType: TextWriter.FormatProvider\n  fullName: TextWriter.FormatProvider\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Gets an object that controls formatting.\n  remarks: \"The value of the <xref:System.IO.TextWriter.FormatProvider%2A> property specifies the culture-specific formatting that is used when you call the <xref:System.IO.TextWriter.Write%2A> and <xref:System.IO.TextWriter.WriteLine%2A> methods. If you do not want to provide a format provider, you create an instance by using the <xref:System.IO.TextWriter.%23ctor> constructor, which sets the <xref:System.IO.TextWriter.FormatProvider%2A> property to `null`. When the <xref:System.IO.TextWriter.FormatProvider%2A> property contains `null`, the culture of the current thread is used for formatting.  \\n  \\n For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual IFormatProvider FormatProvider { get; }\n    return:\n      type: System.IFormatProvider\n      description: An <xref href=\"System.IFormatProvider\"></xref> object for a specific culture, or the formatting of the current culture if no other culture is specified.\n  overload: System.IO.TextWriter.FormatProvider*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.NewLine\n  commentId: P:System.IO.TextWriter.NewLine\n  id: NewLine\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: NewLine\n  nameWithType: TextWriter.NewLine\n  fullName: TextWriter.NewLine\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Gets or sets the line terminator string used by the current `TextWriter`.\n  remarks: \"The default line terminator string is a carriage return followed by a line feed (\\\"\\\\r\\\\n\\\").  \\n  \\n The line terminator string is written to the text stream whenever one of the `WriteLine` methods is called. In order for text written by the `TextWriter` to be readable by a <xref:System.IO.TextReader>, only \\\"\\\\n\\\" or \\\"\\\\r\\\\n\\\" should be used as terminator strings. If `NewLine` is set to `null`, the default newline character is used instead.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual string NewLine { get; set; }\n    return:\n      type: System.String\n      description: The line terminator string for the current `TextWriter`.\n  overload: System.IO.TextWriter.NewLine*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Null\n  commentId: F:System.IO.TextWriter.Null\n  id: \"Null\"\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: \"Null\"\n  nameWithType: TextWriter.Null\n  fullName: TextWriter.Null\n  type: Field\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Provides a `TextWriter` with no backing store that can be written to, but not read from.\n  remarks: \"Use `Null` to redirect output to a stream that will not consume any operating system resources.  \\n  \\n When the <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName> methods are invoked on `Null`, the call simply returns, and no data is actually written to any backing store.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public static readonly System.IO.TextWriter Null;\n    return:\n      type: System.IO.TextWriter\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Synchronized(System.IO.TextWriter)\n  commentId: M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)\n  id: Synchronized(System.IO.TextWriter)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Synchronized(TextWriter)\n  nameWithType: TextWriter.Synchronized(TextWriter)\n  fullName: TextWriter.Synchronized(TextWriter)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Creates a thread-safe wrapper around the specified `TextWriter`.\n  remarks: \"All write operations to the returned wrapper will be thread safe. You call this method to ensure that only one thread at a time can execute the methods on the <xref:System.IO.TextWriter> instance that is returned. For more information about synchronization and threading, see [Synchronizing Data for Multithreading](~/docs/standard/threading/synchronizing-data-for-multithreading.md).  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public static System.IO.TextWriter Synchronized (System.IO.TextWriter writer);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The `TextWriter` to synchronize.\n    return:\n      type: System.IO.TextWriter\n      description: A thread-safe wrapper.\n  overload: System.IO.TextWriter.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>writer</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)\n  id: Write(System.String,System.Object,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(String, Object, Object, Object)\n  nameWithType: TextWriter.Write(String, Object, Object, Object)\n  fullName: TextWriter.Write(String, Object, Object, Object)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object,System.Object)\"></xref> method.\n  remarks: \"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has three objects in its parameter list, the value of *index* must always be 0, 1, or 2. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \\n  \\n The leading and trailing brace characters, \\\"{\\\" and \\\"}\\\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \\\"{{\\\" or \\\"}}\\\".  \\n  \\n This method does not search the specified string  for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \\n  \\n If a specified object is not referenced in the format string, it is ignored.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (string format, object arg0, object arg1, object arg2);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The first object to format and write.\n    - id: arg1\n      type: System.Object\n      description: The second object to format and write.\n    - id: arg2\n      type: System.Object\n      description: The third object to format and write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is not a valid composite format string.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)\n  id: Write(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Char[], Int32, Int32)\n  nameWithType: TextWriter.Write(Char[], Int32, Int32)\n  fullName: TextWriter.Write(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a subarray of characters to the text string or stream.\n  remarks: \"This method will write `count` characters of data into this `TextWriter` from the `buffer` character array starting at position `index`.  \\n  \\n This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload for each character in `buffer` between `index` and (`index` + `count`).  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write data from.\n    - id: index\n      type: System.Int32\n      description: The character position in the buffer at which to start retrieving data.\n    - id: count\n      type: System.Int32\n      description: The number of characters to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The buffer length minus <code>index</code> is less than <code>count</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.String,System.Object[])\n  commentId: M:System.IO.TextWriter.Write(System.String,System.Object[])\n  id: Write(System.String,System.Object[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(String, Object[])\n  nameWithType: TextWriter.Write(String, Object[])\n  fullName: TextWriter.Write(String, Object[])\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object[])\"></xref> method.\n  remarks: \"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has an array in its parameter list, the value of *index* must always be less than the length of the array. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \\n  \\n The leading and trailing brace characters, \\\"{\\\" and \\\"}\\\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \\\"{{\\\" or \\\"}}\\\".  \\n  \\n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \\n  \\n If a specified object is not referenced in the format string, it is ignored.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (string format, object[] arg);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg\n      type: System.Object[]\n      description: An object array that contains zero or more objects to format and write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> or <code>arg</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is not a valid composite format string.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>arg</code> array.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.String,System.Object)\n  commentId: M:System.IO.TextWriter.Write(System.String,System.Object)\n  id: Write(System.String,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(String, Object)\n  nameWithType: TextWriter.Write(String, Object)\n  fullName: TextWriter.Write(String, Object)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object)\"></xref> method.\n  remarks: \"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has only a single object in its parameter list, the value of *index* must always be 0. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \\n  \\n The leading and trailing brace characters, \\\"{\\\" and \\\"}\\\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \\\"{{\\\" or \\\"}}\\\".  \\n  \\n . This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \\n  \\n If a specified object is not referenced in the format string, it is ignored.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (string format, object arg0);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The object to format and write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is not a valid composite format string.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.UInt64)\n  commentId: M:System.IO.TextWriter.Write(System.UInt64)\n  id: Write(System.UInt64)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(UInt64)\n  nameWithType: TextWriter.Write(UInt64)\n  fullName: TextWriter.Write(UInt64)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of an 8-byte unsigned integer to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public virtual void Write (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 8-byte unsigned integer to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.UInt32)\n  commentId: M:System.IO.TextWriter.Write(System.UInt32)\n  id: Write(System.UInt32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(UInt32)\n  nameWithType: TextWriter.Write(UInt32)\n  fullName: TextWriter.Write(UInt32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a 4-byte unsigned integer to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public virtual void Write (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 4-byte unsigned integer to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.String)\n  commentId: M:System.IO.TextWriter.Write(System.String)\n  id: Write(System.String)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: TextWriter.Write(String)\n  fullName: TextWriter.Write(String)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a string to the text string or stream.\n  remarks: \"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload.  \\n  \\n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \\n  \\n If `value` is `null`, nothing is written to the text stream.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Single)\n  commentId: M:System.IO.TextWriter.Write(System.Single)\n  id: Write(System.Single)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Single)\n  nameWithType: TextWriter.Write(Single)\n  fullName: TextWriter.Write(Single)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a 4-byte floating-point value to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The 4-byte floating-point value to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)\n  commentId: M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)\n  id: Write(System.String,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(String, Object, Object)\n  nameWithType: TextWriter.Write(String, Object, Object)\n  fullName: TextWriter.Write(String, Object, Object)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object)\"></xref> method.\n  remarks: \"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has two objects in its parameter list, the value of *index* must always be 0 or 1. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \\n  \\n The leading and trailing brace characters, \\\"{\\\" and \\\"}\\\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \\\"{{\\\" or \\\"}}\\\".  \\n  \\n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>.  \\n  \\n If a specified object is not referenced in the format string, it is ignored.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (string format, object arg0, object arg1);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The first object to format and write.\n    - id: arg1\n      type: System.Object\n      description: The second object to format and write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is not a valid composite format string.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Int64)\n  commentId: M:System.IO.TextWriter.Write(System.Int64)\n  id: Write(System.Int64)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Int64)\n  nameWithType: TextWriter.Write(Int64)\n  fullName: TextWriter.Write(Int64)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of an 8-byte signed integer to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \\n  \\n [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)\"\n  syntax:\n    content: public virtual void Write (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 8-byte signed integer to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Int32)\n  commentId: M:System.IO.TextWriter.Write(System.Int32)\n  id: Write(System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Int32)\n  nameWithType: TextWriter.Write(Int32)\n  fullName: TextWriter.Write(Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a 4-byte signed integer to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 4-byte signed integer to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Double)\n  commentId: M:System.IO.TextWriter.Write(System.Double)\n  id: Write(System.Double)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Double)\n  nameWithType: TextWriter.Write(Double)\n  fullName: TextWriter.Write(Double)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of an 8-byte floating-point value to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The 8-byte floating-point value to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Decimal)\n  commentId: M:System.IO.TextWriter.Write(System.Decimal)\n  id: Write(System.Decimal)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Decimal)\n  nameWithType: TextWriter.Write(Decimal)\n  fullName: TextWriter.Write(Decimal)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a decimal value to the text string or stream.\n  remarks: The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.\n  syntax:\n    content: public virtual void Write (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal value to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Char[])\n  commentId: M:System.IO.TextWriter.Write(System.Char[])\n  id: Write(System.Char[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Char[])\n  nameWithType: TextWriter.Write(Char[])\n  fullName: TextWriter.Write(Char[])\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a character array to the text string or stream.\n  remarks: \"This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \\n  \\n This default method calls the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method and passes the entire character array. If the character array is `null`, nothing is written.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (char[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write to the text stream.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Char)\n  commentId: M:System.IO.TextWriter.Write(System.Char)\n  id: Write(System.Char)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Char)\n  nameWithType: TextWriter.Write(Char)\n  fullName: TextWriter.Write(Char)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a character to the text string or stream.\n  remarks: \"This default method does nothing, but derived classes can override the method to provide the appropriate functionality.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to write to the text stream.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Object)\n  commentId: M:System.IO.TextWriter.Write(System.Object)\n  id: Write(System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Object)\n  nameWithType: TextWriter.Write(Object)\n  fullName: TextWriter.Write(Object)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of an object to the text string or stream by calling the `ToString` method on that object.\n  remarks: \"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.String%29> overload.  \\n  \\n If the specified object is `null`, no action is taken and no exception is thrown. Otherwise, the object's `ToString` method is called to produce the string representation, and the resulting string is then written to the output stream. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.Write(System.Boolean)\n  commentId: M:System.IO.TextWriter.Write(System.Boolean)\n  id: Write(System.Boolean)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: Write(Boolean)\n  nameWithType: TextWriter.Write(Boolean)\n  fullName: TextWriter.Write(Boolean)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a `Boolean` value to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method.  \\n  \\n This method outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void Write (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The `Boolean` value to write.\n  overload: System.IO.TextWriter.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  id: WriteAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteAsync(Char[], Int32, Int32)\n  nameWithType: TextWriter.WriteAsync(Char[], Int32, Int32)\n  fullName: TextWriter.WriteAsync(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a subarray of characters to the text string or stream asynchronously.\n  remarks: The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task WriteAsync (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write data from.\n    - id: index\n      type: System.Int32\n      description: The character position in the buffer at which to start retrieving data.\n    - id: count\n      type: System.Int32\n      description: The number of characters to write.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.TextWriter.WriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>index</code> plus <code>count</code> is greater than the buffer length.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The text writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteAsync(System.String)\n  commentId: M:System.IO.TextWriter.WriteAsync(System.String)\n  id: WriteAsync(System.String)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteAsync(String)\n  nameWithType: TextWriter.WriteAsync(String)\n  fullName: TextWriter.WriteAsync(String)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a string to the text string or stream asynchronously.\n  remarks: The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task WriteAsync (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to write. If <code>value</code> is `null`, nothing is written to the text stream.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.TextWriter.WriteAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The text writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteAsync(System.Char)\n  commentId: M:System.IO.TextWriter.WriteAsync(System.Char)\n  id: WriteAsync(System.Char)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteAsync(Char)\n  nameWithType: TextWriter.WriteAsync(Char)\n  fullName: TextWriter.WriteAsync(Char)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a character to the text string or stream asynchronously.\n  remarks: The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> method.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task WriteAsync (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to write to the text stream.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.TextWriter.WriteAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The text writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteAsync(System.Char[])\n  commentId: M:System.IO.TextWriter.WriteAsync(System.Char[])\n  id: WriteAsync(System.Char[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteAsync(Char[])\n  nameWithType: TextWriter.WriteAsync(Char[])\n  fullName: TextWriter.WriteAsync(Char[])\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a character array to the text string or stream asynchronously.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task WriteAsync (char[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write to the text stream. If <code>buffer</code> is `null`, nothing is written.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.TextWriter.WriteAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The text writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.String)\n  commentId: M:System.IO.TextWriter.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: TextWriter.WriteLine(String)\n  fullName: TextWriter.WriteLine(String)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a string followed by a line terminator to the text string or stream.\n  remarks: \"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> overload.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to write. If <code>value</code> is `null`, only the line terminator is written.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)\n  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)\n  id: WriteLine(System.String,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(String, Object, Object)\n  nameWithType: TextWriter.WriteLine(String, Object, Object)\n  fullName: TextWriter.WriteLine(String, Object, Object)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object)\"></xref> method.\n  remarks: \"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has two objects in its parameter list, the value of *index* must always be 0 or 1. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \\n  \\n The leading and trailing brace characters, \\\"{\\\" and \\\"}\\\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \\\"{{\\\" or \\\"}}\\\".  \\n  \\n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \\n  \\n If a specified object is not referenced in the format string, it is ignored.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (string format, object arg0, object arg1);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The first object to format and write.\n    - id: arg1\n      type: System.Object\n      description: The second object to format and write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is not a valid composite format string.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  id: WriteLine(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Char[], Int32, Int32)\n  nameWithType: TextWriter.WriteLine(Char[], Int32, Int32)\n  fullName: TextWriter.WriteLine(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a subarray of characters followed by a line terminator to the text string or stream.\n  remarks: \"This method will write `count` characters of data into this `TextWriter` from the `buffer` character array starting at position `index`.  \\n  \\n This overload is equivalent to calling the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> method followed by <xref:System.IO.TextWriter.WriteLine%2A> for each character in `buffer` between `index` and (`index` + `count`).  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array from which data is read.\n    - id: index\n      type: System.Int32\n      description: The character position in <code>buffer</code> at which to start reading data.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The buffer length minus <code>index</code> is less than <code>count</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])\n  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object[])\n  id: WriteLine(System.String,System.Object[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(String, Object[])\n  nameWithType: TextWriter.WriteLine(String, Object[])\n  fullName: TextWriter.WriteLine(String, Object[])\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes out a formatted string and a new line, using the same semantics as <xref href=\"System.String.Format(System.String,System.Object)\"></xref>.\n  remarks: \"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has an array in its parameter list, the value of *index* must always be less than the length of the array. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \\n  \\n The leading and trailing brace characters, \\\"{\\\" and \\\"}\\\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \\\"{{\\\" or \\\"}}\\\".  \\n  \\n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \\n  \\n If a specified object is not referenced in the format string, it is ignored.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (string format, object[] arg);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg\n      type: System.Object[]\n      description: An object array that contains zero or more objects to format and write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A string or object is passed in as `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is not a valid composite format string.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>arg</code> array.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object)\n  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object)\n  id: WriteLine(System.String,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(String, Object)\n  nameWithType: TextWriter.WriteLine(String, Object)\n  fullName: TextWriter.WriteLine(String, Object)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object)\"></xref> method.\n  remarks: \"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has only a single object in its parameter list, the value of *index* must always be 0. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \\n  \\n The leading and trailing brace characters, \\\"{\\\" and \\\"}\\\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \\\"{{\\\" or \\\"}}\\\".  \\n  \\n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \\n  \\n If a specified object is not referenced in the format string, it is ignored.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (string format, object arg0);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The object to format and write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is not a valid composite format string.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.UInt64)\n  commentId: M:System.IO.TextWriter.WriteLine(System.UInt64)\n  id: WriteLine(System.UInt64)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(UInt64)\n  nameWithType: TextWriter.WriteLine(UInt64)\n  fullName: TextWriter.WriteLine(UInt64)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public virtual void WriteLine (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 8-byte unsigned integer to write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)\n  id: WriteLine(System.String,System.Object,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(String, Object, Object, Object)\n  nameWithType: TextWriter.WriteLine(String, Object, Object, Object)\n  fullName: TextWriter.WriteLine(String, Object, Object, Object)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes out a formatted string and a new line, using the same semantics as <xref href=\"System.String.Format(System.String,System.Object)\"></xref>.\n  remarks: \"This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string. .NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about the composite formatting feature, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|index|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String?displayProperty=fullName>. Because this overload has three objects in its parameter list, the value of *index* must always be 0, 1, or 2. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the object to be formatted. Possible values for *formatString* are the same as the values supported by the object's `ToString(string format)` method. If *formatString* is not specified and the object to be formatted implements the <xref:System.IFormattable> interface, `null` is passed as the value of the `format` parameter that is used as the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> format string.|  \\n  \\n The leading and trailing brace characters, \\\"{\\\" and \\\"}\\\", are required. To specify a single literal brace character in `format`, specify two leading or trailing brace characters; that is, \\\"{{\\\" or \\\"}}\\\".  \\n  \\n This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.  \\n  \\n If a specified object is not referenced in the format string, it is ignored.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (string format, object arg0, object arg1, object arg2);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The first object to format and write.\n    - id: arg1\n      type: System.Object\n      description: The second object to format and write.\n    - id: arg2\n      type: System.Object\n      description: The third object to format and write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is not a valid composite format string.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.UInt32)\n  commentId: M:System.IO.TextWriter.WriteLine(System.UInt32)\n  id: WriteLine(System.UInt32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(UInt32)\n  nameWithType: TextWriter.WriteLine(UInt32)\n  fullName: TextWriter.WriteLine(UInt32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public virtual void WriteLine (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 4-byte unsigned integer to write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Single)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Single)\n  id: WriteLine(System.Single)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Single)\n  nameWithType: TextWriter.WriteLine(Single)\n  fullName: TextWriter.WriteLine(Single)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.\n  remarks: \"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting. For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.\"\n  syntax:\n    content: public virtual void WriteLine (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The 4-byte floating-point value to write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Double)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Double)\n  id: WriteLine(System.Double)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Double)\n  nameWithType: TextWriter.WriteLine(Double)\n  fullName: TextWriter.WriteLine(Double)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.\n  remarks: \"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting. For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.\"\n  syntax:\n    content: public virtual void WriteLine (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The 8-byte floating-point value to write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Int64)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Int64)\n  id: WriteLine(System.Int64)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Int64)\n  nameWithType: TextWriter.WriteLine(Int64)\n  fullName: TextWriter.WriteLine(Int64)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 8-byte signed integer to write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Int32)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Int32)\n  id: WriteLine(System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Int32)\n  nameWithType: TextWriter.WriteLine(Int32)\n  fullName: TextWriter.WriteLine(Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method. The <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 4-byte signed integer to write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Decimal)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Decimal)\n  id: WriteLine(System.Decimal)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Decimal)\n  nameWithType: TextWriter.WriteLine(Decimal)\n  fullName: TextWriter.WriteLine(Decimal)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a decimal value followed by a line terminator to the text string or stream.\n  remarks: \"The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting. For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.\"\n  syntax:\n    content: public virtual void WriteLine (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal value to write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Char[])\n  commentId: M:System.IO.TextWriter.WriteLine(System.Char[])\n  id: WriteLine(System.Char[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Char[])\n  nameWithType: TextWriter.WriteLine(Char[])\n  fullName: TextWriter.WriteLine(Char[])\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes an array of characters followed by a line terminator to the text string or stream.\n  remarks: \"All the characters in `buffer` are written to the underlying stream. If the character array is `null`, only the line terminator is written.  \\n  \\n This overload is equivalent to <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> followed by <xref:System.IO.TextWriter.WriteLine> .  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (char[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array from which data is read.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Char)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Char)\n  id: WriteLine(System.Char)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Char)\n  nameWithType: TextWriter.WriteLine(Char)\n  fullName: TextWriter.WriteLine(Char)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a character followed by a line terminator to the text string or stream.\n  remarks: \"This overload is equivalent to <xref:System.IO.TextWriter.Write%28System.Char%29> followed by <xref:System.IO.TextWriter.WriteLine> .  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to write to the text stream.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Boolean)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Boolean)\n  id: WriteLine(System.Boolean)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Boolean)\n  nameWithType: TextWriter.WriteLine(Boolean)\n  fullName: TextWriter.WriteLine(Boolean)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of a `Boolean` value followed by a line terminator to the text string or stream.\n  remarks: \"The text representation of the specified value is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method.  \\n  \\n This method outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The `Boolean` value to write.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine\n  commentId: M:System.IO.TextWriter.WriteLine\n  id: WriteLine\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine()\n  nameWithType: TextWriter.WriteLine()\n  fullName: TextWriter.WriteLine()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a line terminator to the text string or stream.\n  remarks: \"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine ();\n    parameters: []\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLine(System.Object)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Object)\n  id: WriteLine(System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLine(Object)\n  nameWithType: TextWriter.WriteLine(Object)\n  fullName: TextWriter.WriteLine(Object)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the text representation of an object by calling the `ToString` method on that object, followed by a line terminator to the text string or stream.\n  remarks: \"This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.String%2CSystem.Object%29> overload. The <xref:System.IO.TextWriter.FormatProvider%2A> property, if not `null`, specifies the culture-specific formatting.  \\n  \\n The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public virtual void WriteLine (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to write. If <code>value</code> is `null`, only the line terminator is written.\n  overload: System.IO.TextWriter.WriteLine*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextWriter\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLineAsync(System.String)\n  commentId: M:System.IO.TextWriter.WriteLineAsync(System.String)\n  id: WriteLineAsync(System.String)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLineAsync(String)\n  nameWithType: TextWriter.WriteLineAsync(String)\n  fullName: TextWriter.WriteLineAsync(String)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a string followed by a line terminator asynchronously to the text string or stream.\n  remarks: \"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task WriteLineAsync (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to write. If the value is `null`, only a line terminator is written.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.TextWriter.WriteLineAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The text writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLineAsync\n  commentId: M:System.IO.TextWriter.WriteLineAsync\n  id: WriteLineAsync\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLineAsync()\n  nameWithType: TextWriter.WriteLineAsync()\n  fullName: TextWriter.WriteLineAsync()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a line terminator asynchronously to the text string or stream.\n  remarks: The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task WriteLineAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.TextWriter.WriteLineAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The text writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char)\n  commentId: M:System.IO.TextWriter.WriteLineAsync(System.Char)\n  id: WriteLineAsync(System.Char)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLineAsync(Char)\n  nameWithType: TextWriter.WriteLineAsync(Char)\n  fullName: TextWriter.WriteLineAsync(Char)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a character followed by a line terminator asynchronously to the text string or stream.\n  remarks: \"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task WriteLineAsync (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to write to the text stream.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.TextWriter.WriteLineAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The text writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char[])\n  commentId: M:System.IO.TextWriter.WriteLineAsync(System.Char[])\n  id: WriteLineAsync(System.Char[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLineAsync(Char[])\n  nameWithType: TextWriter.WriteLineAsync(Char[])\n  fullName: TextWriter.WriteLineAsync(Char[])\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes an array of characters followed by a line terminator asynchronously to the text string or stream.\n  remarks: The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.Tasks.Task WriteLineAsync (char[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write to the text stream. If the character array is `null`, only the line terminator is written.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.TextWriter.WriteLineAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The text writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  id: WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  name: WriteLineAsync(Char[], Int32, Int32)\n  nameWithType: TextWriter.WriteLineAsync(Char[], Int32, Int32)\n  fullName: TextWriter.WriteLineAsync(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.\n  remarks: \"The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.  \\n  \\n The <xref:System.IO.TextWriter> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextWriter.WriteLineAsync%2A> method, see the <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task WriteLineAsync (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: The character array to write data from.\n    - id: index\n      type: System.Int32\n      description: The character position in the buffer at which to start retrieving data.\n    - id: count\n      type: System.Int32\n      description: The number of characters to write.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.TextWriter.WriteLineAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>index</code> plus <code>count</code> is greater than the buffer length.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text writer is disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The text writer is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.IO.TextWriter.#ctor\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: TextWriter()\n  nameWithType: TextWriter.TextWriter()\n  fullName: TextWriter.TextWriter()\n- uid: System.IO.TextWriter.#ctor(System.IFormatProvider)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: TextWriter(IFormatProvider)\n  nameWithType: TextWriter.TextWriter(IFormatProvider)\n  fullName: TextWriter.TextWriter(IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.IO.TextWriter.Close\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Close()\n  nameWithType: TextWriter.Close()\n  fullName: TextWriter.Close()\n- uid: System.IO.TextWriter.CoreNewLine\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: CoreNewLine\n  nameWithType: TextWriter.CoreNewLine\n  fullName: TextWriter.CoreNewLine\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.TextWriter.Dispose\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Dispose()\n  nameWithType: TextWriter.Dispose()\n  fullName: TextWriter.Dispose()\n- uid: System.IO.TextWriter.Dispose(System.Boolean)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: TextWriter.Dispose(Boolean)\n  fullName: TextWriter.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.TextWriter.Encoding\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Encoding\n  nameWithType: TextWriter.Encoding\n  fullName: TextWriter.Encoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.IO.TextWriter.Flush\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Flush()\n  nameWithType: TextWriter.Flush()\n  fullName: TextWriter.Flush()\n- uid: System.IO.TextWriter.FlushAsync\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: TextWriter.FlushAsync()\n  fullName: TextWriter.FlushAsync()\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.IO.TextWriter.FormatProvider\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: FormatProvider\n  nameWithType: TextWriter.FormatProvider\n  fullName: TextWriter.FormatProvider\n- uid: System.IO.TextWriter.NewLine\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: NewLine\n  nameWithType: TextWriter.NewLine\n  fullName: TextWriter.NewLine\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.TextWriter.Null\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: \"Null\"\n  nameWithType: TextWriter.Null\n  fullName: TextWriter.Null\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.IO.TextWriter.Synchronized(System.IO.TextWriter)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Synchronized(TextWriter)\n  nameWithType: TextWriter.Synchronized(TextWriter)\n  fullName: TextWriter.Synchronized(TextWriter)\n- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(String, Object, Object, Object)\n  nameWithType: TextWriter.Write(String, Object, Object, Object)\n  fullName: TextWriter.Write(String, Object, Object, Object)\n- uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Char[], Int32, Int32)\n  nameWithType: TextWriter.Write(Char[], Int32, Int32)\n  fullName: TextWriter.Write(Char[], Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.TextWriter.Write(System.String,System.Object[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(String, Object[])\n  nameWithType: TextWriter.Write(String, Object[])\n  fullName: TextWriter.Write(String, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.TextWriter.Write(System.String,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(String, Object)\n  nameWithType: TextWriter.Write(String, Object)\n  fullName: TextWriter.Write(String, Object)\n- uid: System.IO.TextWriter.Write(System.UInt64)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(UInt64)\n  nameWithType: TextWriter.Write(UInt64)\n  fullName: TextWriter.Write(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.IO.TextWriter.Write(System.UInt32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(UInt32)\n  nameWithType: TextWriter.Write(UInt32)\n  fullName: TextWriter.Write(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.IO.TextWriter.Write(System.String)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(String)\n  nameWithType: TextWriter.Write(String)\n  fullName: TextWriter.Write(String)\n- uid: System.IO.TextWriter.Write(System.Single)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Single)\n  nameWithType: TextWriter.Write(Single)\n  fullName: TextWriter.Write(Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(String, Object, Object)\n  nameWithType: TextWriter.Write(String, Object, Object)\n  fullName: TextWriter.Write(String, Object, Object)\n- uid: System.IO.TextWriter.Write(System.Int64)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Int64)\n  nameWithType: TextWriter.Write(Int64)\n  fullName: TextWriter.Write(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IO.TextWriter.Write(System.Int32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Int32)\n  nameWithType: TextWriter.Write(Int32)\n  fullName: TextWriter.Write(Int32)\n- uid: System.IO.TextWriter.Write(System.Double)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Double)\n  nameWithType: TextWriter.Write(Double)\n  fullName: TextWriter.Write(Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.IO.TextWriter.Write(System.Decimal)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Decimal)\n  nameWithType: TextWriter.Write(Decimal)\n  fullName: TextWriter.Write(Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.IO.TextWriter.Write(System.Char[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Char[])\n  nameWithType: TextWriter.Write(Char[])\n  fullName: TextWriter.Write(Char[])\n- uid: System.IO.TextWriter.Write(System.Char)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Char)\n  nameWithType: TextWriter.Write(Char)\n  fullName: TextWriter.Write(Char)\n- uid: System.IO.TextWriter.Write(System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Object)\n  nameWithType: TextWriter.Write(Object)\n  fullName: TextWriter.Write(Object)\n- uid: System.IO.TextWriter.Write(System.Boolean)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write(Boolean)\n  nameWithType: TextWriter.Write(Boolean)\n  fullName: TextWriter.Write(Boolean)\n- uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteAsync(Char[], Int32, Int32)\n  nameWithType: TextWriter.WriteAsync(Char[], Int32, Int32)\n  fullName: TextWriter.WriteAsync(Char[], Int32, Int32)\n- uid: System.IO.TextWriter.WriteAsync(System.String)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteAsync(String)\n  nameWithType: TextWriter.WriteAsync(String)\n  fullName: TextWriter.WriteAsync(String)\n- uid: System.IO.TextWriter.WriteAsync(System.Char)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteAsync(Char)\n  nameWithType: TextWriter.WriteAsync(Char)\n  fullName: TextWriter.WriteAsync(Char)\n- uid: System.IO.TextWriter.WriteAsync(System.Char[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteAsync(Char[])\n  nameWithType: TextWriter.WriteAsync(Char[])\n  fullName: TextWriter.WriteAsync(Char[])\n- uid: System.IO.TextWriter.WriteLine(System.String)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: TextWriter.WriteLine(String)\n  fullName: TextWriter.WriteLine(String)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String, Object, Object)\n  nameWithType: TextWriter.WriteLine(String, Object, Object)\n  fullName: TextWriter.WriteLine(String, Object, Object)\n- uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Char[], Int32, Int32)\n  nameWithType: TextWriter.WriteLine(Char[], Int32, Int32)\n  fullName: TextWriter.WriteLine(Char[], Int32, Int32)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String, Object[])\n  nameWithType: TextWriter.WriteLine(String, Object[])\n  fullName: TextWriter.WriteLine(String, Object[])\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String, Object)\n  nameWithType: TextWriter.WriteLine(String, Object)\n  fullName: TextWriter.WriteLine(String, Object)\n- uid: System.IO.TextWriter.WriteLine(System.UInt64)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(UInt64)\n  nameWithType: TextWriter.WriteLine(UInt64)\n  fullName: TextWriter.WriteLine(UInt64)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(String, Object, Object, Object)\n  nameWithType: TextWriter.WriteLine(String, Object, Object, Object)\n  fullName: TextWriter.WriteLine(String, Object, Object, Object)\n- uid: System.IO.TextWriter.WriteLine(System.UInt32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(UInt32)\n  nameWithType: TextWriter.WriteLine(UInt32)\n  fullName: TextWriter.WriteLine(UInt32)\n- uid: System.IO.TextWriter.WriteLine(System.Single)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Single)\n  nameWithType: TextWriter.WriteLine(Single)\n  fullName: TextWriter.WriteLine(Single)\n- uid: System.IO.TextWriter.WriteLine(System.Double)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Double)\n  nameWithType: TextWriter.WriteLine(Double)\n  fullName: TextWriter.WriteLine(Double)\n- uid: System.IO.TextWriter.WriteLine(System.Int64)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Int64)\n  nameWithType: TextWriter.WriteLine(Int64)\n  fullName: TextWriter.WriteLine(Int64)\n- uid: System.IO.TextWriter.WriteLine(System.Int32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Int32)\n  nameWithType: TextWriter.WriteLine(Int32)\n  fullName: TextWriter.WriteLine(Int32)\n- uid: System.IO.TextWriter.WriteLine(System.Decimal)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Decimal)\n  nameWithType: TextWriter.WriteLine(Decimal)\n  fullName: TextWriter.WriteLine(Decimal)\n- uid: System.IO.TextWriter.WriteLine(System.Char[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Char[])\n  nameWithType: TextWriter.WriteLine(Char[])\n  fullName: TextWriter.WriteLine(Char[])\n- uid: System.IO.TextWriter.WriteLine(System.Char)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Char)\n  nameWithType: TextWriter.WriteLine(Char)\n  fullName: TextWriter.WriteLine(Char)\n- uid: System.IO.TextWriter.WriteLine(System.Boolean)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Boolean)\n  nameWithType: TextWriter.WriteLine(Boolean)\n  fullName: TextWriter.WriteLine(Boolean)\n- uid: System.IO.TextWriter.WriteLine\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine()\n  nameWithType: TextWriter.WriteLine()\n  fullName: TextWriter.WriteLine()\n- uid: System.IO.TextWriter.WriteLine(System.Object)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine(Object)\n  nameWithType: TextWriter.WriteLine(Object)\n  fullName: TextWriter.WriteLine(Object)\n- uid: System.IO.TextWriter.WriteLineAsync(System.String)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLineAsync(String)\n  nameWithType: TextWriter.WriteLineAsync(String)\n  fullName: TextWriter.WriteLineAsync(String)\n- uid: System.IO.TextWriter.WriteLineAsync\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLineAsync()\n  nameWithType: TextWriter.WriteLineAsync()\n  fullName: TextWriter.WriteLineAsync()\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLineAsync(Char)\n  nameWithType: TextWriter.WriteLineAsync(Char)\n  fullName: TextWriter.WriteLineAsync(Char)\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char[])\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLineAsync(Char[])\n  nameWithType: TextWriter.WriteLineAsync(Char[])\n  fullName: TextWriter.WriteLineAsync(Char[])\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLineAsync(Char[], Int32, Int32)\n  nameWithType: TextWriter.WriteLineAsync(Char[], Int32, Int32)\n  fullName: TextWriter.WriteLineAsync(Char[], Int32, Int32)\n- uid: System.IO.TextWriter.#ctor*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: TextWriter\n  nameWithType: TextWriter.TextWriter\n  fullName: TextWriter.TextWriter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.Close*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Close\n  nameWithType: TextWriter.Close\n  fullName: TextWriter.Close\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.Dispose*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Dispose\n  nameWithType: TextWriter.Dispose\n  fullName: TextWriter.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.Encoding*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Encoding\n  nameWithType: TextWriter.Encoding\n  fullName: TextWriter.Encoding\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.Flush*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Flush\n  nameWithType: TextWriter.Flush\n  fullName: TextWriter.Flush\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.FlushAsync*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: FlushAsync\n  nameWithType: TextWriter.FlushAsync\n  fullName: TextWriter.FlushAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.FormatProvider*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: FormatProvider\n  nameWithType: TextWriter.FormatProvider\n  fullName: TextWriter.FormatProvider\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.NewLine*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: NewLine\n  nameWithType: TextWriter.NewLine\n  fullName: TextWriter.NewLine\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.Synchronized*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Synchronized\n  nameWithType: TextWriter.Synchronized\n  fullName: TextWriter.Synchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.Write*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: Write\n  nameWithType: TextWriter.Write\n  fullName: TextWriter.Write\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.WriteAsync*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteAsync\n  nameWithType: TextWriter.WriteAsync\n  fullName: TextWriter.WriteAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.WriteLine*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLine\n  nameWithType: TextWriter.WriteLine\n  fullName: TextWriter.WriteLine\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.IO.TextWriter.WriteLineAsync*\n  parent: System.IO.TextWriter\n  isExternal: false\n  name: WriteLineAsync\n  nameWithType: TextWriter.WriteLineAsync\n  fullName: TextWriter.WriteLineAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextWriter.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}