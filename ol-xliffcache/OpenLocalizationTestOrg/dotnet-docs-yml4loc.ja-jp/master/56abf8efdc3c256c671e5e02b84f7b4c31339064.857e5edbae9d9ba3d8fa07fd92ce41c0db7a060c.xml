{"nodes":[{"content":"Computes a Hash-based Message Authentication Code (HMAC) by using the <xref href=\"System.Security.Cryptography.MD5\"></xref> hash function.","nodes":[{"pos":[0,138],"content":"Computes a Hash-based Message Authentication Code (HMAC) by using the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.MD5\"&gt;&lt;/xref&gt;</ph> hash function.","source":"Computes a Hash-based Message Authentication Code (HMAC) by using the <xref href=\"System.Security.Cryptography.MD5\"></xref> hash function."}],"pos":[884,1023],"yaml":true},{"content":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the Message Digest Algorithm 5 (MD5) hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.  \n  \n An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \n  \n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.  \n  \n MD5 is a cryptographic hash algorithm developed at RSA Laboratories. <xref:System.Security.Cryptography.HMACMD5> accepts keys of any size, and produces a hash sequence that is 128 bits in length.","nodes":[{"pos":[0,453],"content":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the Message Digest Algorithm 5 (MD5) hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.","nodes":[{"content":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the Message Digest Algorithm 5 (MD5) hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.","pos":[0,453],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> is a type of keyed hash algorithm that is constructed from the Message Digest Algorithm 5 (MD5) hash function and used as a Hash-based Message Authentication Code (HMAC).","pos":[0,214],"source":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the Message Digest Algorithm 5 (MD5) hash function and used as a Hash-based Message Authentication Code (HMAC)."},{"content":"The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.","pos":[215,414]},{"content":"The output hash is 128 bits in length.","pos":[415,453]}]}]},{"pos":[460,877],"content":"An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","nodes":[{"content":"An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","pos":[0,417],"nodes":[{"content":"An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.","pos":[0,162]},{"content":"The sender computes the hash value for the original data and sends both the original data and hash value as a single message.","pos":[163,288]},{"content":"The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","pos":[289,417]}]}]},{"pos":[884,1144],"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","nodes":[{"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","pos":[0,260],"nodes":[{"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.","pos":[0,171]},{"content":"Therefore, if the original and computed hash values match, the message is authenticated.","pos":[172,260]}]}]},{"pos":[1151,1346],"content":"MD5 is a cryptographic hash algorithm developed at RSA Laboratories. <xref:System.Security.Cryptography.HMACMD5> accepts keys of any size, and produces a hash sequence that is 128 bits in length.","nodes":[{"content":"MD5 is a cryptographic hash algorithm developed at RSA Laboratories. <xref:System.Security.Cryptography.HMACMD5> accepts keys of any size, and produces a hash sequence that is 128 bits in length.","pos":[0,195],"nodes":[{"content":"MD5 is a cryptographic hash algorithm developed at RSA Laboratories.","pos":[0,68]},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> accepts keys of any size, and produces a hash sequence that is 128 bits in length.","pos":[69,195],"source":" <xref:System.Security.Cryptography.HMACMD5> accepts keys of any size, and produces a hash sequence that is 128 bits in length."}]}]}],"pos":[1034,2389],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> class by using a randomly generated key.","nodes":[{"pos":[0,132],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACMD5\"&gt;&lt;/xref&gt;</ph> class by using a randomly generated key.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> class by using a randomly generated key."}],"pos":[6235,6368],"yaml":true},{"content":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.  \n  \n This constructor uses a 64-byte, randomly generated key.","nodes":[{"pos":[0,424],"content":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.","nodes":[{"content":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.","pos":[0,424],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC).","pos":[0,185],"source":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC)."},{"content":"The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.","pos":[186,385]},{"content":"The output hash is 128 bits in length.","pos":[386,424]}]}]},{"pos":[431,487],"content":"This constructor uses a 64-byte, randomly generated key.","nodes":[{"content":"This constructor uses a 64-byte, randomly generated key.","pos":[0,56]}]}],"pos":[6379,6871],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> class by using the specified key.","nodes":[{"pos":[0,125],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACMD5\"&gt;&lt;/xref&gt;</ph> class by using the specified key.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> class by using the specified key."}],"pos":[8413,8539],"yaml":true},{"content":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.  \n  \n This constructor uses a key you provide to create the <xref:System.Security.Cryptography.HMACMD5> object.","nodes":[{"pos":[0,424],"content":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.","nodes":[{"content":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.","pos":[0,424],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC).","pos":[0,185],"source":"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC)."},{"content":"The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.","pos":[186,385]},{"content":"The output hash is 128 bits in length.","pos":[386,424]}]}]},{"pos":[431,536],"content":"This constructor uses a key you provide to create the <xref:System.Security.Cryptography.HMACMD5> object.","nodes":[{"content":"This constructor uses a key you provide to create the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> object.","pos":[0,105],"source":"This constructor uses a key you provide to create the <xref:System.Security.Cryptography.HMACMD5> object."}]}],"pos":[8550,9091],"yaml":true,"extradata":"MT"},{"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long it will be hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.","nodes":[{"pos":[0,272],"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long it will be hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.","nodes":[{"content":"The secret key for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACMD5\"&gt;&lt;/xref&gt;</ph> encryption.","pos":[0,88],"source":"The secret key for <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> encryption."},{"content":"The key can be any length, but if it is more than 64 bytes long it will be hashed (using SHA-1) to derive a 64-byte key.","pos":[89,209]},{"content":"Therefore, the recommended size of the secret key is 64 bytes.","pos":[210,272]}]}],"pos":[9339,9612],"yaml":true},{"content":"The <code>key</code> parameter is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>key</code> parameter is `null`."}],"pos":[9784,9826],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.HMACMD5\n  commentId: T:System.Security.Cryptography.HMACMD5\n  id: HMACMD5\n  children:\n  - System.Security.Cryptography.HMACMD5.#ctor\n  - System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])\n  - System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)\n  - System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMACMD5.HashFinal\n  - System.Security.Cryptography.HMACMD5.HashSize\n  - System.Security.Cryptography.HMACMD5.Initialize\n  - System.Security.Cryptography.HMACMD5.Key\n  langs:\n  - csharp\n  name: HMACMD5\n  nameWithType: HMACMD5\n  fullName: System.Security.Cryptography.HMACMD5\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes a Hash-based Message Authentication Code (HMAC) by using the <xref href=\"System.Security.Cryptography.MD5\"></xref> hash function.\n  remarks: \"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the Message Digest Algorithm 5 (MD5) hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.  \\n  \\n An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \\n  \\n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.  \\n  \\n MD5 is a cryptographic hash algorithm developed at RSA Laboratories. <xref:System.Security.Cryptography.HMACMD5> accepts keys of any size, and produces a hash sequence that is 128 bits in length.\"\n  example:\n  - \"The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACMD5> object and then how to verify the file.  \\n  \\n [!code-cpp[HMACMD5#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACMD5/CPP/hmacmd5.cpp#1)]\\n [!code-csharp[HMACMD5#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACMD5/CS/hmacmd5.cs#1)]\\n [!code-vb[HMACMD5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACMD5/vb/hmacmd5.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class HMACMD5 : System.Security.Cryptography.HMAC\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  - System.Security.Cryptography.HMAC\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMAC.BlockSizeValue\n  - System.Security.Cryptography.HMAC.Create\n  - System.Security.Cryptography.HMAC.Create(System.String)\n  - System.Security.Cryptography.HMAC.HashName\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACMD5.#ctor\n  commentId: M:System.Security.Cryptography.HMACMD5.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HMACMD5\n  langs:\n  - csharp\n  name: HMACMD5()\n  nameWithType: HMACMD5.HMACMD5()\n  fullName: HMACMD5.HMACMD5()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> class by using a randomly generated key.\n  remarks: \"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.  \\n  \\n This constructor uses a 64-byte, randomly generated key.\"\n  syntax:\n    content: public HMACMD5 ();\n    parameters: []\n  overload: System.Security.Cryptography.HMACMD5.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.HMACMD5\n  langs:\n  - csharp\n  name: HMACMD5(Byte[])\n  nameWithType: HMACMD5.HMACMD5(Byte[])\n  fullName: HMACMD5.HMACMD5(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> class by using the specified key.\n  remarks: \"<xref:System.Security.Cryptography.HMACMD5> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 128 bits in length.  \\n  \\n This constructor uses a key you provide to create the <xref:System.Security.Cryptography.HMACMD5> object.\"\n  example:\n  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACMD5> class.\n  syntax:\n    content: public HMACMD5 (byte[] key);\n    parameters:\n    - id: key\n      type: System.Byte[]\n      description: The secret key for <xref href=\"System.Security.Cryptography.HMACMD5\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long it will be hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.\n  overload: System.Security.Cryptography.HMACMD5.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>key</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMACMD5\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HMACMD5.Dispose(Boolean)\n  fullName: HMACMD5.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.HMACMD5.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMACMD5\n  langs:\n  - csharp\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: HMACMD5.HashCore(Byte[], Int32, Int32)\n  fullName: HMACMD5.HashCore(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void HashCore (byte[] rgb, int ib, int cb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: ''\n    - id: ib\n      type: System.Int32\n      description: ''\n    - id: cb\n      type: System.Int32\n      description: ''\n  overload: System.Security.Cryptography.HMACMD5.HashCore*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.HashFinal\n  commentId: M:System.Security.Cryptography.HMACMD5.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.HMACMD5\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: HMACMD5.HashFinal()\n  fullName: HMACMD5.HashFinal()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.HMACMD5.HashFinal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.HashSize\n  commentId: P:System.Security.Cryptography.HMACMD5.HashSize\n  id: HashSize\n  parent: System.Security.Cryptography.HMACMD5\n  langs:\n  - csharp\n  name: HashSize\n  nameWithType: HMACMD5.HashSize\n  fullName: HMACMD5.HashSize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int HashSize { get; }\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Security.Cryptography.HMACMD5.HashSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.Initialize\n  commentId: M:System.Security.Cryptography.HMACMD5.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.HMACMD5\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: HMACMD5.Initialize()\n  fullName: HMACMD5.Initialize()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.HMACMD5.Initialize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.Key\n  commentId: P:System.Security.Cryptography.HMACMD5.Key\n  id: Key\n  parent: System.Security.Cryptography.HMACMD5\n  langs:\n  - csharp\n  name: Key\n  nameWithType: HMACMD5.Key\n  fullName: HMACMD5.Key\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] Key { get; set; }\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.HMACMD5.Key*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\nreferences:\n- uid: System.Security.Cryptography.HMAC\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HMAC\n  nameWithType: HMAC\n  fullName: System.Security.Cryptography.HMAC\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.HMACMD5.#ctor\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: HMACMD5()\n  nameWithType: HMACMD5.HMACMD5()\n  fullName: HMACMD5.HMACMD5()\n- uid: System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: HMACMD5(Byte[])\n  nameWithType: HMACMD5.HMACMD5(Byte[])\n  fullName: HMACMD5.HMACMD5(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HMACMD5.Dispose(Boolean)\n  fullName: HMACMD5.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: HMACMD5.HashCore(Byte[], Int32, Int32)\n  fullName: HMACMD5.HashCore(Byte[], Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HMACMD5.HashFinal\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: HashFinal()\n  nameWithType: HMACMD5.HashFinal()\n  fullName: HMACMD5.HashFinal()\n- uid: System.Security.Cryptography.HMACMD5.HashSize\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: HashSize\n  nameWithType: HMACMD5.HashSize\n  fullName: HMACMD5.HashSize\n- uid: System.Security.Cryptography.HMACMD5.Initialize\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: Initialize()\n  nameWithType: HMACMD5.Initialize()\n  fullName: HMACMD5.Initialize()\n- uid: System.Security.Cryptography.HMACMD5.Key\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: Key\n  nameWithType: HMACMD5.Key\n  fullName: HMACMD5.Key\n- uid: System.Security.Cryptography.HMACMD5.#ctor*\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: HMACMD5\n  nameWithType: HMACMD5.HMACMD5\n  fullName: HMACMD5.HMACMD5\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.Dispose*\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: Dispose\n  nameWithType: HMACMD5.Dispose\n  fullName: HMACMD5.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.HashCore*\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: HashCore\n  nameWithType: HMACMD5.HashCore\n  fullName: HMACMD5.HashCore\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.HashFinal*\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: HashFinal\n  nameWithType: HMACMD5.HashFinal\n  fullName: HMACMD5.HashFinal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.HashSize*\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: HashSize\n  nameWithType: HMACMD5.HashSize\n  fullName: HMACMD5.HashSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.Initialize*\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: Initialize\n  nameWithType: HMACMD5.Initialize\n  fullName: HMACMD5.Initialize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Security.Cryptography.HMACMD5.Key*\n  parent: System.Security.Cryptography.HMACMD5\n  isExternal: false\n  name: Key\n  nameWithType: HMACMD5.Key\n  fullName: HMACMD5.Key\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACMD5.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: HashAlgorithm.CanReuseTransform\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: HashAlgorithm.ComputeHash(Byte[])\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.HMAC.Create\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Create()\n  nameWithType: HMAC.Create()\n  fullName: HMAC.Create()\n- uid: System.Security.Cryptography.HMAC.Create(System.String)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Create(String)\n  nameWithType: HMAC.Create(String)\n  fullName: HMAC.Create(String)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: KeyedHashAlgorithm.KeyValue\n  fullName: KeyedHashAlgorithm.KeyValue\n- uid: System.Security.Cryptography.HMAC.BlockSizeValue\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: HMAC.BlockSizeValue\n  fullName: HMAC.BlockSizeValue\n- uid: System.Security.Cryptography.HMAC.HashName\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HashName\n  nameWithType: HMAC.HashName\n  fullName: HMAC.HashName\n"}