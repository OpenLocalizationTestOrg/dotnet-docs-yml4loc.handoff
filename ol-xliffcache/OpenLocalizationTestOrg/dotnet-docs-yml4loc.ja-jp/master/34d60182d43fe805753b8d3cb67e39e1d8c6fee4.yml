### YamlMime:ManagedReference
items:
- uid: System.Windows.IWeakEventListener
  commentId: T:System.Windows.IWeakEventListener
  id: IWeakEventListener
  children:
  - System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  langs:
  - csharp
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
  type: Interface
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <xref href="System.Windows.WeakEventManager"></xref>.
  remarks: "The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.  \n  \n The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners. Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners. By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers. This keeps the listener references from being garbage collected in a timely fashion.  \n  \n One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.  \n  \n You can use the WeakEvent pattern to listen for events that are external to your application. You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`."
  syntax:
    content: public interface IWeakEventListener
  derivedClasses:
  - System.Windows.Controls.ItemCollection
  - System.Windows.Controls.ItemContainerGenerator
  - System.Windows.Controls.Primitives.GridViewRowPresenterBase
  - System.Windows.Controls.Ribbon.RibbonGallery
  - System.Windows.Controls.Ribbon.RibbonGalleryCategory
  - System.Windows.Data.BindingExpression
  - System.Windows.Data.BindingExpressionBase
  - System.Windows.Data.CollectionContainer
  - System.Windows.Data.CollectionViewSource
  - System.Windows.Data.CompositeCollection
  implements: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/IWeakEventListener.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  commentId: M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  id: ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  parent: System.Windows.IWeakEventListener
  langs:
  - csharp
  name: ReceiveWeakEvent(Type, Object, EventArgs)
  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type, Object, EventArgs)
  fullName: IWeakEventListener.ReceiveWeakEvent(Type, Object, EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: Receives events from the centralized event manager.
  remarks: ''
  example:
  - "The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown). This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`). The implementation returns `false` if the event received is not one that is expected.  \n  \n [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]\n [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]"
  syntax:
    content: public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);
    parameters:
    - id: managerType
      type: System.Type
      description: The type of the <xref href="System.Windows.WeakEventManager"></xref> calling this method.
    - id: sender
      type: System.Object
      description: Object that originated the event.
    - id: e
      type: System.EventArgs
      description: Event data.
    return:
      type: System.Boolean
      description: '`true` if the listener handled the event. It is considered an error by the <xref href="System.Windows.WeakEventManager"></xref> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle. Regardless, the method should return `false` if it receives an event that it does not recognize or handle.'
  overload: System.Windows.IWeakEventListener.ReceiveWeakEvent*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/IWeakEventListener.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
references:
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  parent: System.Windows.IWeakEventListener
  isExternal: false
  name: ReceiveWeakEvent(Type, Object, EventArgs)
  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type, Object, EventArgs)
  fullName: IWeakEventListener.ReceiveWeakEvent(Type, Object, EventArgs)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent*
  parent: System.Windows.IWeakEventListener
  isExternal: false
  name: ReceiveWeakEvent
  nameWithType: IWeakEventListener.ReceiveWeakEvent
  fullName: IWeakEventListener.ReceiveWeakEvent
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/IWeakEventListener.xml
