{"nodes":[{"content":"Represents information about an audio format.","nodes":[{"pos":[0,45],"content":"Represents information about an audio format.","nodes":[{"content":"Represents information about an audio format.","pos":[0,45]}]}],"pos":[1386,1432],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the samples per second, bits per sample, and the number of channels.","nodes":[{"pos":[0,191],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;&lt;/xref&gt;</ph> class and specifies the samples per second, bits per sample, and the number of channels.","source":"Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the samples per second, bits per sample, and the number of channels."}],"pos":[3178,3370],"yaml":true},{"content":"The value for the samples per second.","nodes":[{"pos":[0,37],"content":"The value for the samples per second.","nodes":[{"content":"The value for the samples per second.","pos":[0,37]}]}],"pos":[5228,5266],"yaml":true},{"content":"The value for the bits per sample.","nodes":[{"pos":[0,34],"content":"The value for the bits per sample.","nodes":[{"content":"The value for the bits per sample.","pos":[0,34]}]}],"pos":[5366,5401],"yaml":true},{"content":"A member of the <xref href=\"System.Speech.AudioFormat.AudioChannel\"></xref> enumeration (indicating <code>Mono</code> or <code>Stereo</code>).","nodes":[{"pos":[0,142],"content":"A member of the <ph id=\"ph1\">&lt;xref href=\"System.Speech.AudioFormat.AudioChannel\"&gt;&lt;/xref&gt;</ph> enumeration (indicating <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Mono</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Stereo</ph><ept id=\"p2\">&lt;/code&gt;</ept>).","source":"A member of the <xref href=\"System.Speech.AudioFormat.AudioChannel\"></xref> enumeration (indicating <code>Mono</code> or <code>Stereo</code>)."}],"pos":[5489,5632],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the encoding format, samples per second, bits per sample, number of channels, average bytes per second, block alignment value, and an array containing format-specific data.","nodes":[{"pos":[0,295],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;&lt;/xref&gt;</ph> class and specifies the encoding format, samples per second, bits per sample, number of channels, average bytes per second, block alignment value, and an array containing format-specific data.","source":"Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the encoding format, samples per second, bits per sample, number of channels, average bytes per second, block alignment value, and an array containing format-specific data."}],"pos":[7253,7549],"yaml":true},{"content":"The encoding format.","nodes":[{"pos":[0,20],"content":"The encoding format.","nodes":[{"content":"The encoding format.","pos":[0,20]}]}],"pos":[7902,7923],"yaml":true},{"content":"The value for the samples per second.","nodes":[{"pos":[0,37],"content":"The value for the samples per second.","nodes":[{"content":"The value for the samples per second.","pos":[0,37]}]}],"pos":[7994,8032],"yaml":true},{"content":"The value for the bits per sample.","nodes":[{"pos":[0,34],"content":"The value for the bits per sample.","nodes":[{"content":"The value for the bits per sample.","pos":[0,34]}]}],"pos":[8100,8135],"yaml":true},{"content":"The value for the channel count.","nodes":[{"pos":[0,32],"content":"The value for the channel count.","nodes":[{"content":"The value for the channel count.","pos":[0,32]}]}],"pos":[8202,8235],"yaml":true},{"content":"The value for the average bytes per second.","nodes":[{"pos":[0,43],"content":"The value for the average bytes per second.","nodes":[{"content":"The value for the average bytes per second.","pos":[0,43]}]}],"pos":[8311,8355],"yaml":true},{"content":"The value for the BlockAlign.","nodes":[{"pos":[0,29],"content":"The value for the BlockAlign.","nodes":[{"content":"The value for the BlockAlign.","pos":[0,29]}]}],"pos":[8420,8450],"yaml":true},{"content":"A byte array containing the format-specific data.","nodes":[{"pos":[0,49],"content":"A byte array containing the format-specific data.","nodes":[{"content":"A byte array containing the format-specific data.","pos":[0,49]}]}],"pos":[8524,8574],"yaml":true},{"content":"Gets the average bytes per second of the audio.","nodes":[{"pos":[0,47],"content":"Gets the average bytes per second of the audio.","nodes":[{"content":"Gets the average bytes per second of the audio.","pos":[0,47]}]}],"pos":[9715,9763],"yaml":true},{"content":"The value for the average bytes per second.","nodes":[{"pos":[0,43],"content":"The value for the average bytes per second.","nodes":[{"content":"The value for the average bytes per second.","pos":[0,43]}]}],"pos":[9884,9928],"yaml":true},{"content":"Gets the bits per sample of the audio.","nodes":[{"pos":[0,38],"content":"Gets the bits per sample of the audio.","nodes":[{"content":"Gets the bits per sample of the audio.","pos":[0,38]}]}],"pos":[11037,11076],"yaml":true},{"content":"The value for the bits per sample.","nodes":[{"pos":[0,34],"content":"The value for the bits per sample.","nodes":[{"content":"The value for the bits per sample.","pos":[0,34]}]}],"pos":[11189,11224],"yaml":true},{"content":"Gets and sets the block alignment in bytes.","nodes":[{"pos":[0,43],"content":"Gets and sets the block alignment in bytes.","nodes":[{"content":"Gets and sets the block alignment in bytes.","pos":[0,43]}]}],"pos":[12307,12351],"yaml":true},{"content":"Software for playback and recording of audio handles audio data in blocks. The sizes of these blocks are multiples of the value of the <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign%2A> property. Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format. For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:  \n  \n-   Block Alignment = Bytes per Sample x Number of Channels  \n  \n For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel). For 16-bit PCM format stereo audio, the block alignment value is 4.  \n  \n Data written and read from a device must always start at the beginning of a block. For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned).","nodes":[{"pos":[0,429],"content":"Software for playback and recording of audio handles audio data in blocks. The sizes of these blocks are multiples of the value of the <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign%2A> property. Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format. For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:","nodes":[{"content":"Software for playback and recording of audio handles audio data in blocks. The sizes of these blocks are multiples of the value of the <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign%2A> property. Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format. For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:","pos":[0,429],"nodes":[{"content":"Software for playback and recording of audio handles audio data in blocks.","pos":[0,74]},{"content":"The sizes of these blocks are multiples of the value of the <ph id=\"ph1\">&lt;xref:System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign%2A&gt;</ph> property.","pos":[75,213],"source":" The sizes of these blocks are multiples of the value of the <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign%2A> property."},{"content":"Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format.","pos":[214,329]},{"content":"For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:","pos":[330,429]}]}]},{"pos":[439,494],"content":"Block Alignment = Bytes per Sample x Number of Channels","nodes":[{"content":"Block Alignment = Bytes per Sample x Number of Channels","pos":[0,55]}]},{"pos":[501,679],"content":"For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel). For 16-bit PCM format stereo audio, the block alignment value is 4.","nodes":[{"content":"For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel). For 16-bit PCM format stereo audio, the block alignment value is 4.","pos":[0,178],"nodes":[{"content":"For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel).","pos":[0,110]},{"content":"For 16-bit PCM format stereo audio, the block alignment value is 4.","pos":[111,178]}]}]},{"pos":[686,902],"content":"Data written and read from a device must always start at the beginning of a block. For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned).","nodes":[{"content":"Data written and read from a device must always start at the beginning of a block. For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned).","pos":[0,216],"nodes":[{"content":"Data written and read from a device must always start at the beginning of a block.","pos":[0,82]},{"content":"For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned).","pos":[83,216]}]}]}],"pos":[12362,13273],"yaml":true,"extradata":"MT"},{"content":"The value for the block alignment.","nodes":[{"pos":[0,34],"content":"The value for the block alignment.","nodes":[{"content":"The value for the block alignment.","pos":[0,34]}]}],"pos":[13383,13418],"yaml":true},{"content":"Gets the channel count of the audio.","nodes":[{"pos":[0,36],"content":"Gets the channel count of the audio.","nodes":[{"content":"Gets the channel count of the audio.","pos":[0,36]}]}],"pos":[14510,14547],"yaml":true},{"content":"The value for the channel count.","nodes":[{"pos":[0,32],"content":"The value for the channel count.","nodes":[{"content":"The value for the channel count.","pos":[0,32]}]}],"pos":[14659,14692],"yaml":true},{"content":"Gets the encoding format of the audio.","nodes":[{"pos":[0,38],"content":"Gets the encoding format of the audio.","nodes":[{"content":"Gets the encoding format of the audio.","pos":[0,38]}]}],"pos":[15781,15820],"yaml":true},{"content":"The encoding format of the audio.","nodes":[{"pos":[0,33],"content":"The encoding format of the audio.","nodes":[{"content":"The encoding format of the audio.","pos":[0,33]}]}],"pos":[15999,16033],"yaml":true},{"content":"Returns whether a given object is an instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and equal to the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref>.","nodes":[{"pos":[0,224],"content":"Returns whether a given object is an instance of <ph id=\"ph1\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;&lt;/xref&gt;</ph> and equal to the current instance of <ph id=\"ph2\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;&lt;/xref&gt;</ph>.","source":"Returns whether a given object is an instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and equal to the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref>."}],"pos":[17143,17368],"yaml":true},{"content":"The method returns `false` if the <xref:System.Object> provided by the `obj` argument cannot be cast to <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo>.","nodes":[{"pos":[0,159],"content":"The method returns <ph id=\"ph1\">`false`</ph> if the <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph> provided by the <ph id=\"ph3\">`obj`</ph> argument cannot be cast to <ph id=\"ph4\">&lt;xref:System.Speech.AudioFormat.SpeechAudioFormatInfo&gt;</ph>.","source":"The method returns `false` if the <xref:System.Object> provided by the `obj` argument cannot be cast to <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo>."}],"pos":[17379,17539],"yaml":true,"extradata":"MT"},{"content":"The object to be compared.","nodes":[{"pos":[0,26],"content":"The object to be compared.","nodes":[{"content":"The object to be compared.","pos":[0,26]}]}],"pos":[17679,17706],"yaml":true},{"content":"Returns `true` if the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and that obtained from the <code>obj</code> argument are equal, otherwise returns `false`.","nodes":[{"pos":[0,201],"content":"Returns <ph id=\"ph1\">`true`</ph> if the current instance of <ph id=\"ph2\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;&lt;/xref&gt;</ph> and that obtained from the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument are equal, otherwise returns <ph id=\"ph4\">`false`</ph>.","source":"Returns `true` if the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and that obtained from the <code>obj</code> argument are equal, otherwise returns `false`."}],"pos":[17764,17966],"yaml":true},{"content":"Returns the format-specific data of the audio format.","nodes":[{"pos":[0,53],"content":"Returns the format-specific data of the audio format.","nodes":[{"content":"Returns the format-specific data of the audio format.","pos":[0,53]}]}],"pos":[19077,19131],"yaml":true},{"content":"A byte array containing the format-specific data.","nodes":[{"pos":[0,49],"content":"A byte array containing the format-specific data.","nodes":[{"content":"A byte array containing the format-specific data.","pos":[0,49]}]}],"pos":[19267,19317],"yaml":true},{"content":"Returns the hash code of the audio format.","nodes":[{"pos":[0,42],"content":"Returns the hash code of the audio format.","nodes":[{"content":"Returns the hash code of the audio format.","pos":[0,42]}]}],"pos":[20398,20441],"yaml":true},{"content":"The value for the hash code.","nodes":[{"pos":[0,28],"content":"The value for the hash code.","nodes":[{"content":"The value for the hash code.","pos":[0,28]}]}],"pos":[20575,20604],"yaml":true},{"content":"Gets the samples per second of the audio format.","nodes":[{"pos":[0,48],"content":"Gets the samples per second of the audio format.","nodes":[{"content":"Gets the samples per second of the audio format.","pos":[0,48]}]}],"pos":[21704,21753],"yaml":true},{"content":"The value for the samples per second.","nodes":[{"pos":[0,37],"content":"The value for the samples per second.","nodes":[{"content":"The value for the samples per second.","pos":[0,37]}]}],"pos":[21869,21907],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  commentId: T:System.Speech.AudioFormat.SpeechAudioFormatInfo\n  id: SpeechAudioFormatInfo\n  children:\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond\n  langs:\n  - csharp\n  name: SpeechAudioFormatInfo\n  nameWithType: SpeechAudioFormatInfo\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  type: Class\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Represents information about an audio format.\n  syntax:\n    content: public class SpeechAudioFormatInfo\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)\n  commentId: M:System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)\n  id: '#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)'\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: SpeechAudioFormatInfo(Int32, AudioBitsPerSample, AudioChannel)\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32, AudioBitsPerSample, AudioChannel)\n  fullName: SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32, AudioBitsPerSample, AudioChannel)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the samples per second, bits per sample, and the number of channels.\n  remarks: ''\n  example:\n  - \"The following example shows a typical use of <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo.%23ctor%2A> to specify the format of audio to output to a WAV file. The <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo.%23ctor%2A> instance is an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> method.  \\n  \\n```csharp  \\nusing System;  \\nusing System.IO;  \\nusing System.Speech.Synthesis;  \\nusing System.Speech.AudioFormat;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToWaveFile(@\\\"C:\\\\temp\\\\test.wav\\\",   \\n          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  \\n  \\n        // Create a SoundPlayer instance to play output audio file.  \\n        System.Media.SoundPlayer m_SoundPlayer =   \\n          new System.Media.SoundPlayer(@\\\"C:\\\\temp\\\\test.wav\\\");  \\n  \\n        // Build a prompt.  \\n        PromptBuilder builder = new PromptBuilder();  \\n        builder.AppendText(\\\"This is sample output to a WAVE file.\\\");  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(builder);  \\n        m_SoundPlayer.Play();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public SpeechAudioFormatInfo (int samplesPerSecond, System.Speech.AudioFormat.AudioBitsPerSample bitsPerSample, System.Speech.AudioFormat.AudioChannel channel);\n    parameters:\n    - id: samplesPerSecond\n      type: System.Int32\n      description: The value for the samples per second.\n    - id: bitsPerSample\n      type: System.Speech.AudioFormat.AudioBitsPerSample\n      description: The value for the bits per sample.\n    - id: channel\n      type: System.Speech.AudioFormat.AudioChannel\n      description: A member of the <xref href=\"System.Speech.AudioFormat.AudioChannel\"></xref> enumeration (indicating <code>Mono</code> or <code>Stereo</code>).\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])\n  commentId: M:System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])\n  id: '#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])'\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: SpeechAudioFormatInfo(EncodingFormat, Int32, Int32, Int32, Int32, Int32, Byte[])\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat, Int32, Int32, Int32, Int32, Int32, Byte[])\n  fullName: SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat, Int32, Int32, Int32, Int32, Int32, Byte[])\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the encoding format, samples per second, bits per sample, number of channels, average bytes per second, block alignment value, and an array containing format-specific data.\n  syntax:\n    content: public SpeechAudioFormatInfo (System.Speech.AudioFormat.EncodingFormat encodingFormat, int samplesPerSecond, int bitsPerSample, int channelCount, int averageBytesPerSecond, int blockAlign, byte[] formatSpecificData);\n    parameters:\n    - id: encodingFormat\n      type: System.Speech.AudioFormat.EncodingFormat\n      description: The encoding format.\n    - id: samplesPerSecond\n      type: System.Int32\n      description: The value for the samples per second.\n    - id: bitsPerSample\n      type: System.Int32\n      description: The value for the bits per sample.\n    - id: channelCount\n      type: System.Int32\n      description: The value for the channel count.\n    - id: averageBytesPerSecond\n      type: System.Int32\n      description: The value for the average bytes per second.\n    - id: blockAlign\n      type: System.Int32\n      description: The value for the BlockAlign.\n    - id: formatSpecificData\n      type: System.Byte[]\n      description: A byte array containing the format-specific data.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond\n  commentId: P:System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond\n  id: AverageBytesPerSecond\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: AverageBytesPerSecond\n  nameWithType: SpeechAudioFormatInfo.AverageBytesPerSecond\n  fullName: SpeechAudioFormatInfo.AverageBytesPerSecond\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the average bytes per second of the audio.\n  syntax:\n    content: public int AverageBytesPerSecond { get; }\n    return:\n      type: System.Int32\n      description: The value for the average bytes per second.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample\n  commentId: P:System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample\n  id: BitsPerSample\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: BitsPerSample\n  nameWithType: SpeechAudioFormatInfo.BitsPerSample\n  fullName: SpeechAudioFormatInfo.BitsPerSample\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the bits per sample of the audio.\n  syntax:\n    content: public int BitsPerSample { get; }\n    return:\n      type: System.Int32\n      description: The value for the bits per sample.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign\n  commentId: P:System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign\n  id: BlockAlign\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: BlockAlign\n  nameWithType: SpeechAudioFormatInfo.BlockAlign\n  fullName: SpeechAudioFormatInfo.BlockAlign\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets and sets the block alignment in bytes.\n  remarks: \"Software for playback and recording of audio handles audio data in blocks. The sizes of these blocks are multiples of the value of the <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign%2A> property. Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format. For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:  \\n  \\n-   Block Alignment = Bytes per Sample x Number of Channels  \\n  \\n For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel). For 16-bit PCM format stereo audio, the block alignment value is 4.  \\n  \\n Data written and read from a device must always start at the beginning of a block. For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned).\"\n  syntax:\n    content: public int BlockAlign { get; }\n    return:\n      type: System.Int32\n      description: The value for the block alignment.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount\n  commentId: P:System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount\n  id: ChannelCount\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: ChannelCount\n  nameWithType: SpeechAudioFormatInfo.ChannelCount\n  fullName: SpeechAudioFormatInfo.ChannelCount\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the channel count of the audio.\n  syntax:\n    content: public int ChannelCount { get; }\n    return:\n      type: System.Int32\n      description: The value for the channel count.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat\n  commentId: P:System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat\n  id: EncodingFormat\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: EncodingFormat\n  nameWithType: SpeechAudioFormatInfo.EncodingFormat\n  fullName: SpeechAudioFormatInfo.EncodingFormat\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the encoding format of the audio.\n  syntax:\n    content: public System.Speech.AudioFormat.EncodingFormat EncodingFormat { get; }\n    return:\n      type: System.Speech.AudioFormat.EncodingFormat\n      description: The encoding format of the audio.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)\n  commentId: M:System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: SpeechAudioFormatInfo.Equals(Object)\n  fullName: SpeechAudioFormatInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Returns whether a given object is an instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and equal to the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref>.\n  remarks: The method returns `false` if the <xref:System.Object> provided by the `obj` argument cannot be cast to <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to be compared.\n    return:\n      type: System.Boolean\n      description: Returns `true` if the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and that obtained from the <code>obj</code> argument are equal, otherwise returns `false`.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData\n  commentId: M:System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData\n  id: FormatSpecificData\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: FormatSpecificData()\n  nameWithType: SpeechAudioFormatInfo.FormatSpecificData()\n  fullName: SpeechAudioFormatInfo.FormatSpecificData()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Returns the format-specific data of the audio format.\n  syntax:\n    content: public byte[] FormatSpecificData ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A byte array containing the format-specific data.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode\n  commentId: M:System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: SpeechAudioFormatInfo.GetHashCode()\n  fullName: SpeechAudioFormatInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Returns the hash code of the audio format.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The value for the hash code.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond\n  commentId: P:System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond\n  id: SamplesPerSecond\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: SamplesPerSecond\n  nameWithType: SpeechAudioFormatInfo.SamplesPerSecond\n  fullName: SpeechAudioFormatInfo.SamplesPerSecond\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the samples per second of the audio format.\n  syntax:\n    content: public int SamplesPerSecond { get; }\n    return:\n      type: System.Int32\n      description: The value for the samples per second.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SpeechAudioFormatInfo(Int32, AudioBitsPerSample, AudioChannel)\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32, AudioBitsPerSample, AudioChannel)\n  fullName: SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32, AudioBitsPerSample, AudioChannel)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.AudioFormat.AudioBitsPerSample\n  parent: System.Speech.AudioFormat\n  isExternal: false\n  name: AudioBitsPerSample\n  nameWithType: AudioBitsPerSample\n  fullName: System.Speech.AudioFormat.AudioBitsPerSample\n- uid: System.Speech.AudioFormat.AudioChannel\n  parent: System.Speech.AudioFormat\n  isExternal: false\n  name: AudioChannel\n  nameWithType: AudioChannel\n  fullName: System.Speech.AudioFormat.AudioChannel\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SpeechAudioFormatInfo(EncodingFormat, Int32, Int32, Int32, Int32, Int32, Byte[])\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat, Int32, Int32, Int32, Int32, Int32, Byte[])\n  fullName: SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat, Int32, Int32, Int32, Int32, Int32, Byte[])\n- uid: System.Speech.AudioFormat.EncodingFormat\n  parent: System.Speech.AudioFormat\n  isExternal: false\n  name: EncodingFormat\n  nameWithType: EncodingFormat\n  fullName: System.Speech.AudioFormat.EncodingFormat\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: AverageBytesPerSecond\n  nameWithType: SpeechAudioFormatInfo.AverageBytesPerSecond\n  fullName: SpeechAudioFormatInfo.AverageBytesPerSecond\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: BitsPerSample\n  nameWithType: SpeechAudioFormatInfo.BitsPerSample\n  fullName: SpeechAudioFormatInfo.BitsPerSample\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: BlockAlign\n  nameWithType: SpeechAudioFormatInfo.BlockAlign\n  fullName: SpeechAudioFormatInfo.BlockAlign\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: ChannelCount\n  nameWithType: SpeechAudioFormatInfo.ChannelCount\n  fullName: SpeechAudioFormatInfo.ChannelCount\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: EncodingFormat\n  nameWithType: SpeechAudioFormatInfo.EncodingFormat\n  fullName: SpeechAudioFormatInfo.EncodingFormat\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: SpeechAudioFormatInfo.Equals(Object)\n  fullName: SpeechAudioFormatInfo.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: FormatSpecificData()\n  nameWithType: SpeechAudioFormatInfo.FormatSpecificData()\n  fullName: SpeechAudioFormatInfo.FormatSpecificData()\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: SpeechAudioFormatInfo.GetHashCode()\n  fullName: SpeechAudioFormatInfo.GetHashCode()\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SamplesPerSecond\n  nameWithType: SpeechAudioFormatInfo.SamplesPerSecond\n  fullName: SpeechAudioFormatInfo.SamplesPerSecond\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SpeechAudioFormatInfo\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo\n  fullName: SpeechAudioFormatInfo.SpeechAudioFormatInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: AverageBytesPerSecond\n  nameWithType: SpeechAudioFormatInfo.AverageBytesPerSecond\n  fullName: SpeechAudioFormatInfo.AverageBytesPerSecond\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: BitsPerSample\n  nameWithType: SpeechAudioFormatInfo.BitsPerSample\n  fullName: SpeechAudioFormatInfo.BitsPerSample\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: BlockAlign\n  nameWithType: SpeechAudioFormatInfo.BlockAlign\n  fullName: SpeechAudioFormatInfo.BlockAlign\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: ChannelCount\n  nameWithType: SpeechAudioFormatInfo.ChannelCount\n  fullName: SpeechAudioFormatInfo.ChannelCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: EncodingFormat\n  nameWithType: SpeechAudioFormatInfo.EncodingFormat\n  fullName: SpeechAudioFormatInfo.EncodingFormat\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: Equals\n  nameWithType: SpeechAudioFormatInfo.Equals\n  fullName: SpeechAudioFormatInfo.Equals\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: FormatSpecificData\n  nameWithType: SpeechAudioFormatInfo.FormatSpecificData\n  fullName: SpeechAudioFormatInfo.FormatSpecificData\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: SpeechAudioFormatInfo.GetHashCode\n  fullName: SpeechAudioFormatInfo.GetHashCode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SamplesPerSecond\n  nameWithType: SpeechAudioFormatInfo.SamplesPerSecond\n  fullName: SpeechAudioFormatInfo.SamplesPerSecond\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.AudioFormat/SpeechAudioFormatInfo.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}