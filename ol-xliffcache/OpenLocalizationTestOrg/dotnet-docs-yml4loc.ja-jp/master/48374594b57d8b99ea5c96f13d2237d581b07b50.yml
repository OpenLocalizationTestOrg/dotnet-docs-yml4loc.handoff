### YamlMime:ManagedReference
items:
- uid: System.Data.DataTableExtensions
  commentId: T:System.Data.DataTableExtensions
  id: DataTableExtensions
  children:
  - System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)
  - System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})
  - System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)
  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  langs:
  - csharp
  name: DataTableExtensions
  nameWithType: DataTableExtensions
  fullName: System.Data.DataTableExtensions
  type: Class
  assemblies:
  - System.Data.DataSetExtensions
  namespace: System.Data
  summary: Defines the extension methods to the <xref href="System.Data.DataTable"></xref> class. <xref href="System.Data.DataTableExtensions"></xref> is a static class.
  syntax:
    content: public static class DataTableExtensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)
  commentId: M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)
  id: AsDataView(System.Data.DataTable)
  parent: System.Data.DataTableExtensions
  langs:
  - csharp
  name: AsDataView(DataTable)
  nameWithType: DataTableExtensions.AsDataView(DataTable)
  fullName: DataTableExtensions.AsDataView(DataTable)
  type: Method
  assemblies:
  - System.Data.DataSetExtensions
  namespace: System.Data
  summary: Creates and returns a LINQ-enabled <xref href="System.Data.DataView"></xref> object.
  remarks: "<xref:System.Data.DataView> enables data-binding scenarios for [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] and can be created from a typed or untyped <xref:System.Data.DataTable>, providing a default view of that table. Filtering and sorting can be set on the <xref:System.Data.DataView> after it has been created from a <xref:System.Data.DataTable>. The <xref:System.Data.DataView> is then bound to a UI control, such as a <xref:System.Windows.Forms.DataGrid> or a <xref:System.Windows.Forms.DataGridView>, providing a simple data binding model.  \n  \n For more information and examples, see [Creating a DataView Object](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)."
  example:
  - "The following example creates a <xref:System.Data.DataView> from the SalesOrderDetail table and sets it as the data source of a <xref:System.Windows.Forms.BindingSource> object, which acts as a proxy for a <xref:System.Windows.Forms.DataGridView> control:  \n  \n [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]\n [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]"
  syntax:
    content: public static System.Data.DataView AsDataView (this System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: The source <xref href="System.Data.DataTable"></xref> from which the LINQ-enabled <xref href="System.Data.DataView"></xref> is created.
    return:
      type: System.Data.DataView
      description: A LINQ-enabled <xref href="System.Data.DataView"></xref> object.
  overload: System.Data.DataTableExtensions.AsDataView*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})
  commentId: M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})
  id: AsDataView``1(System.Data.EnumerableRowCollection{``0})
  parent: System.Data.DataTableExtensions
  langs:
  - csharp
  name: AsDataView<T>(EnumerableRowCollection<T>)
  nameWithType: DataTableExtensions.AsDataView<T>(EnumerableRowCollection<T>)
  fullName: DataTableExtensions.AsDataView<T>(EnumerableRowCollection<T>)
  type: Method
  assemblies:
  - System.Data.DataSetExtensions
  namespace: System.Data
  summary: Creates and returns a LINQ-enabled <xref href="System.Data.DataView"></xref> object representing the [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] query.
  remarks: "<xref:System.Data.DataView> enables data binding scenarios for [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] and can be created from a [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] query. The <xref:System.Data.DataView> represents the query itself, and is not a view on top of the query. The newly created <xref:System.Data.DataView> infers the filtering and sorting information from the query it is created from. The <xref:System.Data.DataView> is then bound to a UI control, such as a <xref:System.Windows.Forms.DataGrid> or a <xref:System.Windows.Forms.DataGridView>, providing a simple data-binding model.  \n  \n The parameter `T` of the input parameter `source` can only be of type <xref:System.Data.DataRow> or a type derived from <xref:System.Data.DataRow>.  \n  \n The following query operators, only, are supported in a query used to create <xref:System.Data.DataView>:  \n  \n-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  \n  \n-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  \n  \n-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  \n  \n-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  \n  \n-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  \n  \n-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  \n  \n-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  \n  \n For more information and examples, see [Creating a DataView Object](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)."
  example:
  - "The following example creates a <xref:System.Data.DataView> of online orders ordered by total due:  \n  \n [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]\n [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]"
  syntax:
    content: 'public static System.Data.DataView AsDataView<T> (this System.Data.EnumerableRowCollection<T> source) where T : System.Data.DataRow;'
    parameters:
    - id: source
      type: System.Data.EnumerableRowCollection{T}
      description: The source [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] query from which the LINQ-enabled <xref href="System.Data.DataView"></xref> is created.
    typeParameters:
    - id: T
      description: The type of objects in the source sequence, typically <xref href="System.Data.DataRow"></xref>.
    return:
      type: System.Data.DataView
      description: A LINQ-enabled <xref href="System.Data.DataView"></xref> object.
  overload: System.Data.DataTableExtensions.AsDataView``1*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)
  commentId: M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)
  id: AsEnumerable(System.Data.DataTable)
  parent: System.Data.DataTableExtensions
  langs:
  - csharp
  name: AsEnumerable(DataTable)
  nameWithType: DataTableExtensions.AsEnumerable(DataTable)
  fullName: DataTableExtensions.AsEnumerable(DataTable)
  type: Method
  assemblies:
  - System.Data.DataSetExtensions
  namespace: System.Data
  summary: Returns an <xref href="System.Collections.Generic.IEnumerable`1"></xref> object, where the generic parameter <code>T</code> is <xref href="System.Data.DataRow"></xref>. This object can be used in a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] expression or method query.
  remarks: "[!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] queries work on data sources that implement the <xref:System.Collections.Generic.IEnumerable%601> interface or the <xref:System.Query.IQueryable%601> interface.  The <xref:System.Data.DataTable> class does not implement either interface, so you must call the <xref:System.Data.DataTableExtensions.AsEnumerable%2A> method to use the <xref:System.Data.DataTable> as a source in the `From` clause of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query. You can also obtain custom, domain-specific operators, such as <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, by returning an <xref:System.Collections.Generic.IEnumerable%601> object.  \n  \n The enumerable object returned by the <xref:System.Data.DataTableExtensions.AsEnumerable%2A> method is permanently bound to the <xref:System.Data.DataTable> that produced it. Multiple calls to the <xref:System.Data.DataTableExtensions.AsEnumerable%2A> method will return multiple, independent queryable objects that are all bound to the source <xref:System.Data.DataTable>."
  example:
  - "In the following sample, the `DisplayProducts` method receives a DataTable that contains a DataColumn named `ProductName`, extracts the `ProductName` values and then prints the values.  \n  \n [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]\n [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]"
  syntax:
    content: public static System.Data.EnumerableRowCollection<System.Data.DataRow> AsEnumerable (this System.Data.DataTable source);
    parameters:
    - id: source
      type: System.Data.DataTable
      description: The source <xref href="System.Data.DataTable"></xref> to make enumerable.
    return:
      type: System.Data.EnumerableRowCollection{System.Data.DataRow}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> object, where the generic parameter <code>T</code> is <xref href="System.Data.DataRow"></xref>.
  overload: System.Data.DataTableExtensions.AsEnumerable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The source <xref href="System.Data.DataTable"></xref> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  id: CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Data.DataTableExtensions
  langs:
  - csharp
  name: CopyToDataTable<T>(IEnumerable<T>)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Data.DataSetExtensions
  namespace: System.Data
  summary: Returns a <xref href="System.Data.DataTable"></xref> that contains copies of the <xref href="System.Data.DataRow"></xref> objects, given an input <xref href="System.Collections.Generic.IEnumerable`1"></xref> object where the generic parameter <code>T</code> is <xref href="System.Data.DataRow"></xref>.
  remarks: "The parameter `T` of the input parameter `source` can only be of type <xref:System.Data.DataRow> or a type derived from <xref:System.Data.DataRow>.  \n  \n The input sequence can be any <xref:System.Collections.Generic.IEnumerable%601> source, not only a query or a query over a <xref:System.Data.DataTable>. Note that if the source sequence is a query, calling this operator will force immediate execution. Enumerating the source sequence can also cause exceptions to be thrown.  \n  \n The schema of the destination table is based on the schema of the first <xref:System.Data.DataRow> row in the source sequence. The table metadata is extracted from the <xref:System.Data.DataRow> metadata and the table values from the column values of the <xref:System.Data.DataRow>. For a typed <xref:System.Data.DataTable>, types are not preserved. The data and schema are transferred, but the resulting rows of the output table will not be of the typed <xref:System.Data.DataRow> type. The <xref:System.Data.DataRow.RowState%2A> and <xref:System.Data.DataRow.RowError%2A> properties are not preserved during the copy from the source <xref:System.Data.DataRow> to the returned <xref:System.Data.DataTable>.  \n  \n When a **null** reference or nullable type with a value of **null** is found in a source <xref:System.Data.DataRow>, this method replaces the value in the destination <xref:System.Data.DataTable> with a value of <xref:System.DBNull.Value>.  \n  \n The generated table returned by the method has the default table name. If you want to name the <xref:System.Data.DataTable>, attach it to a <xref:System.Data.DataSet>, or perform any other <xref:System.Data.DataTable> specific operation, you must do so after the table is created and returned.  \n  \n For more information, see [Creating a DataTable From a Query](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)."
  example:
  - "The following example queries the SalesOrderHeader table for orders after August 8, 2001, and uses the <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> method to create a <xref:System.Data.DataTable> from that query. The <xref:System.Data.DataTable> is then bound to a <xref:System.Windows.Forms.BindingSource>, which acts as proxy for a <xref:System.Windows.Forms.DataGridView>.  \n  \n [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]\n [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]"
  syntax:
    content: 'public static System.Data.DataTable CopyToDataTable<T> (this System.Collections.Generic.IEnumerable<T> source) where T : System.Data.DataRow;'
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: The source <xref href="System.Collections.Generic.IEnumerable`1"></xref> sequence.
    typeParameters:
    - id: T
      description: The type of objects in the source sequence, typically <xref href="System.Data.DataRow"></xref>.
    return:
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable"></xref> that contains the input sequence as the type of <xref href="System.Data.DataRow"></xref> objects.
  overload: System.Data.DataTableExtensions.CopyToDataTable``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The source <xref href="System.Collections.Generic.IEnumerable`1"></xref> sequence is `null` and a new table cannot be created.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <xref href=\"System.Data.DataRow\"></xref> in the source sequence has a state of <xref href=\"System.Data.DataRowState.Deleted\"></xref>.  \n  \n The source sequence does not contain any <xref href=\"System.Data.DataRow\"></xref> objects.  \n  \n A <xref href=\"System.Data.DataRow\"></xref> in the source sequence is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
  commentId: M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
  id: CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
  parent: System.Data.DataTableExtensions
  langs:
  - csharp
  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
  type: Method
  assemblies:
  - System.Data.DataSetExtensions
  namespace: System.Data
  summary: Copies <xref href="System.Data.DataRow"></xref> objects to the specified <xref href="System.Data.DataTable"></xref>, given an input <xref href="System.Collections.Generic.IEnumerable`1"></xref> object where the generic parameter <code>T</code> is <xref href="System.Data.DataRow"></xref>.
  remarks: "The parameter `T` of the input parameter `source` can only be of type <xref:System.Data.DataRow>, or a type derived from <xref:System.Data.DataRow>.  \n  \n The input sequence can be any <xref:System.Collections.Generic.IEnumerable%601> source, not only a query over a <xref:System.Data.DataTable>. Note that if the source sequence is a query, calling this operator will force immediate execution. Enumerating the source sequence can also cause exceptions to be thrown.  \n  \n The schema of the destination table is based on the schema of the first <xref:System.Data.DataRow> row in the source sequence. The table metadata is extracted from the <xref:System.Data.DataRow> metadata and the table values from the column values of the <xref:System.Data.DataRow>. For a typed <xref:System.Data.DataTable>, types are not preserved. The data and schema are transferred, but the resulting rows of the output table will not be of the typed <xref:System.Data.DataRow> type. The <xref:System.Data.DataRow.RowState%2A> and <xref:System.Data.DataRow.RowError%2A> properties are not preserved during the copy from the source <xref:System.Data.DataRow> to the returned <xref:System.Data.DataTable>.  \n  \n When a **null** reference or nullable type with a value of **null** is found in a source <xref:System.Data.DataRow>, this method replaces the value in the destination <xref:System.Data.DataTable> with a value of <xref:System.DBNull.Value>.  \n  \n The generated table returned by the method has the default table name. If you want to name the <xref:System.Data.DataTable>, attach it to a <xref:System.Data.DataSet>, or perform any other <xref:System.Data.DataTable> specific operation, you must do so after the table is created and returned.  \n  \n For more information, see [Creating a DataTable From a Query](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)."
  syntax:
    content: 'public static void CopyToDataTable<T> (this System.Collections.Generic.IEnumerable<T> source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;'
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: The source <xref href="System.Collections.Generic.IEnumerable`1"></xref> sequence.
    - id: table
      type: System.Data.DataTable
      description: The destination <xref href="System.Data.DataTable"></xref>.
    - id: options
      type: System.Data.LoadOption
      description: A <xref href="System.Data.LoadOption"></xref> enumeration that specifies the <xref href="System.Data.DataTable"></xref> load options.
    typeParameters:
    - id: T
      description: The type of objects in the source sequence, typically <xref href="System.Data.DataRow"></xref>.
  overload: System.Data.DataTableExtensions.CopyToDataTable``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The copied <xref href="System.Data.DataRow"></xref> objects do not fit the schema of the destination <xref href="System.Data.DataTable"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The source <xref href="System.Collections.Generic.IEnumerable`1"></xref> sequence is `null` or the destination <xref href="System.Data.DataTable"></xref> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <xref href=\"System.Data.DataRow\"></xref> in the source sequence has a state of <xref href=\"System.Data.DataRowState.Deleted\"></xref>.  \n  \n The source sequence does not contain any <xref href=\"System.Data.DataRow\"></xref> objects.  \n  \n A <xref href=\"System.Data.DataRow\"></xref> in the source sequence is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  commentId: M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  id: CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTableExtensions
  langs:
  - csharp
  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
  type: Method
  assemblies:
  - System.Data.DataSetExtensions
  namespace: System.Data
  summary: Copies <xref href="System.Data.DataRow"></xref> objects to the specified <xref href="System.Data.DataTable"></xref>, given an input <xref href="System.Collections.Generic.IEnumerable`1"></xref> object where the generic parameter <code>T</code> is <xref href="System.Data.DataRow"></xref>.
  remarks: "The parameter `T` of the input parameter `source` can only be of type <xref:System.Data.DataRow>, or a type derived from <xref:System.Data.DataRow>.  \n  \n The input sequence can be any <xref:System.Collections.Generic.IEnumerable%601> source, not only a query over a <xref:System.Data.DataTable>. Note that if the source sequence is a query, calling this operator will force immediate execution. Enumerating the source sequence can also cause exceptions to be thrown.  \n  \n The schema of the destination table is based on the schema of the first <xref:System.Data.DataRow> row in the source sequence. The table metadata is extracted from the <xref:System.Data.DataRow> metadata and the table values from the column values of the <xref:System.Data.DataRow>. For a typed <xref:System.Data.DataTable>, types are not preserved. The data and schema are transferred, but the resulting rows of the output table will not be of the typed <xref:System.Data.DataRow> type. The <xref:System.Data.DataRow.RowState%2A> and <xref:System.Data.DataRow.RowError%2A> properties are not preserved during the copy from the source <xref:System.Data.DataRow> to the returned <xref:System.Data.DataTable>.  \n  \n When a **null** reference or nullable type with a value of **null** is found in a source <xref:System.Data.DataRow>, this method replaces the value in the destination <xref:System.Data.DataTable> with a value of <xref:System.DBNull.Value>.  \n  \n The generated table returned by the method has the default table name. If you want to name the <xref:System.Data.DataTable>, attach it to a <xref:System.Data.DataSet>, or perform any other <xref:System.Data.DataTable> specific operation, you must do so after the table is created and returned.  \n  \n If an exception is thrown during the copy of a data row into the target table, such as a constraint exception, the `errorHandler` delegate is called. A <xref:System.Data.FillErrorEventArgs> is passed to the `errorHandler` delegate with the following values:  \n  \n-   The <xref:System.Data.FillErrorEventArgs.Values%2A> property is set to a copy of the source data.  \n  \n-   The <xref:System.Data.FillErrorEventArgs.DataTable%2A> property is set to the target <xref:System.Data.DataTable>.  \n  \n-   The <xref:System.Data.FillErrorEventArgs.Errors%2A> property is set to the caught exception.  \n  \n The <xref:System.Data.FillErrorEventArgs.Continue%2A> property is read after the delegate call returns. If the <xref:System.Data.FillErrorEventArgs.Continue%2A> property is `true`, the source sequence continues to be enumerated and loaded into the data table. If the <xref:System.Data.FillErrorEventArgs.Continue%2A> property is `false`, the original exception is thrown from the <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> method.  \n  \n For more information, see [Creating a DataTable From a Query](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)."
  syntax:
    content: 'public static void CopyToDataTable<T> (this System.Collections.Generic.IEnumerable<T> source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;'
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: The source <xref href="System.Collections.Generic.IEnumerable`1"></xref> sequence.
    - id: table
      type: System.Data.DataTable
      description: The destination <xref href="System.Data.DataTable"></xref>.
    - id: options
      type: System.Data.LoadOption
      description: A <xref href="System.Data.LoadOption"></xref> enumeration that specifies the <xref href="System.Data.DataTable"></xref> load options.
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: A <xref href="System.Data.FillErrorEventHandler"></xref> delegate that represents the method that will handle an error.
    typeParameters:
    - id: T
      description: The type of objects in the source sequence, typically <xref href="System.Data.DataRow"></xref>.
  overload: System.Data.DataTableExtensions.CopyToDataTable``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The copied <xref href="System.Data.DataRow"></xref> objects do not fit the schema of the destination <xref href="System.Data.DataTable"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The source <xref href="System.Collections.Generic.IEnumerable`1"></xref> sequence is `null` or the destination <xref href="System.Data.DataTable"></xref> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <xref href=\"System.Data.DataRow\"></xref> in the source sequence has a state of <xref href=\"System.Data.DataRowState.Deleted\"></xref>.  \n  \n -or-  \n  \n The source sequence does not contain any <xref href=\"System.Data.DataRow\"></xref> objects.  \n  \n -or-  \n  \n A <xref href=\"System.Data.DataRow\"></xref> in the source sequence is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: AsDataView(DataTable)
  nameWithType: DataTableExtensions.AsDataView(DataTable)
  fullName: DataTableExtensions.AsDataView(DataTable)
- uid: System.Data.DataView
  parent: System.Data
  isExternal: false
  name: DataView
  nameWithType: DataView
  fullName: System.Data.DataView
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: AsDataView<T>(EnumerableRowCollection<T>)
  nameWithType: DataTableExtensions.AsDataView<T>(EnumerableRowCollection<T>)
  fullName: DataTableExtensions.AsDataView<T>(EnumerableRowCollection<T>)
- uid: System.Data.EnumerableRowCollection`1
  name: EnumerableRowCollection<TRow>
  nameWithType: EnumerableRowCollection<TRow>
  fullName: System.Data.EnumerableRowCollection<TRow>
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Data.EnumerableRowCollection{T}
  parent: System.Data
  isExternal: false
  name: EnumerableRowCollection<T>
  nameWithType: EnumerableRowCollection<T>
  fullName: System.Data.EnumerableRowCollection<T>
  spec.csharp:
  - uid: System.Data.EnumerableRowCollection`1
    name: EnumerableRowCollection
    nameWithType: EnumerableRowCollection
    fullName: System.Data.EnumerableRowCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: AsEnumerable(DataTable)
  nameWithType: DataTableExtensions.AsEnumerable(DataTable)
  fullName: DataTableExtensions.AsEnumerable(DataTable)
- uid: System.Data.DataRow
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.EnumerableRowCollection{System.Data.DataRow}
  parent: System.Data
  isExternal: false
  name: EnumerableRowCollection<DataRow>
  nameWithType: EnumerableRowCollection<DataRow>
  fullName: System.Data.EnumerableRowCollection<System.Data.DataRow>
  spec.csharp:
  - uid: System.Data.EnumerableRowCollection`1
    name: EnumerableRowCollection
    nameWithType: EnumerableRowCollection
    fullName: System.Data.EnumerableRowCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: System.Data.DataRow
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>(IEnumerable<T>)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataTableExtensions.AsDataView*
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: AsDataView
  nameWithType: DataTableExtensions.AsDataView
  fullName: DataTableExtensions.AsDataView
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
- uid: System.Data.DataTableExtensions.AsDataView``1*
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: AsDataView<T>
  nameWithType: DataTableExtensions.AsDataView<T>
  fullName: DataTableExtensions.AsDataView<T>
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
- uid: System.Data.DataTableExtensions.AsEnumerable*
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: AsEnumerable
  nameWithType: DataTableExtensions.AsEnumerable
  fullName: DataTableExtensions.AsEnumerable
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
- uid: System.Data.DataTableExtensions.CopyToDataTable``1*
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>
  nameWithType: DataTableExtensions.CopyToDataTable<T>
  fullName: DataTableExtensions.CopyToDataTable<T>
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataTableExtensions.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
