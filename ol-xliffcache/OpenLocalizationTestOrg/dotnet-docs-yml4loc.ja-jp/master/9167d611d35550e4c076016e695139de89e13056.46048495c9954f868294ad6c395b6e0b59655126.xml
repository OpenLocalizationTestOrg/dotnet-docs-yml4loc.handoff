{"nodes":[{"content":"Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.","nodes":[{"pos":[0,160],"content":"Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.","nodes":[{"content":"Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.","pos":[0,160]}]}],"pos":[390,551],"yaml":true},{"content":"This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object. For example, one number can be larger than a second number, and one string can appear in alphabetical order before another. It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type. Typically, the method is not called directly from developer code. Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.  \n  \n Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface. The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.  \n  \n The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|Less than zero|This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order.|  \n|Zero|This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument.|  \n|Greater than zero|This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order.|  \n  \n All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>. Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.","nodes":[{"pos":[0,812],"content":"This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object. For example, one number can be larger than a second number, and one string can appear in alphabetical order before another. It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type. Typically, the method is not called directly from developer code. Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.","nodes":[{"content":"This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object. For example, one number can be larger than a second number, and one string can appear in alphabetical order before another. It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type. Typically, the method is not called directly from developer code. Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.","pos":[0,812],"nodes":[{"content":"This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object.","pos":[0,177]},{"content":"For example, one number can be larger than a second number, and one string can appear in alphabetical order before another.","pos":[178,301]},{"content":"It requires that implementing types define a single method, <ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type.","pos":[302,557],"source":" It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type."},{"content":"Typically, the method is not called directly from developer code.","pos":[558,623]},{"content":"Instead, it is called automatically by methods such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>.","pos":[624,812],"source":" Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>."}]}]},{"pos":[819,1126],"content":"Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface. The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.","nodes":[{"content":"Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface. The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.","pos":[0,307],"nodes":[{"content":"Typically, types that provide an <ph id=\"ph1\">&lt;xref:System.IComparable%601&gt;</ph> implementation also implement the <ph id=\"ph2\">&lt;xref:System.IEquatable%601&gt;</ph> interface.","pos":[0,136],"source":"Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IEquatable%601&gt;</ph> interface defines the <ph id=\"ph2\">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, which determines the equality of instances of the implementing type.","pos":[137,307],"source":" The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type."}]}]},{"pos":[1133,1313],"content":"The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.","nodes":[{"content":"The implementation of the <ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> method must return an <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> that has one of three values, as shown in the following table.","pos":[0,180],"source":"The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table."}]},{"pos":[1320,1325],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[1326,1333],"content":"Meaning","nodes":[{"content":"Meaning","pos":[0,7]}]},{"pos":[1368,1382],"content":"Less than zero","nodes":[{"content":"Less than zero","pos":[0,14]}]},{"pos":[1383,1500],"content":"This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order.","nodes":[{"content":"This object precedes the object specified by the <ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method in the sort order.","pos":[0,117],"source":"This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order."}]},{"pos":[1505,1509],"content":"Zero","nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[1510,1668],"content":"This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument.","nodes":[{"content":"This current instance occurs in the same position in the sort order as the object specified by the <ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method argument.","pos":[0,158],"source":"This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument."}]},{"pos":[1673,1690],"content":"Greater than zero","nodes":[{"content":"Greater than zero","pos":[0,17]}]},{"pos":[1691,1826],"content":"This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order.","nodes":[{"content":"This current instance follows the object specified by the <ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method argument in the sort order.","pos":[0,135],"source":"This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order."}]},{"pos":[1834,2166],"content":"All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>. Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.","nodes":[{"content":"All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>. Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.","pos":[0,332],"nodes":[{"content":"All numeric types (such as <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph>) implement <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph>, as do <ph id=\"ph4\">&lt;xref:System.String&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Char&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.DateTime&gt;</ph>.","pos":[0,189],"source":"All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>."},{"content":"Custom types should also provide their own implementation of <ph id=\"ph1\">&lt;xref:System.IComparable%601&gt;</ph> to enable object instances to be ordered or sorted.","pos":[190,332],"source":" Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted."}]}]}],"pos":[562,2743],"yaml":true,"extradata":"MT"},{"content":"The type of object to compare.","nodes":[{"pos":[0,30],"content":"The type of object to compare.","nodes":[{"content":"The type of object to compare.","pos":[0,30]}]}],"pos":[3864,3895],"yaml":true},{"content":"Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.","nodes":[{"pos":[0,222],"content":"Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.","nodes":[{"content":"Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.","pos":[0,222]}]}],"pos":[6471,6694],"yaml":true},{"content":"<xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object. Because of this, it is usually not called directly from developer code. Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.  \n  \n This method is only a definition and must be implemented by a specific class or value type to have effect. The meaning of the comparisons specified in the Return Values section (\"precedes\", \"occurs in the same position as\", and \"follows) depends on the particular implementation.  \n  \n By definition, any object compares greater than `null`, and two null references compare equal to each other.","nodes":[{"pos":[0,400],"content":"<xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object. Because of this, it is usually not called directly from developer code. Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.","nodes":[{"content":"<xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object. Because of this, it is usually not called directly from developer code. Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.","pos":[0,400],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> provides a strongly typed comparison method for ordering members of a generic collection object.","pos":[0,139],"source":"<xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object."},{"content":"Because of this, it is usually not called directly from developer code.","pos":[140,211]},{"content":"Instead, it is called automatically by methods such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>.","pos":[212,400],"source":" Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>."}]}]},{"pos":[407,686],"content":"This method is only a definition and must be implemented by a specific class or value type to have effect. The meaning of the comparisons specified in the Return Values section (\"precedes\", \"occurs in the same position as\", and \"follows) depends on the particular implementation.","nodes":[{"content":"This method is only a definition and must be implemented by a specific class or value type to have effect. The meaning of the comparisons specified in the Return Values section (\"precedes\", \"occurs in the same position as\", and \"follows) depends on the particular implementation.","pos":[0,279],"nodes":[{"content":"This method is only a definition and must be implemented by a specific class or value type to have effect.","pos":[0,106]},{"content":"The meaning of the comparisons specified in the Return Values section (\"precedes\", \"occurs in the same position as\", and \"follows) depends on the particular implementation.","pos":[107,279]}]}]},{"pos":[693,801],"content":"By definition, any object compares greater than <ph id=\"ph1\">`null`</ph>, and two null references compare equal to each other.","source":"By definition, any object compares greater than `null`, and two null references compare equal to each other."}],"pos":[6705,7518],"yaml":true,"extradata":"MT"},{"content":"An object to compare with this instance.","nodes":[{"pos":[0,40],"content":"An object to compare with this instance.","nodes":[{"content":"An object to compare with this instance.","pos":[0,40]}]}],"pos":[8645,8686],"yaml":true},{"content":"A value that indicates the relative order of the objects being compared. The return value has these meanings:  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> This instance precedes <code>other</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance occurs in the same position in the sort order as <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> This instance follows <code>other</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,109],"content":"A value that indicates the relative order of the objects being compared. The return value has these meanings:","nodes":[{"content":"A value that indicates the relative order of the objects being compared. The return value has these meanings:","pos":[0,109],"nodes":[{"content":"A value that indicates the relative order of the objects being compared.","pos":[0,72]},{"content":"The return value has these meanings:","pos":[73,109]}]}]},{"pos":[116,582],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> This instance precedes <code>other</code> in the sort order.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance occurs in the same position in the sort order as <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> This instance follows <code>other</code> in the sort order.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Meaning","pos":[45,57],"source":" Meaning  \n  \n "},{"content":"Less than zero","pos":[93,112],"source":" Less than zero  \n  \n "},{"content":" This instance precedes <code>other</code> in the sort order.  \n  \n ","pos":[123,191],"nodes":[{"content":"This instance precedes <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph> in the sort order.","pos":[1,61],"source":" This instance precedes <code>other</code> in the sort order."}]},{"content":"Zero","pos":[210,219],"source":" Zero  \n  \n "},{"content":" This instance occurs in the same position in the sort order as <code>other</code>.  \n  \n ","pos":[230,320],"nodes":[{"content":"This instance occurs in the same position in the sort order as <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,83],"source":" This instance occurs in the same position in the sort order as <code>other</code>."}]},{"content":"Greater than zero","pos":[339,361],"source":" Greater than zero  \n  \n "},{"content":" This instance follows <code>other</code> in the sort order.  \n  \n ","pos":[372,439],"nodes":[{"content":"This instance follows <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph> in the sort order.","pos":[1,60],"source":" This instance follows <code>other</code> in the sort order."}]}]}],"pos":[8742,9344],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IComparable`1\n  commentId: T:System.IComparable`1\n  id: IComparable`1\n  children:\n  - System.IComparable`1.CompareTo(`0)\n  langs:\n  - csharp\n  name: IComparable<T>\n  nameWithType: IComparable<T>\n  fullName: System.IComparable<T>\n  type: Interface\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.\n  remarks: \"This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object. For example, one number can be larger than a second number, and one string can appear in alphabetical order before another. It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type. Typically, the method is not called directly from developer code. Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.  \\n  \\n Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface. The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.  \\n  \\n The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.  \\n  \\n|Value|Meaning|  \\n|-----------|-------------|  \\n|Less than zero|This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order.|  \\n|Zero|This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument.|  \\n|Greater than zero|This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order.|  \\n  \\n All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>. Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.\"\n  example:\n  - \"The following code example illustrates the implementation of  <xref:System.IComparable%601> for a simple `Temperature` object. The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence. In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.  \\n  \\n [!code-cpp[IComparable\\\\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]\\n [!code-csharp[IComparable\\\\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]\\n [!code-vb[IComparable\\\\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public interface IComparable<in T>\n    typeParameters:\n    - id: T\n      description: The type of object to compare.\n  derivedClasses:\n  - Microsoft.FSharp.Collections.FSharpList`1\n  - Microsoft.FSharp.Core.FSharpChoice`2\n  - Microsoft.FSharp.Core.FSharpChoice`3\n  - Microsoft.FSharp.Core.FSharpChoice`4\n  - Microsoft.FSharp.Core.FSharpChoice`5\n  - Microsoft.FSharp.Core.FSharpChoice`6\n  - Microsoft.FSharp.Core.FSharpChoice`7\n  - Microsoft.FSharp.Core.FSharpOption`1\n  - Microsoft.FSharp.Core.FSharpRef`1\n  - System.Boolean\n  - System.Byte\n  - System.Char\n  - System.DateTime\n  - System.DateTimeOffset\n  - System.Decimal\n  - System.Double\n  - System.Guid\n  - System.Int16\n  - System.Int32\n  - System.Int64\n  - System.SByte\n  - System.Single\n  - System.String\n  - System.TimeSpan\n  - System.UInt16\n  - System.UInt32\n  - System.UInt64\n  - System.ValueTuple\n  - System.ValueTuple`1\n  - System.ValueTuple`2\n  - System.ValueTuple`3\n  - System.ValueTuple`4\n  - System.ValueTuple`5\n  - System.ValueTuple`6\n  - System.ValueTuple`7\n  - System.ValueTuple`8\n  - System.Version\n  - System.IO.Log.SequenceNumber\n  - System.Numerics.BigInteger\n  - System.Security.Principal.SecurityIdentifier\n  - System.ServiceModel.Discovery.DiscoveryMessageSequence\n  implements: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IComparable`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IComparable`1.CompareTo(`0)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n  id: CompareTo(`0)\n  parent: System.IComparable`1\n  langs:\n  - csharp\n  name: CompareTo(T)\n  nameWithType: IComparable<T>.CompareTo(T)\n  fullName: IComparable<T>.CompareTo(T)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.\n  remarks: \"<xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object. Because of this, it is usually not called directly from developer code. Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.  \\n  \\n This method is only a definition and must be implemented by a specific class or value type to have effect. The meaning of the comparisons specified in the Return Values section (\\\"precedes\\\", \\\"occurs in the same position as\\\", and \\\"follows) depends on the particular implementation.  \\n  \\n By definition, any object compares greater than `null`, and two null references compare equal to each other.\"\n  example:\n  - \"The following code example illustrates the implementation of <xref:System.IComparable> for a simple `Temperature` object. The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence. In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.  \\n  \\n [!code-cpp[IComparable\\\\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]\\n [!code-csharp[IComparable\\\\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]\\n [!code-vb[IComparable\\\\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public int CompareTo (T other);\n    parameters:\n    - id: other\n      type: T\n      description: An object to compare with this instance.\n    return:\n      type: System.Int32\n      description: \"A value that indicates the relative order of the objects being compared. The return value has these meanings:  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> This instance precedes <code>other</code> in the sort order.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> This instance occurs in the same position in the sort order as <code>other</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> This instance follows <code>other</code> in the sort order.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.IComparable`1.CompareTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IComparable`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.IComparable`1.CompareTo(`0)\n  parent: System.IComparable`1\n  isExternal: false\n  name: CompareTo(T)\n  nameWithType: IComparable<T>.CompareTo(T)\n  fullName: IComparable<T>.CompareTo(T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.IComparable`1.CompareTo*\n  parent: System.IComparable`1\n  isExternal: false\n  name: CompareTo\n  nameWithType: IComparable<T>.CompareTo\n  fullName: IComparable<T>.CompareTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IComparable`1.xml\n"}