{"nodes":[{"content":"Provides methods that control the lifetime of an add-in.","nodes":[{"pos":[0,56],"content":"Provides methods that control the lifetime of an add-in.","nodes":[{"content":"Provides methods that control the lifetime of an add-in.","pos":[0,56]}]}],"pos":[860,917],"yaml":true},{"content":"Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them. This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.  \n  \n When a <xref:System.AddIn.Pipeline.ContractHandle> object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor. When the <xref:System.AddIn.Pipeline.ContractHandle> object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract.  \n  \n Adapters implement the contract. The <xref:System.AddIn.Pipeline.ContractHandle> class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted. Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter. When the adapter class is garbage-collected, the <xref:System.AddIn.Pipeline.ContractHandle> object will also be collected and the <xref:System.AddIn.Pipeline.ContractHandle> object will revoke the lifetime token on the contract.  \n  \n It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class. You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract.","nodes":[{"pos":[0,293],"content":"Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them. This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.","nodes":[{"content":"Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them. This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.","pos":[0,293],"nodes":[{"content":"Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them.","pos":[0,180]},{"content":"This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.","pos":[181,293]}]}]},{"pos":[300,738],"content":"When a <xref:System.AddIn.Pipeline.ContractHandle> object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor. When the <xref:System.AddIn.Pipeline.ContractHandle> object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract.","nodes":[{"content":"When a <xref:System.AddIn.Pipeline.ContractHandle> object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor. When the <xref:System.AddIn.Pipeline.ContractHandle> object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract.","pos":[0,438],"nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object is constructed, it calls the <ph id=\"ph2\">&lt;xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A&gt;</ph> method on the contract that is passed to the constructor.","pos":[0,210],"source":"When a <xref:System.AddIn.Pipeline.ContractHandle> object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object is disposed or finalized, it calls the <ph id=\"ph2\">&lt;xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A&gt;</ph> method on the contract, which removes its hold on the contract.","pos":[211,438],"source":" When the <xref:System.AddIn.Pipeline.ContractHandle> object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract."}]}]},{"pos":[745,1350],"content":"Adapters implement the contract. The <xref:System.AddIn.Pipeline.ContractHandle> class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted. Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter. When the adapter class is garbage-collected, the <xref:System.AddIn.Pipeline.ContractHandle> object will also be collected and the <xref:System.AddIn.Pipeline.ContractHandle> object will revoke the lifetime token on the contract.","nodes":[{"content":"Adapters implement the contract. The <xref:System.AddIn.Pipeline.ContractHandle> class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted. Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter. When the adapter class is garbage-collected, the <xref:System.AddIn.Pipeline.ContractHandle> object will also be collected and the <xref:System.AddIn.Pipeline.ContractHandle> object will revoke the lifetime token on the contract.","pos":[0,605],"nodes":[{"content":"Adapters implement the contract.","pos":[0,32]},{"content":"The <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted.","pos":[33,226],"source":" The <xref:System.AddIn.Pipeline.ContractHandle> class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted."},{"content":"Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter.","pos":[227,375]},{"content":"When the adapter class is garbage-collected, the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object will also be collected and the <ph id=\"ph2\">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object will revoke the lifetime token on the contract.","pos":[376,605],"source":" When the adapter class is garbage-collected, the <xref:System.AddIn.Pipeline.ContractHandle> object will also be collected and the <xref:System.AddIn.Pipeline.ContractHandle> object will revoke the lifetime token on the contract."}]}]},{"pos":[1357,1655],"content":"It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class. You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract.","nodes":[{"content":"It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class. You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract.","pos":[0,298],"nodes":[{"content":"It is recommended that your view-to-contract adapters inherit from the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractBase&gt;</ph> class.","pos":[0,119],"source":"It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class."},{"content":"You can then use a default implementation for the members of <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.IContract&gt;</ph>, which means you need to implement only the members of your specific contract.","pos":[120,298],"source":" You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract."}]}]}],"pos":[928,2592],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> class.","nodes":[{"pos":[0,98],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.AddIn.Pipeline.ContractHandle\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> class."}],"pos":[4550,4649],"yaml":true},{"content":"The contract to use in the pipeline.","nodes":[{"pos":[0,36],"content":"The contract to use in the pipeline.","nodes":[{"content":"The contract to use in the pipeline.","pos":[0,36]}]}],"pos":[4836,4873],"yaml":true},{"content":"<code>contract</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;contract&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>contract</code> is `null`."}],"pos":[5045,5078],"yaml":true},{"content":"Gets the instance of the add-in-side adapter when the application domain was created.","nodes":[{"pos":[0,85],"content":"Gets the instance of the add-in-side adapter when the application domain was created.","nodes":[{"content":"Gets the instance of the add-in-side adapter when the application domain was created.","pos":[0,85]}]}],"pos":[6119,6205],"yaml":true},{"content":"The add-in-side adapters are typed as <xref:System.AddIn.Contract.IContract>.  \n  \n If the application domain was previously created by a user, there is no owner.","nodes":[{"pos":[0,77],"content":"The add-in-side adapters are typed as <xref:System.AddIn.Contract.IContract>.","nodes":[{"content":"The add-in-side adapters are typed as <ph id=\"ph1\">&lt;xref:System.AddIn.Contract.IContract&gt;</ph>.","pos":[0,77],"source":"The add-in-side adapters are typed as <xref:System.AddIn.Contract.IContract>."}]},{"pos":[84,162],"content":"If the application domain was previously created by a user, there is no owner.","nodes":[{"content":"If the application domain was previously created by a user, there is no owner.","pos":[0,78]}]}],"pos":[6216,6383],"yaml":true,"extradata":"MT"},{"content":"The application domain to check.","nodes":[{"pos":[0,32],"content":"The application domain to check.","nodes":[{"content":"The application domain to check.","pos":[0,32]}]}],"pos":[6568,6601],"yaml":true},{"content":"An <xref href=\"System.AddIn.Contract.IContract\"></xref> object that represents the owner of the application domain.","nodes":[{"pos":[0,115],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;&lt;/xref&gt;</ph> object that represents the owner of the application domain.","source":"An <xref href=\"System.AddIn.Contract.IContract\"></xref> object that represents the owner of the application domain."}],"pos":[6676,6792],"yaml":true},{"content":"<code>domain</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;domain&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>domain</code> is `null`."}],"pos":[6973,7004],"yaml":true},{"content":"Gets the contract used by a pipeline.","nodes":[{"pos":[0,37],"content":"Gets the contract used by a pipeline.","nodes":[{"content":"Gets the contract used by a pipeline.","pos":[0,37]}]}],"pos":[7924,7962],"yaml":true},{"content":"The contract, which is derived from <xref href=\"System.AddIn.Contract.IContract\"></xref>.","nodes":[{"pos":[0,89],"content":"The contract, which is derived from <ph id=\"ph1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;&lt;/xref&gt;</ph>.","source":"The contract, which is derived from <xref href=\"System.AddIn.Contract.IContract\"></xref>."}],"pos":[8117,8207],"yaml":true},{"content":"Determines whether an application domain is owned by the specified contract.","nodes":[{"pos":[0,76],"content":"Determines whether an application domain is owned by the specified contract.","nodes":[{"content":"Determines whether an application domain is owned by the specified contract.","pos":[0,76]}]}],"pos":[9495,9572],"yaml":true},{"content":"The contract to check.","nodes":[{"pos":[0,22],"content":"The contract to check.","nodes":[{"content":"The contract to check.","pos":[0,22]}]}],"pos":[9796,9819],"yaml":true},{"content":"The application domain to check.","nodes":[{"pos":[0,32],"content":"The application domain to check.","nodes":[{"content":"The application domain to check.","pos":[0,32]}]}],"pos":[9884,9917],"yaml":true},{"content":"`true` if the contract owns the application domain; otherwise, `false`.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">`true`</ph> if the contract owns the application domain; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the contract owns the application domain; otherwise, `false`."}],"pos":[9975,10049],"yaml":true},{"content":"<code>contract</code> or <code>domain</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;contract&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;domain&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>contract</code> or <code>domain</code> is `null`."}],"pos":[10237,10293],"yaml":true},{"content":"Revokes the lifetime token on a contract, regardless of input.","nodes":[{"pos":[0,62],"content":"Revokes the lifetime token on a contract, regardless of input.","nodes":[{"content":"Revokes the lifetime token on a contract, regardless of input.","pos":[0,62]}]}],"pos":[11211,11274],"yaml":true},{"content":"Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources.","nodes":[{"pos":[0,109],"content":"Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources.","nodes":[{"content":"Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources.","pos":[0,109]}]}],"pos":[12402,12512],"yaml":true},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[12666,12769],"yaml":true},{"content":"Releases the resources associated with the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> instance.","nodes":[{"pos":[0,110],"content":"Releases the resources associated with the <ph id=\"ph1\">&lt;xref href=\"System.AddIn.Pipeline.ContractHandle\"&gt;&lt;/xref&gt;</ph> instance.","source":"Releases the resources associated with the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> instance."}],"pos":[13768,13879],"yaml":true},{"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.AddIn.Pipeline.ContractHandle.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \n  \n When called by the garbage collector, this method calls the <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29> method.","nodes":[{"pos":[0,403],"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.AddIn.Pipeline.ContractHandle.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.","nodes":[{"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.AddIn.Pipeline.ContractHandle.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.","pos":[0,403],"nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;</ph>.","pos":[0,80],"source":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>."},{"content":"Application code should not call this method; an object's <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle.Finalize%2A&gt;</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id=\"ph2\">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt;</ph> method.","pos":[81,403],"source":" Application code should not call this method; an object's <xref:System.AddIn.Pipeline.ContractHandle.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method."}]}]},{"pos":[410,549],"content":"When called by the garbage collector, this method calls the <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29> method.","nodes":[{"content":"When called by the garbage collector, this method calls the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29&gt;</ph> method.","pos":[0,139],"source":"When called by the garbage collector, this method calls the <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29> method."}]}],"pos":[13890,14444],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AddIn.Pipeline.ContractHandle\n  commentId: T:System.AddIn.Pipeline.ContractHandle\n  id: ContractHandle\n  children:\n  - System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)\n  - System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)\n  - System.AddIn.Pipeline.ContractHandle.Contract\n  - System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)\n  - System.AddIn.Pipeline.ContractHandle.Dispose\n  - System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)\n  - System.AddIn.Pipeline.ContractHandle.Finalize\n  langs:\n  - csharp\n  name: ContractHandle\n  nameWithType: ContractHandle\n  fullName: System.AddIn.Pipeline.ContractHandle\n  type: Class\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Provides methods that control the lifetime of an add-in.\n  remarks: \"Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them. This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.  \\n  \\n When a <xref:System.AddIn.Pipeline.ContractHandle> object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor. When the <xref:System.AddIn.Pipeline.ContractHandle> object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract.  \\n  \\n Adapters implement the contract. The <xref:System.AddIn.Pipeline.ContractHandle> class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted. Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter. When the adapter class is garbage-collected, the <xref:System.AddIn.Pipeline.ContractHandle> object will also be collected and the <xref:System.AddIn.Pipeline.ContractHandle> object will revoke the lifetime token on the contract.  \\n  \\n It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class. You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract.\"\n  example:\n  - \"The following example shows how to set the lifetime token handle in a contract-to-view adapter on the add-in side of a pipeline.  \\n  \\n [!code-csharp[AddinP2HostSideAdapters#2](~/samples/snippets/csharp/VS_Snippets_CLR/AddInP2HostSideAdapters/cs/Calc2ContractToViewHostSideAdapter.cs#2)]\\n [!code-vb[AddinP2HostSideAdapters#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInP2HostSideAdapters/vb/Calc2ContractToViewHostSideAdapter.vb#2)]\"\n  syntax:\n    content: 'public class ContractHandle : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)\n  commentId: M:System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)\n  id: '#ctor(System.AddIn.Contract.IContract)'\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: ContractHandle(IContract)\n  nameWithType: ContractHandle.ContractHandle(IContract)\n  fullName: ContractHandle.ContractHandle(IContract)\n  type: Constructor\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Initializes a new instance of the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> class.\n  syntax:\n    content: public ContractHandle (System.AddIn.Contract.IContract contract);\n    parameters:\n    - id: contract\n      type: System.AddIn.Contract.IContract\n      description: The contract to use in the pipeline.\n  overload: System.AddIn.Pipeline.ContractHandle.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>contract</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)\n  commentId: M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)\n  id: AppDomainOwner(System.AppDomain)\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: AppDomainOwner(AppDomain)\n  nameWithType: ContractHandle.AppDomainOwner(AppDomain)\n  fullName: ContractHandle.AppDomainOwner(AppDomain)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Gets the instance of the add-in-side adapter when the application domain was created.\n  remarks: \"The add-in-side adapters are typed as <xref:System.AddIn.Contract.IContract>.  \\n  \\n If the application domain was previously created by a user, there is no owner.\"\n  syntax:\n    content: public static System.AddIn.Contract.IContract AppDomainOwner (AppDomain domain);\n    parameters:\n    - id: domain\n      type: System.AppDomain\n      description: The application domain to check.\n    return:\n      type: System.AddIn.Contract.IContract\n      description: An <xref href=\"System.AddIn.Contract.IContract\"></xref> object that represents the owner of the application domain.\n  overload: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>domain</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.ContractHandle.Contract\n  commentId: P:System.AddIn.Pipeline.ContractHandle.Contract\n  id: Contract\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: Contract\n  nameWithType: ContractHandle.Contract\n  fullName: ContractHandle.Contract\n  type: Property\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Gets the contract used by a pipeline.\n  syntax:\n    content: public System.AddIn.Contract.IContract Contract { get; }\n    return:\n      type: System.AddIn.Contract.IContract\n      description: The contract, which is derived from <xref href=\"System.AddIn.Contract.IContract\"></xref>.\n  overload: System.AddIn.Pipeline.ContractHandle.Contract*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)\n  commentId: M:System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)\n  id: ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: ContractOwnsAppDomain(IContract, AppDomain)\n  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract, AppDomain)\n  fullName: ContractHandle.ContractOwnsAppDomain(IContract, AppDomain)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Determines whether an application domain is owned by the specified contract.\n  syntax:\n    content: public static bool ContractOwnsAppDomain (System.AddIn.Contract.IContract contract, AppDomain domain);\n    parameters:\n    - id: contract\n      type: System.AddIn.Contract.IContract\n      description: The contract to check.\n    - id: domain\n      type: System.AppDomain\n      description: The application domain to check.\n    return:\n      type: System.Boolean\n      description: '`true` if the contract owns the application domain; otherwise, `false`.'\n  overload: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>contract</code> or <code>domain</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose\n  commentId: M:System.AddIn.Pipeline.ContractHandle.Dispose\n  id: Dispose\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ContractHandle.Dispose()\n  fullName: ContractHandle.Dispose()\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Revokes the lifetime token on a contract, regardless of input.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.AddIn.Pipeline.ContractHandle.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)\n  commentId: M:System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ContractHandle.Dispose(Boolean)\n  fullName: ContractHandle.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.AddIn.Pipeline.ContractHandle.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AddIn.Pipeline.ContractHandle.Finalize\n  commentId: M:System.AddIn.Pipeline.ContractHandle.Finalize\n  id: Finalize\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: ContractHandle.Finalize()\n  fullName: ContractHandle.Finalize()\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Releases the resources associated with the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> instance.\n  remarks: \"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.AddIn.Pipeline.ContractHandle.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \\n  \\n When called by the garbage collector, this method calls the <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29> method.\"\n  syntax:\n    content: ~ContractHandle ();\n    parameters: []\n  overload: System.AddIn.Pipeline.ContractHandle.Finalize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: ContractHandle(IContract)\n  nameWithType: ContractHandle.ContractHandle(IContract)\n  fullName: ContractHandle.ContractHandle(IContract)\n- uid: System.AddIn.Contract.IContract\n  parent: System.AddIn.Contract\n  isExternal: false\n  name: IContract\n  nameWithType: IContract\n  fullName: System.AddIn.Contract.IContract\n- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: AppDomainOwner(AppDomain)\n  nameWithType: ContractHandle.AppDomainOwner(AppDomain)\n  fullName: ContractHandle.AppDomainOwner(AppDomain)\n- uid: System.AppDomain\n  parent: System\n  isExternal: false\n  name: AppDomain\n  nameWithType: AppDomain\n  fullName: System.AppDomain\n- uid: System.AddIn.Pipeline.ContractHandle.Contract\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Contract\n  nameWithType: ContractHandle.Contract\n  fullName: ContractHandle.Contract\n- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: ContractOwnsAppDomain(IContract, AppDomain)\n  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract, AppDomain)\n  fullName: ContractHandle.ContractOwnsAppDomain(IContract, AppDomain)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: ContractHandle.Dispose()\n  fullName: ContractHandle.Dispose()\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ContractHandle.Dispose(Boolean)\n  fullName: ContractHandle.Dispose(Boolean)\n- uid: System.AddIn.Pipeline.ContractHandle.Finalize\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Finalize()\n  nameWithType: ContractHandle.Finalize()\n  fullName: ContractHandle.Finalize()\n- uid: System.AddIn.Pipeline.ContractHandle.#ctor*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: ContractHandle\n  nameWithType: ContractHandle.ContractHandle\n  fullName: ContractHandle.ContractHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: AppDomainOwner\n  nameWithType: ContractHandle.AppDomainOwner\n  fullName: ContractHandle.AppDomainOwner\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n- uid: System.AddIn.Pipeline.ContractHandle.Contract*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Contract\n  nameWithType: ContractHandle.Contract\n  fullName: ContractHandle.Contract\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: ContractOwnsAppDomain\n  nameWithType: ContractHandle.ContractOwnsAppDomain\n  fullName: ContractHandle.ContractOwnsAppDomain\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Dispose\n  nameWithType: ContractHandle.Dispose\n  fullName: ContractHandle.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n- uid: System.AddIn.Pipeline.ContractHandle.Finalize*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Finalize\n  nameWithType: ContractHandle.Finalize\n  fullName: ContractHandle.Finalize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/ContractHandle.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}