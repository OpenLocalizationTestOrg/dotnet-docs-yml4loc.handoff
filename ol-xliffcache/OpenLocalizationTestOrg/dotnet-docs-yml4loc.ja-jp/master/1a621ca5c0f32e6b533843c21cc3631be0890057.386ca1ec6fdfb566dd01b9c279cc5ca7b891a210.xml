{"nodes":[{"content":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> class encapsulates a node in the Active Directory Domain Services hierarchy that is returned during a search through <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref>.","nodes":[{"pos":[0,244],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> class encapsulates a node in the Active Directory Domain Services hierarchy that is returned during a search through <ph id=\"ph2\">&lt;xref href=\"System.DirectoryServices.DirectorySearcher\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> class encapsulates a node in the Active Directory Domain Services hierarchy that is returned during a search through <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref>."}],"pos":[551,796],"yaml":true},{"content":"Instances of the <xref:System.DirectoryServices.SearchResult> class are very similar to instances of <xref:System.DirectoryServices.DirectoryEntry> class. The crucial difference is that the <xref:System.DirectoryServices.DirectoryEntry> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for <xref:System.DirectoryServices.SearchResult> is already available in the <xref:System.DirectoryServices.SearchResultCollection>, where it gets returned from a query that is performed with the <xref:System.DirectoryServices.DirectorySearcher> class. Only those properties that are specified through the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName> collection in your query will be available from <xref:System.DirectoryServices.SearchResult>.","nodes":[{"pos":[0,868],"content":"Instances of the <xref:System.DirectoryServices.SearchResult> class are very similar to instances of <xref:System.DirectoryServices.DirectoryEntry> class. The crucial difference is that the <xref:System.DirectoryServices.DirectoryEntry> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for <xref:System.DirectoryServices.SearchResult> is already available in the <xref:System.DirectoryServices.SearchResultCollection>, where it gets returned from a query that is performed with the <xref:System.DirectoryServices.DirectorySearcher> class. Only those properties that are specified through the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName> collection in your query will be available from <xref:System.DirectoryServices.SearchResult>.","nodes":[{"content":"Instances of the <xref:System.DirectoryServices.SearchResult> class are very similar to instances of <xref:System.DirectoryServices.DirectoryEntry> class. The crucial difference is that the <xref:System.DirectoryServices.DirectoryEntry> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for <xref:System.DirectoryServices.SearchResult> is already available in the <xref:System.DirectoryServices.SearchResultCollection>, where it gets returned from a query that is performed with the <xref:System.DirectoryServices.DirectorySearcher> class. Only those properties that are specified through the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName> collection in your query will be available from <xref:System.DirectoryServices.SearchResult>.","pos":[0,868],"nodes":[{"content":"Instances of the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResult&gt;</ph> class are very similar to instances of <ph id=\"ph2\">&lt;xref:System.DirectoryServices.DirectoryEntry&gt;</ph> class.","pos":[0,154],"source":"Instances of the <xref:System.DirectoryServices.SearchResult> class are very similar to instances of <xref:System.DirectoryServices.DirectoryEntry> class."},{"content":"The crucial difference is that the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.DirectoryEntry&gt;</ph> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for <ph id=\"ph2\">&lt;xref:System.DirectoryServices.SearchResult&gt;</ph> is already available in the <ph id=\"ph3\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph>, where it gets returned from a query that is performed with the <ph id=\"ph4\">&lt;xref:System.DirectoryServices.DirectorySearcher&gt;</ph> class.","pos":[155,626],"source":" The crucial difference is that the <xref:System.DirectoryServices.DirectoryEntry> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for <xref:System.DirectoryServices.SearchResult> is already available in the <xref:System.DirectoryServices.SearchResultCollection>, where it gets returned from a query that is performed with the <xref:System.DirectoryServices.DirectorySearcher> class."},{"content":"Only those properties that are specified through the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName&gt;</ph> collection in your query will be available from <ph id=\"ph2\">&lt;xref:System.DirectoryServices.SearchResult&gt;</ph>.","pos":[627,868],"source":" Only those properties that are specified through the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName> collection in your query will be available from <xref:System.DirectoryServices.SearchResult>."}]}]}],"pos":[807,1676],"yaml":true,"extradata":"MT"},{"content":"Retrieves the <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> from the Active Directory Domain Services hierarchy.","nodes":[{"pos":[0,210],"content":"Retrieves the <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;&lt;/xref&gt;</ph> that corresponds to the <ph id=\"ph2\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> from the Active Directory Domain Services hierarchy.","source":"Retrieves the <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> from the Active Directory Domain Services hierarchy."}],"pos":[11556,11767],"yaml":true},{"content":"Use <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> when you want to look at the live entry instead of the entry that was returned through <xref:System.DirectoryServices.DirectorySearcher>, or when you want to invoke a method on the object that was returned.  \n  \n> [!NOTE]\n>  Calling <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> on each <xref:System.DirectoryServices.SearchResult> returned through <xref:System.DirectoryServices.DirectorySearcher> can be slow.","nodes":[{"pos":[0,276],"content":"Use <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> when you want to look at the live entry instead of the entry that was returned through <xref:System.DirectoryServices.DirectorySearcher>, or when you want to invoke a method on the object that was returned.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A&gt;</ph> when you want to look at the live entry instead of the entry that was returned through <ph id=\"ph2\">&lt;xref:System.DirectoryServices.DirectorySearcher&gt;</ph>, or when you want to invoke a method on the object that was returned.","pos":[0,276],"source":"Use <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> when you want to look at the live entry instead of the entry that was returned through <xref:System.DirectoryServices.DirectorySearcher>, or when you want to invoke a method on the object that was returned."}]},{"pos":[284,501],"content":"[!NOTE]\n Calling <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> on each <xref:System.DirectoryServices.SearchResult> returned through <xref:System.DirectoryServices.DirectorySearcher> can be slow.","leadings":["","> "],"nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A&gt;</ph> on each <ph id=\"ph2\">&lt;xref:System.DirectoryServices.SearchResult&gt;</ph> returned through <ph id=\"ph3\">&lt;xref:System.DirectoryServices.DirectorySearcher&gt;</ph> can be slow.","pos":[9,215],"source":" Calling <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> on each <xref:System.DirectoryServices.SearchResult> returned through <xref:System.DirectoryServices.DirectorySearcher> can be slow."}]}],"pos":[11778,12285],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref>.","nodes":[{"pos":[0,148],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;&lt;/xref&gt;</ph> that corresponds to the <ph id=\"ph2\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref>."}],"pos":[14305,14454],"yaml":true},{"content":"Gets the path for this <xref href=\"System.DirectoryServices.SearchResult\"></xref>.","nodes":[{"pos":[0,82],"content":"Gets the path for this <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the path for this <xref href=\"System.DirectoryServices.SearchResult\"></xref>."}],"pos":[15452,15535],"yaml":true},{"content":"The <xref:System.DirectoryServices.SearchResult.Path%2A> property uniquely identifies this entry in the Active Directory Domain Services hierarchy. The entry can always be retrieved using this path.","nodes":[{"pos":[0,198],"content":"The <xref:System.DirectoryServices.SearchResult.Path%2A> property uniquely identifies this entry in the Active Directory Domain Services hierarchy. The entry can always be retrieved using this path.","nodes":[{"content":"The <xref:System.DirectoryServices.SearchResult.Path%2A> property uniquely identifies this entry in the Active Directory Domain Services hierarchy. The entry can always be retrieved using this path.","pos":[0,198],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResult.Path%2A&gt;</ph> property uniquely identifies this entry in the Active Directory Domain Services hierarchy.","pos":[0,147],"source":"The <xref:System.DirectoryServices.SearchResult.Path%2A> property uniquely identifies this entry in the Active Directory Domain Services hierarchy."},{"content":"The entry can always be retrieved using this path.","pos":[148,198]}]}]}],"pos":[15546,15745],"yaml":true,"extradata":"MT"},{"content":"The path of this <xref href=\"System.DirectoryServices.SearchResult\"></xref>.","nodes":[{"pos":[0,76],"content":"The path of this <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph>.","source":"The path of this <xref href=\"System.DirectoryServices.SearchResult\"></xref>."}],"pos":[17148,17225],"yaml":true},{"content":"Gets a <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> collection of properties for this object.","nodes":[{"pos":[0,119],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.ResultPropertyCollection\"&gt;&lt;/xref&gt;</ph> collection of properties for this object.","source":"Gets a <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> collection of properties for this object."}],"pos":[18246,18366],"yaml":true},{"content":"This collection only contains properties that were explicitly requested through <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>.","nodes":[{"pos":[0,175],"content":"This collection only contains properties that were explicitly requested through <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>.","nodes":[{"content":"This collection only contains properties that were explicitly requested through <ph id=\"ph1\">&lt;xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName&gt;</ph>.","pos":[0,175],"source":"This collection only contains properties that were explicitly requested through <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>."}]}],"pos":[18377,18553],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> of properties set on this object.","nodes":[{"pos":[0,106],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.ResultPropertyCollection\"&gt;&lt;/xref&gt;</ph> of properties set on this object.","source":"A <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> of properties set on this object."}],"pos":[21194,21301],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.SearchResult\n  commentId: T:System.DirectoryServices.SearchResult\n  id: SearchResult\n  children:\n  - System.DirectoryServices.SearchResult.GetDirectoryEntry\n  - System.DirectoryServices.SearchResult.Path\n  - System.DirectoryServices.SearchResult.Properties\n  langs:\n  - csharp\n  name: SearchResult\n  nameWithType: SearchResult\n  fullName: System.DirectoryServices.SearchResult\n  type: Class\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: The <xref href=\"System.DirectoryServices.SearchResult\"></xref> class encapsulates a node in the Active Directory Domain Services hierarchy that is returned during a search through <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref>.\n  remarks: Instances of the <xref:System.DirectoryServices.SearchResult> class are very similar to instances of <xref:System.DirectoryServices.DirectoryEntry> class. The crucial difference is that the <xref:System.DirectoryServices.DirectoryEntry> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for <xref:System.DirectoryServices.SearchResult> is already available in the <xref:System.DirectoryServices.SearchResultCollection>, where it gets returned from a query that is performed with the <xref:System.DirectoryServices.DirectorySearcher> class. Only those properties that are specified through the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName> collection in your query will be available from <xref:System.DirectoryServices.SearchResult>.\n  example:\n  - \"The following example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the  <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry identified in the search results.  \\n  \\n```vb  \\nImports System  \\nImports System.DirectoryServices  \\nImports Microsoft.VisualBasic  \\n  \\nPublic Class MySample  \\n   Public Shared Sub Main()  \\n      Dim myLDAPPath As String = \\\"\\\"  \\n      Try  \\n         ' Create a 'DirectoryEntry' object to search.  \\n         Console.WriteLine(\\\"Enter the path ( Ex : 'LDAP://MyServer')\\\")  \\n         myLDAPPath = Console.ReadLine()  \\n         Dim mySearchRoot As New DirectoryEntry(myLDAPPath)  \\n  \\n         Dim myDirectorySearcher As New DirectorySearcher(mySearchRoot)  \\n  \\n         ' Get the first entry of the search.  \\n         Dim mySearchResult As SearchResult = myDirectorySearcher.FindOne()  \\n         If Not (mySearchResult Is Nothing) Then  \\n            ' Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\n            Dim myDirectoryEntry As DirectoryEntry = mySearchResult.GetDirectoryEntry()  \\n            Console.WriteLine(ControlChars.Newline + \\\"The name of the 'myDirectoryEntry' \\\" + _  \\n                        \\\"directory entry that corresponds to the \\\" + _  \\n                        \\\"'mySearchResult' search result is : {0}\\\" + _  \\n                        ControlChars.Newline, myDirectoryEntry.Name)  \\n            Dim mySearchResultPath As String = mySearchResult.Path  \\n            Console.WriteLine(\\\"The path for the 'mySearchResult' search result is : {0}\\\" + _  \\n                              ControlChars.Newline, mySearchResultPath)  \\n            ' Get the properties of the 'mySearchResult'.  \\n            Dim myResultPropColl As ResultPropertyCollection  \\n            myResultPropColl = mySearchResult.Properties  \\n            Console.WriteLine(\\\"The properties of the 'mySearchResult' are :\\\")  \\n            Dim myKey As String  \\n            For Each myKey In  myResultPropColl.PropertyNames  \\n               Dim tab1 As String = \\\"    \\\"  \\n               Console.WriteLine(myKey + \\\" = \\\")  \\n               Dim myCollection As Object  \\n               For Each myCollection In  myResultPropColl(myKey)  \\n                  Console.WriteLine(tab1 + myCollection)  \\n               Next myCollection  \\n            Next myKey  \\n            myDirectoryEntry.Dispose()  \\n            mySearchRoot.Dispose()  \\n         Else  \\n            Console.WriteLine(\\\"The '\\\" + myLDAPPath + \\\"' path not found.\\\")  \\n         End If  \\n      Catch e As Exception  \\n         Console.WriteLine(\\\"The '\\\" + myLDAPPath + \\\"' path not found.\\\")  \\n         Console.WriteLine(\\\"Exception : \\\" & e.Message)  \\n      End Try  \\n   End Sub 'Main  \\nEnd Class 'MySample  \\n```  \\n  \\n```csharp  \\nusing System;  \\nusing System.DirectoryServices;  \\n  \\npublic class MySample  \\n{  \\n    public static void Main()  \\n    {  \\n        string myLDAPPath = \\\"\\\";  \\n        try  \\n        {  \\n            // Create a 'DirectoryEntry' object to search.  \\n            Console.WriteLine(\\\"Enter the path ( Ex : 'LDAP://MyServer')\\\");  \\n            myLDAPPath = Console.ReadLine();  \\n  \\n            DirectoryEntry mySearchRoot = new DirectoryEntry(myLDAPPath);  \\n            DirectorySearcher myDirectorySearcher =   \\n                    new DirectorySearcher(mySearchRoot);  \\n  \\n            // Get the first entry of the search.  \\n            SearchResult mySearchResult = myDirectorySearcher.FindOne();  \\n  \\n            if ( mySearchResult != null )  \\n            {  \\n                // Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\n                DirectoryEntry myDirectoryEntry =   \\n                mySearchResult.GetDirectoryEntry();  \\n                Console.WriteLine(\\\"\\\\nThe name of the 'myDirectoryEntry' \\\" +  \\n                        \\\"directory entry that corresponds to the \\\" +  \\n                        \\\"'mySearchResult' search result is : {0}\\\\n\\\",  \\n                        myDirectoryEntry.Name);  \\n                string mySearchResultPath = mySearchResult.Path;  \\n                Console.WriteLine(\\\"The path for the 'mySearchResult' search \\\"  \\n                        + \\\"result is : {0}\\\\n\\\", mySearchResultPath);  \\n  \\n                // Get the properties of the 'mySearchResult'.  \\n                ResultPropertyCollection myResultPropColl;  \\n                myResultPropColl = mySearchResult.Properties;  \\n                Console.WriteLine(\\\"The properties of the \\\" +   \\n                        \\\"'mySearchResult' are :\\\");  \\n  \\n                foreach( string myKey in myResultPropColl.PropertyNames)  \\n                {  \\n                    string tab = \\\"    \\\";  \\n                    Console.WriteLine(myKey + \\\" = \\\");  \\n                    foreach( Object myCollection in myResultPropColl[myKey])  \\n                    {  \\n                        Console.WriteLine(tab + myCollection);  \\n                    }  \\n                }  \\n                mySearchRoot.Dispose();  \\n                myDirectoryEntry.Dispose();  \\n            }  \\n            else  \\n            {  \\n                Console.WriteLine(\\\"The '\\\" + myLDAPPath + \\\"' path not found.\\\");  \\n            }  \\n        }  \\n        catch(Exception e)  \\n        {  \\n            Console.WriteLine(\\\"The '\\\" + myLDAPPath + \\\"' path not found.\\\");  \\n            Console.WriteLine(\\\"Exception : \\\" + e.Message);  \\n        }  \\n    }  \\n  \\n}  \\n```  \\n  \\n```cpp#  \\n#using <mscorlib.dll>  \\n#using <System.dll>  \\n#using <System.Directoryservices.dll>  \\n  \\nusing namespace System;  \\nusing namespace System::Collections;  \\nusing namespace System::DirectoryServices;  \\nusing namespace stdcli::language;  \\n  \\nint main()   \\n{  \\n    String^ myLDAPPath = \\\"\\\";  \\n    try   \\n    {  \\n        // Create a 'DirectoryEntry' object to search.  \\n        Console::WriteLine(\\\"Enter the path ( Ex : 'LDAP://MyServer')\\\");  \\n        myLDAPPath = Console::ReadLine();  \\n        DirectoryEntry^ mySearchRoot = gcnew DirectoryEntry(myLDAPPath);  \\n  \\n        DirectorySearcher^ myDirectorySearcher = gcnew DirectorySearcher(mySearchRoot);  \\n  \\n        // Get the first entry of the search.  \\n        SearchResult^ mySearchResult = myDirectorySearcher->FindOne();  \\n        if (mySearchResult)   \\n        {  \\n            // Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\n            DirectoryEntry^ myDirectoryEntry = mySearchResult->GetDirectoryEntry();  \\n            Console::WriteLine(  \\n                String::Concat(\\\"\\\\nThe name of the 'myDirectoryEntry' \\\",  \\n                \\\"directory entry that corresponds to the \\\",  \\n                \\\"'mySearchResult' search result is : {0}\\\\n\\\"),  \\n                myDirectoryEntry->Name);  \\n  \\n            String^ mySearchResultPath = mySearchResult->Path;  \\n            Console::WriteLine(\\\"The path for the 'mySearchResult' search result is :  \\n                    {0}\\\\n\\\", mySearchResultPath);  \\n  \\n            // Get the properties of the 'mySearchResult'.  \\n            ResultPropertyCollection^ myResultPropColl = mySearchResult->Properties;  \\n            Console::WriteLine(\\\"The properties of the 'mySearchResult' are :\\\");  \\n            IEnumerator^ myEnum = myResultPropColl->PropertyNames->GetEnumerator();  \\n            while (myEnum->MoveNext())   \\n            {  \\n                String^ myKey = safe_cast<String^>(myEnum->Current);  \\n                Console::WriteLine(\\\"{0} = \\\", myKey);  \\n                IEnumerator^ myEnum = myResultPropColl->Item[myKey]->GetEnumerator();  \\n                while (myEnum->MoveNext())   \\n                {  \\n                    Console::WriteLine(\\\"\\\\t{0}\\\", myEnum->Current);  \\n                }  \\n            }  \\n            myDirectoryEntry->Dispose();  \\n            mySearchRoot->Dispose();   \\n        }   \\n        else   \\n        {  \\n            Console::WriteLine(\\\"The '{0}' path not found.\\\", myLDAPPath);  \\n        }  \\n    }   \\n    catch (Exception^ e)   \\n    {  \\n        Console::WriteLine(\\\"The '{0}' path not found.\\\",  myLDAPPath);  \\n        Console::WriteLine(\\\"Exception : {0}\\\", e->Message);  \\n    }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public class SearchResult\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResult.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResult.GetDirectoryEntry\n  commentId: M:System.DirectoryServices.SearchResult.GetDirectoryEntry\n  id: GetDirectoryEntry\n  parent: System.DirectoryServices.SearchResult\n  langs:\n  - csharp\n  name: GetDirectoryEntry()\n  nameWithType: SearchResult.GetDirectoryEntry()\n  fullName: SearchResult.GetDirectoryEntry()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Retrieves the <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> from the Active Directory Domain Services hierarchy.\n  remarks: \"Use <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> when you want to look at the live entry instead of the entry that was returned through <xref:System.DirectoryServices.DirectorySearcher>, or when you want to invoke a method on the object that was returned.  \\n  \\n> [!NOTE]\\n>  Calling <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> on each <xref:System.DirectoryServices.SearchResult> returned through <xref:System.DirectoryServices.DirectorySearcher> can be slow.\"\n  example:\n  - \"The following example is an excerpt of the example in <xref:System.DirectoryServices.SearchResult>. The original example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry that is identified in the search results.  \\n  \\n```vb  \\n' Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\nDim myDirectoryEntry As DirectoryEntry = mySearchResult.GetDirectoryEntry()  \\nConsole.WriteLine(ControlChars.Newline + \\\"The name of the 'myDirectoryEntry' \\\" + _  \\n            \\\"directory entry that corresponds to the \\\" + _  \\n            \\\"'mySearchResult' search result is : {0}\\\" + _  \\n            ControlChars.Newline, myDirectoryEntry.Name)  \\n  \\n```  \\n  \\n```csharp  \\n// Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\nDirectoryEntry myDirectoryEntry =   \\n                           mySearchResult.GetDirectoryEntry();  \\nConsole.WriteLine(\\\"\\\\nThe name of the 'myDirectoryEntry' \\\" +  \\n                  \\\"directory entry that corresponds to the \\\" +  \\n                  \\\"'mySearchResult' search result is : {0}\\\\n\\\",  \\n                  myDirectoryEntry.Name);  \\n  \\n```  \\n  \\n```cpp#  \\n// Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\nDirectoryEntry^ myDirectoryEntry = mySearchResult->GetDirectoryEntry();  \\nConsole::WriteLine(  \\n    String::Concat(\\\"\\\\nThe name of the 'myDirectoryEntry' \\\",  \\n    \\\"directory entry that corresponds to the \\\",  \\n    \\\"'mySearchResult' search result is : {0}\\\\n\\\"),  \\n    myDirectoryEntry->Name);  \\n```\"\n  syntax:\n    content: public System.DirectoryServices.DirectoryEntry GetDirectoryEntry ();\n    parameters: []\n    return:\n      type: System.DirectoryServices.DirectoryEntry\n      description: The <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref>.\n  overload: System.DirectoryServices.SearchResult.GetDirectoryEntry*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResult.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResult.Path\n  commentId: P:System.DirectoryServices.SearchResult.Path\n  id: Path\n  parent: System.DirectoryServices.SearchResult\n  langs:\n  - csharp\n  name: Path\n  nameWithType: SearchResult.Path\n  fullName: SearchResult.Path\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the path for this <xref href=\"System.DirectoryServices.SearchResult\"></xref>.\n  remarks: The <xref:System.DirectoryServices.SearchResult.Path%2A> property uniquely identifies this entry in the Active Directory Domain Services hierarchy. The entry can always be retrieved using this path.\n  example:\n  - \"The following example is an excerpt of the example in <xref:System.DirectoryServices.SearchResult>. The original example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry that is identified in the search results.  \\n  \\n This example shows how to parse the <xref:System.DirectoryServices.SearchResult.Path%2A> property from the search result.  \\n  \\n```vb  \\nDim mySearchResultPath As String = mySearchResult.Path  \\nConsole.WriteLine(\\\"The path for the 'mySearchResult' search result is : {0}\\\" + _  \\n                  ControlChars.Newline, mySearchResultPath)  \\n  \\n```  \\n  \\n```csharp  \\nstring mySearchResultPath = mySearchResult.Path;  \\nConsole.WriteLine(\\\"The path for the 'mySearchResult' search \\\"  \\n                  + \\\"result is : {0}\\\\n\\\", mySearchResultPath);  \\n```  \\n  \\n```cpp#  \\nString^ mySearchResultPath = mySearchResult->Path;  \\nConsole::WriteLine(\\\"The path for the 'mySearchResult' search result is : {0}\\\\n\\\", mySearchResultPath);  \\n  \\n```\"\n  syntax:\n    content: public string Path { get; }\n    return:\n      type: System.String\n      description: The path of this <xref href=\"System.DirectoryServices.SearchResult\"></xref>.\n  overload: System.DirectoryServices.SearchResult.Path*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResult.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResult.Properties\n  commentId: P:System.DirectoryServices.SearchResult.Properties\n  id: Properties\n  parent: System.DirectoryServices.SearchResult\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: SearchResult.Properties\n  fullName: SearchResult.Properties\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> collection of properties for this object.\n  remarks: This collection only contains properties that were explicitly requested through <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>.\n  example:\n  - \"The following example is an excerpt of the example in <xref:System.DirectoryServices.SearchResult>. The original example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry that is identified in the search results.  \\n  \\n In this example, the search result is put into a <xref:System.DirectoryServices.ResultPropertyCollection>. Then, each property is displayed to the console window.  \\n  \\n```vb  \\n' Get the properties for 'mySearchResult'.  \\nDim myResultPropColl As ResultPropertyCollection  \\nmyResultPropColl = mySearchResult.Properties  \\nConsole.WriteLine(\\\"The properties of the 'mySearchResult' are :\\\")  \\nDim myKey As String  \\nFor Each myKey In  myResultPropColl.PropertyNames  \\n   Dim tab1 As String = \\\"    \\\"  \\n   Console.WriteLine(myKey + \\\" = \\\")  \\n   Dim myCollection As Object  \\n   For Each myCollection In  myResultPropColl(myKey)  \\n      Console.WriteLine(tab1 + myCollection)  \\n   Next myCollection  \\nNext myKey  \\n  \\n```  \\n  \\n```csharp  \\n// Get the properties for 'mySearchResult'.  \\nResultPropertyCollection myResultPropColl;  \\nmyResultPropColl = mySearchResult.Properties;  \\nConsole.WriteLine(\\\"The properties of the \\\" +   \\n                  \\\"'mySearchResult' are :\\\");  \\nforeach( string myKey in myResultPropColl.PropertyNames)  \\n{  \\n   string tab = \\\"    \\\";  \\n   Console.WriteLine(myKey + \\\" = \\\");  \\n   foreach( Object myCollection in myResultPropColl[myKey])  \\n   {  \\n      Console.WriteLine(tab + myCollection);  \\n   }  \\n}  \\n  \\n```  \\n  \\n```cpp#  \\n// Get the properties for 'mySearchResult'.  \\nResultPropertyCollection^ myResultPropColl = mySearchResult->Properties;  \\nConsole::WriteLine(\\\"The properties of the 'mySearchResult' are :\\\");  \\nIEnumerator^ myEnum = myResultPropColl->PropertyNames->GetEnumerator();  \\nwhile (myEnum->MoveNext())   \\n{  \\n    String^ myKey = safe_cast<String^>(myEnum->Current);  \\n    Console::WriteLine(\\\"{0} = \\\", myKey);  \\n    IEnumerator^ myEnum = myResultPropColl->Item[myKey]->GetEnumerator();  \\n    while (myEnum->MoveNext())   \\n    {  \\n        Console::WriteLine(\\\"\\\\t{0}\\\", myEnum->Current);  \\n    }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.DirectoryServices.ResultPropertyCollection Properties { get; }\n    return:\n      type: System.DirectoryServices.ResultPropertyCollection\n      description: A <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> of properties set on this object.\n  overload: System.DirectoryServices.SearchResult.Properties*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResult.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.DirectoryServices.SearchResult.GetDirectoryEntry\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: GetDirectoryEntry()\n  nameWithType: SearchResult.GetDirectoryEntry()\n  fullName: SearchResult.GetDirectoryEntry()\n- uid: System.DirectoryServices.DirectoryEntry\n  parent: System.DirectoryServices\n  isExternal: false\n  name: DirectoryEntry\n  nameWithType: DirectoryEntry\n  fullName: System.DirectoryServices.DirectoryEntry\n- uid: System.DirectoryServices.SearchResult.Path\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: Path\n  nameWithType: SearchResult.Path\n  fullName: SearchResult.Path\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.DirectoryServices.SearchResult.Properties\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: Properties\n  nameWithType: SearchResult.Properties\n  fullName: SearchResult.Properties\n- uid: System.DirectoryServices.ResultPropertyCollection\n  parent: System.DirectoryServices\n  isExternal: false\n  name: ResultPropertyCollection\n  nameWithType: ResultPropertyCollection\n  fullName: System.DirectoryServices.ResultPropertyCollection\n- uid: System.DirectoryServices.SearchResult.GetDirectoryEntry*\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: GetDirectoryEntry\n  nameWithType: SearchResult.GetDirectoryEntry\n  fullName: SearchResult.GetDirectoryEntry\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResult.xml\n- uid: System.DirectoryServices.SearchResult.Path*\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: Path\n  nameWithType: SearchResult.Path\n  fullName: SearchResult.Path\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResult.xml\n- uid: System.DirectoryServices.SearchResult.Properties*\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: Properties\n  nameWithType: SearchResult.Properties\n  fullName: SearchResult.Properties\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResult.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}