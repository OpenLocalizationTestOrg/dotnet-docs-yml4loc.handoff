<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e7990554b869d2fb40bc64994ae380eca6e16de</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Threading.CountdownEvent.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cb527201b075a880b7fec0b1123b762a455f990</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf200c0960df2eb01fd42d911947c90a0e4586d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a synchronization primitive that is signaled when its count reaches zero.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> class with the specified count.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>iI <ph id="ph1">`initialCount`</ph> is 0, the event is created in a signaled state.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The number of signals initially required to set the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;initialCount&lt;/code&gt;</ph> is less than 0.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Increments the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph>'s current count by one.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The current instance is already set.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph> is equal to or greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Increments the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph>'s current count by a specified value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The value by which to increase <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;signalCount&lt;/code&gt;</ph> is less than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The current instance is already set.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph> is equal to or greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph> after count is incremented by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">signalCount.</ph><ept id="p1">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets the number of remaining signals required to set the event.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The number of remaining signals required to set the event.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.CountdownEvent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.CountdownEvent&gt;</ph> in an unusable state.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.CountdownEvent&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.CountdownEvent&gt;</ph> was occupying.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.CountdownEvent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph>, and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.CountdownEvent.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>true to release both managed and unmanaged resources; false to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the numbers of signals initially required to set the event.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The number of signals initially required to set the event.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> object's current count has reached zero..</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> does not raise an event when the countdown has reached zero.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Threading.CountdownEvent.CurrentCount%2A&gt;</ph> property equals zero, and the <ph id="ph2">&lt;xref:System.Threading.CountdownEvent.IsSet%2A&gt;</ph> property equals <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current count is zero; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph> to the value of <ph id="ph2">&lt;xref href="System.Threading.CountdownEvent.InitialCount"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph>, Reset is not thread-safe and may not be used concurrently with other members of this instance.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed..</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.InitialCount"&gt;&lt;/xref&gt;</ph> property to a specified value.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method resets <ph id="ph1">&lt;xref:System.Threading.CountdownEvent.InitialCount%2A&gt;</ph> for all subsequent accesses of the property on the current instance.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph>, Reset is not thread-safe and may not be used concurrently with other members of this instance.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The number of signals required to set the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The current instance has alread been disposed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Registers multiple signals with the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph>, decrementing the value of <ph id="ph2">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph> by the specified amount.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The number of signals to register.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>true if the signals caused the count to reach zero and the event was set; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;signalCount&lt;/code&gt;</ph> is less than 1.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The current instance is already set.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>-or- Or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">signalCount</ph><ept id="p1">&lt;/code&gt;</ept> is greater than <ph id="ph2">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Registers a signal with the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph>, decrementing the value of <ph id="ph2">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>true if the signal caused the count to reach zero and the event was set; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The current instance is already set.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Attempts to increment <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph> by one.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>true if the increment succeeded; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph> is already at zero, this method will return false.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph> is equal to <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Attempts to increment <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph> by a specified value.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The value by which to increase <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>true if the increment succeeded; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph> is already at zero this will return false.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;signalCount&lt;/code&gt;</ph> is less than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The current instance is already set.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Threading.CountdownEvent.CurrentCount"&gt;&lt;/xref&gt;</ph><ph id="ph2"> + </ph><bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">signalCount</ph><ept id="p1">&lt;/code&gt;</ept> is equal to or greater than <ph id="ph4">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> is set.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller will return immediately if the event is currently in a set state.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> is set, using a 32-bit signed integer to measure the timeout.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;xref href="System.Threading.Timeout.Infinite"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>true if the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> was set; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> is set, while observing a <ph id="ph2">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller will return immediately if the event is currently in a set state.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> being observed is canceled during the wait operation, an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> will be thrown.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> to observe.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> has been canceled.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>-or- The <ph id="ph1">&lt;xref href="System.Threading.CancellationTokenSource"&gt;&lt;/xref&gt;</ph> that created <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">cancellationToken</ph><ept id="p1">&lt;/code&gt;</ept> has already been disposed.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> is set, using a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> to measure the timeout.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>true if the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> was set; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> is set, using a 32-bit signed integer to measure the timeout, while observing a <ph id="ph2">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;xref href="System.Threading.Timeout.Infinite"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> to observe.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>true if the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> was set; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> has been canceled.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>-or- The <ph id="ph1">&lt;xref href="System.Threading.CancellationTokenSource"&gt;&lt;/xref&gt;</ph> that created <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">cancellationToken</ph><ept id="p1">&lt;/code&gt;</ept> has already been disposed.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> is set, using a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> to measure the timeout, while observing a <ph id="ph3">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> to observe.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>true if the <ph id="ph1">&lt;xref href="System.Threading.CountdownEvent"&gt;&lt;/xref&gt;</ph> was set; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> has been canceled.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>-or- The <ph id="ph1">&lt;xref href="System.Threading.CancellationTokenSource"&gt;&lt;/xref&gt;</ph> that created <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">cancellationToken</ph><ept id="p1">&lt;/code&gt;</ept> has already been disposed.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> that is used to wait for the event to be set.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Threading.CountdownEvent.WaitHandle%2A&gt;</ph> should only be used if it's needed for integration with code bases that rely on having a WaitHandle.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>If all that's needed is to wait for the <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> to be set, the <ph id="ph2">&lt;xref:System.Threading.CountdownEvent.Wait%2A&gt;</ph> method should be preferred.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> that is used to wait for the event to be set.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>