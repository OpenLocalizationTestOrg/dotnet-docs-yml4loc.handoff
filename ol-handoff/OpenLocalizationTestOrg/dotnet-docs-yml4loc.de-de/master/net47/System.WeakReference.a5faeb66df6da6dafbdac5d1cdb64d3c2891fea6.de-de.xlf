<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">543973e3c3781ce3cecffb68e68c9551b63bd666</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.WeakReference.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cb2e5dd229d8916b70be97f85e557aa3a84df6b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e29753f1a55887583f7e461531a8bc693b4398ea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A weak reference allows the garbage collector to collect an object while still allowing an application to access the object.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need the object, you can still obtain a strong reference to it and prevent it from being collected.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to use short and long weak references, see <bpt id="p1">[</bpt>Weak References<ept id="p1">](~/docs/standard/garbage-collection/weak-references.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> class, referencing the specified object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a short weak reference to <ph id="ph1">`target`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The object to track or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> class, referencing the specified object and using the specified resurrection tracking.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`false`</ph>, a short weak reference is created.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`true`</ph>, a long weak reference is created.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An object to track.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Indicates when to stop tracking the object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the object is tracked after finalization; if <ph id="ph2">`false`</ph>, the object is only tracked until finalization.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> class, using deserialized data from the specified serialization and stream objects.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved, and does not currently participate in this operation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>(Reserved) Describes the source and destination of the serialized stream specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Discards the reference to the target represented by the current <ph id="ph1">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Populates a <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> object with all the data needed to serialize the current <ph id="ph2">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method stores all the information in <ph id="ph1">`info`</ph> necessary to serialize the current <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved and is not currently used in the execution of this method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(Reserved) The location where serialized data is stored and retrieved.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object has been garbage collected.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an object could potentially be reclaimed for garbage collection immediately after the <ph id="ph1">&lt;xref:System.WeakReference.IsAlive%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>, using this property is not recommended unless you are testing only for a <ph id="ph3">`false`</ph> return value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the object referenced by the current <ph id="ph2">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object has not been garbage collected and is still accessible; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets the object (the target) referenced by the current <ph id="ph1">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>After setting this property to the target object, make sure that there are no other strong references to the object; otherwise, it will not be collected.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> if the object referenced by the current <ph id="ph2">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object has been garbage collected; otherwise, a reference to the object referenced by the current <ph id="ph3">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The reference to the target object is invalid.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object is tracked after it is finalized.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`true`</ph>, the weak reference is a long weak reference and <ph id="ph2">`true`</ph> was specified for the <ph id="ph3">`trackResurrection`</ph> parameter in the <ph id="ph4">&lt;xref:System.WeakReference&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the object the current <ph id="ph2">&lt;xref href="System.WeakReference"&gt;&lt;/xref&gt;</ph> object refers to is tracked after finalization; or <ph id="ph3">`false`</ph> if the object is only tracked until finalization.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>