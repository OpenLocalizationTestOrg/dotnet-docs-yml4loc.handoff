<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ecb6f9002c0bd3fd1b28ba2e5b37ec05cfa1c54</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Net.Configuration.UnicodeDecodingConformance.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d97aa1c9d64e89f31015402d5a8938d26b547f05</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11a0d09b9a24cd6a68e23ebf567ef6c776e1db84</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Controls how Unicode characters are interpreted by the <ph id="ph1">&lt;xref href="System.Net.WebUtility.HtmlDecode*"&gt;&lt;/xref&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on how Unicode characters are supposed to be encoded in HTML, see <bpt id="p1">[</bpt>Using character escapes in markup and CSS<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=256607)</ept>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Use automatic behavior.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The decoding behavior is determined by current application's target Framework.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later, the Unicode encoding decoding is strict.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use compatible behavior.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Specifies that incoming data is not checked for validity before being decoded.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, an input string of "<ph id="ph1">&amp;amp;</ph>#xD84C;" would decode as U+D84C, which is an unpaired surrogate.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Additionally, the decoder does not understand code points in the SMP unless they're represented as HTML-encoded surrogates, so the inputstring "&amp;#144308;" would result in the output string "&amp;#144308;".</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use loose behavior.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Similar to <ph id="ph1">&lt;xref href="System.Net.Configuration.UnicodeDecodingConformance.Compat"&gt;&lt;/xref&gt;</ph> in that there are no validity checks, but the decoder also understands code points.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The input string "&amp;#144308;" would decode into the character U+233B4 correctly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This switch is meant to provide maximum interoperability when the decoder doesn't know which format the provider is using to generate the encoded string.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use strict behavior.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Specifies that the incoming encoded data is checked for validity before being decoded.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, an input string of "&amp;#144308;" would decode as U+233B4, but an input string of "&amp;#xD84C;&amp;#xDFB4;" would fail to decode properly.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Already-decoded data in the string is not checked for validity.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, an input string of "\ud800" will result in an output string of "\ud800", as the already-decoded surrogate is skipped during decoding, even though it is unpaired.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>