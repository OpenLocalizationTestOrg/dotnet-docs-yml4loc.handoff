<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94bf8a943ee14c749f78d3da71409f3626d0e9ea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Configuration.ConfigurationCollectionAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">502ef2e9bde7ab25bfc93ece011688faf0ba13e2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de1845beb22ac3447b0bc1a791a26e57e687fef1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Declaratively instructs the .NET Framework to create an instance of a configuration element collection.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use the <ph id="ph1">&lt;xref:System.Configuration.ConfigurationCollectionAttribute&gt;</ph> attribute to decorate a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationElementCollection&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This instructs the .NET Framework to create an instance of the collection and to initialize it using your custom <ph id="ph1">&lt;xref:System.Configuration.ConfigurationElement&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The simplest way to create a custom configuration element is to use the attributed (declarative) model.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You declare the elements and decorate them with the <ph id="ph1">&lt;xref:System.Configuration.ConfigurationCollectionAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each element marked with this attribute, the .NET Framework uses reflection to read the decorating parameters and create a related <ph id="ph1">&lt;xref:System.Configuration.ConfigurationElementCollection&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the programmatic model.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case it is your responsibility to declare the custom public collection but also to override the <ph id="ph1">&lt;xref:System.Configuration.ConfigurationElementCollection&gt;</ph> member and return the properties collection.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework configuration system provides attribute types that you can use during the creation of custom configuration elements.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two kinds of attributes:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The attributes that instruct the .NET Framework how to create instances of the custom configuration element properties.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>These types include:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The attributes that instruct the .NET Framework how to validate the custom configuration element properties.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>These types include:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Configuration.ConfigurationCollectionAttribute"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use this constructor to tell the .NET Framework the custom type of the property collection to be created.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The type of the property collection to create.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;itemType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the <ph id="ph1">`&lt;add&gt;`</ph> configuration element.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.ConfigurationCollectionAttribute.AddItemName%2A&gt;</ph> property allows you to assign a different name to the configuration element.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you could use <ph id="ph1">`addUrl`</ph> instead of "add".</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The name that substitutes the standard name "add" for the configuration item.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets or sets the name for the <ph id="ph1">`&lt;clear&gt;`</ph> configuration element.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.ConfigurationCollectionAttribute.ClearItemsName%2A&gt;</ph> property allows you to assign a different name to the <ph id="ph2">`&lt;clear&gt;`</ph> configuration element.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you could use <ph id="ph1">`clearUrls`</ph> instead of "clear".</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The name that replaces the standard name "clear" for the configuration item.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets or sets the type of the <ph id="ph1">&lt;xref href="System.Configuration.ConfigurationCollectionAttribute"&gt;&lt;/xref&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">&lt;xref href="System.Configuration.ConfigurationCollectionAttribute"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the type of the collection element.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.ConfigurationCollectionAttribute.ItemType%2A&gt;</ph> property is used by reflection to get the configuration element type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The type of the collection element.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets or sets the name for the <ph id="ph1">`&lt;remove&gt;`</ph> configuration element.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.ConfigurationCollectionAttribute.RemoveItemName%2A&gt;</ph> property allows you to assign a different name to the <ph id="ph2">`&lt;remove&gt;`</ph> configuration element.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you could use <ph id="ph1">`removeUrl`</ph> instead of "remove".</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The name that replaces the standard name "remove" for the configuration element.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>