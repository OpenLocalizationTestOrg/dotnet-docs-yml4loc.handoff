<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a061fc0386de4680fefc3df8e116b48b4443f989</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Security.Cryptography.X509Certificates.X509Certificate2.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4288ad974688c562d4a93a85fa26f37f4f0d8267</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1d6ccababf04a42019fc18a631737f8958ae3f9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The X.509 structure originated in the International Organization for Standardization (ISO) working groups.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the ISO specifications are most informative on the structure itself, the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most informative of these specifications is RFC 3280, "<bpt id="p1">[</bpt>Certificate and Certificate Revocation List (CRL) Profile<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=45286)</ept>."</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, this type implements the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For apps that target the <ph id="ph1">[!INCLUDE[net_v452](~/includes/net-v452-md.md)]</ph> and earlier versions, the <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> class does not implement the <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph> interface and therefore does not have a <ph id="ph4">`Dispose`</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an empty <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using a certificate file name, a password used to access the certificate, and a key storage flag.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a certificate file name, a password needed to access the certificate, and a key storage flag.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`fileName`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The name of a certificate file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that control where and how to import the certificate.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using a certificate file name, a password, and a key storage flag.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`fileName`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The name of a certificate file.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that control where and how to import the certificate.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using a byte array, a password, and a key storage flag.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a byte array, a password that is needed to access the certificate data, and a key storage flag.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is used with PKCS12 (PFX) files that contain the certificate's private key.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`rawData`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A byte array containing data from an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that control where and how to import the certificate.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using a certificate file name and a password used to access the certificate.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a certificate file name and a password needed to access the certificate.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is used with PKCS12 (PFX) files that contain the certificate's private key.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this constructor with the correct password decrypts the private key and saves it to a key container.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`fileName`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The name of a certificate file.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using a certificate file name and a password.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is used with PKCS12 (PFX) files that contain the certificate's private key.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this constructor with the correct password decrypts the private key and saves it to a key container.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`fileName`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The name of a certificate file.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using the specified serialization and stream context information.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The serialization information required to deserialize the new <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Contextual information about the source of the stream to be deserialized.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using a byte array, a password, and a key storage flag.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is used with PKCS12 (PFX) files that contain the certificate's private key.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`rawData`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A byte array that contains data from an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that control where and how to import the certificate.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using a byte array and a password.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is used with PKCS12 (PFX) files that contain the certificate's private key.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this constructor with the correct password decrypts the private key and saves it to a key container.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`rawData`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A byte array that contains data from an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using a certificate file name.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a certificate file name.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>It supports binary (DER) encoding or Base64 encoding.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`fileName`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The name of a certificate file.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using an <ph id="ph2">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method creates a new instance of the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> class using an <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using an unmanaged handle.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a handle for the Microsoft Cryptographic API certificate context, <ph id="ph2">`PCCERT_CONTEXT`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the immediate caller of this constructor requires unmanaged code permission.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor creates a copy of the certificate context.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not assume that the context structure you passed to the constructor is valid; it may have been released.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can get a copy of the current <ph id="ph1">`PCCERT_CONTEXT`</ph> structure from the <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A&gt;</ph> property, but it is valid only during the lifetime of the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A pointer to a certificate context in unmanaged code.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The C structure is called <ph id="ph1">`PCCERT_CONTEXT`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using information from a byte array.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using certificate information from a byte array.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The byte array can be binary (DER) encoded or Base64-encoded X.509 data.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`rawData`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A byte array containing data from an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class using a byte array and a password.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a byte array and a password that is needed to access the certificate data.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is used with PKCS12 (PFX) files that contain the certificate's private key.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this constructor with the correct password decrypts the private key and saves it to a key container.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> certificate by specifying a PKCS7 signed file store for <ph id="ph2">`rawData`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> is created for the certificate that signed the store rather than for any of the certificates within the store.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A byte array containing data from an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>An error with the certificate occurs.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The certificate file does not exist.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The certificate is invalid.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The certificate's password is incorrect.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating that an X.509 certificate is archived.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is set only on a certificate that is associated with a store.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the property is set and the certificate is added to a certificate store, the value is persisted.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the property is set on a certificate retrieved from a store, the value is persisted immediately.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>In an X.509 store, archived certificates are not included in the returned <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection&gt;</ph> object unless the <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>No physical archival activity occurs when the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A&gt;</ph> value is set or unset.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the certificate is archived, <ph id="ph2">`false`</ph> if the certificate is not archived.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The certificate is unreadable.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Gets a collection of <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Extension"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, "<bpt id="p1">[</bpt>Certificate and Certificate Revocation List (CRL) Profile<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=45286)</ept>."</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common extensions include information regarding key usage (<ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension&gt;</ph>), key identifiers (<ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension&gt;</ph>), certificate policies, revocation information (CRL Distribution Point extension), and other uses.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509ExtensionCollection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The certificate is unreadable.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets or sets the associated alias for a certificate.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Friendly names are properties in the X.509 certificate store that can be set.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>They are used to enable a user to associate aliases with certificates so they can be easily identified.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no friendly name exists for the certificate, an empty string ("") is returned.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The certificate's friendly name.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The certificate is unreadable.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Indicates the type of certificate contained in a file.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables you to discover the type of certificate in a file.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The name of a certificate file.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509ContentType"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;fileName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Indicates the type of certificate contained in a byte array.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables you to discover the type of certificate in a file.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A byte array containing data from an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509ContentType"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawData&lt;/code&gt;</ph> has a zero length or is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Gets the subject and issuer names from a certificate.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using this method ensures that the appropriate name is returned.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509NameType"&gt;&lt;/xref&gt;</ph> value for the subject.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to include the issuer name; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The name of the certificate.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether an <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> object contains a private key.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> object contains a private key; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The certificate context is invalid.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Populates an <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> object with data from a byte array.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to take a raw byte array of an X.509 certificate and populate the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object with its associated values.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that a PFX/PKCS12 certificate can contain more than one certificate.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A byte array containing data from an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Populates an <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> object with information from a certificate file.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object with the certificate the file contains.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that a PFX/PKCS12 certificate can contain more than one certificate.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The name of a certificate.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Populates an <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> object using data from a byte array, a password, and a key storage flag.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that a PFX/PKCS12 certificate can contain more than one certificate.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>A byte array that contains data from an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that control where and how to import the certificate.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Populates an <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> object using data from a byte array, a password, and flags for determining how to import the private key.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to populate an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object using a password for the certificate represented by the byte array.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags&gt;</ph> value can be used to control where and how to import the private key.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that a PFX/PKCS12 certificate can contain more than one certificate.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>A byte array containing data from an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that control where and how to import the certificate.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Populates an <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> object with information from a certificate file, a password, and a key storage flag.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept> Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The name of a certificate file.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that control where and how to import the certificate.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Populates an <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> object with information from a certificate file, a password, and a <ph id="ph2">&lt;xref href="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used populate an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object with information from a certificate file, a password, and an <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>Never hard code a password within your source code.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The name of a certificate file.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The password required to access the X.509 certificate data.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that control where and how to import the certificate.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Gets the distinguished name of the certificate issuer.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the name of the certificate authority (CA) that issued the certificate.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain the name of a certificate, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>The distinguished name for the certificate is a textual representation of the certificate subject or issuer.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>This representation consists of name attributes (for example, "CN=MyName, OU=MyOrgUnit, C=US").</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X500DistinguishedName"&gt;&lt;/xref&gt;</ph> object that contains the name of the certificate issuer.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The certificate context is invalid.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Gets the date in local time after which a certificate is no longer valid.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property indicates an expiration date on which the certificate becomes invalid.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> object that represents the expiration date for the certificate.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The certificate is unreadable.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Gets the date in local time on which a certificate becomes valid.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property indicates the date on which the certificate becomes valid.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> object that represents the effective date of the certificate.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The certificate is unreadable.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;&lt;/xref&gt;</ph> object that represents the private key associated with a certificate.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>Currently this property supports only RSA or DSA keys, so it returns either an <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> or a <ph id="ph2">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no private key is associated with the certificate, it returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set this property to <ph id="ph1">`null`</ph> or to another key without first deleting it, a private key file is left on the disk.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>To properly delete the private key associated with this property, set <ph id="ph1">`PersistKeyInCsp`</ph> to <ph id="ph2">`false`</ph>, and then call the <ph id="ph3">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;&lt;/xref&gt;</ph> object, which is either an RSA or DSA cryptographic service provider.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The key value is not an RSA or DSA key, or the key is unreadable.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The value being set for this property is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The key algorithm for this private key is not supported.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The X.509 keys do not match.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The cryptographic service provider key is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey"&gt;&lt;/xref&gt;</ph> object associated with a certificate.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns a <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A&gt;</ph> object, which contains the object identifier (<ph id="ph2">&lt;xref:System.Security.Cryptography.Oid&gt;</ph>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also obtain the key as an <ph id="ph1">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> object by referencing the <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property supports only RSA or DSA keys, so it returns either an <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> or a <ph id="ph2">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> object that represents the public key.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The key value is not an RSA or DSA key, or the key is unreadable.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Gets the raw data of a certificate.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The raw data of the certificate as a byte array.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Resets the state of an <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to reset the state of the certificate.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also frees any resources associated with the certificate.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Gets the serial number of a certificate.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>The serial number of the certificate is part of the original X.509 protocol.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The serial number of the certificate.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Gets the algorithm used to create the signature of a certificate.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object identifier (<ph id="ph1">&lt;xref:System.Security.Cryptography.Oid&gt;</ph>) identifies the type of signature algorithm used by the certificate.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Returns the object identifier (<ph id="ph1">&lt;xref href="System.Security.Cryptography.Oid"&gt;&lt;/xref&gt;</ph>) of the signature algorithm.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The certificate is unreadable.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Gets the subject distinguished name from a certificate.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>The subject distinguished name is the name of the user of the certificate.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>This representation consists of name attributes, for example, "CN=MyName, OU=MyOrgUnit, C=US".</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Security.Cryptography.X509Certificates.X500DistinguishedName"&gt;&lt;/xref&gt;</ph> object that represents the name of the certificate subject.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The certificate context is invalid.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Gets the thumbprint of a certificate.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The thumbprint of the certificate.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Displays an X.509 certificate in text format.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>As with all <ph id="ph1">`ToString`</ph> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the properties on the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object to obtain precise information about the content or use the <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A&gt;</ph> method to obtain information about the certificate.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method displays the certificate in text format.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The certificate information.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Displays an X.509 certificate in text format.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>As with all <ph id="ph1">`ToString`</ph> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the properties on the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object to obtain precise information.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method displays the certificate in text format.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`verbose`</ph> parameter is set to <ph id="ph2">`true`</ph>, the text display includes the public key, private key, and extensions.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`verbose`</ph> is set to <ph id="ph2">`false`</ph>, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to display the public key, private key, extensions, and so forth; <ph id="ph2">`false`</ph> to display information that is similar to the <ph id="ph3">&lt;xref href="System.Security.Cryptography.X509Certificates.X509Certificate2"&gt;&lt;/xref&gt;</ph> class, including thumbprint, serial number, subject and issuer names, and so on.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The certificate information.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Performs a X.509 chain validation using basic validation policy.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method builds a simple chain for the certificate and applies the base policy to that chain.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need more information about a failure, validate the certificate directly using the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Chain&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the default chaining engine can be overridden using the <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, "<bpt id="p1">[</bpt>Certificate and Certificate Revocation List (CRL) Profile<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=45286)</ept>."</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the validation succeeds; <ph id="ph2">`false`</ph> if the validation fails.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The certificate is unreadable.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Gets the X.509 format version of a certificate.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are several versions of X.509 certificates.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property identifies which format the certificate uses.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, "3" is returned for a version 3 certificate.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The certificate format.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The certificate is unreadable.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>