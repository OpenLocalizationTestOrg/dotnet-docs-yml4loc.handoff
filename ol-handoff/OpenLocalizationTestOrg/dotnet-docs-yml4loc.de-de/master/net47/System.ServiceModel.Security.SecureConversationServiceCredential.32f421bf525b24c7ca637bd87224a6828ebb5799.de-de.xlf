<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d117b02eed7bea4b7b95fb03cdc41ac67124ac75</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Security.SecureConversationServiceCredential.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3945307494173eea281ba52f07a8021a760a8e71</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88488d0e6fe4ab7188cf2a018acda0f2f542be37</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides credential settings for a secure conversation service.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SCT is shared among the communicating parties for the lifetime of a communications session.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>A service can issue two different kinds of SCTs:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first is a session-based SCT that contains a unique id.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Messages carry only the id, and the service maintains a state-mapping cache that maps between the SCT ids and contents (such as claims, security keys, and so on).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>A well-behaved client must send an SCT cancellation to help the service optimize the cache resources.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you instantiate this class by calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A&gt;</ph> with the <ph id="ph2">`requireCancellation`</ph> parameter equal to <ph id="ph3">`true`</ph>, the SCT is issued in this manner.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second is a self-contained SCT that resides in a cookie on the client.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is sometimes called a "cookie-mode" SCT.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the SCT contains the entire state information, its size is larger than in the session-based case.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>With session-based SCTs, the service stores much of the state information.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Gets a collection of the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> claims for cookie serialization.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To serialize claims into SCT cookies, <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> uses <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> as the default.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the Claim resource is extensible, <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> allows you to provide a list of known resource types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This assists the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> during deserialization of the claims in the cookie so that it can return the original strongly-typed objects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A collection of the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> claims for cookie serialization.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets or sets a customized <ph id="ph1">&lt;xref href="System.ServiceModel.Security.SecurityStateEncoder"&gt;&lt;/xref&gt;</ph> for encoding and decoding cookie serialization.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>In "cookie mode", a service issues the client a security context token (SCT) in the form of a cookie to the client so that it does not have to maintain any security state.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client sends the cookie back in the request message so that the service knows how to unprotect and verify the request message.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the SCT is often transmitted over a non-secure network, it must be protected.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> uses the <ph id="ph2">&lt;xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder&gt;</ph> class to protect the cookie using the Data Protection API (DPAPI).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>For DPAPI to work in a Web farm environment, all the backend services must run as the same domain user account.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other words, if the service is Web hosted, then the Internet Information Services (IIS) worker process must be configured to run as a domain user.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property enables you to use a customized <ph id="ph1">&lt;xref:System.ServiceModel.Security.SecurityStateEncoder&gt;</ph> to encrypt and decrypt the cookie and not depend on DPAPI.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ServiceModel.Security.SecurityStateEncoder"&gt;&lt;/xref&gt;</ph> object, which is a customization of <ph id="ph2">&lt;xref href="System.ServiceModel.Security.DataProtectionSecurityStateEncoder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>