<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dab0fbcc2e8cf4a0e71d8eeea5c0bda873e0c68b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices.VariantWrapper.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99ee4d53616bbb3a1bd8d6a11536baed63bdfd86</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55e7a93032c5c9149861b5b163178ee943978cb8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Marshals data of type <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> from managed to unmanaged code.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> is to add one level of indirection when marshaling a managed type to the corresponding <ph id="ph2">`VARIANT`</ph> type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this class to wrap an <ph id="ph1">&lt;xref:System.Object&gt;</ph> that the interop marshaler passes as <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> to unmanaged code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The interop marshaler passed a variant of the managed type (for example, <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> for <ph id="ph2">&lt;xref:System.String&gt;</ph>, or <ph id="ph3">`VT_I4 | VT_BYREF`</ph> for <ph id="ph4">&lt;xref:System.Int32&gt;</ph>), but not <ph id="ph5">`VT_VARIANT | VT_BYREF`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>One advantage of using <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> variant types is that the type of data can be changed during a method call.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can pass a <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> variant type that contains a <ph id="ph2">`VT_BSTR`</ph> and get a variant returned that contains a <ph id="ph3">`VT_I4`</ph> after a method call.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the COM interop marshaler has no way of knowing when to pass <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> and when to pass <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>, which points to a variant that contains a <ph id="ph3">`BSTR`</ph> for parameters declared as <ph id="ph4">`VARIANT *`</ph>, you can instruct the marshaler by using <ph id="ph5">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that early binding is not supported; you can use <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> only when calling <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A&gt;</ph> or with a Dispatch-only interface called in an early bound fashion.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C#, you must also use the <ph id="ph1">`ref`</ph> keyword to specify <ph id="ph2">`ByRef`</ph> semantics for any parameter of type <ph id="ph3">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Basic, <ph id="ph1">`ByRef`</ph> semantics are added automatically for every implicit late binding call.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also note that nesting <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> objects and arrays of <ph id="ph2">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> objects is not supported.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.VariantWrapper"&gt;&lt;/xref&gt;</ph> class for the specified <ph id="ph2">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The object to marshal.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the object wrapped by the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.VariantWrapper"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The object wrapped by the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.VariantWrapper"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>