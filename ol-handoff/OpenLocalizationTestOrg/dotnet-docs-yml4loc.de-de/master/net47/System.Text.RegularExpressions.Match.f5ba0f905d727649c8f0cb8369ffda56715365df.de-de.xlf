<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef64076f4076ae581a9250ebb90d2ebf7d175f62</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Text.RegularExpressions.Match.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94d407f8a1fa91fe344df9d5910709ccfe7fa96d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0e6fcb37f23af529f938e7f765dc54bde9d19e2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the results from a single regular expression match.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object is immutable and has no public constructor.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An instance of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> class is returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName&gt;</ph> method and represents the first pattern match in a string.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent matches are represented by <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object that consists of zero, one, or more <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects is returned by the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName&gt;</ph> method fails to match a regular expression pattern in an input string, it returns an empty <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then use a <ph id="ph1">`foreach`</ph> construct in C# or a <ph id="ph2">`For Each`</ph> construct in Visual Basic to iterate the collection.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName&gt;</ph> method fails to match the regular expression pattern, it returns a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object that is equal to <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property to determine whether the match was successful.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example provides an illustration.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.RegularExpressions.Match.Class#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.RegularExpressions.Match.Class#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a pattern match is successful, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property contains the matched substring, the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Capture.Index%2A&gt;</ph> property indicates the zero-based starting position of the matched substring in the input string, and the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Capture.Length%2A&gt;</ph> property indicates the length of matched substring in the input string.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a single match can involve multiple capturing groups, <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> has a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property that returns the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> instance itself is equivalent to the first object in the collection, at <ph id="ph2">`Match.Groups[0]`</ph> (<ph id="ph3">`Match.Groups(0)`</ph> in Visual Basic), which represents the entire match.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can access the captured groups in a match in the following ways:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can iterate the members of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object  by using a <ph id="ph2">`foreach`</ph> (C#) or <ph id="ph3">`For Each`</ph> (Visual Basic) construct.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=fullName&gt;</ph> property to retrieve groups by the number of the capturing group.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you can determine which numbered groups are present in a regular expression by calling the instance <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=fullName&gt;</ph> property to retrieve groups by the name of the capturing group.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you can determine which named groups are present in a regular expression by calling the instance <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the empty group.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>All failed matches return this empty match.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property should not be used to determine if a match is successful.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, use the <ph id="ph1">`Match.Success`</ph> property (which is inherited from <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An empty match.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets a collection of groups matched by the regular expression.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every such subexpression forms a group.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property provides access to information about those subexpression matches.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the regular expression pattern <ph id="ph1">`(\d{3})-(\d{3}-\d{4})`</ph>, which matches North American telephone numbers, has two subexpressions.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first consists of the area code, which composes the first three digits of the telephone number.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This group is captured by the first portion of the regular expression, <ph id="ph1">`(\d{3})`</ph>.The second consists of the individual telephone number, which composes the last seven digits of the telephone number.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This group is captured by the second portion of the regular expression, <ph id="ph1">`(\d{3}-\d{4})`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>These two groups can then be retrieved from the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object that is returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.RegularExpressions.Match.Groups#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.RegularExpressions.Match.Groups#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property is a zero-based collection object that always has at least one member.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the regular expression engine cannot find any matches in a particular input string, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName&gt;</ph> property of the single <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object in the collection (the object at index 0) is set to <ph id="ph3">`false`</ph> and the <ph id="ph4">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object's <ph id="ph5">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property is set to <ph id="ph6">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the regular expression engine can find a match, the first element of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object (the element at index 0) returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property contains a string that matches the entire regular expression pattern.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the "Grouping Constructs and Regular Expression Objects" section of the <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The character groups matched by the pattern.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returns a new <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.Match"&gt;&lt;/xref&gt;</ph> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is similar to calling <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> again and passing (<ph id="ph2">`Index+Length`</ph>) as the new starting position.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not modify the current instance.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it returns a new <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object that contains information about the next match.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to retrieve the next match may throw a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The next regular expression match.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A time-out occurred.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns the expansion of the specified replacement pattern.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whereas the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=fullName&gt;</ph> method replaces all matches in an input string with a specified replacement pattern, the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph> method replaces a single match with a specified replacement pattern.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`replacement`</ph> parameter is a standard regular expression replacement pattern.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can consist of literal characters and regular expression substitutions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Substitutions<ept id="p1">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The replacement pattern to use.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The expanded version of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">replacement</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;replacement&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Expansion is not allowed for this pattern.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.Match"&gt;&lt;/xref&gt;</ph> instance equivalent to the one supplied that is suitable to share between multiple threads.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A regular expression match equivalent to the one expected.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A regular expression match that is suitable to share between multiple threads.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;inner&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>