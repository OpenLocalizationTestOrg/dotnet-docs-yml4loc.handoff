<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87867e276774d59a197519be4e850044d4d34ac0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Workflow.Runtime.Hosting.WorkflowRuntimeService.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">676eb60d9193f52e9eda38f143e37812a6c726da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99857e1502b9478cf167eafa4bafd07784d549b8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the abstract base class from which the workflow runtime engine core services are derived.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Services that derive from the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class can be started and stopped by the workflow runtime engine.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order in which the services are started or stopped, however, is indeterminate, and services may require the support of other services in order to properly initialize themselves when they are started, and, conversely, may require the to support of other services in order to properly shut down when they are stopped.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To address this problem, the workflow runtime engine provides two-phase mechanisms for starting and stopping services.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A&gt;</ph> is called, the workflow runtime engine invokes the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method for each of its services that derive from the <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>After all of these services have been started, the workflow runtime engine raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event, which causes the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> method to be invoked for each workflow runtime engine service.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your service can override the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> method to participate in this two phase process.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, when <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A&gt;</ph> is called, the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event, and the <ph id="ph4">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method provide this two-phase mechanism.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The State property contains a <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState&gt;</ph> value that indicates whether the service is in the process of starting or stopping or is completely started or stopped.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Services that derive from the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class can raise the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName&gt;</ph> event when they encounter a condition that causes an unhandled exception by calling <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Services derived from the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService&gt;</ph> class, the <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService&gt;</ph> class, and the <ph id="ph4">&lt;xref:System.Workflow.Runtime.Tracking.TrackingService&gt;</ph> class ultimately derives from the <ph id="ph5">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, initializes a new instance of the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeService"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> is initialized to <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.WorkflowRuntime.Started"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class implements a two-phase starting mechanism so that workflow runtime engine services may perform any initialization that depends on other services after the workflow runtime engine has invoked the  <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method for all of its workflow runtime engine services.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the workflow runtime engine has called the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method of all of its workflow runtime engine services, it raises the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> method to provide any final startup functionality required by your service when the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The mechanics of subscribing and unsubscribing from the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event is handled internally.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your service is added to the workflow runtime engine by a call to <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt;</ph> after the workflow runtime engine has already been started, the workflow runtime engine will call <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> on your service.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in this situation, the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started&gt;</ph> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> from inside the <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can test <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt;</ph> to determine whether the workflow runtime engine has been started.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started&gt;</ph> before <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> is invoked.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> performs no action.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.WorkflowRuntime.Stopped"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class implements a two-phase stopping mechanism so that workflow runtime engine services may retain some functionality after their <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method is invoked by the workflow runtime engine in order that they may, if necessary, support the shutdown of other services.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the workflow runtime engine has called the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method of all of its workflow runtime engine services, it raises the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method to provide any final shutdown functionality required by your service when the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The mechanics of subscribing and unsubscribing from the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event is handled internally.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> is removed from the workflow runtime engine by a call to <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A&gt;</ph> while the workflow runtime engine is running, the workflow runtime engine will call <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> on your service.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in this situation, the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method will not be called for your service.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your service may have to perform any final shutdown that it would ordinarily perform in <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> from inside the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can test <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt;</ph> to determine whether the workflow runtime engine is running.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped&gt;</ph> before <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> is invoked.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> performs no action.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your service can call <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A&gt;</ph> to raise the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName&gt;</ph> event when it encounters an exception that it cannot handle during its execution.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should pass the <ph id="ph1">&lt;xref:System.Guid&gt;</ph> of the workflow instance associated with the unhandled exception.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a timer service might pass the <ph id="ph1">&lt;xref:System.Guid&gt;</ph> associated with the timer for which the exception occurred.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The exception that could not be handled.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> of the workflow instance associated with the unhandled exception.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.WorkflowRuntime"&gt;&lt;/xref&gt;</ph> for this service.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine sets this property before it calls <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> on the service.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeService"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, starts the service and changes the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State"&gt;&lt;/xref&gt;</ph> to <ph id="ph2">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> is invoked by the workflow runtime engine on all of its services that derive from the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class when <ph id="ph3">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> is also invoked by the workflow runtime engine when a workflow runtime engine service is added to the workflow runtime engine by a call to <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt;</ph> after the workflow runtime engine has already started.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is started while it is already running.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can provide additional functionality necessary to have your service started by the workflow runtime engine by overriding this method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no guarantee about which, if any, services will be running when the workflow runtime engine calls <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> on your service.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, in the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method, you should only perform any initialization that does not depend on functionality provided by other services.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes functionality provided by core services such as the scheduler service.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName&gt;</ph> event after it has called the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method of all of its workflow runtime engine services.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your service requires additional initialization after all of the workflow runtime engine services have been started, you can override the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> method in order to perform this initialization when the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your service is added to the workflow runtime engine by a call to <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt;</ph> after the workflow runtime engine has already been started, the workflow runtime engine will call <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> on your service.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in this situation, the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started&gt;</ph> event has already occurred, therefore, your service may have to perform any initialization that it would ordinarily perform in <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A&gt;</ph> from inside the <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can test <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt;</ph> to determine whether the workflow runtime engine has been started.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> should only be called by the workflow runtime engine.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime"&gt;&lt;/xref&gt;</ph> is a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The service has already been started.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets the state of the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeService"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class implements two-phase mechanisms for both starting and stopping a workflow runtime engine service.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first phase of the start mechanism begins when the workflow runtime engine calls the implementation of the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph> method for the service.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should call the base implementation of <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A&gt;</ph>, which sets <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second phase occurs after the workflow runtime engine starts all of its workflow runtime engine services when it raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Started&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> internally manages a subscription to this event and its handler will set <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The two-phase mechanism for stopping a workflow runtime engine service begins when the workflow runtime engine calls the implementation of the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method for the service.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should call the base implementation of <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph>, which sets <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>After it has stopped all of its workflow runtime engine services, the workflow runtime engine raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> internally manages a subscription to this event and its handler will set <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, stops the service and changes the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State"&gt;&lt;/xref&gt;</ph> to <ph id="ph2">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> is invoked by the workflow runtime engine on all of its services that derive from the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> class when <ph id="ph3">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> is also invoked by the workflow runtime engine when a workflow runtime engine service is removed from the workflow runtime engine by a call to <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> tracks whether the service has been started and uses this information to throw the appropriate exception if the service is stopped before it is started.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can provide additional functionality necessary to have your service stopped by the workflow runtime engine by overriding this method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no guarantee about which, if any, services will be stopped or running when <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> is called on your service.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event after it has called the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method of all of its workflow runtime engine services.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your service may need to retain some residual functionality to support other services until all the workflow runtime engine services have had their stop methods invoked by the workflow runtime engine.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your service must retain such functionality, you can override the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method to perform any additional action required to finish stopping your service when the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService&gt;</ph> is removed from the workflow runtime engine by a call to <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A&gt;</ph> while the workflow runtime engine is running, the workflow runtime engine will call <ph id="ph3">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> on your service.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in this situation, the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> method will not be called for your service.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your service may have to perform any additional shutdown functionality that it would ordinarily perform in <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A&gt;</ph> from inside the <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can test <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A&gt;</ph> to determine whether the workflow runtime engine is running.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A&gt;</ph> should only be called by the workflow runtime engine.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime"&gt;&lt;/xref&gt;</ph> is a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The service has not yet been started.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>