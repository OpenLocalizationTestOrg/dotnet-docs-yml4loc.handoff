<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5b131db036469f92d61a31c5cfbe6ea7c42dc9f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Collections.Generic.IReadOnlyDictionary-2.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a7f623e7ab6a26ba9436ee95ff9f40ba8b75152</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ae1328fb0d9cb73164baea750eef16709893f76</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a generic read-only collection of key/value pairs.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each element is a key/value pair that is stored in a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each pair must have a unique key.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations can vary in whether they allow you to specify a key that is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value can be <ph id="ph1">`null`</ph> and does not have to be unique.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++) requires the type of each element in the collection.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because each element of the <ph id="ph1">&lt;xref:System.Collections.Generic.IReadOnlyDictionary%602&gt;</ph> interface is a key/value pair, the element type is not the type of the key or the type of the value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the element type is <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Generic.IDictionary#11<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source2.cpp#11)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Generic.IDictionary#11<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source2.cs#11)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Generic.IDictionary#11<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source2.vb#11)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator; it allows only reading from the collection, not writing to the collection.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The type of keys in the read-only dictionary.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The type of values in the read-only dictionary.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Determines whether the read-only dictionary contains an element that has the specified key.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations can vary in how they determine the equality of objects; for example, the class that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IReadOnlyDictionary%602&gt;</ph> might use the <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> property, or it might implement the <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The key to locate.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the read-only dictionary contains an element that has the specified key; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets the element that has the specified key in the read-only dictionary.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property lets you access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations can vary in how they determine the equality of objects: for example, the class that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IReadOnlyDictionary%602&gt;</ph> might use the <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> property, or it might implement the <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The key to locate.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The element that has the specified key in the read-only dictionary.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The property is retrieved and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets an enumerable collection that contains the keys in the read-only dictionary.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the keys in the enumerable collection is unspecified, but the implementation must guarantee that the keys are in the same order as the corresponding values in the enumerable collection that is returned by the <ph id="ph1">&lt;xref:System.Collections.Generic.IReadOnlyDictionary%602.Values%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An enumerable collection that contains the keys in the read-only dictionary.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the value that is associated with the specified key.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method combines the functionality of the <ph id="ph1">&lt;xref:System.Collections.Generic.IReadOnlyDictionary%602.ContainsKey%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyDictionary%602.Item%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the key is not found, the <ph id="ph1">`value`</ph> parameter gets the appropriate default value for the type <ph id="ph2">`TValue`</ph>: for example, 0 (zero) for integer types, <ph id="ph3">`false`</ph> for Boolean types, and <ph id="ph4">`null`</ph> for reference types.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The key to locate.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the object that implements the <ph id="ph2">&lt;xref href="System.Collections.Generic.IReadOnlyDictionary`2"&gt;&lt;/xref&gt;</ph> interface contains an element that has the specified key; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets an enumerable collection that contains the values in the read-only dictionary.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the values in the enumerable collection is unspecified, but the implementation must guarantee that the values are in the same order as the corresponding keys in the enumerable collection that is returned by the <ph id="ph1">&lt;xref:System.Collections.Generic.IReadOnlyDictionary%602.Keys%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An enumerable collection that contains the values in the read-only dictionary.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>