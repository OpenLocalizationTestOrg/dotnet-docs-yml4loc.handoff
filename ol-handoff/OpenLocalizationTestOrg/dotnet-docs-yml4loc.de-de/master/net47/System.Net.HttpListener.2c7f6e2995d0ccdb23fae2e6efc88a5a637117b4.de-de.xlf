<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd9f90a0cfd655988e3b61c9c430d069e5a3bc40</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Net.HttpListener.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42647e7c1160fbab60f39eaf3605b6ff41656882</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9875b6e46bd9afb264818dfadef0379c546aff16</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a simple, programmatically controlled HTTP protocol listener.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> class, you can create a simple HTTP protocol listener that responds to HTTP requests.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The listener is active for the lifetime of the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object and runs within your application with its permissions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to create an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object on a computer that is running an earlier operating system, the constructor throws a <ph id="ph2">&lt;xref:System.PlatformNotSupportedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph>, create a new instance of the class using the <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> constructor and use the <ph id="ph3">&lt;xref:System.Net.HttpListener.Prefixes%2A&gt;</ph> property to gain access to the collection that holds the strings that specify which Uniform Resource Identifier (URI) prefixes the <ph id="ph4">&lt;xref:System.Net.HttpListener&gt;</ph> should process.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of a complete prefix string is "<ph id="ph1">`http://www.contoso.com:8080/customerData``/`</ph>".</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Prefixes must end in a forward slash ("/").</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object with the prefix that most closely matches a requested URI responds to the request.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Multiple <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> objects cannot add the same prefix; a <ph id="ph2">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph> exception is thrown if a <ph id="ph3">&lt;xref:System.Net.HttpListener&gt;</ph> adds a prefix that is already in use.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a port is specified, the host element can be replaced with "*" to indicate that the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> accepts requests sent to the port if the requested URI does not match any other prefix.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to receive all requests sent to port 8080 when the requested URI is not handled by any <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph>, the prefix is "<ph id="ph2">`http://*:8080``/`</ph>".</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, to specify that the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> accepts all requests sent to a port, replace the host element with the "+" character, "<ph id="ph2">`https://+:8080`</ph>".</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The "<ph id="ph1">\*</ph>" and "+" characters can be present in prefixes that include paths.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a wildcard subdomain, use the "*" character as part of the hostname in a URI prefix: for example, <ph id="ph1">`http://*.foo.com/`</ph>, and pass this as the argument to the HttpListenerPrefixCollection.Add method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an <ph id="ph1">&lt;xref:System.Net.HttpListenerException&gt;</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To begin listening for requests from clients, add the URI prefixes to the collection and call the <ph id="ph1">&lt;xref:System.Net.HttpListener.Start%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> offers both synchronous and asynchronous models for processing client requests.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Requests and their associated responses are accessed using the <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Net.HttpListener.GetContext%2A&gt;</ph> method or its asynchronous counterparts, the <ph id="ph3">&lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Net.HttpListener.EndGetContext%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The synchronous model is appropriate if your application should block while waiting for a client request and if you want to process only one request at a time.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the synchronous model, call the <ph id="ph1">&lt;xref:System.Net.HttpListener.GetContext%2A&gt;</ph> method, which waits for a client to send a request.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns an <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> object to you for processing when one occurs.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the more complex asynchronous model, your application does not block while waiting for requests and each request is processed in its own execution thread.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt;</ph> method to specify an application-defined method to be called for each incoming request.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within that method, call the <ph id="ph1">&lt;xref:System.Net.HttpListener.EndGetContext%2A&gt;</ph> method to obtain the request, process it, and respond.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>In either model, incoming requests are accessed using the <ph id="ph1">&lt;xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName&gt;</ph> property and are represented by <ph id="ph2">&lt;xref:System.Net.HttpListenerRequest&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, responses are accessed using the <ph id="ph1">&lt;xref:System.Net.HttpListenerContext.Response%2A?displayProperty=fullName&gt;</ph> property and are represented by <ph id="ph2">&lt;xref:System.Net.HttpListenerResponse&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>These objects share some functionality with the <ph id="ph1">&lt;xref:System.Net.HttpWebRequest&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.HttpWebResponse&gt;</ph> objects, but the latter objects cannot be used in conjunction with <ph id="ph3">&lt;xref:System.Net.HttpListener&gt;</ph> because they implement client, not server, behaviors.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> can require client authentication.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can either specify a particular scheme to use for authentication, or you can specify a delegate that determines the scheme to use.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must require some form of authentication to obtain information about the client's identity.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information, see the <ph id="ph1">&lt;xref:System.Net.HttpListenerContext.User%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Net.HttpListener.AuthenticationSchemes%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> using https, you must select a Server Certificate for that listener.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, an <ph id="ph1">&lt;xref:System.Net.HttpWebRequest&gt;</ph> query of this <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> will fail with an unexpected close of the connection.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can configure Server Certificates and other listener options by using HttpCfg.exe.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/http/http/httpcfg_exe.asp<ept id="p1">](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The executable is shipped with Windows Server 2003, or can be built from source code available in the Platform SDK.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify multiple authentication schemes for the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph>, the listener will challenge clients in the following order: <ph id="ph2">`Negotiate`</ph>, <ph id="ph3">`NTLM`</ph>, <ph id="ph4">`Digest`</ph>, and then <ph id="ph5">`Basic`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before using the instance returned by this constructor, you must invoke its <ph id="ph1">&lt;xref:System.Net.HttpListener.Start%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This class cannot be used on the current operating system.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Windows Server 2003 or Windows XP SP2 is required to use instances of this class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Shuts down the <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> object immediately, discarding all currently queued requests.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method disposes of all resources held by this listener.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any pending requests are unable to complete.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling this method, you will receive an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> if you attempt to use this <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets or sets the scheme used to authenticate clients.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> uses the specified scheme to authenticate all incoming requests.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.GetContext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.HttpListener.EndGetContext%2A&gt;</ph> methods return an incoming client request only if the <ph id="ph3">&lt;xref:System.Net.HttpListener&gt;</ph> successfully authenticates the request.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can interrogate the identity of a successfully authenticated client by using the <ph id="ph1">&lt;xref:System.Net.HttpListenerContext.User%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request's <ph id="ph2">&lt;xref:System.Net.HttpListenerRequest.Url%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.HttpListenerRequest.UserHostName%2A&gt;</ph> property), you must implement a method that chooses the authentication scheme.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instructions about how to do this, see the <ph id="ph1">&lt;xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A&gt;</ph> property documentation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set this property to enable Digest, NTLM, or Negotiate requires the <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A bitwise combination of <ph id="ph1">&lt;xref href="System.Net.AuthenticationSchemes"&gt;&lt;/xref&gt;</ph> enumeration values that indicates how clients are to be authenticated.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.Net.AuthenticationSchemes.Anonymous"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This object has been closed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets or sets the delegate called to determine the protocol used to authenticate clients.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want the same authentication protocol to be used for all requests handled by a particular instance of <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph>, you do not need to set this property.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a protocol to be used for all client requests, use the <ph id="ph1">&lt;xref:System.Net.HttpListener.AuthenticationSchemes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the client has not specified authentication information in its headers, the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.GetContext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.HttpListener.EndGetContext%2A&gt;</ph> methods return an incoming request only if the <ph id="ph3">&lt;xref:System.Net.HttpListener&gt;</ph> successfully authenticated the request.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a request cannot be authenticated, the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> automatically sends back a 401 response.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can get the identity of a successfully authenticated client using the <ph id="ph1">&lt;xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request's <ph id="ph2">&lt;xref:System.Net.HttpListenerRequest.Url%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.HttpListenerRequest.UserHostAddress%2A&gt;</ph> property).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set this property to enable Digest, NTLM, or Negotiate requires the <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.AuthenticationSchemeSelector"&gt;&lt;/xref&gt;</ph> delegate that invokes the method used to select an authentication protocol.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This object has been closed.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Begins asynchronously retrieving an incoming request.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt;</ph> method begins an asynchronous (non-blocking) call to receive incoming client requests.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before calling this method, you must call the <ph id="ph1">&lt;xref:System.Net.HttpListener.Start%2A&gt;</ph> method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the <ph id="ph2">&lt;xref:System.Net.HttpListenerPrefixCollection&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Net.HttpListener.Prefixes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous operation must be completed by calling the <ph id="ph1">&lt;xref:System.Net.HttpListener.EndGetContext%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`callback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block while the operation completes.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get an incoming request and block until the operation completes, call the <ph id="ph1">&lt;xref:System.Net.HttpListener.GetContext%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when a client request is available.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the operation.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">callback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation completes.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> object that indicates the status of the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A Win32 function call failed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Check the exception's <ph id="ph1">&lt;xref href="System.Net.HttpListenerException.ErrorCode"&gt;&lt;/xref&gt;</ph> property to determine the cause of the exception.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This object has not been started or is currently stopped.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This object is closed.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Shuts down the <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling this method, you can no longer use the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>To temporarily pause an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object, use the <ph id="ph2">&lt;xref:System.Net.HttpListener.Stop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method shut downs the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object without processing queued requests.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any pending requests are unable to complete.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.DefaultServiceNames%2A&gt;</ph> property is used with integrated Windows authentication to provide extended protection.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The list of SPNs is initialized from the <ph id="ph1">&lt;xref:System.Net.HttpListener.Prefixes%2A&gt;</ph> property when accessed and cleared when new prefixes are added to the <ph id="ph2">&lt;xref:System.Net.HttpListener.Prefixes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.DefaultServiceNames%2A&gt;</ph> property is used if an application doesn't set the <ph id="ph2">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A&gt;</ph> property on its extended protection policy.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection&gt;</ph> that is retrieved with the <ph id="ph2">&lt;xref:System.Net.HttpListener.DefaultServiceNames%2A&gt;</ph> property is built from the <ph id="ph3">&lt;xref:System.Net.HttpListener.Prefixes%2A&gt;</ph> property according to the following rules:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the hostname is "+", "*", or an IPv4 or IPv6 literal (equivalent to "<ph id="ph1">\*</ph>" but restricted to a specific local interface), the following SPN is added:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`"HTTP/"`</ph> plus the fully qualified domain name of the computer.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the hostname contains no dots (no domains or subdomains), an attempt is made to resolve the fully-qualified domain name using DNS (the same behavior used by <ph id="ph1">&lt;xref:System.Net.HttpWebRequest&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the fully-qualified domain name can be resolved, the following SPNs are added:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`"HTTP/"`</ph> plus the hostname (the short name).</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`"HTTP/"`</ph> plus the fully qualified domain name for the hostname.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the hostname contains not dots (no domains or subdomains) and a fully-qualified domain name can't be resolved, the following SPN is added:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`"HTTP/"`</ph> plus the hostname.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the hostname contains dots (domains or subdomains), the following SPN is added:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`"HTTP/"`</ph> plus the hostname.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.DefaultServiceNames%2A&gt;</ph> property can be used by an application to review the list of default SPNs which will be used for authentication if no custom list is supplied.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>If other SPNs are needed, an application can add them using one of the <ph id="ph1">&lt;xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not safe when using extended protection to make policy decisions based on the requested URL, since this can be spoofed.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rather, applications should rely on the <ph id="ph1">&lt;xref:System.Net.HttpListenerRequest.LocalEndPoint%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A&gt;</ph> properties to make such policy decisions.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Security.Authentication.ExtendedProtection.ServiceNameCollection"&gt;&lt;/xref&gt;</ph> that contains a list of SPNs.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Completes an asynchronous operation to retrieve an incoming client request.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.EndGetContext%2A&gt;</ph> method is called, usually within an application-defined callback method invoked by a delegate, to obtain the <ph id="ph2">&lt;xref:System.Net.HttpListenerContext&gt;</ph> object that contains an incoming client request and its associated response.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method completes an operation previously started by calling the <ph id="ph1">&lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the operation has not completed, this method blocks until it does.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because calling the <ph id="ph1">&lt;xref:System.Net.HttpListener.EndGetContext%2A&gt;</ph> method requires the <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> object, this object is typically passed into a callback method by using the state object passed into the <ph id="ph3">&lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain this state object by using the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">`asyncResult`</ph> object.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> object that was obtained when the asynchronous operation was started.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.HttpListenerContext"&gt;&lt;/xref&gt;</ph> object that represents the client request.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not obtained by calling the <ph id="ph2">&lt;xref href="System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.HttpListener.EndGetContext(System.IAsyncResult)"&gt;&lt;/xref&gt;</ph> method was already called for the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">asyncResult</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This object is closed.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Get or set the <ph id="ph1">&lt;xref href="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"&gt;&lt;/xref&gt;</ph> to use for extended protection for a session.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A&gt;</ph> property is used with integrated Windows authentication to provide extended protection.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A&gt;</ph> property allows the configuration of the extended protection policy for the whole <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> session.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A&gt;</ph> property allows the configuration of the extended protection policy for each individual request.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A&gt;</ph> property must be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"&gt;&lt;/xref&gt;</ph> that specifies the policy to use for extended protection.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the <ph id="ph1">&lt;xref href="System.Net.HttpListener.ExtendedProtectionPolicy"&gt;&lt;/xref&gt;</ph> property, but the <ph id="ph2">&lt;xref href="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"&gt;&lt;/xref&gt;</ph> property was not <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the <ph id="ph1">&lt;xref href="System.Net.HttpListener.ExtendedProtectionPolicy"&gt;&lt;/xref&gt;</ph> property to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the <ph id="ph1">&lt;xref href="System.Net.HttpListener.ExtendedProtectionPolicy"&gt;&lt;/xref&gt;</ph> property after the <ph id="ph2">&lt;xref href="System.Net.HttpListener.Start"&gt;&lt;/xref&gt;</ph> method was already called.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This object is closed.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement"&gt;&lt;/xref&gt;</ph> property was set to <ph id="ph2">&lt;xref href="System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always"&gt;&lt;/xref&gt;</ph> on a platform that does not support extended protection.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Get or set the delegate called to determine the <ph id="ph1">&lt;xref href="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"&gt;&lt;/xref&gt;</ph> to use for each request.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A&gt;</ph> property is used with integrated Windows authentication to provide extended protection.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A&gt;</ph> property allows the configuration of the extended protection policy for the whole <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> session.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A&gt;</ph> property allows the configuration of the extended protection policy per individual request.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A&gt;</ph> property must be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each request, the delegate can choose the settings that the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> instance will use to provide extended protection.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a delegate returns <ph id="ph1">`null`</ph> for this property, this represents a <ph id="ph2">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&gt;</ph> which the <ph id="ph3">&lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt;</ph> property set to <ph id="ph4">&lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"&gt;&lt;/xref&gt;</ph> that specifies the policy to use for extended protection.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the <ph id="ph1">&lt;xref href="System.Net.HttpListener.ExtendedProtectionSelectorDelegate"&gt;&lt;/xref&gt;</ph> property, but the <ph id="ph2">&lt;xref href="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"&gt;&lt;/xref&gt;</ph> property must be <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the <ph id="ph1">&lt;xref href="System.Net.HttpListener.ExtendedProtectionSelectorDelegate"&gt;&lt;/xref&gt;</ph> property to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the <ph id="ph1">&lt;xref href="System.Net.HttpListener.ExtendedProtectionSelectorDelegate"&gt;&lt;/xref&gt;</ph> property after the <ph id="ph2">&lt;xref href="System.Net.HttpListener.Start"&gt;&lt;/xref&gt;</ph> method was already called.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This object is closed.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the <ph id="ph1">&lt;xref href="System.Net.HttpListener.ExtendedProtectionSelectorDelegate"&gt;&lt;/xref&gt;</ph> property on a platform that does not support extended protection.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Waits for an incoming request and returns when one is received.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before calling this method, you must call the <ph id="ph1">&lt;xref:System.Net.HttpListener.Start%2A&gt;</ph> method and add at least one URI prefix to listen for by adding the URI strings to the <ph id="ph2">&lt;xref:System.Net.HttpListenerPrefixCollection&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Net.HttpListener.Prefixes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of prefixes, see the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks while waiting for an incoming request.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <ph id="ph1">&lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.HttpListenerContext"&gt;&lt;/xref&gt;</ph> object that represents a client request.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A Win32 function call failed.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Check the exception's <ph id="ph1">&lt;xref href="System.Net.HttpListenerException.ErrorCode"&gt;&lt;/xref&gt;</ph> property to determine the cause of the exception.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This object has not been started or is currently stopped.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> does not have any Uniform Resource Identifier (URI) prefixes to respond to.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This object is closed.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Waits for an incoming request as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete when the incoming request has been received.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before calling this method, you must call the <ph id="ph1">&lt;xref:System.Net.HttpListener.Start%2A&gt;</ph> method and add at least one URI prefix to listen for by adding the URI strings to the <ph id="ph2">&lt;xref:System.Net.HttpListenerPrefixCollection&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Net.HttpListener.Prefixes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of prefixes, see the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1.Result"&gt;&lt;/xref&gt;</ph> property on the task object returns an <ph id="ph2">&lt;xref href="System.Net.HttpListenerContext"&gt;&lt;/xref&gt;</ph> object that represents a client request.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value that specifies whether your application receives exceptions that occur when an <ph id="ph2">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> sends the response to the client.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set this property to <ph id="ph1">`true`</ph> if your application does not require that a response is successfully sent to each client.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> should not return exceptions that occur when sending the response to the client; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This object has been closed.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> has been started.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>To start an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Net.HttpListener.Start%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> was started; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> can be used with the current operating system.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> is supported; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Gets the Uniform Resource Identifier (URI) prefixes handled by this <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The prefixes are in canonical form.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of prefixes, see the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.HttpListenerPrefixCollection"&gt;&lt;/xref&gt;</ph> that contains the URI prefixes that this <ph id="ph2">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> object is configured to handle.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>This object has been closed.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Gets or sets the realm, or resource partition, associated with this <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Servers use realms to partition protected resources; each partition can have its own authentication scheme and/or authorization database.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>Realms are used only for basic and digest authentication.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a client successfully authenticates, the authentication is valid for all resources in a given realm.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of realms, see RFC 2617 at <bpt id="p1">[</bpt>http://www.ietf.org<ept id="p1">](http://www.ietf.org)</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>An instance of <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> has only one associated realm.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> value that contains the name of the realm associated with the <ph id="ph2">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This object has been closed.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Allows this instance to receive incoming requests.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method must be called before you call the <ph id="ph1">&lt;xref:System.Net.HttpListener.GetContext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you have started an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object, you can use the <ph id="ph2">&lt;xref:System.Net.HttpListener.Stop%2A&gt;</ph> method to stop it.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this listener instance uses https, you must install and select a Server Certificate.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, an <ph id="ph1">&lt;xref:System.Net.HttpWebRequest&gt;</ph> query of this <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> will fail with an unexpected close of the connection.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can configure Server Certificates and other listener options by using HttpCfg.exe.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp<ept id="p1">](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A Win32 function call failed.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Check the exception's <ph id="ph1">&lt;xref href="System.Net.HttpListenerException.ErrorCode"&gt;&lt;/xref&gt;</ph> property to determine the cause of the exception.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This object is closed.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Causes this instance to stop receiving incoming requests.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this instance is already stopped, calling this method has no effect.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you have stopped an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object, you can use the <ph id="ph2">&lt;xref:System.Net.HttpListener.Start%2A&gt;</ph> method to restart it.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This object has been closed.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The timeout manager for this <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>The timeout manager defines the connection timeout limits for this <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Net.HttpListenerTimeoutManager"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The timeout manager for this <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is set to <ph id="ph1">`true`</ph> and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (<ph id="ph2">&lt;xref:System.Security.Principal.IIdentity&gt;</ph>) of the initial request.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property has no effect when NTLM is not the authentication protocol.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>When Negotiate is specified as the authentication protocol, this property has an effect only if NTLM is the actual protocol used for authentication.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>While setting this property to <ph id="ph1">`true`</ph> increases performance because the <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must determine whether the increase in performance is worth this risk.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Security.Principal.IIdentity"&gt;&lt;/xref&gt;</ph> of the first request will be used for subsequent requests on the same connection; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>This object has been closed.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Releases the resources held by this <ph id="ph1">&lt;xref href="System.Net.HttpListener"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications should use the <ph id="ph1">&lt;xref:System.Net.HttpListener.Close%2A&gt;</ph> method instead of calling this method.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>