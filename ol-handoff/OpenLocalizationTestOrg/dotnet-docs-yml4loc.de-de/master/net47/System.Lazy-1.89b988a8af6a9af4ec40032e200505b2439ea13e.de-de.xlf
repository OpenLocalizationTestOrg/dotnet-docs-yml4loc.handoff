<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bb54d37d9afe92170c2af20f93118be34289d6a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Lazy-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76e8e8596967feb56db7bc429b68484459391464</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">69a56f735b8fd2fbda42b97949b46e5e9b4365d2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides support for lazy initialization.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prepare for lazy initialization, you create an instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type argument of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that you create specifies the type of the object that you want to initialize lazily.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor that you use to create the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object determines the characteristics of the initialization.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Lazy initialization occurs the first time the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=fullName&gt;</ph> property is accessed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, choosing a constructor depends on your answers to two questions:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Will the lazily initialized object be accessed from more than one thread?</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If so, the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object might create it on any thread.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use one of the simple constructors whose default behavior is to create a thread-safe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Making the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object thread safe does not protect the lazily initialized object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Write your initialization code in the factory method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows which constructor to choose, based on these two factors:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Object will be accessed by</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no initialization code is required (default constructor), use</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If initialization code is required, use</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Multiple threads</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>One thread</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> with <ph id="ph2">`isThreadSafe`</ph> set to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`isThreadSafe`</ph> set to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use a lambda expression to specify the factory method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This keeps all the initialization code in one place.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Exception caching<ept id="p1">**</ept> When you use factory methods, exceptions are cached.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, if the factory method throws an exception the first time a thread tries to access the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object, the same exception is thrown on every subsequent attempt.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This ensures that every call to the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property produces the same result and avoids subtle errors that might arise if different threads get different results.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> stands in for an actual <ph id="ph2">`T`</ph> that otherwise would have been initialized at some earlier point, usually during startup.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>A failure at that earlier point is usually fatal.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you werenâ€™t using lazy initialization.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Alternative to locking<ept id="p1">**</ept> In certain situations, you might want to avoid the overhead of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object's default locking behavior.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>In rare situations, there might be a potential for deadlocks.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such cases, you can use the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor, and specify <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object to create a copy of the lazily initialized object on each of several threads if the threads call the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property simultaneously.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, this is unlikely.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The examples for the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors demonstrate this behavior.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you specify <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly&gt;</ph>, exceptions are never cached, even if you specify a factory method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Equivalent constructors<ept id="p1">**</ept> In addition to enabling the use of <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly&gt;</ph>, the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors can duplicate the functionality of the other constructors.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the parameter values that produce equivalent behavior.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that is</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For constructors that have a <ph id="ph1">`LazyThreadSafetyMode`</ph> <ph id="ph2">`mode`</ph> parameter, set <ph id="ph3">`mode`</ph> to</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For constructors that have a Boolean <ph id="ph1">`isThreadSafe`</ph> parameter, set <ph id="ph2">`isThreadSafe`</ph> to</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For constructors with no thread safety parameters</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fully thread safe; uses locking to ensure that only one thread initializes the value.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>All such constructors are fully thread safe.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not thread safe.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fully thread safe; threads race to initialize the value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Other capabilities<ept id="p1">**</ept> For information about the use of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> with thread-static fields, or as the backing store for properties, see <bpt id="p2">[</bpt>Lazy Initialization<ept id="p2">](~/docs/framework/performance/lazy-initialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The type of object that is being lazily initialized.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When lazy initialization occurs, the default constructor of the target type is used.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>An instance that is created with this constructor may be used concurrently from multiple threads.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> if <ph id="ph3">`isThreadSafe`</ph> is <ph id="ph4">`true`</ph>; otherwise, the mode is <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> mode, use the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to make this instance usable concurrently by multiple threads; <ph id="ph2">`false`</ph> to make the instance usable by only one thread at a time.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When lazy initialization occurs, the specified initialization function is used.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>An instance that is created with this constructor may be used concurrently from multiple threads.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;valueFactory&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> class that uses the default constructor of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">T</ph><ept id="p1">&lt;/code&gt;</ept> and the specified thread-safety mode.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the thread safety mode.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>When lazy initialization occurs, the specified initialization function and initialization mode are used.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> if <ph id="ph3">`isThreadSafe`</ph> is <ph id="ph4">`true`</ph>; otherwise, the mode is <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> mode, use the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to make this instance usable concurrently by multiple threads; <ph id="ph2">`false`</ph> to make this instance usable by only one thread at a time.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;valueFactory&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> class that uses the specified initialization function and thread-safety mode.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached, unless <ph id="ph2">`mode`</ph> is <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the thread safety mode.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;valueFactory&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a value has been created for this <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>When lazy initialization occurs for a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, it may result in either a value being created or an exception being thrown.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception is thrown, subsequent behavior of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance depends on whether exception caching is in effect.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>A subsequent attempt to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> might succeed, and after successful initialization the <ph id="ph2">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance was created with an initialization function (specified by the <ph id="ph2">`valueFactory`</ph> parameter of the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> constructor), then exception caching is controlled by the thread safety mode.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mode is <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>, there is no second chance to initialize the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=fullName&gt;</ph>property.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>No value is created if an exception is thrown, so in such cases <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mode is <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName&gt;</ph>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the initialization function throws an exception on one thread, other threads can still try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Until the value is created, the <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a value has been created for this <ph id="ph2">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> instance; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Creates and returns a string representation of the <ph id="ph1">&lt;xref href="System.Lazy`1.Value"&gt;&lt;/xref&gt;</ph> property for this instance.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method does not cause initialization.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=fullName&gt;</ph> property can be <ph id="ph2">`null`</ph> after lazy initialization if the factory method that was specified for the <ph id="ph3">`valueFactory`</ph> parameter of the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id="ph6">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor returns <ph id="ph7">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The result of calling the <ph id="ph1">&lt;xref href="System.Object.ToString"&gt;&lt;/xref&gt;</ph> method on the <ph id="ph2">&lt;xref href="System.Lazy`1.Value"&gt;&lt;/xref&gt;</ph> property for this instance, if the value has been created (that is, if the <ph id="ph3">&lt;xref href="System.Lazy`1.IsValueCreated"&gt;&lt;/xref&gt;</ph> property returns <ph id="ph4">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Otherwise, a string indicating that the value has not been created.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Lazy`1.Value"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Gets the lazily initialized value of the current <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A?displayProperty=fullName&gt;</ph> property is <ph id="ph2">`false`</ph>, accessing the <ph id="ph3">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property forces initialization.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the exceptions that are listed, the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property can throw any unhandled exception that is thrown by the factory method that was passed to the <ph id="ph2">`valueFactory`</ph> parameter of the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The lazily initialized value of the current <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Lazy`1"&gt;&lt;/xref&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The initialization function tries to access <ph id="ph1">&lt;xref href="System.Lazy`1.Value"&gt;&lt;/xref&gt;</ph> on this instance.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>