<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">925e86b46d726a7dc6f44593bd8a9fc0a27da52d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Transactions.Transaction.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c1c92c5ee9a3ada26155d28859ba82db46d4d6a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1c09337d053c3218c01124e6b421f47ad1de2af</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a transaction.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> namespace provides both an explicit programming model based on the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class, as well as an implicit programming model using the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, in which transactions are automatically managed by the infrastructure.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is highly recommended that you use the easier implicit model for development.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get started, please see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on writing a transactional application, see <bpt id="p1">[</bpt>Writing A Transactional Application<ept id="p1">](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.Transaction&gt;</ph> class contains methods used by developers implementing resource managers for enlistment.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also provides functionalities for cloning a transaction and controlling the current transaction context.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain the current transaction, if one is set, using the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creates a clone of the transaction.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clones are created to pass transactions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might not want to pass a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> to other applications, because you do not want others to commit your transaction.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you try to marshal or serialize a transaction, a clone is created for you automatically.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.Transaction"&gt;&lt;/xref&gt;</ph> that is a copy of the current transaction object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Gets or sets the ambient transaction.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on ambient transactions, please see the "Managing transaction flow using TransactionScopeOption" section of the <bpt id="p1">[</bpt>Implementing an Implicit Transaction using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can set the ambient transaction using this property, you should use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object to manipulate the ambient transaction whenever possible.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is thread static.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you change the ambient transaction using this property inside a <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when <ph id="ph3">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> is called, and the previous ambient transaction value is restored.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.Transaction"&gt;&lt;/xref&gt;</ph> that describes the current transaction.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creates a dependent clone of the transaction.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dependent transaction is a transaction whose outcome depends on the outcome of the transaction from which it was cloned.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`cloneoption`</ph> parameter controls what kind of dependent transaction to create.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dependent transaction is created with <ph id="ph1">&lt;xref:System.Transactions.DependentCloneOption.BlockCommitUntilComplete&gt;</ph>, it blocks the commit process of the transaction until the transaction times out, or <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> is called on the <ph id="ph3">&lt;xref:System.Transactions.DependentTransaction&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is created with <ph id="ph1">&lt;xref:System.Transactions.DependentCloneOption.RollbackIfNotComplete&gt;</ph>, it automatically aborts the transaction if <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> is called before <ph id="ph3">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> is called on the <ph id="ph4">&lt;xref:System.Transactions.DependentTransaction&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.DependentTransaction"&gt;&lt;/xref&gt;</ph> that represents the dependent clone.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Releases the resources that are held by the object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you change the ambient transaction by setting <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> inside a <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when <ph id="ph4">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> is called, and the previous ambient transaction value is restored.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Enlists a durable resource manager that supports two phase commit to participate in a transaction.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource managers with a durable enlistment must be able to perform recovery if they experience a failure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on recovery, see <bpt id="p1">[</bpt>Performing Recovery<ept id="p1">](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on volatile and durable resources, as well as how to enlist a resource, see <bpt id="p1">[</bpt>Implementing A Resource Manager<ept id="p1">](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on how a resource manager responds to commit notification and prepare the commit in two-phase commit, see <bpt id="p1">[</bpt>Committing A Transaction In Single-Phase and Multi-Phase<ept id="p1">](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Transactions.Enlistment"&gt;&lt;/xref&gt;</ph> object that describes the enlistment.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource managers with a durable enlistment must be able to perform recovery if they experience a failure.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on recovery, see <bpt id="p1">[</bpt>Performing Recovery<ept id="p1">](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on volatile and durable resources, as well as how to enlist a resource, see <bpt id="p1">[</bpt>Implementing A Resource Manager<ept id="p1">](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should note that even when your resource manager implementation enlists with this method, it is not guaranteed that it receives a single phase commit.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction manager can still send two phase commit notifications instead.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on the single phase commit optimization, see <bpt id="p1">[</bpt>Optimization Using Single Phase Commit and Promotable Single Phase Notification<ept id="p1">](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Transactions.Enlistment"&gt;&lt;/xref&gt;</ph> object that describes the enlistment.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enlistments in a transaction are volatile; that is, they do not survive the failure of the participant.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, this method only suggests the transaction manager to escalate control, but the escalation itself is not guaranteed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If escalation fails, the user is not notified and the transaction is rolled back.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parameter <ph id="ph1">`promotableSinglePhaseNotification`</ph> is used to communicate to the transaction manager the outcome of attempting to commit the resource manager's internal transaction.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If inconsistent data is reported, the transaction manager throws an exception.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an <ph id="ph1">&lt;xref:System.Transactions.TransactionStatus.InDoubt&gt;</ph> outcome is reported, the transaction manager looks for the outcome notification in its own internal enlistment and ignores the reported response.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on enlistments and escalation of a transaction, please see <bpt id="p1">[</bpt>Transaction Management Escalation<ept id="p1">](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on PSPE, see <bpt id="p1">[</bpt>Optimization Using Single Phase Commit and Promotable Single Phase Notification<ept id="p1">](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This method uses <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand&gt;</ph> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id="ph2">`FullTrust`</ph> permission set.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.SinglePhaseEnlistment"&gt;&lt;/xref&gt;</ph> interface implementation that describes the enlistment.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value specified for the <ph id="ph1">`promoterType`</ph> parameter is <ph id="ph2">`TransactionInterop.PromoterTypeDtc`</ph>, the transaction <bpt id="p1">**</bpt>must<ept id="p1">**</ept> be promoted by MSDTC and the <ph id="ph3">`byte[]`</ph> returned from the <ph id="ph4">`IPromotableSinglePhaseNotification.Promote`</ph> method <bpt id="p2">**</bpt>must<ept id="p2">**</ept> be an MSDTC transaction propagation token.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value specified for the <ph id="ph1">`promoterType`</ph> parameter is <bpt id="p1">**</bpt>not<ept id="p1">**</ept><ph id="ph2">`TransactionInterop.PromoterTypeDTC`</ph>, the transaction will not be promoted by MSDTC, but rather by the caller’s implementation of <ph id="ph3">`IPromotableSinglePhaseNotification`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this call is successful, there is a set of subsequent operations on the transaction that will return a <ph id="ph1">`TransactionPromotionException`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>These operations are:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Serialization of a Transaction object</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.IPromotableSinglePhaseNotification"&gt;&lt;/xref&gt;</ph> interface implemented by the participant.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The type of the distributed transaction processor.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.SinglePhaseEnlistment"&gt;&lt;/xref&gt;</ph> interface implementation that describes the enlistment.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Enlists a volatile resource manager that supports two phase commit to participate in a transaction.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Volatile resource managers cannot recovery from failure to complete a transaction in which they were participating.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain a durable enlistment in a transaction, use the <ph id="ph1">&lt;xref:System.Transactions.Transaction.EnlistDurable%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource managers enlisted for participation in a transaction through this method receive two phase commit notifications that correspond to the methods defined on the <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Transactions.Enlistment"&gt;&lt;/xref&gt;</ph> object that describes the enlistment.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Volatile resource managers cannot recovery from failure to complete a transaction in which they were participating.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain a durable enlistment in a transaction, use the <ph id="ph1">&lt;xref:System.Transactions.Transaction.EnlistDurable%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on volatile and durable resources, as well as how to enlist a resource, see <bpt id="p1">[</bpt>Implementing A Resource Manager<ept id="p1">](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on how a resource manager responds to commit notification and prepare the commit, see <bpt id="p1">[</bpt>Committing A Transaction In Single-Phase and Multi-Phase<ept id="p1">](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should note that even when your resource manager implementation enlists with this method, it is not guaranteed that it receives a single phase commit.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction manager can still send two phase commit notifications instead.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on the single phase commit optimization, see <bpt id="p1">[</bpt>Optimization Using Single Phase Commit and Promotable Single Phase Notification<ept id="p1">](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Transactions.Enlistment"&gt;&lt;/xref&gt;</ph> object that describes the enlistment.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Determines whether this transaction and the specified object are equal.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The object to compare with this instance.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> and this transaction are identical; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this instance.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer hash code.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets the  <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">byte[]</ph><ept id="p1">&lt;/code&gt;</ept> returned by the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Promote</ph><ept id="p2">&lt;/code&gt;</ept> method when the transaction is promoted.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has the side effect of causing promotion of the transaction if it is not already promoted.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The format of the returned <ph id="ph1">`byte[]`</ph> is defined by the value of the <ph id="ph2">`Transation.PromoterType`</ph> property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`Transaction.PromoterType`</ph> property is <ph id="ph2">`TransactionInterop.PromoterTypeDtc`</ph> or <ph id="ph3">`Guid.Empty`</ph>, then the <ph id="ph4">`byte[]`</ph> returned by this method is an MSDTC transmitter propagation token.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other value for the <ph id="ph1">`Transaction.PromoterType`</ph> property specifies a format that is defined by the caller of <ph id="ph2">`Transaction.EnlistPromotableSinglePhase`</ph> that specified the property type value.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to interpret the promoted token in this latter case, you will need to consult the documentation for the code that made the <ph id="ph1">`EnlistPromotableSinglePhase`</ph> call.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The  <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">byte[]</ph><ept id="p1">&lt;/code&gt;</ept> returned by the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Promote</ph><ept id="p2">&lt;/code&gt;</ept> method when the transaction is promoted.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Gets the isolation level of the transaction.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The isolation level of a transaction determines what level of access other transactions have to volatile data before a transaction completes.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about isolation levels, see the documentation for the <ph id="ph1">&lt;xref:System.Transactions.IsolationLevel&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Transactions.IsolationLevel"&gt;&lt;/xref&gt;</ph> values that indicates the isolation level of the transaction.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Tests whether two specified <ph id="ph1">&lt;xref href="System.Transactions.Transaction"&gt;&lt;/xref&gt;</ph> instances are equivalent.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Transactions.Transaction.Equals%28System.Transactions.Transaction%2CSystem.Transactions.Transaction%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Transactions.Transaction"&gt;&lt;/xref&gt;</ph> instance that is to the left of the equality operator.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Transactions.Transaction"&gt;&lt;/xref&gt;</ph> instance that is to the right of the equality operator.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">x</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">y</ph><ept id="p2">&lt;/code&gt;</ept> are equal; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether two <ph id="ph1">&lt;xref href="System.Transactions.Transaction"&gt;&lt;/xref&gt;</ph> instances are not equal.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Transactions.Transaction.Compare%28System.Transactions.Transaction%2CSystem.Transactions.Transaction%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Transactions.Transaction"&gt;&lt;/xref&gt;</ph> instance that is to the left of the inequality operator.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Transactions.Transaction"&gt;&lt;/xref&gt;</ph> instance that is to the right of the inequality operator.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">x</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">y</ph><ept id="p2">&lt;/code&gt;</ept> are not equal; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>[Supported in the .NET Framework 4.5.2 and later versions]</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Uniquely identifies the format of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">byte[]</ph><ept id="p1">&lt;/code&gt;</ept> returned by the Promote method when the transaction is promoted.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the transaction has not yet been promoted and does not yet have a promotable single phase enlistment, the value of this property will be <ph id="ph1">`Guid.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the transaction has been or will be promoted to MSDTC, then the value of this property will be <ph id="ph1">`TransactionInterop.PromoterTypeDtc`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the transaction has been or will be promoted by a non-MSDTC promoter, the value of this property will be the value specified to an earlier call to <ph id="ph1">`Transaction.EnlistPromotableSinglePhase`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A guid that uniquely identifies the format of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">byte[]</ph><ept id="p1">&lt;/code&gt;</ept> returned by the Promote method when the transaction is promoted.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Rolls back (aborts) the transaction.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any copy of a transaction object can initiate the rollback of the transaction by calling this method.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the original transaction object, which is a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object, can be used to initiate an attempt to commit the transaction.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception is thrown when this method is called after the outcome of the transaction has already been determined.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Rolls back (aborts) the transaction.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Sets the distributed transaction identifier generated by the non-MSDTC promoter.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can only be called successfully while the <ph id="ph1">`IPromotableSinglePhaseNotification.Promote`</ph> method is being processed.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called at any other time, a <ph id="ph1">`TransactionException`</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specified value of the <ph id="ph1">`promotableNotification`</ph> parameter must be the same object that was originally specified to the <ph id="ph2">`Transaction.EnlistPromotableSinglePhase`</ph> invocation.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this is not the case, then an <ph id="ph1">`InvalidOperationException`</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.IPromotableSinglePhaseNotification"&gt;&lt;/xref&gt;</ph> interface implemented by the participant.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The identifier for the transaction used by the distributed transaction manager.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Indicates that the transaction is completed.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can register for this event instead of using a volatile enlistment to get outcome information for transactions.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parameter passed to the <ph id="ph1">&lt;xref:System.Transactions.TransactionCompletedEventHandler&gt;</ph> delegate is a <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then query the <ph id="ph1">&lt;xref:System.Transactions.Transaction.TransactionInformation%2A&gt;</ph> property of the specific instance to get an instance of <ph id="ph2">&lt;xref:System.Transactions.TransactionInformation&gt;</ph>, whose <ph id="ph3">&lt;xref:System.Transactions.TransactionInformation.Status%2A&gt;</ph> property contains the status of a transaction with either the <ph id="ph4">&lt;xref:System.Transactions.TransactionStatus.Committed&gt;</ph> or <ph id="ph5">&lt;xref:System.Transactions.TransactionStatus.Aborted&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept> Signing up for this event negatively affects the performance of the transaction it is attached to.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>An attempt to subscribe this event on a transaction that has been disposed.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Retrieves additional information about a transaction.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.TransactionInformation"&gt;&lt;/xref&gt;</ph> that contains additional information about the transaction.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> with the data required to serialize this transaction.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The destination (see <ph id="ph1">&lt;xref href="System.Runtime.Serialization.StreamingContext"&gt;&lt;/xref&gt;</ph> ) for this serialization.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>