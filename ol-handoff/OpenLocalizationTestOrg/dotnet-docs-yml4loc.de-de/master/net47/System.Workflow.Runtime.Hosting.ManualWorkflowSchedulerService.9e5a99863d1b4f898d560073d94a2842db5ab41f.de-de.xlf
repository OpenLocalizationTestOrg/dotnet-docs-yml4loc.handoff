<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b18af4e4a2426e4b7c7155a202c66fdca2ee6fa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd279bf243bd1085ccb6b190f020381d319e9ce6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8c3219680d48c8667849ed4e8508da00a2f277f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a threading service that allows the host application creating a workflow instance to donate the <ph id="ph1">&lt;xref href="System.Threading.Thread"&gt;&lt;/xref&gt;</ph> on which the workflow instance is run.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using this threading service, host applications can run a workflow instance on a single <ph id="ph1">&lt;xref href="System.Threading.Thread"&gt;&lt;/xref&gt;</ph> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by <ph id="ph2">&lt;xref href="System.Threading.Timer"&gt;&lt;/xref&gt;</ph>).This mode blocks the execution of the host application until the workflow instance becomes idle.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Subsequently, the workflow instance can only be executed using the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)"&gt;&lt;/xref&gt;</ph> method of this service.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService&gt;</ph> does not automatically run a workflow instance that is in the queue.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host must call <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A&gt;</ph> to run a specified workflow.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Boolean`</ph> that determines how delay activities are handled.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the host must manually resume the workflow after the delay activities expire.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Specialized.NameValueCollection"&gt;&lt;/xref&gt;</ph> that contains parameters for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">useActiveTimers</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the host must manually resume the workflow after the delay activities expire.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Cancels the specified existing workflow instance work item.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> associated with the existing scheduled work item to cancel.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Overloaded from <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This method is called whenever <ph id="ph1">&lt;xref href="System.Workflow.Runtime.WorkflowRuntime.StartRuntime"&gt;&lt;/xref&gt;</ph> is called and is used by the <ph id="ph2">&lt;xref href="System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService"&gt;&lt;/xref&gt;</ph> to do work that is needed when the <ph id="ph3">&lt;xref href="System.Workflow.Runtime.WorkflowRuntime"&gt;&lt;/xref&gt;</ph> starts.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Runs the specified workflow instance.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a synchronous call that uses the current thread to run the workflow.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not return until the workflow idles, suspends, completes, terminates, or aborts.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> for the workflow instance to run.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the workflow starts running; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;workflowInstanceId&lt;/code&gt;</ph> is an empty GUID.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.WaitCallback"&gt;&lt;/xref&gt;</ph> multicast delegate that represents the method to run.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> that represents the workflow instance.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callback&lt;/code&gt;</ph> contains a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> and GUIDs.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.WaitCallback"&gt;&lt;/xref&gt;</ph> multicast delegate that represents the method to run.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> that represents the workflow instance.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> that indicates the time to begin running the thread.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> that represents the scheduled thread.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callback&lt;/code&gt;</ph> contains a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;workflowInstanceId&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;timerId&lt;/code&gt;</ph> is an empty GUID.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Overloaded from <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService"&gt;&lt;/xref&gt;</ph> uses this method to do work that is needed when the <ph id="ph2">&lt;xref href="System.Workflow.Runtime.WorkflowRuntime"&gt;&lt;/xref&gt;</ph> stops.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>