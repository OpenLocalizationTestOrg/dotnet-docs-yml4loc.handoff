<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68e2facf50c06de68cbd33db602fe7c5e919927c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.AppContext.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55f9c84a4acb4e8a98f7122f70b64bf2872fe2e5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cf8ca39826bfbc05aea1e7dce6805a5d90211b4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides members for setting and retrieving data about an application's context.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This capability is typically important when a change is made to existing functionality.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversely, there is already an implicit opt-in for new functionality.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>AppContext for library developers</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Libraries use  the <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class to define and expose compatibility switches, while library users can set those switches to affect the library behavior.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defining the switch name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its <ph id="ph1">`value`</ph> element is a name/value pair that consists of the name of a switch and its <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the switch is always implicitly <ph id="ph1">`false`</ph>, which provides the new behavior (and makes the new behavior opt-in by default).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the switch to <ph id="ph1">`true`</ph> enables it, which provides the legacy behavior.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Explicitly setting the switch to <ph id="ph1">`false`</ph> also provides the new behavior.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are two obvious formats.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>namespace<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>library<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you define and document the switch, callers can use it by using the registry, by adding an  <ph id="ph1">`AppContextSwitchOverrides`</ph> element to their application configuration file, or by calling the  <ph id="ph2">&lt;xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=fullName&gt;</ph> method programmatically.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the <bpt id="p1">[</bpt>AppContext for library consumers<ept id="p1">](#ForConsumers)</ept> section for more information about how callers use and set the value of <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> configuration switches.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the common language runtime runs an application, it automatically reads the registry's compatibility settings and loads the application configuration file in order to populate the application's <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <ph id="ph2">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method,  to configure the <ph id="ph3">&lt;xref:System.AppContext&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Checking the setting</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then check if a consumer has declared the value of the switch and act appropriately by calling the <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns <ph id="ph1">`true`</ph> if the <ph id="ph2">`switchName`</ph> argument is found, and when the method returns, its <ph id="ph3">`isEnabled`</ph> argument indicates the value of the switch.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the method returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class to allow the customer to choose the original behavior of a library method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following is version 1.0 of a library named <ph id="ph1">`StringLibrary`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>It defines a <ph id="ph1">`SubstringStartsAt`</ph> method that performs an ordinal comparison to determine the starting index of a substring within a larger string.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.AppContext.Class#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.AppContext.Class#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example then uses the library to find the starting index of the substring "archæ" in "The archaeologist".</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the method performs an ordinal comparison, the substring cannot be found.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.AppContext.Class#5<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.AppContext.Class#5<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version 2 of the library, however, changes the <ph id="ph1">`SubstringStartsAt`</ph> method to use culture-sensitive comparison.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.AppContext.Class#6<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.AppContext.Class#6<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the app is recompiled to run against the new version of the library, it now reports that the substring "archæ" is found at index 4 in "The archaeologist".</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.AppContext.Class#7<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.AppContext.Class#7<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This change can be prevented from breaking the applications that depend on the original behavior by defining an <ph id="ph1">`AppContextSwitchOverrides`</ph> switch.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the switch is named <ph id="ph1">`StringLibrary.DoNotUseCultureSensitiveComparison`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its default value, <ph id="ph1">`false`</ph>, indicates that the library should perform its version 2.0 culture-sensitive comparison.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`true`</ph> indicates that the library should perform its version 1.0 ordinal comparison.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.AppContext.Class#8<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.AppContext.Class#8<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If application can then use the following configuration file to restore the version 1.0 behavior.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application is run with the configuration file present, it produces the following output:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>AppContext for library consumers</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are the consumer of a library, the <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class  allows you to take advantage of a library or library method's opt-out mechanism for new functionality.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the switch  is a Boolean.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is <ph id="ph1">`false`</ph>, which is typically the default value, the new behavior is enabled; if it is <ph id="ph2">`true`</ph>, the new behavior is disabled, and the member behaves as it did previously.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the value of a switch in one of three ways:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling the <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=fullName&gt;</ph> method in your code.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`switchName`</ph> argument defines the switch name, and the <ph id="ph2">`isEnabled`</ph> property defines the value of the switch.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> is a static class, it is available on a per-application domain basis.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=fullName&gt;</ph> has application scope; that is, it affects only the application.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>By adding an <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> element to the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>runtime&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your app.config file.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The switch has a single attribute, <ph id="ph1">`value`</ph>, whose value is a string that represents a key/value pair containing both the switch name and its value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>To define multiple switches, separate each switch's key/value pair in the <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> element's <ph id="ph2">`value`</ph> attribute with a semicolon.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the :<ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> element has the following format:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> element to define a configuration setting has application scope; that is, it affects only the application.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>By adding a string value whose name is the name of the switch to the <ph id="ph1">`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`</ph> key in the registry.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value must be the string representation of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> that can be parsed by the <ph id="ph2">&lt;xref:System.Boolean.Parse%2A?displayProperty=fullName&gt;</ph> method; that is, it must be "True", "true", "False", or "false".</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the runtime encounters any other value, it ignores the switch.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the registry to define an <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> switch has machine scope; that is, it affects every application running on the machine.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The programmatic setting.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The setting in the app config file.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The registry setting.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following is a simple application that passes a file URI to the <ph id="ph1">&lt;xref:System.IO.Path.GetDirectoryName%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>When run under the .NET Framework 4.6, it throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> because <ph id="ph2">`file://`</ph> is no longer a valid part of a file path.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.AppContext.Class#10<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.AppContext.Class#10<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restore the method's previous behavior and prevent the exception, you can add the <ph id="ph1">`Switch.System.IO.UseLegacyPathHandling`</ph> switch to the application configuration file for the example:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a per application domain property.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value corresponds to the <ph id="ph1">&lt;xref:System.AppDomain.BaseDirectory%2A?displayProperty=fullName&gt;</ph> property of the current application domain.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>the pathname of the base directory that the assembly resolver uses to probe for assemblies.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns the value of the named data element assigned to the current application domain.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The name of the data element.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept>, if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">name</ph><ept id="p2">&lt;/code&gt;</ept> identifies a named value; otherwise, <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Sets the value of a switch.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>This capability is typically important when a change is made to existing functionality.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversely, there is already an implicit opt-in for new functionality.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method is called by an application (or a library) to declare the value of a switch (which is always a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value) that a dependent library defines.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The switch is always implicitly <ph id="ph1">`false`</ph>, which provides the new behavior.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the switch to <ph id="ph1">`true`</ph> enables it, which provides the legacy behavior.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Explicitly setting the switch to <ph id="ph1">`false`</ph> also provides the new behavior.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dependent library can then check the value of the switch by calling the <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are two obvious formats.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>namespace<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>library<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to setting the value of a switch programmatically, it can also be set:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>by adding the switch name and value to the <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> element in the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>runtime&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of an application configuration file.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following defines a switch named <ph id="ph1">`Libraries.FPLibrary.UseExactFloatingPointComparison`</ph> whose value is <ph id="ph2">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>by adding a string value whose name is the name of the switch to the <ph id="ph1">`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`</ph> key in the registry.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value must be the string representation of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> that can be parsed by the <ph id="ph2">&lt;xref:System.Boolean.Parse%2A?displayProperty=fullName&gt;</ph> method; that is, it must be "True", "true", "False", or "false".</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`switchName`</ph> already exists, its value is overwritten by the <ph id="ph2">`isEnabled`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, the most recent call to the <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method overrides the value defined in the registry, in an app configuration file, or by previous calls to the <ph id="ph2">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The name of the switch.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The value of the switch.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;switchName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;switchName&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Gets the name of the framework version targeted by the current application.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the target framework version corresponds to the value of the <ph id="ph1">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of target framework names for the .NET Framework, see the <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;supportedRuntime<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The name of the framework version targeted by the current application.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Tries to get the value of a switch.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>This capability is typically important when a change is made to existing functionality.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversely, there is already an implicit opt-in for new functionality.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime automatically populates the switches assigned to an <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> instance by reading the registry and the application's configuration file.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of these switches can then be overridden, and new switches added, by calling the <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>A library calls the <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A&gt;</ph> method to check whether its consumers have declared the value of the switch and then act appropriately on it.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, if the switch is not defined, the new functionality is enabled..</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the switch is defined and its value is <ph id="ph1">`false`</ph>, the new functionality is also enabled.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>If its value is <ph id="ph1">`true`</ph>, the legacy behavior is enabled.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The name of the switch.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">switchName</ph><ept id="p1">&lt;/code&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">switchName</ph><ept id="p2">&lt;/code&gt;</ept> was found, or <ph id="ph3">`false`</ph> if <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">switchName</ph><ept id="p3">&lt;/code&gt;</ept> was not found.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">switchName</ph><ept id="p1">&lt;/code&gt;</ept> was set and the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">isEnabled</ph><ept id="p2">&lt;/code&gt;</ept> argument contains the value of the switch; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;switchName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;switchName&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>