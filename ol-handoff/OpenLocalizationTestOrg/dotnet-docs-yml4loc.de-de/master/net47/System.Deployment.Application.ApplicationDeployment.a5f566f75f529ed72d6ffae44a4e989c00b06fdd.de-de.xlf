<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">646ff66ce2388c1374faecdc699951b4fdd2181a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Deployment.Application.ApplicationDeployment.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f69a00955ff83e11dbdba0596438d81424c27c6c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">77e304476e79ebf047c5af35e635043d4ae85086</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Supports updates of the current deployment programmatically, and handles on-demand downloading of files.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can configure your <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application to check for updates and install them automatically through the <ph id="ph2">`subscription`</ph> element of the deployment manifest.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some applications, however, need finer control over their updates.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may want to install required updates programmatically, and prompt users to install optional updates at their convenience.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>By turning off subscription updates in the deployment manifest, you can take complete control of your application's update policies.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can use automatic subscription in conjunction with <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment&gt;</ph>, which enables <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> to update the application periodically, but uses <ph id="ph3">&lt;xref:System.Deployment.Application.ApplicationDeployment&gt;</ph> to download critical updates shortly after they are released.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can test whether your deployment has an available update by using either the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A&gt;</ph> or the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt;</ph> method; the latter method raises the <ph id="ph3">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted&gt;</ph> event on successful completion.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A&gt;</ph> returns important information about the update, such as its version number and whether it is a required update for current users.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an update is available, you can install it by using <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;</ph>; the latter method raises the <ph id="ph3">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted&gt;</ph> event after installation of the update is complete.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For large updates, you can receive progress notifications through the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged&gt;</ph> and <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged&gt;</ph> events, and use the information in <ph id="ph3">&lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt;</ph> to notify the user of the download status.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment&gt;</ph> to download large files and assemblies on demand.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>These files must be marked as "optional" within the deployment's application manifest so that they are not downloaded during installation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can download the files at any point during the application's duration by using the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph> or the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can download assemblies before they are loaded into memory by supplying an event handler for the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event on the <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer<ept id="p1">](http://msdn.microsoft.com/library/59a0dd5f-1cab-4f2f-b780-0ab7399905d5)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you update a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application while the application is running, the user will not see the updates until you call the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Restart%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Windows.Forms.Application&gt;</ph>, which will close the current running instance of the application and immediately restart it.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment&gt;</ph> has no public constructor; you obtain instances of the class within a <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application through the <ph id="ph3">&lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A&gt;</ph> property to verify that the current application is a <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment&gt;</ph> supports checking for updates and downloading updated files asynchronously by using the new <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, which exposes completion callbacks as class events.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment&gt;</ph> starts and manages the threads for you, and calls your application back on the correct UI thread.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Through this class, you can update without locking up the application, so that the user can continue working while the update installs.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user must stop all work while an update takes place, consider using the synchronous methods instead.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performing asynchronous updates requires that your application import both the <ph id="ph1">&lt;xref:System.Deployment.Application&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel&gt;</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets the URL used to launch the deployment manifest of the application.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property will work in both fully trusted and partially trusted applications.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A zero-length string if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TrustUrlParameters</ph><ept id="p1">&lt;/code&gt;</ept> property in the deployment manifest is <ph id="ph2">`false`</ph>, or if the user has supplied a UNC to open the deployment or has opened it locally.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Otherwise, the return value is the full URL used to launch the application, including any parameters.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Performs the same operation as <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdate"&gt;&lt;/xref&gt;</ph>, but returns extended information about the available update.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A&gt;</ph> method lets synchronous callers get the same extended information that asynchronous callers get using the <ph id="ph2">&lt;xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Deployment.Application.UpdateCheckInfo"&gt;&lt;/xref&gt;</ph> for the available update.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The current application is either not configured to support updates, or there is another update check operation already in progress.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The deployment manifest cannot be downloaded.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This exception will appear in the <ph id="ph1">&lt;xref href="System.ComponentModel.AsyncCompletedEventArgs.Error"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph2">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The deployment manifest is corrupted.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Regenerate the application's manifest before you attempt to deploy this application to users.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This exception will appear in the <ph id="ph1">&lt;xref href="System.ComponentModel.AsyncCompletedEventArgs.Error"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph2">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Performs the same operation as <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdate"&gt;&lt;/xref&gt;</ph>, but returns extended information about the available update.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the update will be applied silently and no dialog box will be displayed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Deployment.Application.UpdateCheckInfo"&gt;&lt;/xref&gt;</ph> for the available update.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Checks <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.UpdateLocation"&gt;&lt;/xref&gt;</ph> to determine whether a new update is available.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A&gt;</ph> method compares the version of the currently installed deployment with the version specified in the deployment manifest found at <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the version on the server is different from the installed version, it returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will block until the check has completed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>To check for an update asynchronously, use the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A&gt;</ph> discovers that an update is available, and the user chooses not to install it, <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> will prompt the user that an update is available the next time the application is run.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no way to disable this prompting.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>(If the application is a required update, <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> will install it without prompting.)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a new update is available; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> throws this exception immediately if you call the <ph id="ph2">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdate"&gt;&lt;/xref&gt;</ph> method while an update is already in progress.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The deployment manifest cannot be downloaded.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The deployment manifest is corrupted.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You will likely need to redeploy the application to fix this problem.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Checks <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.UpdateLocation"&gt;&lt;/xref&gt;</ph> to determine whether a new update is available.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the update will be applied silently and no dialog box will be displayed.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a new update is available; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Checks <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.UpdateLocation"&gt;&lt;/xref&gt;</ph> asynchronously to determine whether a new update is available.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt;</ph> returns immediately and starts a separate thread for downloading the updated application.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the method completes or is canceled, it raises the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> in this event handler to determine whether the operation was canceled, or if an exception was raised during update.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel an asynchronous update by calling <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A&gt;</ph> discovers that an update is available, and the user chooses not to install it, <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> will prompt the user that an update is available the next time the application is run.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no way to disable this prompting.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>(If the application is a required update, <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> will install it without prompting.)</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> throws this exception immediately if you call the <ph id="ph2">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync"&gt;&lt;/xref&gt;</ph> method while an update is already in progress.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The deployment manifest cannot be downloaded.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This exception appears in the <ph id="ph1">&lt;xref href="System.ComponentModel.AsyncCompletedEventArgs.Error"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph2">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The deployment manifest is corrupted.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You will likely need to redeploy the application to fix this problem.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This exception appears in the <ph id="ph1">&lt;xref href="System.ComponentModel.AsyncCompletedEventArgs.Error"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph2">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Cancels the asynchronous update check.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to cancel an update check initiated with the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will not cancel any background update that may already be in progress, such as an update started as part of a subscription.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about subscriptions, see <bpt id="p1">[</bpt>Choosing a ClickOnce Update Strategy<ept id="p1">](http://msdn.microsoft.com/library/d8b6e7bb-4ea0-47f3-91cd-48580bdceccc)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Occurs when <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync"&gt;&lt;/xref&gt;</ph> has completed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs&gt;</ph> class will tell you, among other things, the version of the update, how large the update is, and whether the available update is required or optional.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Occurs when a progress update is available on a <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync"&gt;&lt;/xref&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged&gt;</ph> reports on the download status of the application's deployment manifest.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be important information for users who are downloading the deployment over slow network connections.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns the current <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment"&gt;&lt;/xref&gt;</ph> for this deployment.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot create instances of <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment&gt;</ph> directly in your application; you must retrieve a valid instance through the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A&gt;</ph> static property is valid only from within an application that was deployed using <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempts to call this property from non-<ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> applications will throw an exception.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are developing an application that may or may not be deployed using <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A&gt;</ph> property to test whether the current program is a <ph id="ph3">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The current deployment.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You attempted to call this static property from a non-<ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Gets the version of the deployment for the current running instance of the application.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A&gt;</ph> will differ from <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A&gt;</ph> if a new update has been installed but you have not yet called <ph id="ph3">&lt;xref:System.Windows.Forms.Application.Restart%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the deployment manifest is configured to perform automatic updates, you can compare these two values to determine if you should restart the application.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The current deployment version.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Gets the path to the <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> data directory.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A string containing the path to the application's data directory on the local disk.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Downloads a set of optional files on demand.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application, the files marked "optional" in the application manifest are not downloaded during initialization or update.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use an assembly you have downloaded with <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph>, you attach an event listener to the <ph id="ph2">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event on the <ph id="ph3">&lt;xref:System.AppDomain.CurrentDomain%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example, see =<bpt id="p1">[</bpt>Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer<ept id="p1">](http://msdn.microsoft.com/library/59a0dd5f-1cab-4f2f-b780-0ab7399905d5)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>All files are downloaded to the <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application cache and are therefore isolated to the current version of the application.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the previous version will still have the copies of the files it originally downloaded.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about accessing data files, see <bpt id="p1">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id="p1">](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph> works in partially trusted applications, that is, in any <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application running with restricted permission.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you attempt to load assemblies dynamically, your application will require full trust.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>On-demand downloading of data files is currently not supported.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your application will not be responsive to user input until the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph> method returns.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to download files without interrupting the user's workflow, use the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot download a single file by its file name alone.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>To download a single file, assign it a group name in your <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> deployment and download the group using this method.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The named group of files to download.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>All files marked "optional" in a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application require a group name.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">groupName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is null or zero-length.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Downloads, on demand, a set of optional files in the background, and passes a piece of application state to the event callbacks.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application, the files marked "optional" in the application manifest are not downloaded during initialization or update.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This approach works not only for static files, but also for assemblies that an application may or may not require.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>To download assemblies on demand, attach an event listener to the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event on the <ph id="ph2">&lt;xref:System.AppDomain.CurrentDomain%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can download multiple file groups simultaneously by using the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can distinguish among them by using the <ph id="ph1">&lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs&gt;</ph> class, which is passed to the <ph id="ph3">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to pass a more complex state, you can use</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> to pass in a <ph id="ph2">`state`</ph> object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>All static files are downloaded to the <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application's data directory and are therefore isolated to the current version of the application.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about accessing static files, see <bpt id="p1">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id="p1">](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Let's say that after an application downloads a file group, the user installs a new version of the application, but later  user reverts to the previous version of the application.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the previous version will still have the copies of the files it originally downloaded.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph> works in partially trusted applications, that is, in any <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application running with restricted permission.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you are attempting to load assemblies dynamically, your application will require full trust.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>On-demand downloading of data files is currently not supported.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel an asynchronous download, call the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The named group of files to download.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>All files marked "optional" in a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application require a group name.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>An arbitrary object containing state information for the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">groupName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is null or zero-length.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You cannot initiate more than one download of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">groupName</ph><ept id="p1">&lt;/code&gt;</ept> at a time.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Downloads, on demand, a set of optional files in the background.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application, the files marked "optional" in the application manifest are not downloaded during initialization or update.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>This approach works not only for static files, but also for assemblies that an application may or may not require.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>To download assemblies on demand, attach an event listener to the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event on the <ph id="ph2">&lt;xref:System.AppDomain.CurrentDomain%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example, see <bpt id="p1">[</bpt>Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API<ept id="p1">](http://msdn.microsoft.com/library/d20e2789-8621-4806-b5b7-841122da1456)</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>All assemblies are downloaded to the <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application cache.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>All static files are downloaded to the <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application's data directory and are therefore isolated to the current version of the application.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the previous version will still have the copies of the files it originally downloaded.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about accessing static files, see <bpt id="p1">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id="p1">](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can download multiple file groups simultaneously using <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can distinguish among them by using the <ph id="ph1">&lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs&gt;</ph> class, which is passed to the <ph id="ph3">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to pass more complex state, you can use <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> to pass in a <ph id="ph2">`state`</ph> object.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph> works in partially trusted applications, that is, in any <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application running with restricted permission.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you are attempting to load assemblies dynamically, your application will require full trust.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>On-demand downloading of data files is currently not supported.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot download a single file by its file name alone.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>To download a single file, assign it a group name in your <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> deployment and download the group using this method.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel an asynchronous download, call the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The named group of files to download.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>All files marked "optional" in a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application require a group name.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">groupName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is null or zero-length.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>You cannot initiate more than one download of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">groupName</ph><ept id="p1">&lt;/code&gt;</ept> at a time.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Cancels an asynchronous file download.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The named group of files to download.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>All files marked "optional" in a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application require a group name.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;groupName&lt;/code&gt;</ph> cannot be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Occurs on the main application thread when a file download is complete.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted&gt;</ph> event is called on the main application thread.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is thread safe to call your application's Windows Forms controls directly within this callback.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> supplied to this callback.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is <ph id="ph1">`null`</ph>, the download was successful; if it is not <ph id="ph2">`null`</ph>, the installation did not succeed, and you can find more information about the installation failure through the <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Occurs when status information is available on a file download operation initiated by a call to <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged&gt;</ph> event is called on the main application thread.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is thread safe to call your application's Windows Forms controls directly within this callback.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the information supplied in <ph id="ph1">&lt;xref:System.Deployment.Application.DeploymentProgressChangedEventArgs&gt;</ph> to communicate progress information to your users.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Checks whether the named file group has already been downloaded to the client computer.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded%2A&gt;</ph> works in a partially trusted application without any security demands.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you update an application, <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> copies any on-demand data files from the previous version into the new version's data directory.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you download a new version of these files, you should remove any data you want to keep from the old version and move it into the new version.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The named group of files to download.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>All files marked "optional" in a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application require a group name.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the file group has already been downloaded for the current version of this application; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If a new version of the application has been installed, and the new version has not added, removed, or altered files in the file group, <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)"&gt;&lt;/xref&gt;</ph> returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;groupName&lt;/code&gt;</ph> is not a file group defined in the application manifest.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this is the first time this application has run on the client computer.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.IsFirstRun%2A&gt;</ph> to determine whether you need to perform any one-time initialization operations the first time your application runs.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not assume that a <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.IsFirstRun%2A&gt;</ph> setting of <ph id="ph2">`true`</ph> indicates that this instance of an application is the first one to show its user interface to the user.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Due to the way the system schedules processes, one instance of the application may have its <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.IsFirstRun%2A&gt;</ph> property set to <ph id="ph2">`true`</ph>, but another instance may be the first to render on the screen.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is reset whenever the user upgrades from one version to the next.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to perform an operation only the very first time any version of the application is run, you will need to perform an additional test, such as checking for the existence of a file you created the first time, or storing a flag using <bpt id="p1">**</bpt>Application Settings<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this version of the application has never run on the client computer before; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current application is a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want your application to run both inside and outside of a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> deployment (for example, if you need to debug your application on the local computer before deploying it), test <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A&gt;</ph> before accessing the <ph id="ph3">&lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A&gt;</ph> will return <ph id="ph2">`true`</ph> regardless of whether the application is installed or hosted online, and regardless of whether it was installed from a Web site, file share, or CD-ROM.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this is a <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Gets the date and the time <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> last checked for an application update.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application can be configured for subscription updates.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> polls an application's deployment location automatically at intervals defined in the deployment manifest, and determines whether there is an update available.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck%2A&gt;</ph> returns the time of the last update check regardless of whether it was initiated by a subscription or by an explicit check using the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Deployment.Application.ApplicationDeployment.Update%2A&gt;</ph>, or <ph id="ph6">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no update check has been performed since the application was installed, <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck%2A&gt;</ph> returns the installation time.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> of the last update check.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Starts a synchronous download and installation of the latest version of this application.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application is considered updated when you publish a new version of the application to the location specified by <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A&gt;</ph>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.Update%2A&gt;</ph> call will block until the update has been downloaded to the client computer and installed into the <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> cache; during this time, the application will not be responsive to the user.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to maintain application responsiveness or display a progress report during download, use the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.Update%2A&gt;</ph> downloads all of the files that are not marked as "optional" in the application manifest.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can download optional files on demand by using the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph> or the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> may already be updating the application automatically when you call the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.Update%2A&gt;</ph> method; if that happens, calls to this method will throw an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <ph id="ph1">&lt;xref:System.Deployment.Application.InvalidDeploymentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the time, redeploying your <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application solves this problem.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>An update may request a higher level of trust on the local computer than the previous version of the application.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the deployment manifest does not contain a valid trust license, <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> stops the installation and throws a <ph id="ph2">&lt;xref:System.Deployment.Application.TrustNotGrantedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.Update%2A&gt;</ph> method will never display a prompt asking the user whether they want to grant the application permission to run.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if an application has been updated; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The local computer did not grant the application the permission level it requested to execute.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> deployment is corrupted.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For tips on how to diagnose and correct the problem, see <bpt id="p1">[</bpt>Troubleshooting ClickOnce Deployments<ept id="p1">](http://msdn.microsoft.com/library/58e90012-f68b-4852-8ae9-58e361cbcc32)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The new deployment could not be downloaded from its location on the network.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The application is currently being updated.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Starts an asynchronous download and installation of the latest version of this application.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application is considered updated when you publish a new version of the application to the location specified by <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A&gt;</ph>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>While downloading the update, <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> will raise the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged&gt;</ph> event handler on the main application thread to inform you of the status of the download.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous update finishes or encounters an exception, <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> will raise the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted&gt;</ph> event on the main application thread.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examine the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> supplied to this event to determine whether the update succeeded.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;</ph> throws an exception, <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> calls <ph id="ph3">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted&gt;</ph> and sets the <ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph5">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> to the exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;</ph> will download all files in a deployment not marked as "optional" in the application manifest.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can download optional files on demand by using the <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph> or the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> may already be updating the application automatically when you call the <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;</ph> method; if that happens, calls to this method will throw an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <ph id="ph1">&lt;xref:System.Deployment.Application.InvalidDeploymentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the time, rebuilding your application manifest solves this problem.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>An update may request a higher level of trust on the local computer than the previous version of the application.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the deployment manifest does not contain a valid trust license, <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> stops the installation and throws a <ph id="ph2">&lt;xref:System.Deployment.Application.TrustNotGrantedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;</ph> will never display a prompt asking the user if they want to grant the application permission to run.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The local computer did not grant this application the permission level it requested to execute.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> deployment is corrupted.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>For tips on how to diagnose and correct the problem, see <bpt id="p1">[</bpt>Troubleshooting ClickOnce Deployments<ept id="p1">](http://msdn.microsoft.com/library/58e90012-f68b-4852-8ae9-58e361cbcc32)</ept>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The new deployment could not be downloaded from its location on the network.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Cancels an asynchronous update initiated by <ph id="ph1">&lt;xref href="System.Deployment.Application.ApplicationDeployment.UpdateAsync"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel%2A&gt;</ph> only cancels an update initiated by a call to <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;</ph>; it does not cancel an update started as part of a subscription.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Occurs when <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> has finished upgrading the application as the result of a call to <ph id="ph2">&lt;xref href="System.Deployment.Application.ApplicationDeployment.UpdateAsync"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted&gt;</ph> event is called on the main application thread.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call your application's Windows Forms controls directly within this callback without triggering an exception.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> supplied to this callback.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is <ph id="ph1">`null`</ph>, the installation was successful; if it is not <ph id="ph2">`null`</ph>, the installation did not succeed, and you can find more information about this installation failure through the <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the update has been downloaded, you will need to call the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Restart%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.Windows.Forms.Application&gt;</ph> to use the newer version of the application.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the installation of the update was canceled by a call to <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> class will be <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this event handler, your application must import both the <ph id="ph1">&lt;xref:System.Deployment.Application&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel&gt;</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Gets the full name of the application after it has been updated.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains the full name of the application.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Gets the version of the update that was recently downloaded.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A&gt;</ph> differs from <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A&gt;</ph> if a new update has been installed but you have not yet called <ph id="ph3">&lt;xref:System.Windows.Forms.Application.Restart%2A&gt;</ph> on the <ph id="ph4">&lt;xref:System.Windows.Forms.Application&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application's deployment manifest is configured to perform automatic updates, you can compare these two values to determine whether you should restart the application.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application has not been updated, <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A&gt;</ph> returns the same value as <ph id="ph2">&lt;xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Version"&gt;&lt;/xref&gt;</ph> describing the version of the update.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Gets the Web site or file share from which this application updates itself.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A&gt;</ph> may be different from the Web site used to download the application initially if the application's deployment is configured to use update redirection.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value can be changed only in the application's deployment manifest.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The update path, expressed as an HTTP, HTTPS, or file URL; or as a Windows network file path (UNC).</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Occurs when <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> has new status information for an update operation initiated by calling the <ph id="ph2">&lt;xref href="System.Deployment.Application.ApplicationDeployment.UpdateAsync"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged&gt;</ph> event is called on the main application thread.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call your application's Windows Forms controls directly within this callback without triggering an exception.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>