<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50b80f30b6b54b9233f8b714474d046be2dc8543</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb357247217767b7494316f4e57b549fb30c8782</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7ec186517c2ade2abb6a87074c9998f0b70864f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines an iterator that can access elements in a container in the forward direction by using the increment operator and in the backward direction by using the decrement operator.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The element that the iterator points to can be both written to and read from any number of times.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Bidirectional iterators can be used anywhere that an input or output iterator is required.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Allocates and initializes a new <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Allocates and initializes a new <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object that points to the given node.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The node that the iterator will point to.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Returns a copy of the current <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A copy of the current <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Gets the container that the iterator is traversing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The container that the iterator is traversing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Determines if the given <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two iterators are the same object; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Decrements the iterator by one element.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is the postfix version of the decrement operator.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An unused parameter that indicates this is the postfix version of the operator.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Decrements the iterator by one element.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is the prefix version of the decrement operator.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Determines whether the given <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator%601.Equals%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two iterators are the same object; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Increments the iterator by one element.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is the prefix version of the increment operator.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Increments the iterator by one element.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is the postfix version of the increment operator.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Determines whether the given <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object differs from the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two iterators are different objects; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Positions the iterator to the element immediately before the current element.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Determines whether the iterator is valid and can be safely used to traverse the underlying container.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the iterator is valid and safe to use; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>