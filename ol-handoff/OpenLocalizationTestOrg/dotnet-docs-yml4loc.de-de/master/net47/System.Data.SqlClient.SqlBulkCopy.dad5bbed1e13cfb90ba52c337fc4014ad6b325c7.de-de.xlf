<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c6df8d1bf60cb9e7ed62d2be82efe058d0e43fc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Data.SqlClient.SqlBulkCopy.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46303f043167bc770dc94099e354a76b8f8704b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5df491839b79a95b58139e60f9aabca7928630e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Lets you efficiently bulk load a SQL Server table with data from another source.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Microsoft SQL Server includes a popular command-prompt utility named <bpt id="p1">**</bpt>bcp<ept id="p1">**</ept> for moving data from one table to another, whether on a single server or between servers.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> class lets you write managed code solutions that provide similar functionality.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are other ways to load data into a SQL Server table (INSERT statements, for example), but <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> offers a significant performance advantage over them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> class can be used to write data only to SQL Server tables.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the data source is not limited to SQL Server; any data source can be used, as long as the data can be loaded to a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instance or read with a <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> will fail when bulk loading a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> column of type <ph id="ph3">&lt;xref:System.Data.SqlTypes.SqlDateTime&gt;</ph> into a SQL Server column whose type is one of the date/time types added in SQL Server 2008.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> class using the specified open instance of <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the connection is already open when the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> instance is initialized, the connection remains open after the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> instance is closed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`connection`</ph> argument is null, an <ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The already open <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> instance that will be used to perform the bulk copy operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If your connection string does not use <ph id="ph1">`Integrated Security = true`</ph>, you can use <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlCredential"&gt;&lt;/xref&gt;</ph> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes and opens a new instance of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> based on the supplied <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">connectionString</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The constructor uses the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> to initialize a new instance of the <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The connection is automatically closed at the end of the bulk copy operation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`connectionString`</ph> is null, an <ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`connectionString`</ph> is an empty string, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The string defining the connection that will be opened for use by the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If your connection string does not use <ph id="ph1">`Integrated Security = true`</ph>, you can use <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)"&gt;&lt;/xref&gt;</ph> and <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlCredential"&gt;&lt;/xref&gt;</ph> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes and opens a new instance of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> based on the supplied <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">connectionString</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The constructor uses that <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> to initialize a new instance of the <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> instance behaves according to options supplied in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">copyOptions</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain detailed information about all the bulk copy options in the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopyOptions&gt;</ph> topic.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The string defining the connection that will be opened for use by the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If your connection string does not use <ph id="ph1">`Integrated Security = true`</ph>, you can use <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)"&gt;&lt;/xref&gt;</ph> and <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlCredential"&gt;&lt;/xref&gt;</ph> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A combination of values from the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopyOptions"&gt;&lt;/xref&gt;</ph> enumeration that determines which data source rows are copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> class using the supplied existing open instance of <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> instance behaves according to options supplied in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">copyOptions</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If a non-null <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlTransaction"&gt;&lt;/xref&gt;</ph> is supplied, the copy operations will be performed within that transaction.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If options include <ph id="ph1">`UseInternalTransaction`</ph> and the <ph id="ph2">`externalTransaction`</ph> argument is not null, an <bpt id="p1">**</bpt>InvalidArgumentException<ept id="p1">**</ept> is thrown.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For examples demonstrating how to use <ph id="ph1">`SqlBulkCopy`</ph> in a transaction, see <bpt id="p1">[</bpt>Transaction and Bulk Copy Operations<ept id="p1">](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The already open <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> instance that will be used to perform the bulk copy.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If your connection string does not use <ph id="ph1">`Integrated Security = true`</ph>, you can use <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlCredential"&gt;&lt;/xref&gt;</ph> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A combination of values from the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopyOptions"&gt;&lt;/xref&gt;</ph> enumeration that determines which data source rows are copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlTransaction"&gt;&lt;/xref&gt;</ph> instance under which the bulk copy will occur.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Number of rows in each batch.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>At the end of each batch, the rows in the batch are sent to the server.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>A batch is complete when <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A&gt;</ph> rows have been processed or there are no more rows to send to the destination data source.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (the default) indicates that each <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> operation is a single batch.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> instance has been declared without the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction&gt;</ph> option in effect, rows are sent to the server <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A&gt;</ph> rows at a time, but no transaction-related action is taken.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction&gt;</ph> is in effect, each batch of rows is inserted as a separate transaction.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A&gt;</ph> property can be set at any time.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a bulk copy is already in progress, the current batch is sized according to the previous batch size.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent batches use the new size.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A&gt;</ph> is initially zero and changed while a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> operation is already in progress, that operation loads the data as a single batch.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any subsequent <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> operations on the same <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> instance use the new <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The integer value of the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.BatchSize"&gt;&lt;/xref&gt;</ph> property, or zero if no value has been set.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Number of seconds for the operation to complete before it times out.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the operation does time out, the transaction is not committed and all copied rows are removed from the destination table.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The integer value of the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The default is 30 seconds.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A value of 0 indicates no limit; the bulk copy will wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Closes the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you call a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.Close%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> object, no other operation will succeed.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> method will throw an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.Close%2A&gt;</ph> method from the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied&gt;</ph> event causes an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> to be thrown.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that open <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> instances are closed implicitly at the end of a <ph id="ph2">`using`</ph> block.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns a collection of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopyColumnMapping"&gt;&lt;/xref&gt;</ph> items.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Column mappings define the relationships between columns in the data source and columns in the destination.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the data source and the destination table have the same number of columns, and the ordinal position of each source column within the data source matches the ordinal position of the corresponding destination column, the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A&gt;</ph> collection is unnecessary.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the column counts differ, or the ordinal positions are not consistent, you must use <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A&gt;</ph> to make sure that data is copied into the correct columns.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>During the execution of a bulk copy operation, this collection can be accessed, but it cannot be changed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any attempt to change it will throw an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A collection of column mappings.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>By default, it is an empty collection.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Name of the destination table on the server.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A&gt;</ph> has not been set when <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> is called, an <ph id="ph3">&lt;xref:System.ArgumentNullException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A&gt;</ph> is modified while a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> operation is running, the change does not affect the current operation.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A&gt;</ph> value is used the next time a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A&gt;</ph> is a three-part name (<ph id="ph2">`&lt;database&gt;.&lt;owningschema&gt;.&lt;name&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can qualify the table name with its database and owning schema if you choose.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the table name uses an underscore ("_") or any other special characters, you must escape the name using surrounding brackets as in (<ph id="ph1">`[&lt;database&gt;.&lt;owningschema&gt;.&lt;name_01&gt;]`</ph>).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see "Identifiers" in SQL Server Books Online.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can bulk-copy data to a temporary table by using a value such as <ph id="ph1">`tempdb..#table`</ph> or <ph id="ph2">`tempdb.&lt;owner&gt;.#table`</ph> for the <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The string value of the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property, or null if none as been supplied.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Enables or disables a <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object to stream data from an <ph id="ph2">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> object</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> reads from an <ph id="ph4">&lt;xref:System.Data.IDataReader&gt;</ph> object using <ph id="ph5">&lt;xref:System.Data.CommandBehavior.SequentialAccess&gt;</ph>, optimizing memory usage by using the <ph id="ph6">&lt;xref:System.Data.IDataReader&gt;</ph> streaming capabilities.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>When it’s set to false, the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> class loads all the data returned by the <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph> object into memory before sending it to <ph id="ph3">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> or SQL Azure.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object can stream data from an <ph id="ph3">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> object; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Defines the number of rows to be processed before generating a notification event.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is designed for user interface components that illustrate the progress of a bulk copy operation.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>It indicates the number of rows to be processed before generating a notification event.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A&gt;</ph> property can be set at any time, even while a bulk copy operation is underway.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes made during a bulk copy operation take effect after the next notification.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new setting applies to all subsequent operations on the same instance.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A&gt;</ph> is set to a number less than zero, an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The integer value of the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.NotifyAfter"&gt;&lt;/xref&gt;</ph> property, or zero if the property has not been set.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Occurs every time that the number of rows specified by the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.NotifyAfter"&gt;&lt;/xref&gt;</ph> property have been processed.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the settings of <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A&gt;</ph> are independent.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Receipt of a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied&gt;</ph> event does not imply that any rows have been sent to the server or committed.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot call SqlBulkCopy.Close (<ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.Close%2A&gt;</ph>) or SqlConnection.Close (<ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnection.Close%2A&gt;</ph>) from this event.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing this will cause an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> being thrown, and the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> object state will not change.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user wants to cancel the operation from the event, the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlRowsCopiedEventArgs&gt;</ph> can be used.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>(See <bpt id="p1">[</bpt>Transaction and Bulk Copy Operations<ept id="p1">](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)</ept> for examples that use the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A&gt;</ph> property.)</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>No action, such as transaction activity, is supported in the connection during the execution of the bulk copy operation, and it is recommended that you not use the same connection used during the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can open a different connection.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Copies only rows that match the supplied row state in the supplied <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to a destination table specified by the <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only rows in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> that are in the states indicated in the <ph id="ph2">`rowState`</ph> argument and have not been deleted are copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Data.DataRowState.Deleted&gt;</ph> is specified, any <ph id="ph2">&lt;xref:System.Data.DataRowState.Unchanged&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.DataRowState.Added&gt;</ph>, and <ph id="ph4">&lt;xref:System.Data.DataRowState.Modified&gt;</ph> rows will also be copied to the server.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception will be raised.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>While the bulk copy operation is in progress, the associated destination <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> is busy serving it, and no other operations can be performed on the connection.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A&gt;</ph> collection maps from the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> columns to the destination database table.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">&lt;xref href="System.Data.DataRowState"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Only rows matching the row state are copied to the destination.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Copies all rows in the supplied <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> to a destination table specified by the <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The copy operation starts at the next available row in the reader.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the time, the reader was just returned by <ph id="ph1">&lt;xref:System.Data.IDbCommand.ExecuteReader%2A&gt;</ph> or a similar call, so the next available row is the first row.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>To process multiple results, call <ph id="ph1">&lt;xref:System.Data.IDataReader.NextResult%2A&gt;</ph> on the data reader and call <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> again.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that using <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> modifies the state of the reader.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method will call <ph id="ph1">&lt;xref:System.Data.IDataReader.Read%2A&gt;</ph> until it returns false, the operation is aborted, or an error occurs.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the data reader will be in a different state, probably at the end of the result set, when the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A&gt;</ph> operation is complete.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>While the bulk copy operation is in progress, the associated destination <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> is busy serving it, and no other operations can be performed on the connection.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A&gt;</ph> collection maps from the data reader columns to the destination database table.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Copies all rows in the supplied <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to a destination table specified by the <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>All rows in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> are copied to the destination table except those that have been deleted.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>While the bulk copy operation is in progress, the associated destination <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> is busy serving it, and no other operations can be performed on the connection.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A&gt;</ph> collection maps from the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> columns to the destination database table.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Copies all rows from the supplied <ph id="ph1">&lt;xref href="System.Data.Common.DbDataReader"&gt;&lt;/xref&gt;</ph> array to a destination table specified by the <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.DbDataReader"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Copies all rows from the supplied <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> array to a destination table specified by the <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>While the bulk copy operation is in progress, the associated destination <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> is busy serving it, and no other operations can be performed on the connection.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A&gt;</ph> collection maps from the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> columns to the destination database table.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects that will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph>, which copies all rows in the supplied <ph id="ph2">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Exceptions will be reported via the returned Task object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about asynchronous programming in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id="ph2">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph>, see <bpt id="p1">[</bpt>Asynchronous Programming<ept id="p1">](~/docs/framework/data/adonet/asynchronous-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The cancellation instruction.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.CancellationToken.None"&gt;&lt;/xref&gt;</ph> value in this parameter makes this method equivalent to <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A task representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph> multiple times for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph> for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The connection drops or is closed during <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph> execution.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object was closed during the method execution.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Returned in the task object, there was a connection pool timeout.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> object is closed before method execution.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> was closed before the completed <ph id="ph2">&lt;xref href="System.Threading.Tasks.Task"&gt;&lt;/xref&gt;</ph> returned.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph>'s associated connection was closed before the completed <ph id="ph2">&lt;xref href="System.Threading.Tasks.Task"&gt;&lt;/xref&gt;</ph> returned.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Context Connection=true`</ph> is specified in the connection string.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Returned in the task object, any error returned by <ph id="ph1">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> that occurred while opening the connection.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)"&gt;&lt;/xref&gt;</ph>, which copies all rows from the supplied <ph id="ph2">&lt;xref href="System.Data.Common.DbDataReader"&gt;&lt;/xref&gt;</ph> array to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.DbDataReader"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A task representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph>, which copies all rows from the supplied <ph id="ph2">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> array to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about asynchronous programming in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id="ph2">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph>, see <bpt id="p1">[</bpt>Asynchronous Programming<ept id="p1">](~/docs/framework/data/adonet/asynchronous-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects that will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A task representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph> multiple times for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph> for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The connection drops or is closed during <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph> execution.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object was closed during the method execution.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Returned in the task object, there was a connection pool timeout.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> object is closed before method execution.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Context Connection=true`</ph> is specified in the connection string.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Returned in the task object, any error returned by <ph id="ph1">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> that occurred while opening the connection.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph>, which copies all rows in the supplied <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about asynchronous programming in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id="ph2">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph>, see <bpt id="p1">[</bpt>Asynchronous Programming<ept id="p1">](~/docs/framework/data/adonet/asynchronous-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A task representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph> multiple times for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph> for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The connection drops or is closed during <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph> execution.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object was closed during the method execution.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Returned in the task object, there was a connection pool timeout.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> object is closed before method execution.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Context Connection=true`</ph> is specified in the connection string.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Returned in the task object, any error returned by <ph id="ph1">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> that occurred while opening the connection.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph>, which copies all rows in the supplied <ph id="ph2">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about asynchronous programming in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id="ph2">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph>, see <bpt id="p1">[</bpt>Asynchronous Programming<ept id="p1">](~/docs/framework/data/adonet/asynchronous-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A task representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph> multiple times for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph> for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The connection drops or is closed during <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)"&gt;&lt;/xref&gt;</ph> execution.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object was closed during the method execution.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Returned in the task object, there was a connection pool timeout.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> object is closed before method execution.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> was closed before the completed <ph id="ph2">&lt;xref href="System.Threading.Tasks.Task"&gt;&lt;/xref&gt;</ph> returned.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph>'s associated connection was closed before the completed <ph id="ph2">&lt;xref href="System.Threading.Tasks.Task"&gt;&lt;/xref&gt;</ph> returned.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Context Connection=true`</ph> is specified in the connection string.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Returned in the task object, any error returned by <ph id="ph1">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> that occurred while opening the connection.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)"&gt;&lt;/xref&gt;</ph>, which copies all rows from the supplied <ph id="ph2">&lt;xref href="System.Data.Common.DbDataReader"&gt;&lt;/xref&gt;</ph> array to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.DbDataReader"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The cancellation instruction.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.CancellationToken.None"&gt;&lt;/xref&gt;</ph> value in this parameter makes this method equivalent to <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph>, which copies all rows from the supplied <ph id="ph2">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> array to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Exceptions will be reported via the returned Task object.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about asynchronous programming in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id="ph2">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph>, see <bpt id="p1">[</bpt>Asynchronous Programming<ept id="p1">](~/docs/framework/data/adonet/asynchronous-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects that will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The cancellation instruction.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.CancellationToken.None"&gt;&lt;/xref&gt;</ph> value in this parameter makes this method equivalent to <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A task representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph> multiple times for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph> for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The connection drops or is closed during <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])"&gt;&lt;/xref&gt;</ph> execution.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object was closed during the method execution.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Returned in the task object, there was a connection pool timeout.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> object is closed before method execution.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Context Connection=true`</ph> is specified in the connection string.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Returned in the task object, any error returned by <ph id="ph1">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> that occurred while opening the connection.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph>, which copies only rows that match the supplied row state in the supplied <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about asynchronous programming in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id="ph2">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph>, see <bpt id="p1">[</bpt>Asynchronous Programming<ept id="p1">](~/docs/framework/data/adonet/asynchronous-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">&lt;xref href="System.Data.DataRowState"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Only rows matching the row state are copied to the destination.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A task representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph> multiple times for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph> for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The connection drops or is closed during <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph> execution.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object was closed during the method execution.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Returned in the task object, there was a connection pool timeout.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> object is closed before method execution.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Context Connection=true`</ph> is specified in the connection string.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Returned in the task object, any error returned by <ph id="ph1">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> that occurred while opening the connection.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph>, which copies all rows in the supplied <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Exceptions will be reported via the returned Task object.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about asynchronous programming in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id="ph2">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph>, see <bpt id="p1">[</bpt>Asynchronous Programming<ept id="p1">](~/docs/framework/data/adonet/asynchronous-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The cancellation instruction.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.CancellationToken.None"&gt;&lt;/xref&gt;</ph> value in this parameter makes this method equivalent to <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>A task representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph> multiple times for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph> for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The connection drops or is closed during <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph> execution.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object was closed during the method execution.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Returned in the task object, there was a connection pool timeout.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> object is closed before method execution.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Context Connection=true`</ph> is specified in the connection string.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Returned in the task object, any error returned by <ph id="ph1">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> that occurred while opening the connection.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The asynchronous version of <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph>, which copies only rows that match the supplied row state in the supplied <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to a destination table specified by the <ph id="ph3">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"&gt;&lt;/xref&gt;</ph> property of the <ph id="ph4">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Exceptions will be reported via the returned Task object.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about asynchronous programming in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id="ph2">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph>, see <bpt id="p1">[</bpt>Asynchronous Programming<ept id="p1">](~/docs/framework/data/adonet/asynchronous-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> whose rows will be copied to the destination table.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">&lt;xref href="System.Data.DataRowState"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Only rows matching the row state are copied to the destination.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The cancellation instruction.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.CancellationToken.None"&gt;&lt;/xref&gt;</ph> value in this parameter makes this method equivalent to <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A task representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph> multiple times for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph> for the same instance before task completion.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The connection drops or is closed during <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)"&gt;&lt;/xref&gt;</ph> execution.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> object was closed during the method execution.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Returned in the task object, there was a connection pool timeout.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Returned in the task object, the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;&lt;/xref&gt;</ph> object is closed before method execution.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Context Connection=true`</ph> is specified in the connection string.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Returned in the task object, any error returned by <ph id="ph1">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> that occurred while opening the connection.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Data.SqlClient.SqlBulkCopy"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> in an unusable state.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> was occupying.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>