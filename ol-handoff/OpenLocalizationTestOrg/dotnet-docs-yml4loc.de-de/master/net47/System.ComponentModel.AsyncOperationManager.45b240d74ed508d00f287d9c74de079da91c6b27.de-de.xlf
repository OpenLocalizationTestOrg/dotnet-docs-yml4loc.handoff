<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d91a36e89381fe07d032d1d2f61681b1e608f00d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ComponentModel.AsyncOperationManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c67e701495120ebc911fa8489d6f1dd39bd512ff</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f043e75799757d466676f3a68b9a0a4f0facf4cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides concurrency management for classes that support asynchronous method calls.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your class needs to provide asynchronous behavior according to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you will encounter a number of concurrency management issues.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, <ph id="ph1">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> applications, console applications, and so on).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> provides a convenient way to create a class that runs properly under all application models supported by the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class has one method, <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>, which returns an <ph id="ph3">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> that can be used to track the duration of a particular asynchronous task.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> for a task can be used to alert clients when a task completes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also be used to post progress updates and incremental results without terminating the operation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">&lt;xref href="System.ComponentModel.AsyncOperation"&gt;&lt;/xref&gt;</ph> for tracking the duration of a particular asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use it to post progress updates and incremental results without terminating the operation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> will correctly marshal these calls to the appropriate thread or context for the application model.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> each time your <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`Async`</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client application that makes calls to the method can use the <ph id="ph1">`userSuppliedState`</ph> parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Client code must provide a unique value for the <ph id="ph1">`userSuppliedState`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your code should check for a non-unique task ID and throw an <ph id="ph1">&lt;xref:System.ArgumentException?displayProperty=fullName&gt;</ph> if one is detected.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your code should track every <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> returned by <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This tracking can be as simple as passing the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> as a parameter among delegates.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>In more sophisticated designs, your class can maintain a collection of <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This approach allows you to check for unique <ph id="ph1">`userSuppliedState`</ph> parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ComponentModel.AsyncOperation"&gt;&lt;/xref&gt;</ph> that you can use to track the duration of an asynchronous method invocation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets or sets the synchronization context for the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation is the free-threaded implementation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>A thread should set the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph> property to <ph id="ph2">`null`</ph> to release the free-threaded factory when it is done, or else its factory will never be disposed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The synchronization context for the asynchronous operation.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>