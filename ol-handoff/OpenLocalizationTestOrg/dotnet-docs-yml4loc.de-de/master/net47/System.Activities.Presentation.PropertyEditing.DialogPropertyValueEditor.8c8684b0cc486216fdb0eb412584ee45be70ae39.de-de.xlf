<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dff92be1b4ae425cce73e4aa85ae6b8e7778682c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1eb87ca4b338fb0f39c090aaadea96c6e4c642b0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4de503d73a7534ff0b9497650ce4f772aebf3a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Container for all dialog-editing logic for <ph id="ph1">&lt;xref href="System.Activities.Presentation.PropertyEditing.PropertyContainer.PropertyEntry"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor&gt;</ph> class to show an inline editor that can have an associated dialog box editor.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor&gt;</ph> class can hold either a <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph> for a dialog box editor or custom logic that is called when the dialog box is invoked.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton&gt;</ph> in your <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph> to invoke your custom <ph id="ph3">&lt;xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can provide a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> which is shown in a host dialog box, or you can override the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ShowDialog&gt;</ph> method, which enables the reuse of existing or system dialog boxes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list shows the rules for determining whether the <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ShowDialog&gt;</ph> method is used.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate%2A&gt;</ph> property is not a <ph id="ph2">[!INCLUDE[null](~/includes/null-md.md)]</ph> reference (Nothing in Visual Basic), that <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph> is hosted in a host-specific dialog box, which provides host styling.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog&gt;</ph> is not called.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate%2A&gt;</ph> property is a <ph id="ph2">[!INCLUDE[null](~/includes/null-md.md)]</ph> reference (Nothing in Visual Basic), the virtual <ph id="ph3">&lt;xref:System.Windows.Forms.Form.ShowDialog&gt;</ph> method is called and you can override this method to show any dialog box.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the <ph id="ph1">&lt;xref href="System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor"&gt;&lt;/xref&gt;</ph> class with no specific templates.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the <ph id="ph1">&lt;xref href="System.Activities.Design.PropertyEditing.DialogPropertyValueEditor"&gt;&lt;/xref&gt;</ph> class with the specified dialog editor and inline editor templates.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Window.DataTemplate"&gt;&lt;/xref&gt;</ph> that is hosted in a host-specific dialog chrome and has its <ph id="ph2">&lt;xref href="System.Activities.ActivityContext.DataContext"&gt;&lt;/xref&gt;</ph> set to the <ph id="ph3">&lt;xref href="System.Activities.Presentation.PropertyEditing.PropertyValue"&gt;&lt;/xref&gt;</ph> that corresponds to the property being edited.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.DataTemplate"&gt;&lt;/xref&gt;</ph> that is used for the inline editor user interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If used, its <ph id="ph1">&lt;xref href="System.Activities.ActivityContext.DataContext"&gt;&lt;/xref&gt;</ph> is set to the <ph id="ph2">&lt;xref href="System.Activities.Presentation.PropertyEditing.PropertyValue"&gt;&lt;/xref&gt;</ph> that corresponds to the property being edited.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.DataTemplate"&gt;&lt;/xref&gt;</ph> that is hosted by a host-specific dialog and has its <ph id="ph2">&lt;xref href="System.Activities.ActivityContext.DataContext"&gt;&lt;/xref&gt;</ph> set to a <ph id="ph3">&lt;xref href="System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property returns <ph id="ph1">`null`</ph>, the <ph id="ph2">&lt;xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.ShowDialog%2A&gt;</ph> method is called instead.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DataTemplate"&gt;&lt;/xref&gt;</ph> object that is hosted by a host-specific dialog.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Called when the <ph id="ph1">&lt;xref href="System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate"&gt;&lt;/xref&gt;</ph> is null and a dialog has been invoked by the user.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the commands get handled by the host and since custom dialogs are not going to be part of that visual tree, the <ph id="ph1">`commandSource`</ph> exposes an <ph id="ph2">&lt;xref:System.Windows.IInputElement&gt;</ph> that is part of the host's visual tree and that, therefore, can be used to execute property editing commands in such a way that they are handled correctly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overriding this method enables you to implement any custom dialog logic, such as invoking existing system dialogs.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue"&gt;&lt;/xref&gt;</ph> for the property being edited.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.IinputElement"&gt;&lt;/xref&gt;</ph> that can be used as a source for execution of <ph id="ph2">&lt;xref href="System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>