<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd2c7365576d9360dce945ef6d0eb6c15dfa565c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.IO.TextWriter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84d640c334f01c40e9e1f7d1f7912d28a5d21012</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">405e124dfe13029b7cbad5ef73472ea739dee239</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a writer that can write a sequential series of characters.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class is abstract.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> is the abstract base class of <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.StringWriter&gt;</ph>, which write characters to streams and strings, respectively.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create an instance of <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> to write an object to a string, write strings to a file, or to serialize XML.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use an instance of <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> to write text to a custom backing store using the same APIs you would use for a string or a stream, or to add support for text formatting.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>All the <ph id="ph1">`Write`</ph> methods of <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> having primitive data types as parameters write out the values as strings.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, a <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> is not thread safe.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.IO.TextWriter.Synchronized%2A?displayProperty=fullName&gt;</ph> for a thread-safe wrapper.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see Dispose and the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor overload when you do not want to provide a value for the <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the culture of the current thread is used for formatting.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor for derived classes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> class with the specified format provider.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor overload to provide a value for the <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property specifies the culture-specific formatting that is used when you call the <ph id="ph2">&lt;xref:System.IO.TextWriter.Write%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not want to provide a format provider, you create an instance by using the <ph id="ph1">&lt;xref:System.IO.TextWriter.%23ctor&gt;</ph> constructor, which sets the <ph id="ph2">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the culture of the current thread is used for formatting.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IFormatProvider"&gt;&lt;/xref&gt;</ph> object that controls formatting.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Closes the current writer and releases any system resources associated with the writer.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation of <ph id="ph1">`Close`</ph> calls the <ph id="ph2">&lt;xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName&gt;</ph> method and passes it a <ph id="ph3">`true`</ph> value.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">&lt;xref:System.IO.TextWriter.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName&gt;</ph> property to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>In derived classes, do not override the <ph id="ph1">&lt;xref:System.IO.TextWriter.Close%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, override the <ph id="ph1">&lt;xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName&gt;</ph> method to add code for releasing resources.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Stores the newline characters used for this <ph id="ph1">`TextWriter`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> in an unusable state.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.IO.TextWriter&gt;</ph> was occupying.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> Always call <ph id="ph1">&lt;xref:System.IO.TextWriter.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> object's <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by <ph id="ph1">`Dispose`</ph> and <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, this method specifies the <ph id="ph1">`disposing`</ph> parameter as <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> specifies the <ph id="ph2">`disposing`</ph> parameter as <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.TextWriter&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns the character encoding in which the output is written.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is necessary for some XML scenarios where a header must be written containing the encoding used by the <ph id="ph1">`TextWriter`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables the XML code to consume an arbitrary <ph id="ph1">`TextWriter`</ph> and generate the correct XML header.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The character encoding in which the output is written.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This default method does nothing, but derived classes can override the method to provide the appropriate functionality.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">`Flush`</ph> or <ph id="ph2">&lt;xref:System.IO.TextWriter.Close%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous flush operation.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The writer is currently in use by a previous write operation.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets an object that controls formatting.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property specifies the culture-specific formatting that is used when you call the <ph id="ph2">&lt;xref:System.IO.TextWriter.Write%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not want to provide a format provider, you create an instance by using the <ph id="ph1">&lt;xref:System.IO.TextWriter.%23ctor&gt;</ph> constructor, which sets the <ph id="ph2">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property contains <ph id="ph2">`null`</ph>, the culture of the current thread is used for formatting.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of creating a file and writing text to a file, see <bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of reading text from a file, see <bpt id="p1">[</bpt>How to: Read Text from a File<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of reading from and writing to a binary file, see <bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IFormatProvider"&gt;&lt;/xref&gt;</ph> object for a specific culture, or the formatting of the current culture if no other culture is specified.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Gets or sets the line terminator string used by the current <ph id="ph1">`TextWriter`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default line terminator string is a carriage return followed by a line feed ("\r\n").</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator string is written to the text stream whenever one of the <ph id="ph1">`WriteLine`</ph> methods is called.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for text written by the <ph id="ph1">`TextWriter`</ph> to be readable by a <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>, only "\n" or "\r\n" should be used as terminator strings.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`NewLine`</ph> is set to <ph id="ph2">`null`</ph>, the default newline character is used instead.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The line terminator string for the current <ph id="ph1">`TextWriter`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Provides a <ph id="ph1">`TextWriter`</ph> with no backing store that can be written to, but not read from.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">`Null`</ph> to redirect output to a stream that will not consume any operating system resources.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%2A?displayProperty=fullName&gt;</ph> methods are invoked on <ph id="ph2">`Null`</ph>, the call simply returns, and no data is actually written to any backing store.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Creates a thread-safe wrapper around the specified <ph id="ph1">`TextWriter`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>All write operations to the returned wrapper will be thread safe.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>You call this method to ensure that only one thread at a time can execute the methods on the <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> instance that is returned.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about synchronization and threading, see <bpt id="p1">[</bpt>Synchronizing Data for Multithreading<ept id="p1">](~/docs/standard/threading/synchronizing-data-for-multithreading.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TextWriter`</ph> to synchronize.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A thread-safe wrapper.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;writer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Writes a formatted string to the text string or stream, using the same semantics as the <ph id="ph1">&lt;xref href="System.String.Format(System.String,System.Object,System.Object,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, including the syntax of a format item, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>index</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this overload has three objects in its parameter list, the value of <bpt id="p1">*</bpt>index<ept id="p1">*</ept> must always be 0, 1, or 2.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> are the same as the values supported by the object's <ph id="ph1">`ToString(string format)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is not specified and the object to be formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id="ph2">`null`</ph> is passed as the value of the <ph id="ph3">`format`</ph> parameter that is used as the <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>The leading and trailing brace characters, "{" and "}", are required.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single literal brace character in <ph id="ph1">`format`</ph>, specify two leading or trailing brace characters; that is, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string  for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a specified object is not referenced in the format string, it is ignored.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The first object to format and write.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The second object to format and write.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The third object to format and write.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Writes a subarray of characters to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will write <ph id="ph1">`count`</ph> characters of data into this <ph id="ph2">`TextWriter`</ph> from the <ph id="ph3">`buffer`</ph> character array starting at position <ph id="ph4">`index`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload is equivalent to the <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> overload for each character in <ph id="ph2">`buffer`</ph> between <ph id="ph3">`index`</ph> and (<ph id="ph4">`index`</ph><ph id="ph5"> + </ph><ph id="ph6">`count`</ph>).</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The character array to write data from.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The character position in the buffer at which to start retrieving data.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The number of characters to write.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The buffer length minus <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Writes a formatted string to the text string or stream, using the same semantics as the <ph id="ph1">&lt;xref href="System.String.Format(System.String,System.Object[])"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, including the syntax of a format item, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>index</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this overload has an array in its parameter list, the value of <bpt id="p1">*</bpt>index<ept id="p1">*</ept> must always be less than the length of the array.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> are the same as the values supported by the object's <ph id="ph1">`ToString(string format)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is not specified and the object to be formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id="ph2">`null`</ph> is passed as the value of the <ph id="ph3">`format`</ph> parameter that is used as the <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The leading and trailing brace characters, "{" and "}", are required.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single literal brace character in <ph id="ph1">`format`</ph>, specify two leading or trailing brace characters; that is, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a specified object is not referenced in the format string, it is ignored.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>An object array that contains zero or more objects to format and write.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;arg&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arg</ph><ept id="p1">&lt;/code&gt;</ept> array.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Writes a formatted string to the text string or stream, using the same semantics as the <ph id="ph1">&lt;xref href="System.String.Format(System.String,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, including the syntax of a format item, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>index</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this overload has only a single object in its parameter list, the value of <bpt id="p1">*</bpt>index<ept id="p1">*</ept> must always be 0.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> are the same as the values supported by the object's <ph id="ph1">`ToString(string format)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is not specified and the object to be formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id="ph2">`null`</ph> is passed as the value of the <ph id="ph3">`format`</ph> parameter that is used as the <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>The leading and trailing brace characters, "{" and "}", are required.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single literal brace character in <ph id="ph1">`format`</ph>, specify two leading or trailing brace characters; that is, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a specified object is not referenced in the format string, it is ignored.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The object to format and write.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Writes the text representation of an 8-byte unsigned integer to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The 8-byte unsigned integer to write.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a 4-byte unsigned integer to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The 4-byte unsigned integer to write.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Writes a string to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload is equivalent to the <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, nothing is written to the text stream.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The string to write.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a 4-byte floating-point value to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The 4-byte floating-point value to write.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Writes a formatted string to the text string or stream, using the same semantics as the <ph id="ph1">&lt;xref href="System.String.Format(System.String,System.Object,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, including the syntax of a format item, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>index</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this overload has two objects in its parameter list, the value of <bpt id="p1">*</bpt>index<ept id="p1">*</ept> must always be 0 or 1.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> are the same as the values supported by the object's <ph id="ph1">`ToString(string format)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is not specified and the object to be formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id="ph2">`null`</ph> is passed as the value of the <ph id="ph3">`format`</ph> parameter that is used as the <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>The leading and trailing brace characters, "{" and "}", are required.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single literal brace character in <ph id="ph1">`format`</ph>, specify two leading or trailing brace characters; that is, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a specified object is not referenced in the format string, it is ignored.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The first object to format and write.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The second object to format and write.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Writes the text representation of an 8-byte signed integer to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept></source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The 8-byte signed integer to write.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a 4-byte signed integer to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The 4-byte signed integer to write.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Writes the text representation of an 8-byte floating-point value to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.Double.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The 8-byte floating-point value to write.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a decimal value to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The decimal value to write.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Writes a character array to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>This default method calls the <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method and passes the entire character array.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the character array is <ph id="ph1">`null`</ph>, nothing is written.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The character array to write to the text stream.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Writes a character to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>This default method does nothing, but derived classes can override the method to provide the appropriate functionality.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The character to write to the text stream.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Writes the text representation of an object to the text string or stream by calling the <ph id="ph1">`ToString`</ph> method on that object.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload is equivalent to the <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%28System.String%29&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified object is <ph id="ph1">`null`</ph>, no action is taken and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the object's <ph id="ph1">`ToString`</ph> method is called to produce the string representation, and the resulting string is then written to the output stream.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The object to write.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a <ph id="ph1">`Boolean`</ph> value to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method outputs either <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Boolean`</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Writes a subarray of characters to the text string or stream asynchronously.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you do not instantiate it in your code.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextWriter.WriteAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The character array to write data from.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The character position in the buffer at which to start retrieving data.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The number of characters to write.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> plus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> is greater than the buffer length.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The text writer is currently in use by a previous write operation.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Writes a string to the text string or stream asynchronously.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you do not instantiate it in your code.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextWriter.WriteAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The string to write.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, nothing is written to the text stream.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The text writer is currently in use by a previous write operation.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Writes a character to the text string or stream asynchronously.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you do not instantiate it in your code.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextWriter.WriteAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>The character to write to the text stream.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The text writer is currently in use by a previous write operation.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Writes a character array to the text string or stream asynchronously.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The character array to write to the text stream.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, nothing is written.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The text writer is currently in use by a previous write operation.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Writes a string followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload is equivalent to the <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The string to write.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, only the line terminator is written.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <ph id="ph1">&lt;xref href="System.String.Format(System.String,System.Object,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, including the syntax of a format item, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>index</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this overload has two objects in its parameter list, the value of <bpt id="p1">*</bpt>index<ept id="p1">*</ept> must always be 0 or 1.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> are the same as the values supported by the object's <ph id="ph1">`ToString(string format)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is not specified and the object to be formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id="ph2">`null`</ph> is passed as the value of the <ph id="ph3">`format`</ph> parameter that is used as the <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>The leading and trailing brace characters, "{" and "}", are required.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single literal brace character in <ph id="ph1">`format`</ph>, specify two leading or trailing brace characters; that is, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a specified object is not referenced in the format string, it is ignored.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The first object to format and write.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The second object to format and write.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Writes a subarray of characters followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will write <ph id="ph1">`count`</ph> characters of data into this <ph id="ph2">`TextWriter`</ph> from the <ph id="ph3">`buffer`</ph> character array starting at position <ph id="ph4">`index`</ph>.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload is equivalent to calling the <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> method followed by <ph id="ph2">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph> for each character in <ph id="ph3">`buffer`</ph> between <ph id="ph4">`index`</ph> and (<ph id="ph5">`index`</ph><ph id="ph6"> + </ph><ph id="ph7">`count`</ph>).</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The character array from which data is read.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>The character position in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> at which to start reading data.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The maximum number of characters to write.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The buffer length minus <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Writes out a formatted string and a new line, using the same semantics as <ph id="ph1">&lt;xref href="System.String.Format(System.String,System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, including the syntax of a format item, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>index</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this overload has an array in its parameter list, the value of <bpt id="p1">*</bpt>index<ept id="p1">*</ept> must always be less than the length of the array.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> are the same as the values supported by the object's <ph id="ph1">`ToString(string format)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is not specified and the object to be formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id="ph2">`null`</ph> is passed as the value of the <ph id="ph3">`format`</ph> parameter that is used as the <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>The leading and trailing brace characters, "{" and "}", are required.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single literal brace character in <ph id="ph1">`format`</ph>, specify two leading or trailing brace characters; that is, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a specified object is not referenced in the format string, it is ignored.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>An object array that contains zero or more objects to format and write.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>A string or object is passed in as <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arg</ph><ept id="p1">&lt;/code&gt;</ept> array.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <ph id="ph1">&lt;xref href="System.String.Format(System.String,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, including the syntax of a format item, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>index</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this overload has only a single object in its parameter list, the value of <bpt id="p1">*</bpt>index<ept id="p1">*</ept> must always be 0.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> are the same as the values supported by the object's <ph id="ph1">`ToString(string format)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is not specified and the object to be formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id="ph2">`null`</ph> is passed as the value of the <ph id="ph3">`format`</ph> parameter that is used as the <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>The leading and trailing brace characters, "{" and "}", are required.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single literal brace character in <ph id="ph1">`format`</ph>, specify two leading or trailing brace characters; that is, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a specified object is not referenced in the format string, it is ignored.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The object to format and write.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The 8-byte unsigned integer to write.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Writes out a formatted string and a new line, using the same semantics as <ph id="ph1">&lt;xref href="System.String.Format(System.String,System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses composite formatting to convert the value of an object to its string representation and to embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature, including the syntax of a format item, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>index</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this overload has three objects in its parameter list, the value of <bpt id="p1">*</bpt>index<ept id="p1">*</ept> must always be 0, 1, or 2.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> are the same as the values supported by the object's <ph id="ph1">`ToString(string format)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is not specified and the object to be formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, <ph id="ph2">`null`</ph> is passed as the value of the <ph id="ph3">`format`</ph> parameter that is used as the <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> format string.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT">
          <source>The leading and trailing brace characters, "{" and "}", are required.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single literal brace character in <ph id="ph1">`format`</ph>, specify two leading or trailing brace characters; that is, "{{" or "}}".</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a specified object is not referenced in the format string, it is ignored.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>The first object to format and write.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>The second object to format and write.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The third object to format and write.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid composite format string.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The 4-byte unsigned integer to write.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The 4-byte floating-point value to write.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>The 8-byte floating-point value to write.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The 8-byte signed integer to write.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>The 4-byte signed integer to write.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a decimal value followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The decimal value to write.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Writes an array of characters followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>All the characters in <ph id="ph1">`buffer`</ph> are written to the underlying stream.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the character array is <ph id="ph1">`null`</ph>, only the line terminator is written.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload is equivalent to <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29&gt;</ph> followed by <ph id="ph2">&lt;xref:System.IO.TextWriter.WriteLine&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>The character array from which data is read.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Writes a character followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload is equivalent to <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%28System.Char%29&gt;</ph> followed by <ph id="ph2">&lt;xref:System.IO.TextWriter.WriteLine&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>The character to write to the text stream.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Writes the text representation of a <ph id="ph1">`Boolean`</ph> value followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of the specified value is produced by calling the <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method outputs either <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Boolean`</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Writes a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Writes the text representation of an object by calling the <ph id="ph1">`ToString`</ph> method on that object, followed by a line terminator to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload is equivalent to the <ph id="ph1">&lt;xref:System.IO.TextWriter.Write%28System.String%2CSystem.Object%29&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter.FormatProvider%2A&gt;</ph> property, if not <ph id="ph2">`null`</ph>, specifies the culture-specific formatting.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>The object to write.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, only the line terminator is written.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Writes a string followed by a line terminator asynchronously to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you do not instantiate it in your code.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextWriter.WriteLineAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>The string to write.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`null`</ph>, only a line terminator is written.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>The text writer is currently in use by a previous write operation.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Writes a line terminator asynchronously to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>The text writer is currently in use by a previous write operation.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Writes a character followed by a line terminator asynchronously to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you do not instantiate it in your code.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextWriter.WriteLineAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>The character to write to the text stream.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>The text writer is currently in use by a previous write operation.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Writes an array of characters followed by a line terminator asynchronously to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>The character array to write to the text stream.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>If the character array is <ph id="ph1">`null`</ph>, only the line terminator is written.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>The text writer is currently in use by a previous write operation.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line terminator is defined by the <ph id="ph1">&lt;xref:System.IO.TextWriter.CoreNewLine&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> class is an abstract class.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you do not instantiate it in your code.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextWriter.WriteLineAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The character array to write data from.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>The character position in the buffer at which to start retrieving data.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The number of characters to write.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> plus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> is greater than the buffer length.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>The text writer is disposed.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>The text writer is currently in use by a previous write operation.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>