<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f68378f4e5e0f13ced49237113cb6bc4b1a19626</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Globalization.TextElementEnumerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b51ef9b09647ac76cb3b59c91aa290c335b85d61</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47ec65235b39a0858a09bed31749a3a43a4e8be6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enumerates the text elements of a string.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A text element can be any of the following:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>A base character, which is represented as a single <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, LATIN CAPITAL LETTER A (U+0041) and LATIN SMALL LETTER AE (U+00E6) are base characters.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>A combining character sequence, which consists of a base character and one or more combining characters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, example, LATIN CAPITAL LETTER A (U+0041) followed by COMBINING MACRON (U+0304) is a combining character sequence.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Surrogate pairs, which the <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines as a coded character representation for a single abstract character that consists of a sequence of two code units: a high surrogate, and a low surrogate.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Surrogate pairs are used to represent characters outside of the Unicode Basic Multilingual Plane as UTF-8 encoded characters.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, GOTHIC LETTER SAUIL (U+10343) is represented in UTF-8 encoding as a high surrogate whose value is 0xD800 and a low surrogate whose value is 0xDF43.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>A surrogate pair can represent a base character or a combining character.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> class allows you to work with the text elements in a string rather than with single <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>You instantiate a <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> object that represents a particular string by passing the string to the <ph id="ph2">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This returns an enumerator that is positioned before the first text element in the string.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this represents an invalid state, you must call <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first text element of the string before reading the value of the <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> property to return the current text element.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>When working with a <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> object, you are responsible for positioning the enumerator.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> property returns the same text element until you call either <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator is in an invalid state if it is positioned before the first text element or after the last text element in the string.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the enumerator is in an invalid state, attempting to retrieve the value of the <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> property throws an exception.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can determine whether the enumerator is in an invalid state by testing whether the return value of the <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> object represents a snapshot of the current state of a string variable or string literal at the moment that the <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> object is instantiated.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Text element enumerators can only be used to read data in a string.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>They cannot modify the underlying string.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator does not have exclusive access to the string that it represents.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string variable can be modified after the enumerator is created.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> object enumerates the text elements present in the string at the time that the <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> object was instantiated.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not reflect any subsequent changes to the string variable if that variable is modified afterward.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> class does not override <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>, two <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> objects that represent the same string will be considered unequal.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the current text element in the string.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an enumerator is created or after a <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> is called, <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> must be called to advance the enumerator to the first text element of the string before reading the value of <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> is undefined.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> also throws an exception if the last call to <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph3">`false`</ph>, which indicates the end of the string.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> does not move the position of the enumerator, and consecutive calls to <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> return the same object until either <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An object containing the current text element in the string.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The enumerator is positioned before the first text element of the string or after the last text element.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets the index of the text element that the enumerator is currently positioned over.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The index of the text element that the enumerator is currently positioned over.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The enumerator is positioned before the first text element of the string or after the last text element.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the current text element in the string.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the same text element as the <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A new string containing the current text element in the string being read.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The enumerator is positioned before the first text element of the string or after the last text element.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Advances the enumerator to the next text element of the string.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an enumerator is created or after a <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> is called, the enumerator is positioned before the first text element of the string, and the first call to <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> moves the enumerator over the first text element of the string.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string is modified after this enumerator was created, <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> throws an exception.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the end of the string is passed, subsequent calls to <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> return <ph id="ph2">`false`</ph> until <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the enumerator was successfully advanced to the next text element; <ph id="ph2">`false`</ph> if the enumerator has passed the end of the string.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Sets the enumerator to its initial position, which is before the first text element in the string.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> method moves the enumerator to the beginning of the string, before the first text element.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph>, you must call <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first text element of the string before calling <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> to read the value of the first text element.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>