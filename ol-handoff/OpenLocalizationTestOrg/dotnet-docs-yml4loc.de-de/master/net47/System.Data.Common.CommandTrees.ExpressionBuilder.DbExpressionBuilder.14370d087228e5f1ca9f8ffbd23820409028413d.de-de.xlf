<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27891e0f774015d43be010e3f7d0a9cdd8504fea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">975ea717eca2faeb5efd1b717fd4e46498e61d44</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d2acb1493cd9f581c9006bf333e26f95f9127b0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an API to construct <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph>s and allows that API to be accessed as extension methods on the expression type itself.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbFunctionAggregate"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The function that defines the aggregate operation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The argument over which the aggregate function should be calculated.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A new function aggregate with a reference to the given function and argument.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The function aggregate's Distinct property will have the value <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;function&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;argument&lt;/code&gt;</ph> null.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;function&lt;/code&gt;</ph> is not an aggregate function or has more than one argument, or the result type of <ph id="ph2">&lt;code&gt;argument&lt;/code&gt;</ph> is not equal or promotable to the parameter type of <ph id="ph3">&lt;code&gt;function&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbFunctionAggregate"&gt;&lt;/xref&gt;</ph> that is applied in a distinct fashion.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The function that defines the aggregate operation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The argument over which the aggregate function should be calculated.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A new function aggregate with a reference to the given function and argument.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The function aggregate's Distinct property will have the value <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;function&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;function&lt;/code&gt;</ph> is not an aggregate function or has more than one argument, or the result type of <ph id="ph2">&lt;code&gt;argument&lt;/code&gt;</ph> is not equal or promotable to the parameter type of <ph id="ph3">&lt;code&gt;function&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbQuantifierExpression"&gt;&lt;/xref&gt;</ph> that determines whether the given predicate holds for all elements of the input set.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A method representing a predicate to evaluate for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with a Boolean result type that provides the predicate logic.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A new DbQuantifierExpression that represents the All operation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Predicate</ph><ept id="p1">&lt;/code&gt;</ept> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbQuantifierExpression"&gt;&lt;/xref&gt;</ph> that determines whether the given predicate holds for all elements of the input set.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An expression binding that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An expression representing a predicate to evaluate for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A new DbQuantifierExpression that represents the All operation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;predicate&lt;/code&gt;</ph> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbAndExpression"&gt;&lt;/xref&gt;</ph> that performs the logical And of the left and right arguments.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A Boolean expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A Boolean expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A new DbAndExpression with the specified arguments.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that determines whether the specified set argument is non-empty.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNotExpression"&gt;&lt;/xref&gt;</ph> applied to a new <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbIsEmptyExpression"&gt;&lt;/xref&gt;</ph> with the specified argument.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> does not have a collection result type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbQuantifierExpression"&gt;&lt;/xref&gt;</ph> that determines whether the given predicate holds for any element of the input set.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A method representing the predicate to evaluate for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with a Boolean result type that provides the predicate logic.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A new DbQuantifierExpression that represents the Any operation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbQuantifierExpression"&gt;&lt;/xref&gt;</ph> that determines whether the given predicate holds for any element of the input set.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An expression binding that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An expression representing a predicate to evaluate for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A new DbQuantifierExpression that represents the Any operation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns the specified arguments as a key/value pair object.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The value in the key/value pair.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The key in the key/value pair.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A key/value pair object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the specified arguments as a key/value pair object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The value in the key/value pair.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The key in the key/value pair.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A key/value pair object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that uses a generated variable name to bind the given expression.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The expression to bind.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A new expression binding with the specified expression and a generated variable name.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> does not have a collection result.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that uses the specified variable name to bind the given expression</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The expression to bind.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The variable name that should be used for the binding.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A new expression binding with the specified expression and variable name.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;varName&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> does not have a collection result.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbCaseExpression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A list of expressions that provide the conditional for of each case.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A list of expressions that provide the result of each case.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An expression that defines the result when no case is matched.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A new DbCaseExpression with the specified cases and default result.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;whenExpressions&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;thenExpressions&lt;/code&gt;</ph> is null or contains null, or <ph id="ph3">&lt;code&gt;elseExpression&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;whenExpressions&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;thenExpressions&lt;/code&gt;</ph> is empty or <ph id="ph3">&lt;code&gt;whenExpressions&lt;/code&gt;</ph> contains an expression with a non-Boolean result type, or no common result type exists for all expressions in <ph id="ph4">&lt;code&gt;thenExpressions&lt;/code&gt;</ph> and <ph id="ph5">&lt;code&gt;elseExpression&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbCastExpression"&gt;&lt;/xref&gt;</ph> that applies a cast operation to a polymorphic argument.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The argument to which the cast should be applied.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Type metadata that specifies the type to cast to.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A new DbCastExpression with the specified argument and target type.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;toType&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The specified cast is not valid.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbConstantExpression"&gt;&lt;/xref&gt;</ph> of the specified primitive type with the given constant value.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The type of the constant value.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The constant value to represent.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A new DbConstantExpression with the given value and a result type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">constantType</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;constantType&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is not an instance of a valid constant type,  <ph id="ph2">&lt;code&gt;constantType&lt;/code&gt;</ph> does not represent a primitive type, or <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is of a different primitive type than that represented by <ph id="ph4">&lt;code&gt;constantType&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbConstantExpression"&gt;&lt;/xref&gt;</ph> with the given constant value.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The constant value to represent.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A new DbConstantExpression with the given value.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is not an instance of a valid constant type.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbRefExpression"&gt;&lt;/xref&gt;</ph> that encodes a reference to a specific entity based on key values.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The entity set in which the referenced element resides.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A collection of <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph>s that provide the key values.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>These expressions must match (in number, type, and order) the key properties of the referenced entity type.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A new DbRefExpression that references the element with the specified key values in the given entity set.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;entitySet&lt;/code&gt;</ph> is null, or <ph id="ph2">&lt;code&gt;keyValues&lt;/code&gt;</ph> is null or contains null.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The count of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keyValues</ph><ept id="p1">&lt;/code&gt;</ept> does not match the count of key members declared by the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">entitySet</ph><ept id="p2">&lt;/code&gt;</ept>’s element type, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">keyValues</ph><ept id="p3">&lt;/code&gt;</ept> contains an expression with a result type that is not compatible with the type of the corresponding key member.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbRefExpression"&gt;&lt;/xref&gt;</ph> that encodes a reference to a specific entity based on key values.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The entity set in which the referenced element resides.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A collection of <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph>s that provide the key values.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>These expressions must match (in number, type, and order) the key properties of the referenced entity type.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A new DbRefExpression that references the element with the specified key values in the given entity set.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;entitySet&lt;/code&gt;</ph> is null, or <ph id="ph2">&lt;code&gt;keyValues&lt;/code&gt;</ph> is null or contains null.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The count of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keyValues</ph><ept id="p1">&lt;/code&gt;</ept> does not match the count of key members declared by the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">entitySet</ph><ept id="p2">&lt;/code&gt;</ept>’s element type, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">keyValues</ph><ept id="p3">&lt;/code&gt;</ept> contains an expression with a result type that is not compatible with the type of the corresponding key member.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbRefExpression"&gt;&lt;/xref&gt;</ph> that encodes a reference to a specific entity of a given type based on key values.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The entity set in which the referenced element resides.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The specific type of the referenced entity.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This must be an entity type from the same hierarchy as the entity set's element type.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A collection of <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph>s that provide the key values.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>These expressions must match (in number, type, and order) the key properties of the referenced entity type.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A new DbRefExpression that references the element with the specified key values in the given entity set.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;entitySet&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;entityType&lt;/code&gt;</ph> is null, or <ph id="ph3">&lt;code&gt;keyValues&lt;/code&gt;</ph> is null or contains null.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The count of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keyValues</ph><ept id="p1">&lt;/code&gt;</ept> does not match the count of key members declared by the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">entitySet</ph><ept id="p2">&lt;/code&gt;</ept>’s element type, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">keyValues</ph><ept id="p3">&lt;/code&gt;</ept> contains an expression with a result type that is not compatible with the type of the corresponding key member.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbRefExpression"&gt;&lt;/xref&gt;</ph> that encodes a reference to a specific entity of a given type based on key values.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The entity set in which the referenced element resides.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The specific type of the referenced entity.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This must be an entity type from the same hierarchy as the entity set's element type.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A collection of <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph>s that provide the key values.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>These expressions must match (in number, type, and order) the key properties of the referenced entity type.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A new DbRefExpression that references the element with the specified key values in the given entity set.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;entitySet&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;entityType&lt;/code&gt;</ph> is null, or <ph id="ph3">&lt;code&gt;keyValues&lt;/code&gt;</ph> is null or contains null.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The count of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keyValues</ph><ept id="p1">&lt;/code&gt;</ept> does not match the count of key members declared by the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">entitySet</ph><ept id="p2">&lt;/code&gt;</ept>’s element type, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">keyValues</ph><ept id="p3">&lt;/code&gt;</ept> contains an expression with a result type that is not compatible with the type of the corresponding key member.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbApplyExpression"&gt;&lt;/xref&gt;</ph> that evaluates the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">apply</ph><ept id="p1">&lt;/code&gt;</ept> expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Rows for which <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> evaluates to an empty set are not included.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A method that specifies the logic to evaluate once for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>An new DbApplyExpression with the specified input and apply bindings and an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of CrossApply.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> contains a name or expression that is null.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> contains a name or expression that is not valid in an expression binding.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbApplyExpression"&gt;&lt;/xref&gt;</ph> that evaluates the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">apply</ph><ept id="p1">&lt;/code&gt;</ept> expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Rows for which <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> evaluates to an empty set are not included.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies logic to evaluate once for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>An new DbApplyExpression with the specified input and apply bindings and an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of CrossApply.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;apply&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbCrossJoinExpression"&gt;&lt;/xref&gt;</ph> that unconditionally joins the sets specified by the list of input expression bindings.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A list of expression bindings that specifies the input sets.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A new DbCrossJoinExpression, with an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of CrossJoin, that represents the unconditional join of the input sets.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;inputs&lt;/code&gt;</ph> is null or contains null element.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;inputs&lt;/code&gt;</ph> contains fewer than 2 expression bindings.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbDerefExpression"&gt;&lt;/xref&gt;</ph> that retrieves a specific Entity given a reference expression.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that provides the reference.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This expression must have a reference Type.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A new DbDerefExpression that retrieves the specified Entity.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a reference result type.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbDistinctExpression"&gt;&lt;/xref&gt;</ph> that removes duplicates from the given set argument.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>An expression that defines the set over which to perfom the distinct operation.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A new DbDistinctExpression that represents the distinct operation applied to the specified set argument.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a collection result type.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbArithmeticExpression"&gt;&lt;/xref&gt;</ph> that divides the left argument by the right argument.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A new DbArithmeticExpression representing the division operation.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>No common numeric result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbElementExpression"&gt;&lt;/xref&gt;</ph> that converts a set into a singleton.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>A DbElementExpression that represents the conversion of the set argument to a singleton.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a collection result type.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbComparisonExpression"&gt;&lt;/xref&gt;</ph> that compares the left and right arguments for equality.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A new DbComparisonExpression representing the equality comparison.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>No common equality-comparable result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExceptExpression"&gt;&lt;/xref&gt;</ph> that computes the subtraction of the right set argument from the left set argument.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>An expression that defines the left set argument.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>An expression that defines the right set argument.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A new DbExceptExpression that represents the difference of the left argument from the right argument.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>No common collection result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that determines whether the specified set argument is non-empty.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNotExpression"&gt;&lt;/xref&gt;</ph> applied to a new <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbIsEmptyExpression"&gt;&lt;/xref&gt;</ph> with the specified argument.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a collection result type.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbConstantExpression"&gt;&lt;/xref&gt;</ph> with the Boolean value <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbConstantExpression"&gt;&lt;/xref&gt;</ph> with the Boolean value <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbFilterExpression"&gt;&lt;/xref&gt;</ph> that filters the elements in the given input set using the specified predicate.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An expression binding that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>An expression representing a predicate to evaluate for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A new DbFilterExpression that produces the filtered set.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;predicate&lt;/code&gt;</ph> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbJoinExpression"&gt;&lt;/xref&gt;</ph> that joins the sets specified by the left and right expressions, on the specified join condition, using FullOuterJoin as the <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the left set argument.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the right set argument.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A method representing the condition on which to join.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with a Boolean result type that provides the logic of the join condition.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A new DbJoinExpression, with an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of FullOuterJoin, that represents the full outer join operation applied to the left and right input sets under the given join condition.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">joinCondition</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">joinCondition</ph><ept id="p1">&lt;/code&gt;</ept> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbJoinExpression"&gt;&lt;/xref&gt;</ph> that joins the sets specified by the left and right expression bindings, on the specified join condition, using FullOuterJoin as the <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies the left set argument.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies the right set argument.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>An expression that specifies the condition on which to join.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A new DbJoinExpression, with an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of FullOuterJoin, that represents the full outer join operation applied to the left and right     input sets under the given join condition.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph>,  <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;joinCondition&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">joinCondition</ph><ept id="p1">&lt;/code&gt;</ept> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbEntityRefExpression"&gt;&lt;/xref&gt;</ph> that retrieves the ref of the specifed entity in structural form.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The expression that provides the entity.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This expression must have an entity result type.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A new DbEntityRefExpression that retrieves a reference to the specified entity.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have an entity result type.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbRefKeyExpression"&gt;&lt;/xref&gt;</ph> that retrieves the key values of the specifed reference in structural form.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The expression that provides the reference.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>This expression must have a reference Type with an Entity element type.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>A new DbRefKeyExpression that retrieves the key values of the specified reference.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a reference result type.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbComparisonExpression"&gt;&lt;/xref&gt;</ph> that determines whether the left argument is greater than the right argument.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A new DbComparisonExpression representing the greater-than comparison.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>No common order-comparable result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbComparisonExpression"&gt;&lt;/xref&gt;</ph> that determines whether the left argument is greater than or equal to the right argument.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>A new DbComparisonExpression representing the greater-than-or-equal-to comparison.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>No common order-comparable result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Creates a new group expression binding that uses generated variable and group variable names to bind the given expression.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The expression to bind.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A new group expression binding with the specified expression and a generated variable name and group variable name.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> does not have a collection result type.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbGroupExpressionBinding"&gt;&lt;/xref&gt;</ph> that uses the specified variable name and group variable names to bind the given expression.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The expression to bind.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The variable name that should be used for the binding.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The variable name that should be used to refer to the group when the new group expression binding is used in a group-by expression.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A new group expression binding with the specified expression, variable name and group variable name.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph>,  <ph id="ph2">&lt;code&gt;varName&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;groupVarName&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> does not have a collection result type.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbGroupByExpression"&gt;&lt;/xref&gt;</ph> that groups the elements of the input set according to the specified group keys and applies the given aggregates.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>DbGroupByExpression allows either the list of keys or the list of aggregates to be empty, but not both.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbGroupExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A list of string-expression pairs that define the grouping columns.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A list of expressions that specify aggregates to apply.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A new DbGroupByExpression with the specified input set, grouping keys and aggregates.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph>,  <ph id="ph2">&lt;code&gt;keys&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;aggregates&lt;/code&gt;</ph> is null,  <ph id="ph4">&lt;code&gt;keys&lt;/code&gt;</ph> contains a null column key or expression, or <ph id="ph5">&lt;code&gt;aggregates&lt;/code&gt;</ph> contains a null aggregate column name or aggregate.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Both <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keys</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">aggregates</ph><ept id="p2">&lt;/code&gt;</ept> are empty, or an invalid or duplicate column name was specified.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbJoinExpression"&gt;&lt;/xref&gt;</ph> that joins the sets specified by the left and right expressions, on the specified join condition, using InnerJoin as the <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the left set argument.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the right set argument.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>A method representing the condition on which to join.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with a Boolean result type that provides the logic of the join condition.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A new DbJoinExpression, with an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of InnerJoin, that represents the inner join operation applied to the left and right input sets under the given join condition.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">joinCondition</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">joinCondition</ph><ept id="p1">&lt;/code&gt;</ept> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbJoinExpression"&gt;&lt;/xref&gt;</ph> that joins the sets specified by the left and right expression bindings, on the specified join condition, using InnerJoin as the <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies the left set argument.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies the right set argument.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>An expression that specifies the condition on which to join.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A new DbJoinExpression, with an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of InnerJoin, that represents the inner join operation applied to the left and right     input sets under the given join condition.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph>,  <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;joinCondition&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;joinCondition&lt;/code&gt;</ph> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbIntersectExpression"&gt;&lt;/xref&gt;</ph> that computes the intersection of the left and right set arguments.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>An expression that defines the left set argument.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>An expression that defines the right set argument.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>A new DbIntersectExpression that represents the intersection of the left and right arguments.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>No common collection result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbFunctionExpression"&gt;&lt;/xref&gt;</ph> representing the invocation of the specified function with the given arguments.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Metadata for the function to invoke.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Expressions that provide the arguments to the function.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A new DbFunctionExpression representing the function invocation.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;function&lt;/code&gt;</ph> is null, or <ph id="ph2">&lt;code&gt;arguments&lt;/code&gt;</ph> is null or contains null.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The count of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arguments</ph><ept id="p1">&lt;/code&gt;</ept> does not equal the number of parameters declared by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">function</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">arguments</ph><ept id="p3">&lt;/code&gt;</ept> contains an expression that has a result type that is not equal or promotable to the corresponding function parameter type.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbFunctionExpression"&gt;&lt;/xref&gt;</ph> representing the invocation of the specified function with the given arguments.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Metadata for the function to invoke.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>A list of expressions that provide the arguments to the function.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A new DbFunctionExpression representing the function invocation.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;function&lt;/code&gt;</ph> is null, or <ph id="ph2">&lt;code&gt;arguments&lt;/code&gt;</ph> is null or contains null.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The count of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arguments</ph><ept id="p1">&lt;/code&gt;</ept> does not equal the number of parameters declared by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">function</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">arguments</ph><ept id="p3">&lt;/code&gt;</ept> contains an expression that has a result type that is not equal or promotable to the corresponding function parameter type.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLambdaExpression"&gt;&lt;/xref&gt;</ph> representing the application of the specified Lambda function to the given arguments.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLambda"&gt;&lt;/xref&gt;</ph> instance representing the Lambda function to apply.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>A list of expressions that provide the arguments.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>A new DbLambdaExpression representing the Lambda function application.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;lambda&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;arguments&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The count of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arguments</ph><ept id="p1">&lt;/code&gt;</ept> does not equal the number of variables declared by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">lambda</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">arguments</ph><ept id="p3">&lt;/code&gt;</ept> contains an expression that has a result type that is not equal or promotable to the corresponding variable type.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLambdaExpression"&gt;&lt;/xref&gt;</ph> representing the application of the specified Lambda function to the given arguments.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLambda"&gt;&lt;/xref&gt;</ph> instance representing the Lambda function to apply.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Expressions that provide the arguments.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>A new DbLambdaExpression representing the Lambda function application.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;lambda&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;arguments&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The count of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arguments</ph><ept id="p1">&lt;/code&gt;</ept> does not equal the number of variables declared by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">lambda</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">arguments</ph><ept id="p3">&lt;/code&gt;</ept> contains an expression that has a result type that is not equal or promotable to the corresponding variable type.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbIsEmptyExpression"&gt;&lt;/xref&gt;</ph> that determines whether the specified set argument is an empty set.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>A new DbIsEmptyExpression with the specified argument.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a collection result type.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbIsNullExpression"&gt;&lt;/xref&gt;</ph> that determines whether the specified argument is null.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>An expression that specifies the argument.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>A new DbIsNullExpression with the specified argument.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> has a collection result type.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbIsOfExpression"&gt;&lt;/xref&gt;</ph> that determines whether the given argument is of the specified type or a subtype.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>DbIsOfExpression requires that <ph id="ph1">`argument`</ph> has a polymorphic result type, and that <ph id="ph2">`type`</ph> is a type from the same type hierarchy as that result type.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>An expression that specifies the instance.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Type metadata that specifies the type that the instance's result type should be compared to.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>A new DbIsOfExpression with the specified instance and type and DbExpressionKind IsOf.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;type&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is not in the same type hierarchy as the result type of <ph id="ph2">&lt;code&gt;argument&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbIsOfExpression"&gt;&lt;/xref&gt;</ph> expression that determines whether the given argument is of the specified type, and only that type (not a subtype).</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>DbIsOfExpression requires that <ph id="ph1">`argument`</ph> has a polymorphic result type, and that <ph id="ph2">`type`</ph> is a type from the same type hierarchy as that result type.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>An expression that specifies the instance.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Type metadata that specifies the type that the instance's result type should be compared to.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>A new DbIsOfExpression with the specified instance and type and DbExpressionKind IsOfOnly.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;type&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is not in the same type hierarchy as the result type of <ph id="ph2">&lt;code&gt;argument&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbJoinExpression"&gt;&lt;/xref&gt;</ph> that joins the sets specified by the outer and inner expressions, on an equality condition between the specified outer and inner keys, using InnerJoin as the <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the outer set argument.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the inner set argument.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>A method that specifies how the outer key value should be derived from an element of the outer set.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>A method that specifies how the inner key value should be derived from an element of the inner set.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>A new DbJoinExpression, with an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of InnerJoin, that represents the inner join operation applied to the left and right input sets under a join condition that compares the outer and inner key values for equality.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">outerKey</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">innerKey</ph><ept id="p2">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The expressions produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">outerKey</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">innerKey</ph><ept id="p2">&lt;/code&gt;</ept> are not comparable for equality.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbProjectExpression"&gt;&lt;/xref&gt;</ph> that projects the specified selector over the sets specified by the outer and inner expressions, joined on an equality condition between the specified outer and inner keys, using InnerJoin as the <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be compatible with Join, <ph id="ph1">`TSelector`</ph> must be derived from <ph id="ph2">&lt;xref:System.Data.Common.CommandTrees.DbExpression&gt;</ph>,     or must be an anonymous type with DbExpression-derived properties.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are examples of supported types for <ph id="ph1">`TSelector`</ph>:</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>(<ph id="ph1">`TSelector`</ph> is <ph id="ph2">&lt;xref:System.Data.Common.CommandTrees.DbPropertyExpression&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>(<ph id="ph1">`TSelector`</ph> is an anonymous type with DbExpression-derived properties).</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the outer set argument.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the inner set argument.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>A method that specifies how the outer key value should be derived from an element of the outer set.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>A method that specifies how the inner key value should be derived from an element of the inner set.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A method that specifies how an element of the result set should be derived from elements of the inner and outer sets.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>This method must produce an instance of a type that is compatible with Join and can be resolved into a <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Compatibility requirements for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TSelector</ph><ept id="p1">&lt;/code&gt;</ept> are described in remarks.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The type of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>A new DbProjectExpression with the specified selector as its projection, and a new DbJoinExpression as its input.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The input DbJoinExpression is created with an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of InnerJoin, that represents the inner join operation applied to the left and right input sets under a join condition that compares the outer and inner key values for equality.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept> is null after conversion to DbExpression.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Selector</ph><ept id="p1">&lt;/code&gt;</ept> is not compatible with SelectMany.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLambda"&gt;&lt;/xref&gt;</ph> with the specified inline Lambda function implementation and formal parameters.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>An expression that defines the logic of the Lambda function.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbVariableReferenceExpression"&gt;&lt;/xref&gt;</ph> collection that represents the formal parameters to the Lambda function.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>These variables are valid for use in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">body</ph><ept id="p1">&lt;/code&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variables&lt;/code&gt;</ph> is null or contains null, or <ph id="ph2">&lt;code&gt;body&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variables&lt;/code&gt;</ph> contains more than one element with the same variable name.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLambda"&gt;&lt;/xref&gt;</ph> with the specified inline Lambda function implementation and formal parameters.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>An expression that defines the logic of the Lambda function.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbVariableReferenceExpression"&gt;&lt;/xref&gt;</ph> collection that represents the formal parameters to the Lambda function.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>These variables are valid for use in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">body</ph><ept id="p1">&lt;/code&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variables&lt;/code&gt;</ph> is null or contains null, or <ph id="ph2">&lt;code&gt;body&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variables&lt;/code&gt;</ph> contains more than one element with the same variable name.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbJoinExpression"&gt;&lt;/xref&gt;</ph> that joins the sets specified by the left and right expression bindings, on the specified join condition, using LeftOuterJoin as the <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies the left set argument.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies the right set argument.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>An expression that specifies the condition on which to join.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>A new DbJoinExpression, with an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of LeftOuterJoin, that represents the left outer join operation applied to the left and right     input sets under the given join condition.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph>,  <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;joinCondition&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;joinCondition&lt;/code&gt;</ph> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbJoinExpression"&gt;&lt;/xref&gt;</ph> that joins the sets specified by the left and right expressions, on the specified join condition, using LeftOuterJoin as the <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the left set argument.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the right set argument.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>A method representing the condition on which to join.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with a Boolean result type that provides the logic of the join condition.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>A new DbJoinExpression, with an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of LeftOuterJoin, that represents the left outer join operation applied to the left and right input sets under the given join condition.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">joinCondition</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">joinCondition</ph><ept id="p1">&lt;/code&gt;</ept> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbComparisonExpression"&gt;&lt;/xref&gt;</ph> that determines whether the left argument is less than the right argument.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>A new DbComparisonExpression representing the less-than comparison.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>No common order-comparable result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbComparisonExpression"&gt;&lt;/xref&gt;</ph> that determines whether the left argument is less than or equal to the right argument.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>A new DbComparisonExpression representing the less-than-or-equal-to comparison.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>No common result type that is both equality- and order-comparable exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLikeExpression"&gt;&lt;/xref&gt;</ph> that compares the specified input string to the given pattern.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input string.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>An expression that specifies the pattern string.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>A new DbLikeExpression with the specified input, pattern and a null escape.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;pattern&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;pattern&lt;/code&gt;</ph> does not have a string result type.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLikeExpression"&gt;&lt;/xref&gt;</ph> that compares the specified input string to the given pattern using the optional escape.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input string.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>An expression that specifies the pattern string.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>An optional expression that specifies the escape string.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>A new DbLikeExpression with the specified input, pattern and escape.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph>,   <ph id="ph2">&lt;code&gt;pattern&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;escape&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph>,   <ph id="ph2">&lt;code&gt;pattern&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;escape&lt;/code&gt;</ph> does not have a string result type.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLimitExpression"&gt;&lt;/xref&gt;</ph> that restricts the number of elements in the Argument collection to the specified count Limit value.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Tied results are not included in the output.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input collection.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>An expression that specifies the limit value.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>A new DbLimitExpression with the specified argument and count limit values that does not include tied results.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a collection result type, or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> does not have a result type that is equal or promotable to a 64-bit integer type.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbArithmeticExpression"&gt;&lt;/xref&gt;</ph> that subtracts the right argument from the left argument.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>A new DbArithmeticExpression representing the subtraction operation.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>No common numeric result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbArithmeticExpression"&gt;&lt;/xref&gt;</ph> that computes the remainder of the left argument divided by the right argument.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>A new DbArithmeticExpression representing the modulo operation.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>No common numeric result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbArithmeticExpression"&gt;&lt;/xref&gt;</ph> that multiplies the left argument by the right argument.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>A new DbArithmeticExpression representing the multiplication operation.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>No common numeric result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbRelationshipNavigationExpression"&gt;&lt;/xref&gt;</ph> representing the navigation of a composition or association relationship.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression&gt;</ph> requires that navigation always occur from a reference, and so <ph id="ph2">`navigateFrom`</ph> must always have a reference result type.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>An expression that specifies the instance from which navigation should occur.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Metadata for the property that represents the end of the relationship from which navigation should occur.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Metadata for the property that represents the end of the relationship to which navigation should occur.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>A new DbRelationshipNavigationExpression representing the navigation of the specified from and to relation ends of the specified relation type from the specified navigation source instance.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;fromEnd&lt;/code&gt;</ph>,  <ph id="ph2">&lt;code&gt;toEnd&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;navigateFrom&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;fromEnd&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;toEnd&lt;/code&gt;</ph> are not declared by the same relationship type, or <ph id="ph3">&lt;code&gt;navigateFrom&lt;/code&gt;</ph> has a result type that is not compatible with the property type of <ph id="ph4">&lt;code&gt;fromEnd&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbRelationshipNavigationExpression"&gt;&lt;/xref&gt;</ph> representing the navigation of a composition or association relationship.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression&gt;</ph> requires that navigation always occur from a reference, and so <ph id="ph2">`navigateFrom`</ph> must always have a reference result type.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Metadata for the relation type that represents the relationship.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The name of the property of the relation type that represents the end of the relationship from which navigation should occur.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The name of the property of the relation type that represents the end of the relationship to which navigation should occur.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>An expression the specifies the instance from which naviagtion should occur.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>A new DbRelationshipNavigationExpression representing the navigation of the specified from and to relation ends of the specified relation type from the specified navigation source instance.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph>,  <ph id="ph2">&lt;code&gt;fromEndName&lt;/code&gt;</ph>,  <ph id="ph3">&lt;code&gt;toEndName&lt;/code&gt;</ph> or <ph id="ph4">&lt;code&gt;navigateFrom&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is not associated with this command tree's metadata workspace or <ph id="ph2">&lt;code&gt;navigateFrom&lt;/code&gt;</ph> is associated with a different command tree, or <ph id="ph3">&lt;code&gt;type&lt;/code&gt;</ph> does not declare a relation end property with name <ph id="ph4">&lt;code&gt;toEndName&lt;/code&gt;</ph> or <ph id="ph5">&lt;code&gt;fromEndName&lt;/code&gt;</ph>, or <ph id="ph6">&lt;code&gt;navigateFrom&lt;/code&gt;</ph> has a result type that is not compatible with the property type of the relation end property with name <ph id="ph7">&lt;code&gt;fromEndName&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbArithmeticExpression"&gt;&lt;/xref&gt;</ph> that negates the value of the argument.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>An expression that specifies the argument.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>A new DbArithmeticExpression representing the negation operation.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>No numeric result type exists for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">argument</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNewInstanceExpression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>If the type argument is a collection type, the arguments specify the elements of the collection.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Otherwise the arguments are used as property or column values in the new instance.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`instanceType`</ph> is a a collection type then every expression in <ph id="ph2">`arguments`</ph> must have a result type that is promotable to the element type of the <ph id="ph3">`instanceType`</ph>.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`instanceType`</ph> is a row type,  <ph id="ph2">`arguments`</ph> must contain as many expressions as there are columns in the row type, and the result type of each expression must be equal or promotable to the type of the corresponding column.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>A row type that does not declare any columns is invalid.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`instanceType`</ph> is an entity type,  <ph id="ph2">`arguments`</ph> must contain as many expressions as there are properties defined by the type, and the result type of each expression must be equal or promotable to the type of the corresponding property.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The type of the new instance.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Expressions that specify values of the new instances, interpreted according to the instance's type.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>A new DbNewInstanceExpression with the specified type and arguments.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;instanceType&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;arguments&lt;/code&gt;</ph> is null, or <ph id="ph3">&lt;code&gt;arguments&lt;/code&gt;</ph> contains null.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;arguments&lt;/code&gt;</ph> is empty or the result types of the contained expressions do not match the requirements of <ph id="ph2">&lt;code&gt;instanceType&lt;/code&gt;</ph> (as explained in the remarks section).</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNewInstanceExpression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>If the type argument is a collection type, the arguments specify the elements of the collection.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Otherwise the arguments are used as property or column values in the new instance.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`instanceType`</ph> is a a collection type then every expression in <ph id="ph2">`arguments`</ph> must have a result type that is promotable to the element type of the <ph id="ph3">`instanceType`</ph>.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`instanceType`</ph> is a row type,  <ph id="ph2">`arguments`</ph> must contain as many expressions as there are columns in the row type, and the result type of each expression must be equal or promotable to the type of the corresponding column.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>A row type that does not declare any columns is invalid.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`instanceType`</ph> is an entity type,  <ph id="ph2">`arguments`</ph> must contain as many expressions as there are properties defined by the type, and the result type of each expression must be equal or promotable to the type of the corresponding property.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The type of the new instance.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Expressions that specify values of the new instances, interpreted according to the instance's type.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>A new DbNewInstanceExpression with the specified type and arguments.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;instanceType&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;arguments&lt;/code&gt;</ph> is null, or <ph id="ph3">&lt;code&gt;arguments&lt;/code&gt;</ph> contains null.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;arguments&lt;/code&gt;</ph> is empty or the result types of the contained expressions do not match the requirements of <ph id="ph2">&lt;code&gt;instanceType&lt;/code&gt;</ph> (as explained in the remarks section).</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNewInstanceExpression"&gt;&lt;/xref&gt;</ph> that constructs a collection containing the specified elements.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The type of the collection is based on the common type of the elements.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>If no common element type exists an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>A list of expressions that provide the elements of the collection.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>A new DbNewInstanceExpression with the specified collection type and arguments.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;elements&lt;/code&gt;</ph> is null, or contains null.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;elements&lt;/code&gt;</ph> is empty or contains expressions for which no common result type exists.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNewInstanceExpression"&gt;&lt;/xref&gt;</ph> that constructs a collection containing the specified elements.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The type of the collection is based on the common type of the elements.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>If no common element type exists an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>A list of expressions that provide the elements of the collection.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>A new DbNewInstanceExpression with the specified collection type and arguments.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;elements&lt;/code&gt;</ph> is null, or contains null..</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;elements&lt;/code&gt;</ph> is empty or contains expressions for which no common result type exists.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNewInstanceExpression"&gt;&lt;/xref&gt;</ph> that constructs an empty collection of the specified collection type.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The type metadata for the collection to create</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>A new DbNewInstanceExpression with the specified collection type and an empty <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Arguments</ph><ept id="p1">&lt;/code&gt;</ept> list.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;collectionType&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;collectionType&lt;/code&gt;</ph> is not a collection type.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNewInstanceExpression"&gt;&lt;/xref&gt;</ph> that produces a row with the specified named columns and the given values, specified as expressions.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>A list of string-DbExpression key-value pairs that defines the structure and values of the row.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>A new DbNewInstanceExpression that represents the construction of the row.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;columnValues&lt;/code&gt;</ph> is null or contains an element with a null column name or expression.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;columnValues&lt;/code&gt;</ph> is empty, or contains a duplicate or invalid column name.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNotExpression"&gt;&lt;/xref&gt;</ph> that performs the logical negation of the given argument.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>A Boolean expression that specifies the argument.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>A new DbNotExpression with the specified argument.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbComparisonExpression"&gt;&lt;/xref&gt;</ph> that compares the left and right arguments for inequality.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>A new DbComparisonExpression representing the inequality comparison.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>No common equality-comparable result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbNullExpression"&gt;&lt;/xref&gt;</ph>, which represents a typed null value.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The type of the null value.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>An instance of DbNullExpression.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;nullType&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbOfTypeExpression"&gt;&lt;/xref&gt;</ph> that produces a set consisting of the elements of the given input set that are of the specified type.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>DbOfTypeExpression requires that <ph id="ph1">`argument`</ph> has a collection result type with a polymorphic element type, and that <ph id="ph2">`type`</ph> is a type from the same type hierarchy as that element type.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Type metadata for the type that elements of the input set must have to be included in the resulting set.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>A new DbOfTypeExpression with the specified set argument and type, and an ExpressionKind of <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind.OfType"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;type&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a collection result type, or <ph id="ph2">&lt;code&gt;type&lt;/code&gt;</ph> is not a type in the same type hierarchy as the element type of the collection result type of <ph id="ph3">&lt;code&gt;argument&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbOfTypeExpression"&gt;&lt;/xref&gt;</ph> that produces a set consisting of the elements of the given input set that are of exactly the specified type.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>DbOfTypeExpression requires that <ph id="ph1">`argument`</ph> has a collection result type with a polymorphic element type, and that <ph id="ph2">`type`</ph> is a type from the same type hierarchy as that element type.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Type metadata for the type that elements of the input set must match exactly to be included in the resulting set.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>A new DbOfTypeExpression with the specified set argument and type, and an ExpressionKind of <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind.OfTypeOnly"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;type&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a collection result type, or <ph id="ph2">&lt;code&gt;type&lt;/code&gt;</ph> is not a type in the same type hierarchy as the element type of the collection result type of <ph id="ph3">&lt;code&gt;argument&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbOrExpression"&gt;&lt;/xref&gt;</ph> that performs the logical Or of the left and right arguments.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>A Boolean expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>A Boolean expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>A new DbOrExpression with the specified arguments.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> does not have a Boolean result type.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that sorts the given input set by the specified sort key, with ascending sort order and default collation.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>A method that specifies how to derive the sort key expression given a member of the input set.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with an order-comparable result type that provides the sort key definition.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>A new DbSortExpression that represents the order-by operation.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> does not have an order-comparable result type.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that sorts the given input set by the specified sort key, with ascending sort order and the specified collation.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>A method that specifies how to derive the sort key expression given a member of the input set.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with an order-comparable result type that provides the sort key definition.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The collation to sort under.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>A new DbSortExpression that represents the order-by operation.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> does not have an order-comparable string result type.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;collation&lt;/code&gt;</ph> is empty or contains only space characters.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that sorts the given input set by the specified sort key, with descending sort order and default collation.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>A method that specifies how to derive the sort key expression given a member of the input set.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with an order-comparable result type that provides the sort key definition.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>A new DbSortExpression that represents the order-by operation.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> does not have an order-comparable result type.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that sorts the given input set by the specified sort key, with descending sort order and the specified collation.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>A method that specifies how to derive the sort key expression given a member of the input set.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with an order-comparable result type that provides the sort key definition.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The collation to sort under.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>A new DbSortExpression that represents the order-by operation.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> does not have an order-comparable string result type.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;collation&lt;/code&gt;</ph> is empty or contains only space characters.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbApplyExpression"&gt;&lt;/xref&gt;</ph> that evaluates the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">apply</ph><ept id="p1">&lt;/code&gt;</ept> expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Rows for which <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> evaluates to an empty set have an apply column value of <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>A method that specifies the logic to evaluate once for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>An new DbApplyExpression with the specified input and apply bindings and an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of OuterApply.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> contains a name or expression that is null.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> contains a name or expression that is not valid in an expression binding.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbApplyExpression"&gt;&lt;/xref&gt;</ph> that evaluates the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">apply</ph><ept id="p1">&lt;/code&gt;</ept> expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Rows for which <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> evaluates to an empty set have an apply column value of <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionBinding"&gt;&lt;/xref&gt;</ph> that specifies logic to evaluate once for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>An new DbApplyExpression with the specified input and apply bindings and an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of OuterApply.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;apply&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbParameterReferenceExpression"&gt;&lt;/xref&gt;</ph> that references a parameter with the specified name and type.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>The type of the referenced parameter.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>The name of the referenced parameter.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>A DbParameterReferenceExpression that represents a reference to a parameter with the specified name and type.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>The result type of the expression will be the same as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbArithmeticExpression"&gt;&lt;/xref&gt;</ph> that adds the left argument to the right argument.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>An expression that specifies the left argument.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>An expression that specifies the right argument.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>A new DbArithmeticExpression representing the addition operation.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>No common numeric result type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbProjectExpression"&gt;&lt;/xref&gt;</ph> that projects the specified expression over the given input set.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>An expression binding that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>An expression to project over the set.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>A new DbProjectExpression that represents the projection operation.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;projection&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbPropertyExpression"&gt;&lt;/xref&gt;</ph> representing the retrieval of the specified property.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The instance from which to retrieve the property.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>May be null if the property is static.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Metadata for the property to retrieve.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>A new DbPropertyExpression representing the property retrieval.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;propertyMetadata&lt;/code&gt;</ph> is null or <ph id="ph2">&lt;code&gt;instance&lt;/code&gt;</ph> is null and the property is not static.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbPropertyExpression"&gt;&lt;/xref&gt;</ph> representing the retrieval of the specified navigation property.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The instance from which to retrieve the navigation property.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Metadata for the navigation property to retrieve.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>A new DbPropertyExpression representing the navigation property retrieval.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;navigationProperty&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;instance&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbPropertyExpression"&gt;&lt;/xref&gt;</ph> representing the retrieval of the specified relationship end member.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>The instance from which to retrieve the relationship end member.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Metadata for the relationship end member to retrieve.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>A new DbPropertyExpression representing the relationship end member retrieval.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;relationshipEnd&lt;/code&gt;</ph> is null or <ph id="ph2">&lt;code&gt;instance&lt;/code&gt;</ph> is null and the property is not static.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbPropertyExpression"&gt;&lt;/xref&gt;</ph> representing the retrieval of the instance property with the specified name from the given instance.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>The instance from which to retrieve the property.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The name of the property to retrieve.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>A new DbPropertyExpression that represents the property retrieval.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;propertyName&lt;/code&gt;</ph> is null or <ph id="ph2">&lt;code&gt;instance&lt;/code&gt;</ph> is null and the property is not static.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>No property with the specified name is declared by the type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">instance</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbRefExpression"&gt;&lt;/xref&gt;</ph> that encodes a reference to a specific Entity based on key values.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`keyRow`</ph> should be an expression that specifies the key values that identify the referenced entity within the given entity set.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result type of <ph id="ph1">`keyRow`</ph> should contain a corresponding column for each key property defined by <ph id="ph2">`entitySet's`</ph> entity type.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>The Entity set in which the referenced element resides.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>A new DbRefExpression that references the element with the specified key values in the given Entity set.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;entitySet&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keyRow&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keyRow&lt;/code&gt;</ph> does not have a record result type that matches the key properties of the referenced entity set's entity type.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbRefExpression"&gt;&lt;/xref&gt;</ph> that encodes a reference to a specific Entity based on key values.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`keyRow`</ph> should be an expression that specifies the key values that identify the referenced entity within the given entity set.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result type of <ph id="ph1">`keyRow`</ph> should contain a corresponding column for each key property defined by <ph id="ph2">`entitySet's`</ph> entity type.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>The Entity set in which the referenced element resides.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>The type of the Entity that the reference should refer to.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>A new DbRefExpression that references the element with the specified key values in the given Entity set.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;entitySet&lt;/code&gt;</ph>,  <ph id="ph2">&lt;code&gt;keyRow&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;entityType&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;entityType&lt;/code&gt;</ph> is not in the same type hierarchy as the entity set's entity type, or <ph id="ph2">&lt;code&gt;keyRow&lt;/code&gt;</ph> does not have a record result type that matches the key properties of the referenced entity set's entity type.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbScanExpression"&gt;&lt;/xref&gt;</ph> that references the specified entity or relationship set.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Metadata for the entity or relationship set to reference.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>A new DbScanExpression based on the specified entity or relationship set.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;targetSet&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbProjectExpression"&gt;&lt;/xref&gt;</ph> that selects the specified expression over the given input set.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be compatible with Select, <ph id="ph1">`TProjection`</ph> must be derived from <ph id="ph2">&lt;xref:System.Data.Common.CommandTrees.DbExpression&gt;</ph>,     or must be an anonymous type with DbExpression-derived properties.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are examples of supported types for <ph id="ph1">`TProjection`</ph>:</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`TProjection`</ph> is <ph id="ph2">&lt;xref:System.Data.Common.CommandTrees.DbPropertyExpression&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source>(<ph id="ph1">`TProjection`</ph> is an anonymous type with a DbExpression-derived property).</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>A method that specifies how to derive the projected expression given a member of the input set.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>This method must produce an instance of a type that is compatible with Select and can be resolved into a <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Compatibility requirements for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TProjection</ph><ept id="p1">&lt;/code&gt;</ept> are described in remarks.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The method result type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">projection</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>A new DbProjectExpression that represents the select operation.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">projection</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbApplyExpression"&gt;&lt;/xref&gt;</ph> that evaluates the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">apply</ph><ept id="p1">&lt;/code&gt;</ept> expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Rows for which <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> evaluates to an empty set are not included.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbProjectExpression"&gt;&lt;/xref&gt;</ph> is then created that selects the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">apply</ph><ept id="p1">&lt;/code&gt;</ept> column from each row, producing the overall collection of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">apply</ph><ept id="p2">&lt;/code&gt;</ept> results.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>A method that represents the logic to evaluate once for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>An new DbProjectExpression that selects the apply column from a new DbApplyExpression with the specified input and apply bindings and an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of CrossApply.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> does not have a collection type.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbApplyExpression"&gt;&lt;/xref&gt;</ph> that evaluates the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">apply</ph><ept id="p1">&lt;/code&gt;</ept> expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Rows for which <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> evaluates to an empty set are not included.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbProjectExpression"&gt;&lt;/xref&gt;</ph> is then created that selects the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">selector</ph><ept id="p1">&lt;/code&gt;</ept> over each row, producing the overall collection of results.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be compatible with SelectMany, <ph id="ph1">`TSelector`</ph> must be derived from <ph id="ph2">&lt;xref:System.Data.Common.CommandTrees.DbExpression&gt;</ph>,     or must be an anonymous type with DbExpression-derived properties.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are examples of supported types for <ph id="ph1">`TSelector`</ph>:</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source>(<ph id="ph1">`TSelector`</ph> is <ph id="ph2">&lt;xref:System.Data.Common.CommandTrees.DbPropertyExpression&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT">
          <source>(<ph id="ph1">`TSelector`</ph> is an anonymous type with DbExpression-derived properties).</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>A method that represents the logic to evaluate once for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>A method that specifies how an element of the result set should be derived given an element of the input and apply sets.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>This method must produce an instance of a type that is compatible with SelectMany and can be resolved into a <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Compatibility requirements for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TSelector</ph><ept id="p1">&lt;/code&gt;</ept> are described in remarks.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>The method result type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>An new DbProjectExpression that selects the result of the given selector from a new DbApplyExpression with the specified input and apply bindings and an <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpressionKind"&gt;&lt;/xref&gt;</ph> of CrossApply.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept> is null on conversion to DbExpression.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">apply</ph><ept id="p1">&lt;/code&gt;</ept> does not have a collection type.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>does not have a collection type.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSkipExpression"&gt;&lt;/xref&gt;</ph> that skips the specified number of elements from the given sorted input set.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that specifies the sorted input set.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>An expression the specifies how many elements of the ordered set to skip.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>A new DbSkipExpression that represents the skip operation.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is not <ph id="ph2">&lt;xref href="System.Data.Common.CommandTrees.DbConstantExpression"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Data.Common.CommandTrees.DbParameterReferenceExpression"&gt;&lt;/xref&gt;</ph> or has a result type that is not equal or promotable to a 64-bit integer type.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSkipExpression"&gt;&lt;/xref&gt;</ph> that sorts the given input set by the given sort specifications before skipping the specified number of elements.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>An expression binding that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>A list of sort specifications that determine how the elements of the input set should be sorted.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>An expression the specifies how many elements of the ordered set to skip.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>A new DbSkipExpression that represents the skip operation.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph>,  <ph id="ph2">&lt;code&gt;sortOrder&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;count&lt;/code&gt;</ph> is null, or <ph id="ph4">&lt;code&gt;sortOrder&lt;/code&gt;</ph> contains null.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sortOrder&lt;/code&gt;</ph> is empty, or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is not <ph id="ph3">&lt;xref href="System.Data.Common.CommandTrees.DbConstantExpression"&gt;&lt;/xref&gt;</ph> or <ph id="ph4">&lt;xref href="System.Data.Common.CommandTrees.DbParameterReferenceExpression"&gt;&lt;/xref&gt;</ph> or has a result type that is not equal or promotable to a 64-bit integer type.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that sorts the given input set by the specified sort specifications.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>An expression binding that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>A list of sort specifications that determine how the elements of the input set should be sorted.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>A new DbSortExpression that represents the sort operation.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;sortOrder&lt;/code&gt;</ph> is null, or <ph id="ph3">&lt;code&gt;sortOrder&lt;/code&gt;</ph> contains null.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sortOrder&lt;/code&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbLimitExpression"&gt;&lt;/xref&gt;</ph> that restricts the number of elements in the Argument collection to the specified count Limit value.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Tied results are not included in the output.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input collection.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>An expression that specifies the limit value.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>A new DbLimitExpression with the specified argument and count limit values that does not include tied results.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> does not have a collection result type,  <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> does not have a result type that is equal or promotable to a 64-bit integer type.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with the specified collation.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>A DbSortExpression that specifies the ordered input set.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>A method that specifies how to derive the additional sort key expression given a member of the input set.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with an order-comparable result type that provides the sort key definition.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>The collation to sort under.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>A new DbSortExpression that represents the new overall order-by operation.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> does not have an order-comparable string result type.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;collation&lt;/code&gt;</ph> is empty or contains only space characters.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with default collation.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>A DbSortExpression that specifies the ordered input set.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>A method that specifies how to derive the additional sort key expression given a member of the input set.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with an order-comparable result type that provides the sort key definition.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>A new DbSortExpression that represents the new overall order-by operation.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sortKey&lt;/code&gt;</ph> does not have an order-comparable result type.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with default collation.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>A DbSortExpression that specifies the ordered input set.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>A method that specifies how to derive the additional sort key expression given a member of the input set.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with an order-comparable result type that provides the sort key definition.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>A new DbSortExpression that represents the new overall order-by operation.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> does not have an order-comparable result type.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortExpression"&gt;&lt;/xref&gt;</ph> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with the specified collation.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>A DbSortExpression that specifies the ordered input set.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>A method that specifies how to derive the additional sort key expression given a member of the input set.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with an order-comparable result type that provides the sort key definition.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The collation to sort under.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>A new DbSortExpression that represents the new overall order-by operation.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sortKey</ph><ept id="p1">&lt;/code&gt;</ept> does not have an order-comparable string result type.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;collation&lt;/code&gt;</ph> is empty or contains only space characters.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortClause"&gt;&lt;/xref&gt;</ph> with an ascending sort order and default collation.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>The expression that defines the sort key.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>A new sort clause with the given sort key and ascending sort order.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> does not have an order-comparable result type.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortClause"&gt;&lt;/xref&gt;</ph> with an ascending sort order and the specified collation.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>The expression that defines the sort key.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>The collation to sort under.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>A new sort clause with the given sort key and collation, and ascending sort order.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;collation&lt;/code&gt;</ph> is empty or contains only space characters.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> does not have an order-comparable result type.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortClause"&gt;&lt;/xref&gt;</ph> with a descending sort order and default collation.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>The expression that defines the sort key.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>A new sort clause with the given sort key and descending sort order.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> does not have an order-comparable result type.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbSortClause"&gt;&lt;/xref&gt;</ph> with a descending sort order and the specified collation.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>The expression that defines the sort key.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>The collation to sort under.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>A new sort clause with the given sort key and collation, and descending sort order.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;collation&lt;/code&gt;</ph> is empty or contains only space characters.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> does not have an order-comparable result type.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbTreatExpression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT">
          <source>DbTreatExpression requires that <ph id="ph1">`argument`</ph> has a polymorphic result type, and that <ph id="ph2">`treatType`</ph> is a type from the same type hierarchy as that result type.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>An expression that specifies the instance.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Type metadata for the treat-as type.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>A new DbTreatExpression with the specified argument and type.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;treatType&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;treatType&lt;/code&gt;</ph> is not in the same type hierarchy as the result type of <ph id="ph2">&lt;code&gt;argument&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbConstantExpression"&gt;&lt;/xref&gt;</ph> with the Boolean value <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbConstantExpression"&gt;&lt;/xref&gt;</ph> with the Boolean value <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbArithmeticExpression"&gt;&lt;/xref&gt;</ph> that negates the value of the argument.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>An expression that specifies the argument.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>A new DbArithmeticExpression representing the negation operation.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argument&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>No numeric result type exists for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">argument</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbExpression"&gt;&lt;/xref&gt;</ph> that computes the union of the left and right set arguments with duplicates removed.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>An expression that defines the left set argument.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>An expression that defines the right set argument.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>A new DbExpression that computes the union, without duplicates, of the the left and right arguments.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>No common collection result type with an equality-comparable element type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbUnionAllExpression"&gt;&lt;/xref&gt;</ph> that computes the union of the left and right set arguments and does not remove duplicates.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>An expression that defines the left set argument.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>An expression that defines the right set argument.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>A new DbUnionAllExpression that union, including duplicates, of the the left and right arguments.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;right&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>No common collection result type with an equality-comparable element type exists between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">right</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbVariableReferenceExpression"&gt;&lt;/xref&gt;</ph> that references a variable with the specified name and type.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>The type of the referenced variable.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>The name of the referenced variable.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>A DbVariableReferenceExpression that represents a reference to a variable with the specified name and type.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>The result type of the expression will be the same as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.Common.CommandTrees.DbFilterExpression"&gt;&lt;/xref&gt;</ph> that filters the elements in the given input set using the specified predicate.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>An expression that specifies the input set.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>A method representing the predicate to evaluate for each member of the input set.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>This method must produce an expression with a Boolean result type that provides the predicate logic.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>A new DbQuantifierExpression that represents the Any operation.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept> is null.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>The expression produced by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept> does not have a Boolean result type.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>