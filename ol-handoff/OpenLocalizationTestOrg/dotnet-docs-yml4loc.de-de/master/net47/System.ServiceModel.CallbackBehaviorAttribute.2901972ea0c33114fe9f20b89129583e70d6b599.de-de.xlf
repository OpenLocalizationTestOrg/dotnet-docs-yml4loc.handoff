<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3024ad8355472953455f1934b33d92cc3942b80</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.CallbackBehaviorAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad81937026cdc258d1e5859ca0376ea0607896f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5a9cd773340c5994267b06e15db6f9e04889977</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Configures a callback service implementation in a client application.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute&gt;</ph> attribute to configure or extend the execution behavior of a callback contract implementation in a client application.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This attribute performs the same function for the callback class as the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute&gt;</ph> attribute with the exception of instancing behavior and transaction settings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute&gt;</ph> must be applied to the class that implements the callback contract.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If applied to a non-duplex contract implementation an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown at runtime.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph> attribute for the callback operation implementations.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph> is used on a callback operation, the <ph id="ph2">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph> property must be <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.None&gt;</ph> or an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown at runtime.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following properties are available:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.AutomaticSessionShutdown%2A&gt;</ph> property automatically closes the session when the channel is closed and the callback has finished processing any remaining messages.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.ConcurrencyMode%2A&gt;</ph> property controls the internal threading model, enabling support for reentrant or multithreaded callback objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.IgnoreExtensionDataObject%2A&gt;</ph> property enables the runtime to ignore extra serialization information that is not required to process the message.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> property specifies whether unhandled exceptions in a service are returned to the service as SOAP faults for debugging purposes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.MaxItemsInObjectGraph%2A&gt;</ph> property limits on the number of items in an object graph that are serialized.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.TransactionIsolationLevel%2A&gt;</ph> property specifies the transaction isolation level that the contract supports.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.TransactionTimeout%2A&gt;</ph> property specifies the time period within which a transaction must complete or it aborts.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.UseSynchronizationContext%2A&gt;</ph> property indicates whether to synchronize inbound method calls automatically using the current <ph id="ph2">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.ValidateMustUnderstand%2A&gt;</ph> property informs the system whether it should confirm that SOAP headers marked as <ph id="ph2">`MustUnderstand`</ph> have, in fact, been understood.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.CallbackBehaviorAttribute"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default settings for the <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute&gt;</ph> are:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.AutomaticSessionShutdown%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.ConcurrencyMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.ServiceModel.ConcurrencyMode.Single&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.IgnoreExtensionDataObject%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.UseSynchronizationContext%2A&gt;</ph> is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.ValidateMustUnderstand%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Specifies whether to automatically close a session when a service closes a duplex session.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, when a service closes a duplex session and the callback has finished processing any remaining messages, the callback closes the session.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.AutomaticSessionShutdown%2A&gt;</ph> to <ph id="ph2">`false`</ph> prevents the client from automatically closing the session.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if duplex callback objects automatically close a session when the service closes a duplex session; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets whether a service supports one thread, multiple threads, or reentrant calls.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property indicates whether an instance of a callback object supports one thread or multiple threads that execute concurrently, and if single-threaded, whether reentrancy is supported.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph> to <ph id="ph2">&lt;xref:System.ServiceModel.ConcurrencyMode.Single&gt;</ph> instructs the system to restrict instances of the service to one thread of execution at a time, which frees you from dealing with threading issues.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the default value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of <ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode.Multiple&gt;</ph> means that service objects can be executed by multiple threads at any one time.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you must ensure thread safety and state consistency.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode.Reentrant&gt;</ph> also restricts access to a single thread at a time.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it enables calls out from an executing service method to return and reenter the executing service.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>A reentrant call can execute on a different managed thread, but in this case the original thread is blocked for the duration of the reentrant call.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, if a message arrives for an instance that violates its concurrency mode, the message waits until the instance is available, or until it times out.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, if the <ph id="ph1">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph> is set to <ph id="ph2">&lt;xref:System.ServiceModel.ConcurrencyMode.Single&gt;</ph> and a reentrant call is blocked while waiting for the instance to be freed, the system detects the deadlock and throws an exception.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> concurrency, see <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A?displayProperty=fullName&gt;</ph> and <bpt id="p1">[</bpt>Sessions, Instancing, and Concurrency<ept id="p1">](~/docs/framework/wcf/feature-details/sessions-instancing-and-concurrency.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.ServiceModel.ConcurrencyMode"&gt;&lt;/xref&gt;</ph> values; the default is <ph id="ph2">&lt;xref href="System.ServiceModel.ConcurrencyMode.Single"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The value is not one of the <ph id="ph1">&lt;xref href="System.ServiceModel.ConcurrencyMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies whether to send unknown serialization data onto the wire.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a type implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> interface, it stores any extra data it does not know about that comes over the wire when deserializing into that type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a type <ph id="ph1">`Person`</ph> has members <ph id="ph2">`FirstName`</ph> and <ph id="ph3">`LastName`</ph>, and an element called <ph id="ph4">`PhoneNumber`</ph> comes in, it is stored.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>When later serializing the type, <ph id="ph1">`PhoneNumber`</ph> is re-emitted.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The problem is that the schema for <ph id="ph1">`Person`</ph> exported by that service only has <ph id="ph2">`FirstName`</ph> and <ph id="ph3">`LastName`</ph>, so <ph id="ph4">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> generates a schema-invalid instance.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If strict schema compliance is important, you can set <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.IgnoreExtensionDataObject%2A&gt;</ph> to <ph id="ph2">`true`</ph> to turn this re-emitting behavior off.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Regardless of the <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.IgnoreExtensionDataObject%2A&gt;</ph> setting, <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> always processes known data (both in and out) and does not throw exceptions when extra data comes in.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;callbackDebug<ph id="ph2">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/wcf/callbackdebug.md)</ept> element to set this property in a client application configuration file.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if unknown serialization data is never sent; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies that general unhandled execution exceptions are to be converted into a <ph id="ph1">&lt;xref href="System.ServiceModel.FaultException`1"&gt;&lt;/xref&gt;</ph> of type <ph id="ph2">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> and sent as a fault message.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Set this to <ph id="ph1">`true`</ph> only during development to troubleshoot a service.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> to <ph id="ph2">`true`</ph> to enable exception information to flow back to services for debugging purposes when possible.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a development-only feature and should not be employed in deployed services.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>These faults appear to the calling service as <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph>to <ph id="ph2">`true`</ph> enables services to obtain information about internal client callback exceptions; it is only recommended as a way of temporarily debugging a duplex client application.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if unhandled exceptions are to be returned as SOAP faults; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum number of items allowed in a serialized object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.MaxItemsInObjectGraph%2A&gt;</ph> property set a limit on the number of items in an object graph that are serialized.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;dataContractSerializer<ph id="ph2">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/wcf/datacontractserializer.md)</ept> element to set this value in a client application configuration file.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The maximum number of items allowed in an object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Specifies the transaction isolation level.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The isolation level in which your transaction runs determines how data is treated when changes are made in other transactions and how long your transaction must hold locks to protect against these changes.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the default value, <ph id="ph1">&lt;xref:System.Transactions.IsolationLevel.Unspecified&gt;</ph>, specifies that no updating or inserting can occur until the transaction is complete.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.IsolationLevel"&gt;&lt;/xref&gt;</ph> value that specifies the transaction isolation level.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Transactions.IsolationLevel.Unspecified"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The value is not one of the <ph id="ph1">&lt;xref href="System.Transactions.IsolationLevel"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Gets or sets the period within which a transaction must complete.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is typically set in an application configuration file.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> object that represents the time within which transactions must complete or be automatically aborted.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.TimeSpan.Zero"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies whether to use the current synchronization context to choose the thread of execution.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to provide the user interface thread affinity that some applications require.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a Windows Forms application may be registered as a singleton service object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, all calls into the service must run on the Windows Forms thread.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default case, in which <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.UseSynchronizationContext%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, synchronizes all calls to the service to run on the user interface thread.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the thread used is the current synchronization thread when <ph id="ph1">&lt;xref:System.ServiceModel.DuplexChannelFactory%601.CreateChannel%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.DuplexClientBase%601.CreateChannel%2A?displayProperty=fullName&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of an Windows Forms application, this means that these calls should occur after a call to the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if all calls to the service must run on the thread specified by the <ph id="ph2">&lt;xref href="System.Threading.SynchronizationContext"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies whether the system or the application enforces SOAP <ph id="ph1">`MustUnderstand`</ph> header processing.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute.ValidateMustUnderstand%2A&gt;</ph> property to turn off the enforced validation of arriving message headers.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>In normal execution, message headers are compared against the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.UnderstoodHeaders%2A&gt;</ph> property to confirm that arriving headers are explicitly handled by the callback object runtime.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set this to <ph id="ph1">`false`</ph> to disable this checking.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>When set to <ph id="ph1">`false`</ph>, the application must check for headers marked with MustUnderstand="true" and return a fault if one or more of them were not understood.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful when the callback is supposed to accept any incoming SOAP messages (for example, when using typed or untyped messages) and perform custom header processing.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the system is to perform SOAP header <ph id="ph2">`MustUnderstand`</ph> processing; otherwise <ph id="ph3">`false`</ph>, which indicates that the application performs this processing.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Configures the binding elements to support the callback behavior.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The collection of binding parameters that are configured.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Configures the client runtime to support the callback object.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The endpoint configured by the attribute.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Implementation of the <ph id="ph1">&lt;xref href="System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This implementation has no effect.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The endpoint to be modified.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Validates the endpoint description prior to building the runtime.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The endpoint to be validated.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>