<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b568b677909a7581e8190de71595f314c5b2501</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.CodeDom.CodeTypeReference.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29087ef7af2baea6795e581e368e23998a687f60</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">138b5821c5ebf93e436de922d9406922f462fd9f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a reference to a type.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object is used to represent a type for CodeDOM objects.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When CodeDOM types have a <ph id="ph1">`Type`</ph> property, it is of type <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=fullName&gt;</ph> property is a <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> that represents a field's data type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> can be initialized with a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object or a string.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is generally recommended to use a <ph id="ph1">&lt;xref:System.Type&gt;</ph> to do this, although it may not always be possible.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If initializing an instance of this class with a string, it is strongly recommended to always use fully qualified types, such as "System.Console" instead of just "Console", because not all languages support importing namespaces.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Array types can be specified by either passing in a type object for an array or using one of the constructors that accept rank as a parameter.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property specifies the name of the type to reference.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For references to array types, the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt;</ph> property indicates the type of the elements of the array, and the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> property indicates the number of dimensions in the array.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an empty <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this constructor, set properties to establish the type reference.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> class using the specified code type parameter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeParameter"&gt;&lt;/xref&gt;</ph> that represents the type of the type parameter.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> class using the specified type name.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`typeName`</ph> parameter references a generic type, it must follow the syntax conventions for generic types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the reflection signature for a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> type, where <ph id="ph2">`K`</ph> is a string and <ph id="ph3">`V`</ph> is a <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of integers, is represented by reflection as the following (with the assembly information removed): <ph id="ph5">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use square brackets ([]) and not the C# angle brackets (&lt;&gt;) to delimit generic parameters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid the possibility of making a mistake in specifying the syntax, consider using the constructor that takes a type as a parameter instead of a string.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The name of the type to reference.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> class using the specified type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to reference.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> class using the specified array type and rank.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor can be used to construct arrays of arrays by nesting <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> that indicates the type of the array.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The number of dimensions in the array.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> class using the specified type name and type arguments.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name of the type to reference.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> class using the specified type name and code type reference option.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The name of the type to reference.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The code type reference option, one of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> class using the specified array type name and rank.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The name of the type of the elements of the array.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The number of dimensions of the array.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> class using the specified type and code type reference.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to reference.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The code type reference option, one of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets or sets the type of the elements in the array.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is disregarded unless the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> property is greater than or equal to 1.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> that indicates the type of the array elements.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets or sets the array rank of the array.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The number of dimensions of the array.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the type being referenced.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the name of the type unless it is an array type, in which case it is the array element type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the property may be misleading.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains just the type name with any array adornments or generic type arguments removed, not the base or parent type as might be expected.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> value for <ph id="ph2">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph> is <ph id="ph3">``System.Collections.Generic.Dictionary`2``</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Representation of Generic Types</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information in this section is intended for CodeDom provider developers and only applies to CLS-compliant languages.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value can contain generic types.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generic types are formatted with the name of the type followed by a grave accent ("`") followed by a count of the generic type arguments.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generic type arguments can be found in the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The values returned by <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> and the associated <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> contain the same content as the value of the type returned by reflection.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a constructed <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> where <ph id="ph2">`K`</ph> is a string and <ph id="ph3">`V`</ph> is a constructed <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of integers is represented by reflection as the following (with the assembly information removed):</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Recursively parsing the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property from the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> yields the same strings as the reflection representation above:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the parent <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> returns the following:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the first <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object in the <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection returns the following:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the second <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object in the <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection returns the following:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object for <ph id="ph3">``System.Collections.Generic.List`1``</ph> returns the following:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type argument count should be used when parsing the associated <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common practice is to remove the type argument count from the generated code, but the practice is compiler specific.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is important to note that the type argument count can be found within a nested type name, in which case it is followed by a plus sign ("+").</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>When creating a generic <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>, the recommended practice is to specify the type arguments as <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objects or use the constructor that takes a <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use of the constructor that creates a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> from a string can lead to undiscoverable type-argument errors.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The name of the type being referenced.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Gets or sets the code type reference option.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the type arguments for the current generic type reference.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property is a collection of type references to be substituted for the type parameter references of the current generic type.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection contains all the type arguments for all nested types.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;&lt;/xref&gt;</ph> containing the type arguments for the current <ph id="ph2">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>