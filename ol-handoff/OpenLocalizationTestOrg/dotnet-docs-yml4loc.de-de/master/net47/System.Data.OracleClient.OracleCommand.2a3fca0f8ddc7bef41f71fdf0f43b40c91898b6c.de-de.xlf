<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbad78f93743f8937eeec082f08760f612865772</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Data.OracleClient.OracleCommand.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce092275f9852b41fda47fec825b60a868706de3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5022ff68f96089167fddf3ac76189d0922ae7cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an SQL statement or stored procedure to execute against a database.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type is deprecated and will be removed in a future version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Oracle and ADO.NET<ept id="p1">](~/docs/framework/data/adonet/oracle-and-adonet.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> class provides the following methods for executing commands against a data source:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Item</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Executes commands that return rows.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Executes an SQL statement against the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt;</ph> and returns the number of rows affected.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Executes commands such as SQL INSERT, DELETE, UPDATE, and SET statements.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieves a single value (for example, an aggregate value) from a database as a .NET Framework data type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieves a single value (for example, an aggregate value) from a database as an Oracle-specific data type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can reset the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> property and reuse the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If execution of the command results in a fatal <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleException&gt;</ph>, the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleConnection&gt;</ph> may close.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the user can reopen the connection and continue.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the <bpt id="p1">**</bpt>Command<ept id="p1">**</ept> object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> object does not support a <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting a command timeout has no effect and the value returned is always zero.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base constructor initializes all fields to their default values.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initial Value</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>empty string ("")</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>null</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> class with the text of the query.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The text of the query.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> class with the text of the query and an <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleConnection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The text of the query.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleConnection"&gt;&lt;/xref&gt;</ph> object that represents the connection to a database.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> class with the text of the query, an <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleConnection"&gt;&lt;/xref&gt;</ph> object, and an <ph id="ph3">&lt;xref href="System.Data.OracleClient.OracleTransaction"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows initial property values for an instance of this implementation of the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initial Value</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>A new <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleConnection&gt;</ph> that is the value for the <ph id="ph2">`connection`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change the value for any of these parameters by setting the related property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The text of the query.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleConnection"&gt;&lt;/xref&gt;</ph> object that represents the connection to a database.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleTransaction"&gt;&lt;/xref&gt;</ph> in which the <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> executes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Attempts to cancel the execution of an <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is nothing to cancel, nothing happens.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if there is a command in process, and the attempt to cancel fails, no exception is generated.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Creates a copy of this <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object in which all property values are the same as the original.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets or sets the SQL statement or stored procedure to execute against the database.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;</ph> property is set to <ph id="ph2">`StoredProcedure`</ph>, the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> property should be set to the name of the stored procedure.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user may be required to use escape character syntax if the stored procedure name contains any special characters.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command executes this stored procedure when you call one of the Execute methods.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> of <ph id="ph2">`CommandType.Text`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, named parameters must be used.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using named parameters in an SQL statement called by an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> of <ph id="ph2">`CommandType.Text`</ph>, you must precede the parameter name with a colon (:).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleParameter&gt;</ph> objects to the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.Parameters%2A&gt;</ph> property), do not precede the named parameter with a colon (:).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework Data Provider for Oracle supplies the colon automatically.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The SQL statement or stored procedure to execute.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The default value is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> is generated if the assigned <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A&gt;</ph> property value is less than 0.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The time (in seconds) to wait for the command to execute.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The default value is 30 seconds.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating how the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.CommandText"&gt;&lt;/xref&gt;</ph> property is interpreted.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;</ph> property is set to <ph id="ph2">`StoredProcedure`</ph>, you should set the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> property to the full Oracle call syntax.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command then executes this stored procedure when you call one of the Execute methods (for example, <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> properties cannot be set if the current connection is performing an execute or fetch operation.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> of <ph id="ph2">`CommandType.Text`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, named parameters must be used.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using named parameters in an SQL statement called by an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> of <ph id="ph2">`CommandType.Text`</ph>, you must precede the parameter name with a colon (:).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleParameter&gt;</ph> objects to the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.Parameters%2A&gt;</ph> property), do not precede the named parameter with a colon (:).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework Data Provider for Oracle supplies the colon automatically.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.CommandType"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Text`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The value was not a valid <ph id="ph1">&lt;xref href="System.Data.CommandType"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleConnection"&gt;&lt;/xref&gt;</ph> used by this instance of the <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> properties if the current connection is performing an execute or fetch operation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt;</ph> while a transaction is in progress and the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.Transaction%2A&gt;</ph> property is not null, an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> is generated.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt;</ph> after the transaction has been committed or rolled back, and the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.Transaction%2A&gt;</ph> property is not null, the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.Transaction%2A&gt;</ph> property is then set to a null value.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The connection to a data source.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The default is a null value.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.Connection"&gt;&lt;/xref&gt;</ph> property was changed while a transaction was in progress.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Creates a new instance of an <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleParameter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.CreateParameter%2A&gt;</ph> method is a strongly-typed version of <ph id="ph2">&lt;xref:System.Data.IDbCommand.CreateParameter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleParameter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the command object should be visible in a customized interface control.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph>, if the command object should be visible in a control; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Executes an SQL statement against the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.Connection"&gt;&lt;/xref&gt;</ph> and returns the number of rows affected.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A&gt;</ph> to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>, by executing UPDATE, INSERT, or DELETE statements.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A&gt;</ph> does not return any rows, any output parameters or return values mapped to parameters are populated with data.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>For CREATE TABLE and DROP TABLE statements, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other types of statements, the return value is -1.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a rollback occurs, the return value is also -1.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For CREATE TABLE and DROP TABLE statements, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For all other types of statements, the return value is -1.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The connection does not exist.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The connection is not open.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Executes an SQL statement against the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.Connection"&gt;&lt;/xref&gt;</ph> and returns the number of rows affected.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A&gt;</ph> to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>, by executing UPDATE, INSERT, or DELETE statements.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A&gt;</ph> differs from <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A&gt;</ph> in that it returns <ph id="ph3">`rowid`</ph> as an output parameter if you are executing an INSERT, DELETE, or UPDATE statement that affects exactly one row.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows you to uniquely identify a row in the Oracle database, which can allow you to increase performance in subsequent, related queries.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A&gt;</ph> does not return any rows, any output parameters or return values mapped to parameters are populated with data.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A base64 string representation of the actual row ID in the server.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For CREATE TABLE and DROP TABLE statements, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For all other types of statements, the return value is -1.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The connection does not exist.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The connection is not open.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Executes the query, and returns the first column of the first row in the result set returned by the query as an Oracle-specific data type.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Extra columns or rows are ignored.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar%2A&gt;</ph> method to retrieve a single value (for example, an aggregate value) from a database.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>This requires less code than using the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;</ph> method, and then performing the operations necessary to generate the single value from the data returned by an <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>A typical <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar%2A&gt;</ph> query can be formatted as in the following C# example:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The first column of the first row in the result set as an Oracle-specific data type, or a null reference if the result is a <ph id="ph1">`REF CURSOR`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Sends the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.CommandText"&gt;&lt;/xref&gt;</ph> to the <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommand.Connection"&gt;&lt;/xref&gt;</ph> and builds an <ph id="ph3">&lt;xref href="System.Data.OracleClient.OracleDataReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;</ph> property is set to <ph id="ph2">`StoredProcedure`</ph>, the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> property should be set to the name of the stored procedure.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command then executes this stored procedure when you call <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>More than one <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> can be open at any given time.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleDataReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Sends the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.CommandText"&gt;&lt;/xref&gt;</ph> to the <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommand.Connection"&gt;&lt;/xref&gt;</ph>, and builds an <ph id="ph3">&lt;xref href="System.Data.OracleClient.OracleDataReader"&gt;&lt;/xref&gt;</ph> using one of the <ph id="ph4">&lt;xref href="System.Data.CommandBehavior"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you expect your SQL statement to return only a single row, specifying <ph id="ph1">`SingleRow`</ph> as the <ph id="ph2">&lt;xref:System.Data.CommandBehavior&gt;</ph> value may improve application performance.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;</ph> property is set to <ph id="ph2">`StoredProcedure`</ph>, the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> property should be set to the name of the stored procedure.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command then executes this stored procedure when you call <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> supports a special mode that enables large binary values to be read efficiently.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">`SequentialAccess`</ph> setting for <ph id="ph2">&lt;xref:System.Data.CommandBehavior&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>More than one <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> can be open at any given time.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.CommandBehavior"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleDataReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Executes the query, and returns the first column of the first row in the result set returned by the query as a .NET Framework data type.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Extra columns or rows are ignored.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A&gt;</ph> method to retrieve a single value (for example, an aggregate value) from a database.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This requires less code than using the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;</ph> method, and then performing the operations necessary to generate the single value from the data returned by an <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>A typical <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A&gt;</ph> query can be formatted as in the following C# example:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The first column of the first row in the result set as a .NET Framework data type, or a null reference if the result set is empty or the result is a <ph id="ph1">`REF CURSOR`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleParameterCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;</ph> property is set to <ph id="ph2">`StoredProcedure`</ph>, the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> property should be set to the name of the stored procedure.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user may be required to use escape character syntax if the stored procedure name contains any special characters.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command executes this stored procedure when you call one of the Execute methods.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> of <ph id="ph2">`CommandType.Text`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, named parameters must be used.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using named parameters in an SQL statement called by an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> of <ph id="ph2">`CommandType.Text`</ph>, you must precede the parameter name with a colon (:).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleParameter&gt;</ph> objects to the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.Parameters%2A&gt;</ph> property), do not precede the named parameter with a colon (:).</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework Data Provider for Oracle supplies the colon automatically.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The parameters of the SQL statement or stored procedure.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The default is an empty collection.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Creates a prepared (or compiled) version of the command at the data source.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before you call <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.Prepare%2A&gt;</ph>, specify the data type of each parameter in the statement to be prepared.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.Connection"&gt;&lt;/xref&gt;</ph> is not set.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.Connection"&gt;&lt;/xref&gt;</ph> is not <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleConnection.Open"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.CommandTimeout"&gt;&lt;/xref&gt;</ph> property to the default value.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value of the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A&gt;</ph> is 30 seconds.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleTransaction"&gt;&lt;/xref&gt;</ph> within which the <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> executes.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.Transaction%2A&gt;</ph> property if it is already set to a specific value, and the command is in the process of executing.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set the transaction property to an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleTransaction&gt;</ph> object that is not connected to the same <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleConnection&gt;</ph> as the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> object, an exception will be thrown the next time you attempt to execute a statement.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleTransaction"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The default is a null value.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies how the <ph id="ph1">`Update`</ph> method should apply command results to the <ph id="ph2">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default <ph id="ph1">&lt;xref:System.Data.UpdateRowSource&gt;</ph> value is <ph id="ph2">`Both`</ph> unless the command is automatically generated (as in the case of the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph>), in which case the default is <ph id="ph4">`None`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using the <ph id="ph1">&lt;xref:System.Data.UpdateRowSource&gt;</ph> property, see <bpt id="p1">[</bpt>DataAdapter Parameters<ept id="p1">](~/docs/framework/data/adonet/dataadapter-parameters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.UpdateRowSource"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The value entered was not one of the <ph id="ph1">&lt;xref href="System.Data.UpdateRowSource"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>