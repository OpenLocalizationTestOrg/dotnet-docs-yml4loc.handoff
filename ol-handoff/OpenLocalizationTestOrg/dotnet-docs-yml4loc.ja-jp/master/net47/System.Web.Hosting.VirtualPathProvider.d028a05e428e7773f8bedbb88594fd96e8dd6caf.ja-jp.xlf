<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45a7413915150722b69e4ff78bb9311b50533371</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Web.Hosting.VirtualPathProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbdab4f6bfe9a6043aa1701f7c79c5d7cfbbba9c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eeac9738bd0b6c5f64af306af7a86afd7fe6440f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a set of methods that enable a Web application to retrieve resources from a virtual file system.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> class provides a set of methods for implementing a virtual file system for a Web application.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a virtual file system, the files and directories are managed by a data store other than the file system provided by the server's operating system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use a virtual file system to store content in a SQL Server database.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can store any file that is processed on request in a virtual file system.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>ASP.NET pages, master pages, user controls, and other objects.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Standard Web pages with extensions such as .htm and .jpg.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any custom extension mapped to a <ph id="ph1">&lt;xref:System.Web.Compilation.BuildProvider&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any named theme in the <ph id="ph1">`App_Theme`</ph> folder.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot store ASP.NET application folders or files that generate application-level assemblies in a virtual file system.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Global.asax file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Web.config files.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Site map data files used by the <ph id="ph1">&lt;xref:System.Web.XmlSiteMapProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Directories that contain application assemblies or that generate application assemblies: <ph id="ph1">`Bin`</ph>, <ph id="ph2">`App_Code`</ph>, <ph id="ph3">`App_GlobalResources`</ph>, any <ph id="ph4">`App_LocalResources`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application data folder, <ph id="ph1">`App_Data`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a Web site is precompiled for deployment, content provided by a <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance is not compiled, and no <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instances are used by the precompiled site.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Registering a VirtualPathProvider</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance should be registered with the ASP.NET compilation system by using the <ph id="ph2">&lt;xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=fullName&gt;</ph> method before any page parsing or compilation is performed by the Web application.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, a <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance is registered in an <ph id="ph2">`AppInitialize`</ph> method defined in the <ph id="ph3">`App_Code`</ph> directory, or during the <ph id="ph4">`Application_Start`</ph> event in the <ph id="ph5">`Global.asax`</ph> file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of registering a <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance in an <ph id="ph2">`AppInitialize`</ph> method, see the Example section.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can register a <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance during other events, but pages compiled and cached before the <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance is registered will not be invalidated, even if the new <ph id="ph3">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance would now provide the source for the previously compiled page.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes the class for use by an inherited class instance.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This constructor can be called only by an inherited class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>When overriding the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A&gt;</ph> constructor, defer any initialization that must occur after the <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> object is registered to the <ph id="ph3">&lt;xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Combines a base path with a relative path to return a complete path to a virtual resource.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths%2A&gt;</ph> method to inspect the contents of a relative path to a virtual resource and perform any modifications required.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation combines the <ph id="ph1">`basePath`</ph> and <ph id="ph2">`relativePath`</ph> parameters according to standard ASP.NET path processing.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The base path for the application.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The path to the virtual resource, relative to the base path.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The complete path to a virtual resource.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a directory exists in the virtual file system.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A&gt;</ph> method to indicate to the compilation system that the resource represented by <ph id="ph2">`virtualDir`</ph> exists in the virtual file system provided by this <ph id="ph3">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your custom <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> class does not support directories, the <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A&gt;</ph> method should return <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your virtual file system will contain themes for the Web site (by creating a virtual <ph id="ph1">`App_Themes`</ph> directory), your custom <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> class must support directories.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The path to the virtual directory.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the directory exists in the virtual file system; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a file exists in the virtual file system.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A&gt;</ph> method to indicate to the compilation system that the resource represented by <ph id="ph2">`virtualPath`</ph> exists in the virtual file system provided by this <ph id="ph3">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The path to the virtual file.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the file exists in the virtual file system; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Creates a cache dependency based on the specified virtual paths.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A&gt;</ph> method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cache virtual resources for later use you must override either the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The path to the primary virtual resource.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An array of paths to other resources required by the primary virtual resource.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The UTC time at which the virtual resources were read.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Web.Caching.CacheDependency"&gt;&lt;/xref&gt;</ph> object for the specified virtual resources.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Returns a cache key to use for the specified virtual path.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A&gt;</ph> method to provide a custom cache key for virtual resources.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not override the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A&gt;</ph> method, the virtual path is used for the cache key.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The path to the virtual resource.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A cache key for the specified virtual resource.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets a virtual directory from the virtual file system.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A&gt;</ph> method returns a descendent of the <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualDirectory&gt;</ph> class that contains the file and directories contained in the directory specified in the <ph id="ph3">`virtualDir`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your custom <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> class does not support directories, the <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A&gt;</ph> method should return <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your virtual file system will contain themes for the Web site (by creating a virtual <ph id="ph1">`App_Themes`</ph> directory), your custom <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> class must support directories.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The path to the virtual directory.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A descendent of the <ph id="ph1">&lt;xref href="System.Web.Hosting.VirtualDirectory"&gt;&lt;/xref&gt;</ph> class that represents a directory in the virtual file system.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets a virtual file from the virtual file system.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A&gt;</ph> method returns a descendent of the <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualFile&gt;</ph> class that represents the file specified by the <ph id="ph3">`virtualPath`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The path to the virtual file.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A descendent of the <ph id="ph1">&lt;xref href="System.Web.Hosting.VirtualFile"&gt;&lt;/xref&gt;</ph> class that represents a file in the virtual file system.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns a hash of the specified virtual paths.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A&gt;</ph> method to provide a hash of the dependencies for a virtual-file-system resource.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The path to the primary virtual resource.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An array of paths to other virtual resources required by the primary virtual resource.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A hash of the specified virtual paths.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">&lt;xref href="System.Web.Hosting.VirtualPathProvider"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A&gt;</ph> method is called after the provider is registered with the ASP.NET compilation system.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A&gt;</ph> method is used to provide any initialization required after the <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance is placed into the environment the application occupies.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Gives the <ph id="ph1">&lt;xref href="System.Web.Hosting.VirtualPathProvider"&gt;&lt;/xref&gt;</ph> object an infinite lifetime by preventing a lease from being created.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides the <ph id="ph1">&lt;xref:System.MarshalByRefObject.InitializeLifetimeService%2A&gt;</ph> method in its base class.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>It always returns <ph id="ph1">`null`</ph> and thereby prevents a lease from being created that would limit the <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> object's lifetime.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Always <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Returns a stream from a virtual file.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.OpenFile%2A&gt;</ph> method is a convenience method that enables you to get a stream from a virtual file without creating a <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The path to the virtual file.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A read-only <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> object for the specified virtual file or resource.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Gets a reference to a previously registered <ph id="ph1">&lt;xref href="System.Web.Hosting.VirtualPathProvider"&gt;&lt;/xref&gt;</ph> object in the compilation system.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> object is registered with the ASP.NET compilation system, it is added to a chain of providers.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider.Previous%2A&gt;</ph> property to hand processing off to the previous <ph id="ph2">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> object in the chain if the requested path is not provided by this <ph id="ph3">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The chain of path providers always ends with the default ASP.NET provider, which serves files from the file system.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The next <ph id="ph1">&lt;xref href="System.Web.Hosting.VirtualPathProvider"&gt;&lt;/xref&gt;</ph> object in the compilation system.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>