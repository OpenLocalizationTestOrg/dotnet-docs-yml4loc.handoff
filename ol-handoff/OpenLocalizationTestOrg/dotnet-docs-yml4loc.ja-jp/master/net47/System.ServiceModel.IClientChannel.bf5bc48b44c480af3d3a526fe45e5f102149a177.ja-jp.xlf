<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">802528053022bd611c6fbd2936c8572715695352</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.IClientChannel.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">530d9c2a27ff1a1b9beb137b5f28367243678008</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3fb7ba4a4a853d3acdadf58929c4f01fa087346</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the behavior of outbound request and request/reply channels used by client applications.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> interface defines the operations supported by all channels returned by a call to <ph id="ph2">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> methods and properties to inspect and modify the outbound typed channel.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> exports both a <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> class and a service contract interface by creating a contract interface that inherits from both the target service contract and <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph>, enabling you to use the extended contract as both the proxy to the service and to access the client channel.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>WCF Client Architecture<ept id="p1">](~/docs/framework/wcf/feature-details/client-architecture.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For examples of its appearance in generated client code files, see <bpt id="p1">[</bpt>Understanding Generated Client Code<ept id="p1">](~/docs/framework/wcf/feature-details/understanding-generated-client-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether <ph id="ph1">&lt;xref href="System.ServiceModel.IClientChannel.DisplayInitializationUI"&gt;&lt;/xref&gt;</ph> attempts to call the <ph id="ph2">&lt;xref href="System.ServiceModel.Dispatcher.IInteractiveChannelInitializer"&gt;&lt;/xref&gt;</ph> objects in the <ph id="ph3">&lt;xref href="System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers"&gt;&lt;/xref&gt;</ph> property or throws if that collection is not empty.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set this to <ph id="ph1">`false`</ph> if you want to throw an exception rather than display an initialization dialog.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful in a middle-tier scenario in which you want to guarantee that no dialog appears even if the application is configured to display one.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Accessing Services Using a WCF Client<ept id="p1">](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept> and <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> is permitted to invoke interactive channel initializers; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An asynchronous call to begin using a user interface to obtain credential information.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method to cause any interactive channel initialization (for example, CardSpace card selection) to occur.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This happens automatically if the channel is used without explicitly calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName&gt;</ph>, so for many applications this call is optional.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user takes a long time in the selection process, the operation that automatically called this may time out.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent this, call <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.IClientChannel.EndDisplayInitializationUI%2A&gt;</ph> explicitly.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>These operations do not time out and allow you to control exactly where in your application this dialog comes up.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method only brings up a dialog if the application is configured to do so.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application is not configured to use CardSpace or another interactive channel initializer, this call returns without any action.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method explicitly, you must also explicitly open the channel before using it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The method that is called when this method completes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Information about the state of the channel.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> to use to call back when processing has completed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether a call was done to a user interface to obtain credential information.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If operations are called on an <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> without calling <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName&gt;</ph>, these methods are called automatically.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Accessing Services Using a WCF Client<ept id="p1">](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept> and <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.ServiceModel.IClientChannel.DisplayInitializationUI"&gt;&lt;/xref&gt;</ph> method was called (or the <ph id="ph3">&lt;xref href="System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> and <ph id="ph4">&lt;xref href="System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)"&gt;&lt;/xref&gt;</ph> methods; otherwise, <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A call to a user interface to obtain credential information.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method to cause any interactive channel initialization (for example, CardSpace card selection) to occur.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This happens automatically if the channel is used without explicitly calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName&gt;</ph>, so for many applications this call is optional.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user takes a long time in the selection process, the operation that automatically called this may time out.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent this, call <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.IClientChannel.EndDisplayInitializationUI%2A&gt;</ph> explicitly.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>These operations do not time out and allow you to control exactly where in your application this dialog comes up.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method only brings up a dialog if the application is configured to do so.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application is not configured to use CardSpace or another interactive channel initializer, this call returns without any action.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method explicitly, you must also explicitly open the channel before using it.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Accessing Services Using a WCF Client<ept id="p1">](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept> and <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Called when the call to <ph id="ph1">&lt;xref href="System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> has finished.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is a reserved event.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the URI that contains the transport address to which messages are sent on the client channel.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> serves as both the ultimate destination and the physical address if a <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel.Via%2A&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel.Via%2A&gt;</ph> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value can be set from a configuration file using the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ClientViaBehavior?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that contains the transport address to which messages are sent on the channel.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>