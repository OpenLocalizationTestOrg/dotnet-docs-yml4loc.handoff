<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">970c2204878bb3e14411214f7011d057c5884768</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Console.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">935409224898db357419ada239a5d34154f6af34</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">424443a763ad9554f4261c4597844f802df4da60</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the standard input, output, and error streams for console applications.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To view the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id="p1">[</bpt>instructions<ept id="p1">](http://referencesource.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console&gt;</ph> class provides basic support for applications that read characters from, and write characters to, the console.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about developing with the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class, see the following sections:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Console I/O Streams<ept id="p1">](#Streams)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Screen Buffer and Console Window<ept id="p1">](#Buffer)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Unicode Support for the Console<ept id="p1">](#Unicode)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Common Operations<ept id="p1">](#Operations)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>.NET Core Notes<ept id="p1">](#Core)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Console I/O Streams</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>These streams are presented to your application as the values of the <ph id="ph1">&lt;xref:System.Console.In%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=fullName&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the value of the <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph> property is a <ph id="ph2">&lt;xref:System.IO.TextReader?displayProperty=fullName&gt;</ph> object that represents the keyboard, and the values of the <ph id="ph3">&lt;xref:System.Console.Out%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Console.Error%2A&gt;</ph> properties are <ph id="ph5">&lt;xref:System.IO.TextWriter?displayProperty=fullName&gt;</ph> objects that represent a console window.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To redirect the standard input, standard output, or standard error stream, call the <ph id="ph1">&lt;xref:System.Console.SetIn%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.SetOut%2A?displayProperty=fullName&gt;</ph>, or <ph id="ph3">&lt;xref:System.Console.SetError%2A?displayProperty=fullName&gt;</ph> method, respectively.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that methods that are ordinarily asynchronous, such as <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName&gt;</ph>, execute synchronously if the object represents a console stream.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class to display output in unattended applications, such as server applications.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to methods such as <ph id="ph1">&lt;xref:System.Console.Write%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> have no effect in GUI applications.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Console&gt;</ph> class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Program your application to catch <ph id="ph1">&lt;xref:System.IO.IOException?displayProperty=fullName&gt;</ph> exceptions if you redirect a standard stream.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.IsInputRedirected%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Console.IsErrorRedirected%2A&gt;</ph> properties to determine whether a standard stream is redirected before performing an operation that throws an <ph id="ph4">&lt;xref:System.IO.IOException?displayProperty=fullName&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is sometimes useful to explicitly call the members of the stream objects represented by the <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Console.Error%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, by default, the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A?displayProperty=fullName&gt;</ph> method reads input from the standard input stream.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed ("\r\n").</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can solve this problem by setting the <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Console.Error%2A&gt;</ph> property to another line termination string.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then explicitly call the <ph id="ph1">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph> method of the error output stream object, as in the following C# statement:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Screen Buffer and Console Window</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two closely related features of the console are the screen buffer and the console window.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each character has its own foreground color, and each character cell has its own background color.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The screen buffer is viewed through a rectangular region called the console window.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The console window is another attribute of the console; it is not the console itself, which is an operating system window.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cursor indicates the screen buffer position where text is currently read or written.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cursor can be hidden or made visible, and its height can be changed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the cursor is visible, the console window position is moved automatically so the cursor is always in view.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum value for the row and column indexes is <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unicode Support for the Console</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, the console reads input and writes output by using the current console code page, which the system locale defines by default.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this problem.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Console.Class#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/unicode1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Console.Class#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/unicode1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to supporting code pages, the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class supports UTF-8 encoding with the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the .NET Framework 4.5, the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class also supports UTF-16 encoding with the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>To display Unicode characters to the console.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>you set the <ph id="ph1">&lt;xref:System.Console.OutputEncoding%2A&gt;</ph> property to either <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> or  <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows how you can programmatically change the font from a raster font to Lucida Console.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Console.Class.Unsafe#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class.unsafe/cs/setfont1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Console.Class.Unsafe#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class.unsafe/vb/setfont1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, TrueType fonts can display only a subset of glyphs.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>To see which characters a particular font supports, open the <bpt id="p1">**</bpt>Fonts<ept id="p1">**</ept> applet in Control Panel, choose the <bpt id="p2">**</bpt>Find a character<ept id="p2">**</ept> option, and choose the font whose character set you'd like to examine in the <bpt id="p3">**</bpt>Font<ept id="p3">**</ept> list of the <bpt id="p4">**</bpt>Character Map<ept id="p4">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows uses font linking to display glyphs that are not available in a particular font.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about font linking to display additional character sets, see <bpt id="p1">[</bpt>Globalization Step-by-Step: Fonts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=229111)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Linked fonts are defined in the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink subkey of the registry.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each member of the array defines a linked font and takes the form <bpt id="p1">*</bpt>font-file-name<ept id="p1">*</ept>,<bpt id="p2">*</bpt>font-name<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Console.Class#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/fontlink1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Console.Class#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/fontlink1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unicode support for the console has the following limitations:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>UTF-32 encoding is not supported.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> classes, respectively.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bidirectional output is not supported.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Display of characters in complex scripts is not supported.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>To work around this limitation, you can normalize the string to be displayed by calling the <ph id="ph1">&lt;xref:System.String.Normalize%2A?displayProperty=fullName&gt;</ph> method before sending output to the console.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <ph id="ph1">&lt;xref:System.String.Normalize%2A?displayProperty=fullName&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Console.Class#5<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/normalize1.cs#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Console.Class#5<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/normalize1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a font provides a glyph for a code point in the private use area, that glyph will be displayed.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because characters in the private use area are application-specific, this may not be the expected glyph.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example displays a range of Unicode characters to the console.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (<ph id="ph1">`false`</ph>) or UTF-16 encoding (<ph id="ph2">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>It assumes that the console is using a TrueType font.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Console.Class#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/example3.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Console.Class#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/example3.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common Operations</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console&gt;</ph> class contains the following methods for reading console input and writing console output:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overloads of the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method read an individual character.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method reads an entire line of input.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.Write%2A&gt;</ph> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>A parallel set of <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method overloads output the same string as the <ph id="ph2">&lt;xref:System.Console.Write%2A&gt;</ph> overloads but also add a line termination string.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console&gt;</ph> class also contains methods and properties to perform the following operations:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get or set the size of the screen buffer.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> properties let you get or set the buffer height and width, respectively, and the <ph id="ph3">&lt;xref:System.Console.SetBufferSize%2A&gt;</ph> method lets you set the buffer size in a single method call.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get or set the size of the console window.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> properties let you get or set the window height and width, respectively, and the <ph id="ph3">&lt;xref:System.Console.SetWindowSize%2A&gt;</ph> method lets you set the window size in a single method call.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get or set the size of the cursor.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.CursorSize%2A&gt;</ph> property specifies the height of the cursor in a character cell.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get or set the position of the console window relative to the screen buffer.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <ph id="ph3">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph> method lets you set these values in a single method call.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get or set the position of the cursor by getting or setting the <ph id="ph1">&lt;xref:System.Console.CursorTop%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.CursorLeft%2A&gt;</ph> properties, or set the position of the cursor by calling the <ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Move or clear data in the screen buffer by calling the <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Console.Clear%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get or set the foreground and background colors by using the <ph id="ph1">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> properties, or reset the background and foreground to their default colors by calling the <ph id="ph3">&lt;xref:System.Console.ResetColor%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Play the sound of a beep through the console speaker by calling the <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph> Notes</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework on the desktop, the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class uses the encoding returned by <ph id="ph2">`GetConsoleCP`</ph> and <ph id="ph3">`GetConsoleOutputCP`</ph>, which typically is a code page encoding.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, <ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph> may make only a limited subset of these encodings available.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Where this is the case, <ph id="ph1">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=fullName&gt;</ph> is used as the default encoding for the console.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your app depends on specific code page encodings, you can still make them available by doing the following <bpt id="p1">*</bpt>before<ept id="p1">*</ept> you call any <ph id="ph1">&lt;xref:System.Console&gt;</ph> methods:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieve the <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> object from the <ph id="ph2">&lt;xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass the <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=fullName&gt;</ph> method to make the additional encodings supported by the encoding provider available.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console&gt;</ph> class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any <ph id="ph2">&lt;xref:System.Console&gt;</ph> output methods.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Gets or sets the background color of the console.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>A change to the <ph id="ph1">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> property affects only output that is written to individual character cells after the background color is changed.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the background color of the console window as a whole, set the <ph id="ph1">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> property and call the <ph id="ph2">&lt;xref:System.Console.Clear%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example provides an illustration.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Console.BackgroundColor#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.backgroundcolor/cs/backgroundcolor1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Console.BackgroundColor#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.backgroundcolor/vb/backgroundcolor1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>A get operation for a Windows-based application, in which a console does not exist, returns <ph id="ph1">&lt;xref:System.ConsoleColor?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A value that specifies the background color of the console; that is, the color that appears behind each character.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The default is black.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The color specified in a set operation is not a valid member of <ph id="ph1">&lt;xref href="System.ConsoleColor"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Plays the sound of a beep through the console speaker.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> method is not supported on the 64-bit editions of Windows Vista and Windows XP.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> wraps a call to the Windows <bpt id="p1">[</bpt>Beep function<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with Windows 7, it depends on the default sound device.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Plays the sound of a beep of a specified frequency and duration through the console speaker.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> wraps a call to the Windows <bpt id="p1">[</bpt>Beep function<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with Windows 7, it depends on the default sound device.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> method is not supported on the 64-bit editions of Windows Vista and Windows XP.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The frequency of the beep, ranging from 37 to 32767 hertz.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The duration of the beep measured in milliseconds.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;frequency&lt;/code&gt;</ph> is less than 37 or more than 32767 hertz.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;duration&lt;/code&gt;</ph> is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This method was executed on a server, such as SQL Server, that does not permit access to the console.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Gets or sets the height of the buffer area.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> property defines the number of rows that are actually displayed in the console window at any particular time.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the number of rows actually written to the buffer exceeds the number of rows defined by the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <ph id="ph2">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> property and are located anywhere in the buffer.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a set operation decreases the value of the <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> property, the uppermost lines are removed.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The current height, in rows, of the buffer area.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The value in a set operation is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The value in a set operation is greater than or equal to <ph id="ph1">&lt;xref href="System.Int16.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The value in a set operation is less than <ph id="ph1">&lt;xref href="System.Console.WindowTop"&gt;&lt;/xref&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Gets or sets the width of the buffer area.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a set operation decreases the value of the <ph id="ph1">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> property, the rightmost columns are removed.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The current width, in columns, of the buffer area.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The value in a set operation is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The value in a set operation is greater than or equal to <ph id="ph1">&lt;xref href="System.Int16.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The value in a set operation is less than <ph id="ph1">&lt;xref href="System.Console.WindowLeft"&gt;&lt;/xref&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;xref href="System.Console.WindowWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.ConsoleModifiers.Control"&gt;&lt;/xref&gt;</ph> modifier key (Ctrl) and either the <ph id="ph2">&lt;xref href="System.ConsoleKey.C"&gt;&lt;/xref&gt;</ph> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is used in conjunction with <ph id="ph1">&lt;xref:System.ConsoleCancelEventHandler?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.ConsoleCancelEventArgs?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.CancelKeyPress&gt;</ph> event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user presses either Ctrl+C or Ctrl+Break, the <ph id="ph1">&lt;xref:System.Console.CancelKeyPress&gt;</ph> event is fired and the application's <ph id="ph2">&lt;xref:System.ConsoleCancelEventHandler&gt;</ph> event handler is executed.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event handler is passed a <ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs&gt;</ph> object that has two useful properties:</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.SpecialKey%2A&gt;</ph>, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <ph id="ph2">&lt;xref:System.ConsoleSpecialKey?displayProperty=fullName&gt;</ph>) or Ctrl+Break (the property value is <ph id="ph3">&lt;xref:System.ConsoleSpecialKey?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A&gt;</ph>, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, which causes program execution to terminate when the event handler exits.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing its property to <ph id="ph1">`true`</ph> specifies that the application should continue to execute.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application has simple requirements, you can use the <ph id="ph1">&lt;xref:System.Console.TreatControlCAsInput%2A&gt;</ph> property instead of this event.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>By setting this property to <ph id="ph1">`false`</ph>, you can ensure that your application always exits if the user presses Ctrl+C.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>By setting it to <ph id="ph1">`true`</ph>, you can ensure that pressing Ctrl+C will not terminate the application.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event handler for this event is executed on a thread pool thread.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if CAPS LOCK is turned on; <ph id="ph2">`false`</ph> if CAPS LOCK is turned off.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Clears the console buffer and corresponding console window of display information.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method is equivalent invoking the MS-DOS <ph id="ph2">`cls`</ph> command in the command prompt window.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to call the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method when a console application's output is redirected to a file throws a <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent this, always wrap a call to the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method in a <ph id="ph2">`try`</ph>…<ph id="ph3">`catch`</ph></source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>block.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Gets or sets the column position of the cursor within the buffer area.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The current position, in columns, of the cursor.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The value in a set operation is less than zero.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The value in a set operation is greater than or equal to <ph id="ph1">&lt;xref href="System.Console.BufferWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Gets or sets the height of the cursor within a character cell.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The size of the cursor expressed as a percentage of the height of a character cell.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The property value ranges from 1 to 100.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The value specified in a set operation is less than 1 or greater than 100.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Gets or sets the row position of the cursor within the buffer area.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The current position, in rows, of the cursor.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The value in a set operation is less than zero.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The value in a set operation is greater than or equal to <ph id="ph1">&lt;xref href="System.Console.BufferHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the cursor is visible.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the cursor is visible; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Gets the standard error output stream.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>This standard error stream is set to the console by default.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be set to another stream with the <ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the standard error stream is redirected, it can be reacquired by calling the <ph id="ph1">&lt;xref:System.Console.OpenStandardError%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>In console applications whose informational output is often redirected to a file, the standard error stream available through the <ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph> property can be used to display information to the console even if output is redirected.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example displays product tables for 10 numbers at a time starting with 1.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>After every set of 10 numbers, the <ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph> property is used to ask the user whether to display the next set.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Console.Error#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.error/cs/error1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Console.Error#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.error/vb/error1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> that represents the standard error output stream.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Gets or sets the foreground color of the console.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>A get operation for a Windows-based application, in which a console does not exist, returns <ph id="ph1">&lt;xref:System.ConsoleColor.Gray&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ConsoleColor"&gt;&lt;/xref&gt;</ph> that specifies the foreground color of the console; that is, the color of each character that is displayed.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The default is gray.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The color specified in a set operation is not a valid member of <ph id="ph1">&lt;xref href="System.ConsoleColor"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Gets the standard input stream.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is set to the standard input stream by default.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be set to another stream with the <ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read operations on the standard input stream execute synchronously.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, they block until the specified read operation has completed.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is true even if an asynchronous method, such as <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph>, is called on the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Console.In%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph> that represents the standard input stream.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Gets or sets the encoding the console uses to read input.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>The console uses the input encoding to translate keyboard input into a corresponding character.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>Different code pages include different special characters, typically customized for a language or a group of languages.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, a property get operation may return a cached value instead of the console's current input encoding.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can occur if the value of the <ph id="ph1">&lt;xref:System.Console.InputEncoding%2A&gt;</ph> property is modified by some means other than an assignment to the <ph id="ph2">&lt;xref:System.Console.InputEncoding%2A&gt;</ph> property, such as calling the Windows <ph id="ph3">`SetConsoleCP`</ph> function or using the <ph id="ph4">`chcp`</ph> command from a PowerShell script.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The encoding used to read console input.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The property value in a set operation is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>An error occurred during the execution of this operation.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Your application does not have permission to perform this operation.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if error output is redirected; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether input has been redirected from the standard input stream.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if input is redirected; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether output has been redirected from the standard output stream.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if output is redirected; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether a key press is available in the input stream.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is returned immediately; that is, the <ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property does not block input until a key press is available.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property in conjunction with only the <ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method, not the <ph id="ph3">&lt;xref:System.Console.Read%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Console.ReadLine%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a key press is available; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Standard input is redirected to a file instead of the keyboard.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Gets the largest possible number of console window rows, based on the current font and screen resolution.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The height of the largest possible console window measured in rows.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Gets the largest possible number of console window columns, based on the current font and screen resolution.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The width of the largest possible console window measured in columns.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Copies a specified source area of the screen buffer to a specified destination area.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, the source area is clipped to fit the current screen buffer.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> method copies the source area to the destination area.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the intersected portion of the source area is not filled.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The leftmost column of the source area.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The topmost row of the source area.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The number of columns in the source area.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The number of rows in the source area.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The leftmost column of the destination area.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The topmost row of the destination area.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>One or more of the parameters is less than zero.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceLeft&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;targetLeft&lt;/code&gt;</ph> is greater than or equal to <ph id="ph3">&lt;xref href="System.Console.BufferWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceTop&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;targetTop&lt;/code&gt;</ph> is greater than or equal to <ph id="ph3">&lt;xref href="System.Console.BufferHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceTop&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;sourceHeight&lt;/code&gt;</ph> is greater than or equal to <ph id="ph3">&lt;xref href="System.Console.BufferHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceLeft&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;sourceWidth&lt;/code&gt;</ph> is greater than or equal to <ph id="ph3">&lt;xref href="System.Console.BufferWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Copies a specified source area of the screen buffer to a specified destination area.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, the source area is clipped to fit the current screen buffer.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> method copies the source area to the destination area.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the destination area does not intersect the source area, the source area is filled with the character specified by <ph id="ph1">`sourceChar`</ph>, using the colors specified by <ph id="ph2">`sourceForeColor`</ph> and <ph id="ph3">`sourceBackColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the intersected portion of the source area is not filled.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> method performs no operation if <ph id="ph2">`sourceWidth`</ph> or <ph id="ph3">`sourceHeight`</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The leftmost column of the source area.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The topmost row of the source area.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The number of columns in the source area.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The number of rows in the source area.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The leftmost column of the destination area.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The topmost row of the destination area.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The character used to fill the source area.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The foreground color used to fill the source area.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The background color used to fill the source area.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>One or more of the parameters is less than zero.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceLeft&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;targetLeft&lt;/code&gt;</ph> is greater than or equal to <ph id="ph3">&lt;xref href="System.Console.BufferWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceTop&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;targetTop&lt;/code&gt;</ph> is greater than or equal to <ph id="ph3">&lt;xref href="System.Console.BufferHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceTop&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;sourceHeight&lt;/code&gt;</ph> is greater than or equal to <ph id="ph3">&lt;xref href="System.Console.BufferHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceLeft&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;sourceWidth&lt;/code&gt;</ph> is greater than or equal to <ph id="ph3">&lt;xref href="System.Console.BufferWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>One or both of the color parameters is not a member of the <ph id="ph1">&lt;xref href="System.ConsoleColor"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if NUM LOCK is turned on; <ph id="ph2">`false`</ph> if NUM LOCK is turned off.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Acquires the standard error stream.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to reacquire the standard error stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The standard error stream.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Acquires the standard error stream, which is set to a specified buffer size.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to reacquire the standard error stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The internal stream buffer size.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The standard error stream.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Acquires the standard input stream.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to reacquire the standard input stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The standard input stream.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Acquires the standard input stream, which is set to a specified buffer size.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to reacquire the standard output stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The internal stream buffer size.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The standard input stream.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Acquires the standard output stream.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to reacquire the standard output stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The standard output stream.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Acquires the standard output stream, which is set to a specified buffer size.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to reacquire the standard output stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The internal stream buffer size.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The standard output stream.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Gets the standard output stream.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is set to the standard output stream by default.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be set to another stream with the <ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that calls to <ph id="ph1">`Console.Out.WriteLine`</ph> methods are equivalent to calls to the corresponding <ph id="ph2">&lt;xref:System.Console.WriteLine%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> that represents the standard output stream.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Gets or sets the encoding the console uses to write output.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>The console uses the output encoding to translate characters written by an application into corresponding console display characters.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default code page that the console uses is determined by the system locale.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, a property get operation may return a cached value instead of the console's current output encoding.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can occur if the value of the <ph id="ph1">&lt;xref:System.Console.OutputEncoding%2A&gt;</ph> property is modified by some means other than an assignment to the <ph id="ph2">&lt;xref:System.Console.OutputEncoding%2A&gt;</ph> property, such as calling the Windows <ph id="ph3">`SetConsoleOutputCP`</ph> function.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The encoding used to write console output.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The property value in a set operation is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>An error occurred during the execution of this operation.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Your application does not have permission to perform this operation.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Reads the next character from the standard input stream.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph> method blocks its return while you type input characters; it terminates when you press the <ph id="ph2">&lt;xref:System.ConsoleKey.Enter&gt;</ph> key.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence).</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent calls to the <ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph> method retrieve your input one character at a time.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the final character is retrieved, <ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph> blocks its return again and the cycle repeats.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method, or the <ph id="ph2">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property and <ph id="ph3">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method are preferable to using the <ph id="ph4">&lt;xref:System.Console.Read%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the method does not return -1 unless you perform one of the following actions:</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>Simultaneously press the <ph id="ph1">&lt;xref:System.ConsoleModifiers.Control&gt;</ph> modifier key and <ph id="ph2">&lt;xref:System.ConsoleKey.Z&gt;</ph> console key (Ctrl+Z), which signals the end-of-file condition.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>Press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>Redirect the input stream to a source, such as a text file, that has an actual end-of-file character.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Obtains the next character or function key pressed by the user.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The pressed key is displayed in the console window.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method waits, that is, blocks on the thread issuing the <ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method, until a character or function key is pressed.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, pressing a modifier key by itself will not cause the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method to return.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on your application, you might want to use the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method in conjunction with the <ph id="ph2">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method reads from the keyboard even if the standard input is redirected to a file with the <ph id="ph2">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>An object that describes the <ph id="ph1">&lt;xref href="System.ConsoleKey"&gt;&lt;/xref&gt;</ph> constant and Unicode character, if any, that correspond to the pressed console key.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ConsoleKeyInfo"&gt;&lt;/xref&gt;</ph> object also describes, in a bitwise combination of <ph id="ph2">&lt;xref href="System.ConsoleModifiers"&gt;&lt;/xref&gt;</ph> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Console.In"&gt;&lt;/xref&gt;</ph> property is redirected from some stream other than the console.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Obtains the next character or function key pressed by the user.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The pressed key is optionally displayed in the console window.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method waits, that is, blocks on the thread issuing the <ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method, until a character or function key is pressed.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, pressing a modifier key by itself will not cause the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method to return.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`intercept`</ph> parameter is <ph id="ph2">`true`</ph>, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on your application, you might want to use the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method in conjunction with the <ph id="ph2">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method reads from the keyboard even if the standard input is redirected to a file with the <ph id="ph2">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Determines whether to display the pressed key in the console window.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to not display the pressed key; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>An object that describes the <ph id="ph1">&lt;xref href="System.ConsoleKey"&gt;&lt;/xref&gt;</ph> constant and Unicode character, if any, that correspond to the pressed console key.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ConsoleKeyInfo"&gt;&lt;/xref&gt;</ph> object also describes, in a bitwise combination of <ph id="ph2">&lt;xref href="System.ConsoleModifiers"&gt;&lt;/xref&gt;</ph> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Console.In"&gt;&lt;/xref&gt;</ph> property is redirected from some stream other than the console.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Reads the next line of characters from the standard input stream.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method reads a line from the standard input stream.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For the definition of a line, see the paragraph after the following list.) This means that:</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the standard input device is the keyboard, the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method blocks until the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>One of the most common uses of the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method is to pause program execution before clearing the console and displaying new information to it, or to prompt the user to press the Enter key before terminating the application.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Console.ReadLine#6<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/ReadLineSimple.cpp#6)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Console.ReadLine#6<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLineSimple.cs#6)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Console.ReadLine#6<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLineSimple.vb#6)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>If standard input is redirected to a file, the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method reads a line of text from a file.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following is a text file named ReadLine1.txt:</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method to read input that is redirected from a file.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>The read operation terminates when the  method returns <ph id="ph1">`null`</ph>, which indicates that no lines remain to be read.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Console.ReadLine#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine3.cs#3)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Console.ReadLine#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine3.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>to read the contents of the file and display them to the console.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned string does not contain the terminating character(s).</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the method reads input from a 256-character input buffer.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this includes the <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt;</ph> character(s), the method can read lines that contain up to 254 characters.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read longer lines, call the <ph id="ph1">&lt;xref:System.Console.OpenStandardInput%28System.Int32%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method executes synchronously.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it blocks until a line is read or the Ctrl+Z keyboard combination is pressed.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> object that represents the standard input stream and that has both a synchronous <ph id="ph3">&lt;xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName&gt;</ph> method and an asynchronous <ph id="ph4">&lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when used as the console's standard input stream, the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName&gt;</ph> executes synchronously rather than asynchronously and returns a <ph id="ph2">`Task&lt;String&gt;`</ph> only after the read operation has completed.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method throws an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, the reader's position in the underlying <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object is advanced by the number of characters the method was able to read, but the characters already read into the internal <ph id="ph3">&lt;xref:System.Console.ReadLine%2A&gt;</ph> buffer are discarded.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the initial position within the stream is unknown or the stream does not support seeking, the underlying <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> also needs to be reinitialized.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid such a situation and to produce robust code, you should use the <ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property and <ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method and store the read characters in a pre-allocated buffer.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables the user to prevent further keyboard input when the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method is called in a loop.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this scenario.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Console.ReadLine#1<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/readline2.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Console.ReadLine#1<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine2.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Console.ReadLine#1<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine2.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The next line of characters from the input stream, or <ph id="ph1">`null`</ph> if no more lines are available.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>There is insufficient memory to allocate a buffer for the returned string.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The number of characters in the next line of characters is greater than <ph id="ph1">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Sets the foreground and background console colors to their defaults.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>The foreground and background colors are restored to the colors that existed when the current process began.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Sets the height and width of the screen buffer area to the specified values.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>The width of the buffer area measured in columns.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The height of the buffer area measured in rows.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;height&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;width&lt;/code&gt;</ph> is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;height&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;width&lt;/code&gt;</ph> is greater than or equal to <ph id="ph3">&lt;xref href="System.Int16.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;width&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;xref href="System.Console.WindowLeft"&gt;&lt;/xref&gt;</ph><ph id="ph3"> + &lt;xref href="System.Console.WindowWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;height&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;xref href="System.Console.WindowTop"&gt;&lt;/xref&gt;</ph><ph id="ph3"> + &lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Sets the position of the cursor.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph> method to specify where the next write operation in the console window is to begin.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cursor automatically moves to the next character position each time a character is written to the console window.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to write a character to the bottom right character position without causing the console window to scroll, use the <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> method to move a character to that position.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The column position of the cursor.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Columns are numbered from left to right starting at 0.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>The row position of the cursor.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Rows are numbered from top to bottom starting at 0.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;top&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> is greater than or equal to <ph id="ph2">&lt;xref href="System.Console.BufferWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;top&lt;/code&gt;</ph> is greater than or equal to <ph id="ph2">&lt;xref href="System.Console.BufferHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">&lt;xref href="System.Console.Error"&gt;&lt;/xref&gt;</ph> property to the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph> property is set to the standard error output stream.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> that encapsulates a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> can be used to send error messages to a file.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>A stream that is the new standard error output.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;newError&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">&lt;xref href="System.Console.In"&gt;&lt;/xref&gt;</ph> property to the specified <ph id="ph2">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph> property is set to the standard input stream.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> that encapsulates a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> can be used to receive input from a file.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>A stream that is the new standard input.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;newIn&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">&lt;xref href="System.Console.Out"&gt;&lt;/xref&gt;</ph> property to the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Console.Out%2A&gt;</ph> property is set to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> that encapsulates a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> can be used to send output to a file.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Console.SetOut#1<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.setout/cpp/source.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Console.SetOut#1<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.setout/cs/source.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Console.SetOut#1<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.setout/vb/source.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>A stream that is the new standard output.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;newOut&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Sets the position of the console window relative to the screen buffer.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system window displays the console window, and the console window displays a portion of the screen buffer.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph> method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>The console and operating system windows generally do not affect each other.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the <ph id="ph1">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph> method affects the position of the operating system window scroll bars.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>The column position of the upper left  corner of the console window.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>The row position of the upper left corner of the console window.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;top&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;left&lt;/code&gt;</ph><ph id="ph2"> + &lt;xref href="System.Console.WindowWidth"&gt;&lt;/xref&gt;</ph> is greater than <ph id="ph3">&lt;xref href="System.Console.BufferWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;top&lt;/code&gt;</ph><ph id="ph2"> + &lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph> is greater than <ph id="ph3">&lt;xref href="System.Console.BufferHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Sets the height and width of the console window to the specified values.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The width of the console window measured in columns.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The height of the console window measured in rows.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;width&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;height&lt;/code&gt;</ph> is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;width&lt;/code&gt;</ph> plus <ph id="ph2">&lt;xref href="System.Console.WindowLeft"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;code&gt;height&lt;/code&gt;</ph> plus <ph id="ph4">&lt;xref href="System.Console.WindowTop"&gt;&lt;/xref&gt;</ph> is greater than or equal to <ph id="ph5">&lt;xref href="System.Int16.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;width&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;height&lt;/code&gt;</ph> is greater than the largest possible window width or height for the current screen resolution and console font.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The user does not have permission to perform this action.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Gets or sets the title to display in the console title bar.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>The string to be displayed in the title bar of the console.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>The maximum length of the title string is 24500 characters.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>In a get operation, the retrieved title is longer than 24500 characters.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>In a set operation, the specified title is longer than 24500 characters.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>In a set operation, the specified title is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the combination of the <ph id="ph1">&lt;xref href="System.ConsoleModifiers.Control"&gt;&lt;/xref&gt;</ph> modifier key and <ph id="ph2">&lt;xref href="System.ConsoleKey.C"&gt;&lt;/xref&gt;</ph> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Console.TreatControlCAsInput%2A&gt;</ph> property is <ph id="ph2">`false`</ph> and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the default value.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property judiciously because setting it to <ph id="ph1">`true`</ph> has such a dramatic effect.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most users expect Ctrl+C to terminate a console application.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if Ctrl+C is treated as ordinary input; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Unable to get or set the input mode of the console input buffer.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Gets or sets the height of the console window area.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set the value of the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> property when output is redirected throws either an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> or an <ph id="ph3">&lt;xref:System.IO.IOException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent an exception, you can set the value of this property only if the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>The height of the console window measured in rows.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Console.WindowWidth"&gt;&lt;/xref&gt;</ph> property or the value of the <ph id="ph2">&lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph> property is less than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph> property plus the value of the <ph id="ph2">&lt;xref href="System.Console.WindowTop"&gt;&lt;/xref&gt;</ph> property is greater than or equal to <ph id="ph3">&lt;xref href="System.Int16.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Console.WindowWidth"&gt;&lt;/xref&gt;</ph> property or the value of the <ph id="ph2">&lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph> property is greater than the largest possible window width or height for the current screen resolution and console font.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Error reading or writing information.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Gets or sets the leftmost position of the console window area relative to the screen buffer.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>The console represents a rectangular window into a larger rectangular buffer area.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dimensions of the buffer area are defined by the <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dimensions of the console area are defined by the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property determines which column of the buffer area is displayed in the first column of the console window.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property can range from 0 to <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph><ph id="ph3"> - </ph><ph id="ph4">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set it to a value outside that range throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a console window first opens, the default value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default width of both the console window and the buffer area is 80 columns.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property can be modified only if the console window is made narrower or the buffer area is made wider.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that if the width of the buffer area exceeds the width of the console window, the value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property is automatically adjusted when the user uses the horizontal scroll bar to define the window's relationship to the buffer area.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set the value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property when output is redirected throws an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent the exception, you can set the value of this property only if the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The leftmost console window position measured in columns.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>In a set operation, the value to be assigned is less than zero.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>As a result of the assignment, <ph id="ph1">&lt;xref href="System.Console.WindowLeft"&gt;&lt;/xref&gt;</ph> plus <ph id="ph2">&lt;xref href="System.Console.WindowWidth"&gt;&lt;/xref&gt;</ph> would exceed <ph id="ph3">&lt;xref href="System.Console.BufferWidth"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Error reading or writing information.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Gets or sets the top position of the console window area relative to the screen buffer.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>The console represents a rectangular window into a larger rectangular buffer area.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dimensions of the buffer area are defined by the <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dimensions of the console area are defined by the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph> property determines which row of the buffer area is displayed in the first column of the console window.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph> property can range from 0 to <ph id="ph2">&lt;xref:System.Console.BufferHeight%2A&gt;</ph><ph id="ph3"> - </ph><ph id="ph4">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set it to a value outside that range throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set the value of the <ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph> property when output is redirected throws an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent the exception, you can set the value of this property only if the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The uppermost console window position measured in rows.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>In a set operation, the value to be assigned is less than zero.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>As a result of the assignment, <ph id="ph1">&lt;xref href="System.Console.WindowTop"&gt;&lt;/xref&gt;</ph> plus <ph id="ph2">&lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph> would exceed <ph id="ph3">&lt;xref href="System.Console.BufferHeight"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Error reading or writing information.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Gets or sets the width of the console window.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set the value of the <ph id="ph1">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> property when output is redirected throws either an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> or an <ph id="ph3">&lt;xref:System.IO.IOException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent an exception, you can set the value of this property only if the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>The width of the console window measured in columns.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Console.WindowWidth"&gt;&lt;/xref&gt;</ph> property or the value of the <ph id="ph2">&lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph> property is less than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph> property plus the value of the <ph id="ph2">&lt;xref href="System.Console.WindowTop"&gt;&lt;/xref&gt;</ph> property is greater than or equal to <ph id="ph3">&lt;xref href="System.Int16.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Console.WindowWidth"&gt;&lt;/xref&gt;</ph> property or the value of the <ph id="ph2">&lt;xref href="System.Console.WindowHeight"&gt;&lt;/xref&gt;</ph> property is greater than the largest possible window width or height for the current screen resolution and console font.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Error reading or writing information.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>This API is not CLS-compliant.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>The CLS-compliant alternative is <ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>The C# and Visual Basic compilers automatically resolve a call to this method as a call to <ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The first object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The second object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>The third object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>The fourth object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified objects to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>The first object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>The second object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The third object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified objects to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>The first object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The second object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the  <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`arg`</ph> parameter is a parameter array.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT">
          <source>Arguments  can be passed to the method either as an array or as list of five or more items.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT">
          <source>The examples illustrate both forms of method call.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>An array of objects to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;arg&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified object to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>An object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Writes the specified string value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT">
          <source>If value is <ph id="ph1">`null`</ph>, nothing is written to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Writes the specified subarray of Unicode characters to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method writes <ph id="ph1">`count`</ph> characters starting at position <ph id="ph2">`index`</ph> of <ph id="ph3">`buffer`</ph> to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>An array of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>The starting position in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>The number of characters to write.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> plus <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> specify a position that is not within <ph id="ph3">&lt;code&gt;buffer&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified object to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, nothing is written and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the <ph id="ph1">`ToString`</ph> method of <ph id="ph2">`value`</ph> is called to produce its string representation, and the resulting string is written to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>The value to write, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Writes the specified Unicode character value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Writes the specified array of Unicode characters to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>A Unicode character array.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified Boolean value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling <ph id="ph2">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph>, which outputs either <ph id="ph3">&lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt;</ph> or <ph id="ph4">&lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling <ph id="ph2">&lt;xref:System.Decimal.ToString%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>The first object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>The second object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Writes the specified string value, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>If value is <ph id="ph1">`null`</ph>, only the line terminator is written to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method writes <ph id="ph1">`count`</ph> characters starting at position <ph id="ph2">`index`</ph> of <ph id="ph3">`buffer`</ph> to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>An array of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>The starting position in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>The number of characters to write.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> plus <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> specify a position that is not within <ph id="ph3">&lt;code&gt;buffer&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the  <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>An array of objects to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;arg&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>An object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Decimal.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>A Unicode character array.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Writes the current line terminator to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default line terminator is a string whose value is a carriage return followed by a line feed ("\r\n" in C#, or <ph id="ph1">`vbCrLf`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change the line terminator by setting the <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph> property to another string.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example provides an illustration.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>The first object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>The second object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>The third object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, only the line terminator is written.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the <ph id="ph1">`ToString`</ph> method of <ph id="ph2">`value`</ph> is called to produce its string representation, and the resulting string is written to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT">
          <source>This API is not CLS-compliant.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT">
          <source>The CLS-compliant alternative is <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT">
          <source>The C# and Visual Basic compilers automatically resolve a call to this method as a call to <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting string is written to the output stream.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>The first object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>The second object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>The third object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>The fourth object to write using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>The format specification in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>