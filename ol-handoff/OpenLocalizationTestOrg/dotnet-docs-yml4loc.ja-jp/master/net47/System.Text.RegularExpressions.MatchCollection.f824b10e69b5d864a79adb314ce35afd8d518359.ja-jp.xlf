<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29088b5ee7e1d0fcd9ce711fd171f3572dfa0ed2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Text.RegularExpressions.MatchCollection.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e8bd3a40f7539724578a92dd92fbede20d568d7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65aac354e2a26d011cea9737000de35594b74c7f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection is immutable (read-only) and has no public constructor.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection contains zero or more <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=fullName&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the match is successful, the collection is populated with one <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=fullName&gt;</ph> object for each match found in the input string.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the match is unsuccessful, the collection contains no <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=fullName&gt;</ph> objects, and its <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property equals zero.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>When applying a regular expression pattern to a particular input string, the regular expression engine uses either of two techniques to build the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct evaluation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is populated all at once, with all matches resulting from a particular call to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This technique is used when the collection's <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property is accessed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>It typically is the more expensive method of populating the collection and entails a greater performance hit.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Lazy evaluation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is populated as needed on a match-by-match basis.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is equivalent to the regular expression engine calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName&gt;</ph> method repeatedly and adding each match to the collection.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This technique is used when the collection is accessed through its <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method, or when it is accessed using the <ph id="ph2">`foreach`</ph> statement (in C#) or the <ph id="ph3">`For Each`</ph>...<ph id="ph4">`Next`</ph> statement (in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as <ph id="ph1">`foreach`</ph> in C# and <ph id="ph2">`For Each`</ph>â€¦<ph id="ph3">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>in Visual Basic) instead of retrieving the enumerator that is returned by the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Copies all the elements of the collection to the given array starting at the given index.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the collection is copied into the array starting at the given index, the destination array must be at least as large as the entire collection.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to copy the collection before it has been fully populated may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The array the collection is to be copied into.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The position in the array where copying is to begin.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is a multi-dimensional array.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is outside the bounds of <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> plus <ph id="ph2">&lt;xref href="System.Text.RegularExpressions.MatchCollection.Count"&gt;&lt;/xref&gt;</ph> is outside the bounds of <ph id="ph3">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A time-out occurred.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the number of matches.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Accessing individual members of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object by retrieving the value of the collection's <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property causes the regular expression engine to populate the collection using direct evaluation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>ln contrast, calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method (or using the <ph id="ph2">`foreach`</ph> statement in C# and the <ph id="ph3">`For Each`</ph>...<ph id="ph4">`Next`</ph> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct evaluation can be a much more expensive method of building the collection than lazy evaluation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The number of matches.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A time-out occurred.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Provides an enumerator that iterates through the collection.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of  calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method to retrieve an enumerator that lets you iterate through the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects in the collection, you should use the group iteration construct (such as <ph id="ph3">`foreach`</ph> in C# and <ph id="ph4">`For Each`</ph>â€¦<ph id="ph5">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>in Visual Basic) provided by your programming language.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Iterating the members of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object using the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method (or the <ph id="ph3">`foreach`</ph> statement in C# and the <ph id="ph4">`For Each`</ph>...<ph id="ph5">`Next`</ph> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is analogous to repeatedly calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName&gt;</ph> method, and then adding the resulting match to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, the regular expression engine uses direct evaluation to populate the collection all at once when the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property is accessed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be a much more expensive method of building the collection than lazy evaluation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find the next match exceeds that time-out interval.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An object that contains all <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.Match"&gt;&lt;/xref&gt;</ph> objects within the <ph id="ph2">&lt;xref href="System.Text.RegularExpressions.MatchCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A time-out occurred.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the collection is read only.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> in all cases.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the collection is synchronized (thread-safe).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName&gt;</ph> property instead.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> in all cases.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Gets an individual member of the collection.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C#, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph> property is an indexer; it is not explicitly referenced in code, but instead allows the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to be accessed as if it were an array.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, individual items in the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object are accessed by their index only after the total number of items in the collection has been determined from the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, accessing the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property causes the regular expression engine to use direct evaluation to build the collection all at once.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is typically more expensive than iterating the collection using the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method, the C# <ph id="ph2">`foreach`</ph> statement, or the Visual Basic <ph id="ph3">`For Each`</ph>...<ph id="ph4">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a specific match exceeds that time-out interval.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Index into the <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.Match"&gt;&lt;/xref&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The captured substring at position <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">i</ph><ept id="p1">&lt;/code&gt;</ept> in the collection.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;i&lt;/code&gt;</ph> is less than 0 or greater than or equal to <ph id="ph2">&lt;xref href="System.Text.RegularExpressions.MatchCollection.Count"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A time-out occurred.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the collection.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName&gt;</ph> property instead.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An object that can be used to synchronize access to the collection.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This property always returns the object itself.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>