<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1037382410873b83141cd95b2835c3898da74ad</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Markup.XamlTypeMapper.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0dd390ebfe2b5bc999b41e0f29a7abb494f655c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f4396cc5eb4c383bd1652396e549b2a2fd07ede</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Maps a XAML element name to the appropriate CLR <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> in assemblies.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper&gt;</ph> is part of an advanced WPF scenario that supplies alternate context for <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Markup.XamlWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> WPF applications, you should consider overriding <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> for this scenario, rather than attempting to use <ph id="ph3">&lt;xref:System.Windows.Markup.XamlTypeMapper&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper&gt;</ph> can be used to provide the XAML parser with custom mapping information through a more direct technique than the application of <ph id="ph2">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> values on the assembly code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This might be useful for consolidation of all CLR namespaces in an assembly, or for referencing types that are XAML-ready in an existing assembly without having to recompile it just to add <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> attributing.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically create a <ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper&gt;</ph> instance in order to specify the <ph id="ph2">&lt;xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A&gt;</ph> property value for a <ph id="ph3">&lt;xref:System.Windows.Markup.ParserContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.ParserContext&gt;</ph> in turn can be used as the context for a <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName&gt;</ph>call.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default Mapper</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain a default mapper using the <ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A&gt;</ph> static property.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default mapper only works on a default assembly list.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>No specific information about assemblies (as is specified in <ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper&gt;</ph> constructors) is used.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;&lt;/xref&gt;</ph> class by specifying an array of assembly names that the <ph id="ph2">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;&lt;/xref&gt;</ph> should use.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The array of assembly names the <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;&lt;/xref&gt;</ph> should use.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;&lt;/xref&gt;</ph> class, using the specified array of assembly names and the specified namespace maps.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The array of assembly names the <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;&lt;/xref&gt;</ph> should use.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The array of namespace maps the <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;&lt;/xref&gt;</ph> should use.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Defines a mapping between an XML namespace and CLR namespaces in assemblies, and adds these to the <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;&lt;/xref&gt;</ph> information.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction%2A&gt;</ph> is a programmatic way to add a mapping.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the different parts of the following XAML mapping instruction correspond to the parameters of the <ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction%2A&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`xmlNamespace`</ph> is <ph id="ph2">`SDK`</ph>, the <ph id="ph3">`clrNamespace`</ph> is <ph id="ph4">`Samples`</ph>, and the <ph id="ph5">`assemblyName`</ph> is <ph id="ph6">`SDKSamples`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The prefix for the XML namespace..</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The CLR  namespace that contains the types to map.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The assembly that contains the CLR  namespace.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;clrNamespace&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Requests permission for a <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;&lt;/xref&gt;</ph> derived type that is called under full trust to access a specific internal type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not overridden by a subclass, <ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper.AllowInternalType%2A&gt;</ph> always returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>When overridden by a subclass, the behavior should be that <ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper.AllowInternalType%2A&gt;</ph> should return <ph id="ph2">`true`</ph> if the internal type can be accessed; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The type to access.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the internal type can be accessed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets an instance of the <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;&lt;/xref&gt;</ph> to use if one has not been specified.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default mapper only works on a default assembly list.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>No specific information about assemblies (as is specified in <ph id="ph1">&lt;xref:System.Windows.Markup.XamlTypeMapper&gt;</ph> constructors) is used.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the current implementation the default assembly list is: <ph id="ph1">`WindowsBase`</ph>, <ph id="ph2">`PresentationCore`</ph>, <ph id="ph3">`PresentationFramework`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the default mapper does not mean that you cannot use custom assemblies/types in XAML at all.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>It only means that if you do use custom types/assemblies, you must then use the conventional XAML technique of creating the mappings as <ph id="ph1">`xmlns`</ph> attributes in each XAML page where the types/assemblies are referenced, as opposed to a type mapper API.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The default type mapper.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets the CLR <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that a given XAML element is mapped to, using the specified XML namespace prefix and element name.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a type cannot be found that maps to the provided information, <ph id="ph1">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not include the prefix as part of <ph id="ph1">`localName`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any prefixed XAML element information, separate it into <ph id="ph1">`xmlNamespace`</ph> and <ph id="ph2">`localName`</ph> components for this API call.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The specified XML namespace prefix.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The "local" name of the XAML element to obtain the mapped <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> for.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Local in this context means as mapped versus the provided <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">xmlNamespace</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> for the object, or <ph id="ph2">`null`</ph> if no mapping could be resolved.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;localName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifies the path to use when loading an assembly.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The short name of the assembly without an extension or path specified (equivalent to <ph id="ph1">&lt;xref href="System.Reflection.AssemblyName.Name"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The file path of the assembly.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The assembly path must be a full file path containing a file extension.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is not a full file path containing a file extension.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>