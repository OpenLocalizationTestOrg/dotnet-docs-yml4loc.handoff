<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db72f5287b625461292f56fe50100a43cdfab974</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Forms.TextBoxBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb6541d4cc0754e1f2537761b5dcd82fd01682fe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ba9d931d4dafebf1f9263647373c92d04cd179f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implements the basic functionality required by text controls.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class implements the core features of text manipulation controls, such as <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>These include text selection, <bpt id="p1">**</bpt>Clipboard<ept id="p1">**</ept> functionality, multiline text control support, and many events.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether pressing the TAB key in a multiline text box control types a TAB character in the control instead of moving the focus to the next control in the tab order.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Multiline%2A&gt;</ph> property must also be <ph id="ph2">`true`</ph> to get a TAB character in the control.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the user must press CTRL+TAB to move the focus to the next control in the tab order.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if users can enter tabs in a multiline text box using the TAB key; <ph id="ph2">`false`</ph> if pressing the TAB key moves the focus.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.AcceptsTab"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Appends text to the current text of a text box.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to add text to the existing text in the control instead of using the concatenation operator (+) to concatenate text to the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Text%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The text to append to the current contents of the text box.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the height of the control automatically adjusts when the font assigned to the control is changed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you set the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.AutoSize%2A&gt;</ph> property to <ph id="ph2">`true`</ph> for a <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>, when the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> changes, the <ph id="ph5">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> expands or contracts the <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> to accommodate the larger or smaller text.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> does not change.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to change the size of the control as the user enters text, you can use a <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control and use its <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox.ContentsResized&gt;</ph> event to change its size.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the height of the control automatically adjusts when the font is changed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets or sets the background color of the control.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.BackColor%2A&gt;</ph> property to change the background color of the text control to blend into the color scheme of your forms.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the color of the text within the control, use the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ForeColor%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>When setting the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.BackColor%2A&gt;</ph> property of your text control, ensure that the color you choose does not cause the text of the control to disappear.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.BackColor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.ForeColor%2A&gt;</ph> properties are both set to <ph id="ph3">`Color.Black`</ph>, the text within your textbox control will not be visible.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property might be over ridden if the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase&gt;</ph> is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> that represents the background of the control.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The background image for the object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.BackgroundImage"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ImageLayout"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.BackgroundImageLayout"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets or sets the border type of the text box control.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.BorderStyle%2A&gt;</ph> property to create borderless and flat style controls, in addition to the default three-dimensional control.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The derived class, <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph>, does not support the <ph id="ph2">`BorderStyle.FixedSingle`</ph> style.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This style will cause the <ph id="ph1">&lt;xref:System.Windows.Forms.BorderStyle&gt;</ph> to use the <ph id="ph2">`BorderStyle.Fixed3D`</ph> style instead.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.BorderStyle"&gt;&lt;/xref&gt;</ph> that represents the border type of the text box control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Fixed3D`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A value that is not within the range of valid values for the enumeration was assigned to the property.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.BorderStyle"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ImeMode"&gt;&lt;/xref&gt;</ph> property can be set to an active value, to enable IME support.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Forms.TextBoxBase.ReadOnly"&gt;&lt;/xref&gt;</ph> property is <ph id="ph3">`true`</ph> or if this <ph id="ph4">&lt;xref href="System.Windows.Forms.TextBoxBase"&gt;&lt;/xref&gt;</ph> class is set to use a password mask character; otherwise, <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the user can undo the previous operation in a text box control.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method returns <ph id="ph1">`true`</ph>, you can call the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.Undo%2A&gt;</ph> method to undo the last operation in a text box.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method in the <ph id="ph1">&lt;xref:System.Windows.Forms.MenuItem.Popup&gt;</ph> event of a <ph id="ph2">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph>, or in code that manages the state of buttons on a <ph id="ph3">&lt;xref:System.Windows.Forms.ToolBar&gt;</ph> to enable or disable the ability to undo the previous operation in a text box control.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the user can undo the previous operation performed in a text box control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Clears all text from the text box control.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to clear the contents of the control instead of assigning the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Text%2A&gt;</ph> property an empty string.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Clears information about the most recent operation from the undo buffer of the text box.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to prevent an undo operation from repeating, based on the state of your application.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Occurs when the text box is clicked.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Copies the current selection in the text box to the <bpt id="p1">**</bpt>Clipboard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method, instead of using the <ph id="ph1">&lt;xref:System.Windows.Forms.Clipboard&gt;</ph> class, to copy text in the text box and place it in the <bpt id="p1">**</bpt>Clipboard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Creates a handle for the control.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets the required creation parameters when the control handle is created.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.CreateParams"&gt;&lt;/xref&gt;</ph> that contains the required creation parameters when the handle to the control is created.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Moves the current selection in the text box to the <bpt id="p1">**</bpt>Clipboard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will only cut text from the text box if text is selected in the control.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method, instead of using the <ph id="ph1">&lt;xref:System.Windows.Forms.Clipboard&gt;</ph> class, to copy text in the text box and move it to the <bpt id="p1">**</bpt>Clipboard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Gets or sets the default cursor for the control.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.DefaultCursor%2A&gt;</ph> to configure a default cursor for your control.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is more efficient than setting the cursor in the control's constructor, and gives automatic support for certain cursor-related designer functions.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">&lt;xref href="System.Windows.Forms.Cursor"&gt;&lt;/xref&gt;</ph> representing the current default cursor.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Gets the default size of the control.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Specifies that the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.SelectionLength"&gt;&lt;/xref&gt;</ph> property is zero so that no characters are selected in the control.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether control drawing is done in a buffer before the control is displayed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to implement double buffering on the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Gets or sets the foreground color of the control.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ForeColor%2A&gt;</ph> property to change the color of the text within the control to match the text of other controls on your form.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use this property to highlight a specific text box that contains an invalid value.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the background color of the control, use the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.BackColor%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>When setting the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ForeColor%2A&gt;</ph> property of your text control, ensure that the color you choose does not cause the text of the control to disappear.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ForeColor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.BackColor%2A&gt;</ph> properties are both set to <ph id="ph3">`Color.Black`</ph>, the text within your textbox control will not be visible.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property might be over ridden if the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase&gt;</ph> is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> that represents the control's foreground color.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Retrieves the character that is closest to the specified location within the control.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the location specified in the <ph id="ph1">`pt`</ph> parameter is outside the client area of the control, the first character of the string closest to the point specified in <ph id="ph2">`pt`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to determine which characters are located near a specific point within the control.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then use this value to perform operations on the text at that location.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified location in the <ph id="ph1">`pt`</ph> parameter is located on the right side of the client area of the control, the last character of the string closest to the point specified in <ph id="ph2">`pt`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The location from which to seek the nearest character.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The character at the specified location.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the character nearest to the specified location.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the character index that is closest to the position specified in the <ph id="ph1">`pt`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The character index is a zero-based index of text in the control, including spaces.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to determine where in the text the user has the mouse over by passing the mouse coordinates to this method.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be useful if you want to perform tasks when the user rests the mouse pointer over a word in the text of the control.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified location is not within the client rectangle of the control, or is beyond the last character in the control, the return value is the index of the last character.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The location to search.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The zero-based character index at the specified location.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the first character of a given line.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Line numbering in the text box starts at zero.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`lineNumber`</ph> parameter is greater than the last line in the text box, <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine%2A&gt;</ph> returns -1.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine%2A&gt;</ph> returns the first character index of a physical line.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical line is the displayed line, not the assigned line.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number of displayed lines can be greater than the number of assigned lines due to word wrap.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you assign two long lines to a <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control and set <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.Multiline%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.TextBoxBase.WordWrap%2A&gt;</ph> to <ph id="ph4">`true`</ph>, the two long assigned lines result in four physical (or displayed lines).</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The line for which to get the index of its first character.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first character in the specified line.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">lineNumber</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than zero.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the first character of the current line.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The zero-based character index in the current line.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Retrieves the line number from the specified character position within the text of the control.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables you to determine the line number based on the character index specified in the <ph id="ph1">`index`</ph> parameter of the method.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first line of text in the control returns the value zero.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.GetLineFromCharIndex%2A&gt;</ph> method returns the physical line number where the indexed character is located within the control.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a portion of the first logical line of text in the control wraps to the next line, the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.GetLineFromCharIndex%2A&gt;</ph> method returns 1 if the character at the specified character index has wrapped to the second physical line.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.WordWrap%2A&gt;</ph> is set to <ph id="ph2">`false`</ph>, no portion of the line wraps to the next, and the method returns 0 for the specified character index.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to determine which line a specific character index is located within.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, after calling the <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox.Find%2A&gt;</ph> method to search for text, you can obtain the character index to where the search results are found.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call this method with the character index returned by the <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox.Find%2A&gt;</ph> method to determine which line the word was found.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the character index specified in the <ph id="ph1">`index`</ph> parameter is beyond the available number of lines contained within the control, the last line number is returned.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The character index position to search.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The zero-based line number in which the character index is located.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Retrieves the location within the control at the specified character index.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables you to determine where in the control a specific character index is located.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method for such tasks as displaying shortcut menu items or help information for a word in the control.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you wanted to display a menu of options to the user when the user right clicks on a word in the control, you can use this method to determine the position of the word to properly display a <ph id="ph1">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The index of the character for which to retrieve the location.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The location of the specified character within the client rectangle of the control.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the selected text in the text box control remains highlighted when the control loses focus.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to keep text highlighted in a text box control while another form or a dialog box has focus, such as a spelling checker dialog box.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the selected text does not appear highlighted when the text box control loses focus; <ph id="ph2">`false`</ph>, if the selected text remains highlighted when the text box control loses focus.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.HideSelection"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Gets or sets the Input Method Editor (IME) mode of a control.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The IME mode of the control.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Determines whether the specified key is an input key or a special key that requires preprocessing.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.IsInputKey%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when the <ph id="ph3">`keyData`</ph> parameter includes the <ph id="ph4">&lt;xref:System.Windows.Forms.Keys.Tab&gt;</ph> value and the <ph id="ph5">&lt;xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A&gt;</ph> property is <ph id="ph6">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.IsInputKey%2A&gt;</ph> returns <ph id="ph2">`false`</ph> if <ph id="ph3">`keyData`</ph> contains both <ph id="ph4">&lt;xref:System.Windows.Forms.Keys.Tab&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Keys.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>One of the Keys value.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified key is an input key; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets or sets the lines of text in a text box control.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each element in the array becomes a line of text in the text box control.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Multiline%2A&gt;</ph> property of the text box control is set to <ph id="ph2">`true`</ph> and a newline character appears in the text, the text following the newline character is added to a new element in the array and displayed on a separate line.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the collection of lines is a read-only copy of the lines in the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get a writable collection of lines, use code similar to the following: <ph id="ph1">`textBox1.Lines = new string[] { "abcd" };`</ph></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>An array of strings that contains the text in a text box control.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum number of characters the user can type or paste into the text box control.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to restrict the length of text entered in the control for values such as postal codes and telephone numbers, or to restrict the length of text entered when the data is to be entered in a database.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can limit the text entered into the control to the maximum length of the corresponding field in the database.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>In code, you can set the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Text%2A&gt;</ph> property to a value that has a length greater than the value specified by the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.MaxLength%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property only affects text entered into the control at run time.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The number of characters that can be entered into the control.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The default is 32767.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The value assigned to the property is less than 0.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates that the text box control has been modified by the user since the control was created or its contents were last set.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to determine if the user has modified the contents of the text box control.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also set this property in code to indicate that changes were made to the text box control by the application.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used by validation and data-saving methods to determine if changes were made in a text box control so the changed contents can be validated or saved.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you change the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Text%2A&gt;</ph> property programmatically, the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.Modified%2A&gt;</ph> property reverts to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>This does not raise the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ModifiedChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control's contents have been modified; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.Modified"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you change the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Text%2A&gt;</ph> property programmatically, the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.Modified%2A&gt;</ph> property reverts to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This does not raise the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ModifiedChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Occurs when the control is clicked by the mouse.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control does not raise a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.Click&gt;</ph> event for right clicks.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.MouseClick&gt;</ph> event provides the functional equivalent.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether this is a multiline text box control.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>A multiline text box allows you to display more than one line of text in the control.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.WordWrap%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, text entered into the multiline text box is wrapped to the next line in the control.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.WordWrap%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, text entered into the multiline text box control will be displayed on the same line until a newline character is entered.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following can be used as newline characters:</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>ControlChars.CrLf</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>vbCrLf (Visual Basic only)</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add scroll bars to a text box using the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox.ScrollBars%2A&gt;</ph> property to display horizontal and/or vertical scroll bars.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows the user to scroll through the text that extends beyond the dimensions of the control.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the default value of the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Multiline%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, the default size of a <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> will be in accordance with the font size even if you resize the <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get a consistent size for your <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>, set its <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox.Multiline%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>On Japanese operating systems, if the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Multiline%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, setting the <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox.PasswordChar%2A&gt;</ph> property will display the text of the password, thus compromising system security.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, on Japanese operating systems, set the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Multiline%2A&gt;</ph> property to <ph id="ph2">`false`</ph> if you set the <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox.PasswordChar%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is set to <ph id="ph1">`false`</ph> by default for all derived classes, with the exception of the <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control, the <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox.Multiline%2A?displayProperty=fullName&gt;</ph> property affects whether or not the control will automatically resize, as follows:</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox.AutoSize%2A?displayProperty=fullName&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.RichTextBox.Multiline%2A?displayProperty=fullName&gt;</ph> is set to <ph id="ph4">`true`</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> will not automatically resize.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox.AutoSize%2A?displayProperty=fullName&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.RichTextBox.Multiline%2A?displayProperty=fullName&gt;</ph> is set to <ph id="ph4">`false`</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> will automatically resize.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control is a multiline text box control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.Multiline"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.AcceptsTabChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.BorderStyleChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.OnBorderStyleChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.FontChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.HandleCreated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.HandleDestroyed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Raise the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.HideSelectionChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.OnHideSelectionChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.ModifiedChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.OnModifiedChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseUp"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.MultilineChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.OnMultilineChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.ReadOnlyChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.OnReadOnlyChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.TextChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Padding"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Occurs when the control is redrawn.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Replaces the current selection in the text box with the contents of the <bpt id="p1">**</bpt>Clipboard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Paste%2A&gt;</ph> method will only paste text into the control if text is currently stored in the <bpt id="p1">**</bpt>Clipboard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Gets the preferred height for a text box.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The size returned by this property is based on the font height and border style of the text box.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to determine the appropriate size of the text box to ensure that text is properly displayed in the control.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property is in pixels.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.PreferredHeight%2A&gt;</ph> represents the minimum height the text box must have in order to display a single line of text without clipping the text on the top or bottom.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is the same whether the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Multiline%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The preferred height of a text box.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Processes a command key.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph>, passed by reference that represents the window message to process.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> values that represents the shortcut key to process.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the command key was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Processes a dialog key.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> values that represents the key to process.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the key was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether text in the text box is read-only.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is set to <ph id="ph1">`true`</ph>, the contents of the control cannot be changed by the user at runtime.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>With this property set to <ph id="ph1">`true`</ph>, you can still set the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.Text%2A&gt;</ph> property in code.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this feature instead of disabling the control with the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property to allow the contents to be copied and ToolTips to be shown.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the text box is read-only; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase.ReadOnly"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the control to the current caret position.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables you to scroll the contents of the control until the caret is within the visible region of the control.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the caret is positioned below the visible region of the control, the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ScrollToCaret%2A&gt;</ph> method will scroll the contents of the control until the caret is visible at the bottom of the control.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the caret is positioned above the visible region of the control, this method scrolls the contents of the control until the caret is visible at the top of the control.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method in a multiline text box to ensure that the current text entry point is within the visible region of the control.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no effect if the control does not have focus or if the caret is already positioned in the visible region of the control.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Selects a range of text in the text box.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to set the start position to the first character in the control's text, set the <ph id="ph1">`start`</ph> parameter to 0.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to select a substring of text, such as when searching through the text of the control and replacing information.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can programmatically move the caret within the text box by setting the <ph id="ph1">`start`</ph> parameter to the position within the text box where you want the caret to move to and set the <ph id="ph2">`length`</ph> parameter to a value of zero (0).</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text box must have focus in order for the caret to be moved.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called without any parameters, an alternative method is used.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>This alternative method inherits from the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>When called, it sets the input focus to the control and selects the contents of the control.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The position of the first character in the current text selection within the text box.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The number of characters to select.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">start</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than zero.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Selects all text in the text box.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables you to select all text within the control.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method in conjunction with the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Cut%2A&gt;</ph> method, which requires text to be selected in the control, to cut the entire contents of the control and paste them into the <bpt id="p1">**</bpt>Clipboard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating the currently selected text in the control.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can assign text to this property to change the text currently selected in the text box.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no text is currently selected in the text box, this property returns a zero-length string.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A string that represents the currently selected text in the text box.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of characters selected in the text box.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to determine if any characters are currently selected in the text box control before performing operations on the selected text.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A&gt;</ph> property is set to a value that is larger than the number of characters within the text of the control, the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A&gt;</ph> property is set to the entire length of text within the control minus the value of the <ph id="ph3">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A&gt;</ph> property (if any value is specified for the <ph id="ph4">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A&gt;</ph> property).</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can programmatically move the caret within the text box by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A&gt;</ph> to the position within the text box where you want the caret to move to and set the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A&gt;</ph> property to a value of zero (0).</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text box must have focus in order for the caret to be moved.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The number of characters selected in the text box.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The assigned value is less than zero.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Gets or sets the starting point of text selected in the text box.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no text is selected in the control, this property indicates the insertion point, or caret, for new text.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set this property to a location beyond the length of the text in the control, the selection start position will be placed after the last character.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>When text is selected in the text box control, changing this property might decrease the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the remaining text in the control after the position indicated by the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A&gt;</ph> property is less than the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A&gt;</ph> property, the value of the <ph id="ph3">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A&gt;</ph> property is automatically decreased.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A&gt;</ph> property never causes an increase in the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can programmatically move the selection within the text box by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can programmatically move the caret within the text box by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A&gt;</ph> to the position within the text box where you want the caret to move to and set the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A&gt;</ph> property to a value of zero (0).</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> must have focus in order for the selection or the caret to be moved.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> that is <ph id="ph3">&lt;xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A&gt;</ph> by giving it the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> first.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The starting position of text selected in the text box.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The assigned value is less than zero.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Sets the specified bounds of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase&gt;</ph> control uses the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBoxBase.PreferredHeight%2A&gt;</ph> property to set the bounds if the <ph id="ph3">&lt;xref:System.Windows.Forms.TextBoxBase.AutoSize%2A&gt;</ph> property is <ph id="ph4">`true`</ph> and the <ph id="ph5">&lt;xref:System.Windows.Forms.TextBoxBase.Multiline%2A&gt;</ph> property is <ph id="ph6">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the parameters that correspond to the bounds not included in the <ph id="ph1">`specified`</ph> parameter are passed in with their current values.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph>, or the <ph id="ph3">&lt;xref:System.Drawing.Point.X%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Drawing.Point.Y%2A&gt;</ph> properties of the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property can be passed in with a reference to the current instance of the control.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>However all values passed in are honored and applied to the control.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`specified`</ph> parameter represents the elements of the controls <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> changed by your application.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you change the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control, the <ph id="ph2">`specified`</ph> parameter value is the <ph id="ph3">`Size`</ph> value of <ph id="ph4">&lt;xref:System.Windows.Forms.BoundsSpecified&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> is adjusted in response to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> property being set, the <ph id="ph3">`specified`</ph> parameter value is the <ph id="ph4">`None`</ph> value of <ph id="ph5">&lt;xref:System.Windows.Forms.BoundsSpecified&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Left"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Top"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Width"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.Windows.Forms.BoundsSpecified"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the defined shortcuts are enabled.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.ShortcutsEnabled%2A&gt;</ph> property to enable or disable the following shortcut key combinations and the control’s shortcut menu:</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+Z</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+E</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+C</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+Y</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+X</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+BACKSPACE</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+V</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+DELETE</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+A</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>SHIFT+DELETE</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+L</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>SHIFT+INSERT</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>CTRL+R</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this property to specify other shortcut keys.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to enable the shortcuts; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Gets or sets the current text in the text box.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>To display multiple lines of text in a text box, set the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Multiline%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read or set the text of a multiline text box, use the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Lines%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>The amount of text that can be entered in the <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control is limited only by available system memory.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The text displayed in the control.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Gets the length of text in the control.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to determine the number of characters in a string for tasks such as searching for specific strings of text within the text of the control, where knowledge of the total number of characters is needed.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The number of characters contained in the text of the control.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Returns a string that represents the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>A string that represents the current <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The string includes the type and the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextBoxBase"&gt;&lt;/xref&gt;</ph> property of the control.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Undoes the last edit operation in the text box.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will undo the last <bpt id="p1">**</bpt>Clipboard<ept id="p1">**</ept> or text change operation performed in the text box control if the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.CanUndo%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBoxBase.Undo%2A&gt;</ph> method does not work with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TextChanged&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Processes Windows messages.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The Windows <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> to process.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Indicates whether a multiline text box control automatically wraps words to the beginning of the next line when necessary.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is set to <ph id="ph1">`true`</ph>, horizontal scroll bars are not displayed regardless of the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox.ScrollBars%2A&gt;</ph> property setting.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the derived class, <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>, text within the control will always wrap regardless of the property setting of this property unless the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox.TextAlign%2A&gt;</ph> property is set to <ph id="ph3">`HorizontalAlignment.Left`</ph>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the multiline text box control wraps words; <ph id="ph2">`false`</ph> if the text box control automatically scrolls horizontally when the user types past the right edge of the control.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>