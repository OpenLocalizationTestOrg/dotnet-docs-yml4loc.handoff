<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d785e246a9a835845067a67e31d4599188a5759</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Decimal.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7586edf7fdd73a52efac1a1b961477d089dd65b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">069a6860ac81af3f0d31751d6b0a0aed8eba034c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a decimal number.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value type represents decimal numbers ranging from positive 79,228,162,514,264,337,593,543,950,335 to negative 79,228,162,514,264,337,593,543,950,335.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value type is appropriate for financial calculations that require large numbers of significant integral and fractional digits and no round-off errors.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> type does not eliminate the need for rounding.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rather, it minimizes errors due to rounding.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following code produces a result of 0.9999999999999999999999999999 instead of 1.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Decimal.Class#1<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Decimal.Class/cpp/decimal1.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Decimal.Class#1<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Decimal.Class/cs/DecimalDivision_46630_1.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Decimal.Class#1<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Decimal.Class/vb/DecimalDivision_46630_1.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the result of the division and multiplication is passed to the <ph id="ph1">&lt;xref:System.Math.Round%2A&gt;</ph> method, the result suffers no loss of precision, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Decimal.Class#2<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Decimal.Class/cpp/decimal2.cpp#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Decimal.Class#2<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Decimal.Class/cs/DecimalDivision_46630_1.cs#2)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Decimal.Class#2<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Decimal.Class/vb/DecimalDivision_46630_1.vb#2)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>A decimal number is a floating-point value that consists of a sign, a numeric value where each digit in the value ranges from 0 to 9, and a scaling factor that indicates the position of a floating decimal point that separates the integral and fractional parts of the numeric value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binary representation of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the 96-bit integer and specify what portion of it is a decimal fraction.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the binary representation of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value  the form, ((-2<bpt id="p1">&lt;sup&gt;</bpt>96<ept id="p1">&lt;/sup&gt;</ept> to 2<bpt id="p2">&lt;sup&gt;</bpt>96<ept id="p2">&lt;/sup&gt;</ept>) / 10<bpt id="p3">&lt;sup&gt;</bpt>(0 to 28)<ept id="p3">&lt;/sup&gt;</ept>), where -(2<bpt id="p4">&lt;sup&gt;</bpt>96<ept id="p4">&lt;/sup&gt;</ept>-1) is equal to <ph id="ph2">&lt;xref:System.Decimal.MinValue&gt;</ph>, and 2<bpt id="p5">&lt;sup&gt;</bpt>96<ept id="p5">&lt;/sup&gt;</ept>-1 is equal to <ph id="ph3">&lt;xref:System.Decimal.MaxValue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the binary representation of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values and an example, see the <ph id="ph2">&lt;xref:System.Decimal.%23ctor%28System.Int32%5B%5D%29&gt;</ph> constructor and the <ph id="ph3">&lt;xref:System.Decimal.GetBits%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scaling factor  also preserves any trailing zeros in a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> number.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Trailing zeros do not affect the value of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> number in arithmetic or comparison operations.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, trailing zeros might be revealed by the <ph id="ph1">&lt;xref:System.Decimal.ToString%2A&gt;</ph> method if an appropriate format string is applied.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversion Considerations</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type provides methods that convert <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to and from <ph id="ph2">&lt;xref:System.SByte&gt;</ph>, <ph id="ph3">&lt;xref:System.Int16&gt;</ph>, <ph id="ph4">&lt;xref:System.Int32&gt;</ph>, <ph id="ph5">&lt;xref:System.Int64&gt;</ph>, <ph id="ph6">&lt;xref:System.Byte&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph8">&lt;xref:System.UInt32&gt;</ph>, and <ph id="ph9">&lt;xref:System.UInt64&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversions from these integral types to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> are widening conversions that never lose information or throw exceptions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversions from <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> to any of the integral types are narrowing conversions that round the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value to the nearest integer value toward zero.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some languages, such as C#, also support the conversion of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to <ph id="ph2">&lt;xref:System.Char&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the result of these conversions cannot be represented in the destination type, an <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> type also provides methods that convert <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values to and from <ph id="ph3">&lt;xref:System.Single&gt;</ph> and <ph id="ph4">&lt;xref:System.Double&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversions from <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> to <ph id="ph2">&lt;xref:System.Single&gt;</ph> or <ph id="ph3">&lt;xref:System.Double&gt;</ph> are narrowing conversions that might lose precision but not information about the magnitude of the converted value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The conversion does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversions from <ph id="ph1">&lt;xref:System.Single&gt;</ph> or <ph id="ph2">&lt;xref:System.Double&gt;</ph> to <ph id="ph3">&lt;xref:System.Decimal&gt;</ph> throw an <ph id="ph4">&lt;xref:System.OverflowException&gt;</ph> exception if the result of the conversion cannot be represented as a <ph id="ph5">&lt;xref:System.Decimal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performing Operations on Decimal Values</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> type supports standard mathematical operations such as addition, subtraction, division, multiplication, and unary negation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also work directly with the binary representation of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value by calling the <ph id="ph2">&lt;xref:System.Decimal.GetBits%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>To compare two <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values, you can use the standard numeric comparison operators, or you can call the <ph id="ph2">&lt;xref:System.Decimal.CompareTo%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Decimal.Equals%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also call the members of the <ph id="ph1">&lt;xref:System.Math&gt;</ph> class to perform a wide range of numeric operations, including getting the absolute value of a number, determining the maximum or minimum value of two <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values, getting the sign of a number, and rounding a number.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the value of the specified double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor rounds <ph id="ph1">`value`</ph> to 15 significant digits using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is done even if the number has more than 15 digits and the less significant digits are zero.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The value to represent as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph> or less than <ph id="ph3">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref href="System.Double.NaN"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Double.PositiveInfinity"&gt;&lt;/xref&gt;</ph>, or <ph id="ph4">&lt;xref href="System.Double.NegativeInfinity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the value of the specified 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The value to represent as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to a decimal value represented in binary and contained in a specified array.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binary representation of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`bits`</ph> is a four-element long array of 32-bit signed integers.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`bits`</ph> [0], <ph id="ph2">`bits`</ph> [1], and <ph id="ph3">`bits`</ph> [2] contain the low, middle, and high 32 bits of the 96-bit integer number.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`bits`</ph> [3] contains the scale factor and sign, and consists of following parts:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bits 0 to 15, the lower word, are unused and must be zero.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bits 16 to 23 must contain an exponent between 0 and 28, which indicates the power of 10 to divide the integer number.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bits 24 to 30 are unused and must be zero.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bit 31 contains the sign; 0 meaning positive, and 1 meaning negative.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>A numeric value might have several possible binary representations; all are equally valid and numerically equivalent.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the bit representation differentiates between negative and positive zero.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>These values are treated as being equal in all operations.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An array of 32-bit signed integers containing a representation of a decimal value.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bits&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The length of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bits</ph><ept id="p1">&lt;/code&gt;</ept> is not 4.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The representation of the decimal value in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bits</ph><ept id="p1">&lt;/code&gt;</ept> is not valid.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the value of the specified 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The value to represent as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the value of the specified single-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor rounds <ph id="ph1">`value`</ph> to 7 significant digits using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is done even if the number has more than 7 digits and the less significant digits are zero.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The value to represent as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph> or less than <ph id="ph3">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref href="System.Single.NaN"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Single.PositiveInfinity"&gt;&lt;/xref&gt;</ph>, or <ph id="ph4">&lt;xref href="System.Single.NegativeInfinity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the value of the specified 32-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The value to represent as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the value of the specified 64-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The value to represent as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> from parameters specifying the instance's constituent parts.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binary representation of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scaling factor is implicitly the number 10 raised to an exponent ranging from 0 to 28.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The low 32 bits of a 96-bit integer.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The middle 32 bits of a 96-bit integer.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The high 32 bits of a 96-bit integer.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to indicate a negative number; <ph id="ph2">`false`</ph> to indicate a positive number.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A power of 10 ranging from 0 to 28.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;scale&lt;/code&gt;</ph> is greater than 28.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Adds two specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code sample illustrates the use of <ph id="ph1">`Add`</ph> :</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Decimal Example#5<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR/Decimal Example/CPP/source.cpp#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Decimal Example#5<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR/Decimal Example/CS/source.cs#5)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Decimal Example#5<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR/Decimal Example/VB/source.vb#5)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The first value to add.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The second value to add.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept> is less than <ph id="ph3">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph4">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns the smallest integral value that is greater than or equal to the specified decimal number.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of this method follows IEEE Standard 754, section 4.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>This kind of rounding is sometimes called rounding toward positive infinity.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other words, if <ph id="ph1">`d`</ph> is positive, the presence of any fractional component causes <ph id="ph2">`d`</ph> to be rounded to the next highest integer.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`d`</ph> is negative, the rounding operation causes any fractional component of <ph id="ph2">`d`</ph> to be discarded.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation of this method differs from the <ph id="ph1">&lt;xref:System.Decimal.Floor%2A&gt;</ph> method, which supports rounding toward negative infinity.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A decimal number.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The smallest integral value that is greater than or equal to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Note that this method returns a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> instead of an integral type.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Compares two specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A signed number indicating the relative values of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Less than zero</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d1&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;code&gt;d2&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d1&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;d2&lt;/code&gt;</ph> are equal.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Greater than zero</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d1&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;code&gt;d2&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Compares this instance to a specified object and returns a comparison of their relative values.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any instance of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph>, regardless of its value, is considered greater than <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parameter <ph id="ph1">`value`</ph> must be <ph id="ph2">`null`</ph> or an instance of <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>; otherwise, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The object to compare with this instance, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A signed number indicating the relative values of this instance and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Less than zero</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This instance is less than <ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This instance is equal to <ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Greater than zero</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This instance is greater than <ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Compares this instance to a specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object and returns a comparison of their relative values.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method implements the <ph id="ph1">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> interface and performs slightly better than the <ph id="ph2">&lt;xref:System.Decimal.CompareTo%2A?displayProperty=fullName&gt;</ph> method because it does not have to convert the <ph id="ph3">`value`</ph> parameter to an object.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on your programming language, it might be possible to code a <ph id="ph1">&lt;xref:System.Decimal.CompareTo%2A&gt;</ph> method where the parameter type has fewer bits (is narrower) than the instance type.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose the instance type is <ph id="ph1">&lt;xref:System.Int32&gt;</ph> and the parameter type is <ph id="ph2">&lt;xref:System.Byte&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Microsoft C# compiler generates instructions to represent the parameter as an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> object, then generates a <ph id="ph2">&lt;xref:System.Int32.CompareTo%2A?displayProperty=fullName&gt;</ph> method to compare the values of the <ph id="ph3">&lt;xref:System.Int32&gt;</ph> instance and the <ph id="ph4">&lt;xref:System.Int32&gt;</ph> parameter representation.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The object to compare with this instance.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A signed number indicating the relative values of this instance and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Less than zero</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This instance is less than <ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This instance is equal to <ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Greater than zero</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This instance is greater than <ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Divides two specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The dividend.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The divisor.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The result of dividing <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d2&lt;/code&gt;</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The return value (that is, the quotient) is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether this instance and a specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object represent the same value.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method implements the <ph id="ph1">&lt;xref:System.IEquatable%601?displayProperty=fullName&gt;</ph> interface, and performs slightly better than <ph id="ph2">&lt;xref:System.Decimal.Equals%2A&gt;</ph> because it does not have to convert the <ph id="ph3">`value`</ph> parameter to an object.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose the instance type is <ph id="ph1">&lt;xref:System.Int32&gt;</ph> and the parameter type is <ph id="ph2">&lt;xref:System.Byte&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Microsoft C# compiler generates instructions to represent the value of the parameter as an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> object, then generates a <ph id="ph2">&lt;xref:System.Int32.CompareTo%2A?displayProperty=fullName&gt;</ph> method to compare the <ph id="ph3">&lt;xref:System.Int32&gt;</ph> instance and parameter representation.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>An object to compare to this instance.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> is equal to this instance; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether this instance and a specified <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> represent the same type and value.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The object to compare with this instance.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> is a <ph id="ph3">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> and equal to this instance; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether two specified instances of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> represent the same value.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">d1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">d2</ph><ept id="p2">&lt;/code&gt;</ept> are equal; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Rounds a specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> number to the closest integer toward negative infinity.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of this method follows IEEE Standard 754, Section 4.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>This kind of rounding is sometimes called rounding toward negative infinity.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other words, if <ph id="ph1">`d`</ph> is positive, any fractional component is truncated.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`d`</ph> is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation of this method differs from the <ph id="ph1">&lt;xref:System.Decimal.Ceiling%2A&gt;</ph> method, which supports rounding toward positive infinity.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The value to round.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> has a fractional part, the next whole <ph id="ph2">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> number toward negative infinity that is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">d</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> doesn't have a fractional part, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d</ph><ept id="p2">&lt;/code&gt;</ept> is returned unchanged.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Note that the method returns an integral value of type <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Converts the specified 64-bit signed integer, which contains an OLE Automation Currency value, to the equivalent <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>An OLE Automation Currency value.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> that contains the equivalent of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">cy</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Converts the value of a specified instance of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to its equivalent binary representation.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binary representation of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is a four-element array of 32-bit signed integers.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first, second, and third elements of the returned array contain the low, middle, and high 32 bits of the 96-bit integer number.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth element of the returned array contains the scale factor and sign.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>It consists of the following parts:</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bits 0 to 15, the lower word, are unused and must be zero.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bits 16 to 23 must contain an exponent between 0 and 28, which indicates the power of 10 to divide the integer number.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bits 24 to 30 are unused and must be zero.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bit 31 contains the sign: 0 mean positive, and 1 means negative.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the bit representation differentiates between negative and positive zero.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>These values are treated as being equal in all operations.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The value to convert.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer array with four elements that contain the binary representation of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this instance.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer hash code.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">&lt;xref href="System.TypeCode"&gt;&lt;/xref&gt;</ph> for value type <ph id="ph2">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The enumerated constant <ph id="ph1">&lt;xref href="System.TypeCode.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Represents the largest possible value of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>This field is constant and read-only.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this constant is positive 79,228,162,514,264,337,593,543,950,335.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Represents the number negative one (-1).</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Represents the smallest possible value of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This field is constant and read-only.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this constant is negative 79,228,162,514,264,337,593,543,950,335.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Multiplies two specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The multiplicand.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The multiplier.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The result of multiplying <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Returns the result of multiplying the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value by negative one.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The value to negate.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A decimal number with the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept>, but the opposite sign.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Zero, if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> is zero.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Represents the number one (1).</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Adds two specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_Addition%2A&gt;</ph> method defines the operation of the addition operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/addition1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/addition1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the language you're using doesn't support custom operators, call the <ph id="ph1">&lt;xref:System.Decimal.Add%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Add%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The first value to add.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The second value to add.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The result of adding <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Decrements the <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> operand by one.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_Decrement%2A&gt;</ph> method defines the operation of the decrement operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/decrement1.cs#4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some languages (such as Visual Basic) that lack an increment operator can call the <ph id="ph1">&lt;xref:System.Decimal.op_Decrement%2A&gt;</ph> method directly, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#5<ept id="p2">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/decrement1.vb#5)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your language does not support custom operators, call the <ph id="ph1">&lt;xref:System.Decimal.Subtract%2A&gt;</ph> method instead, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#6<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/decrement2.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#6<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/decrement2.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The value to decrement.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> decremented by 1.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Divides two specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_Division%2A&gt;</ph> method defines the operation of the division operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#7<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/division1.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#7<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/division1.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the language you're using doesn't support custom operators, call the <ph id="ph1">&lt;xref:System.Decimal.Divide%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Divide%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The dividend.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The divisor.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The result of dividing <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d2&lt;/code&gt;</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether two <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values are equal.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_Equality%2A&gt;</ph> method defines the operation of the equality operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/equality1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/equality1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the language you're using doesn't support custom operators, call the <ph id="ph1">&lt;xref:System.Decimal.Equals%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Equals%28System.Object%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">d1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">d2</ph><ept id="p2">&lt;/code&gt;</ept> are equal; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether a specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> is greater than another specified <ph id="ph2">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_GreaterThan%2A&gt;</ph> method defines the operation of the greater than operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#8<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/greaterthan1.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#8<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/greaterthan1.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.Decimal.Compare%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>They may also be able to call the <ph id="ph1">&lt;xref:System.Decimal.op_GreaterThan%2A&gt;</ph> method directly, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#9<ept id="p2">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/greaterthan2.vb#9)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Compare%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">d1</ph><ept id="p1">&lt;/code&gt;</ept> is greater than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">d2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether a specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> is greater than or equal to another specified <ph id="ph2">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_GreaterThanOrEqual%2A&gt;</ph> method defines the operation of the greater than or equal operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#10<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/greaterthanorequal1.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#10<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/greaterthanorequal1.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.Decimal.Compare%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>They may also be able to call the <ph id="ph1">&lt;xref:System.Decimal.op_GreaterThanOrEqual%2A&gt;</ph> method directly, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#11<ept id="p2">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/greaterthanorequal2.vb#11)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Compare%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">d1</ph><ept id="p1">&lt;/code&gt;</ept> is greater than or equal to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">d2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Increments the <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> operand by 1.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_Increment%2A&gt;</ph> method defines the operation of the increment operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#12<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/increment1.cs#12)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some languages (such as Visual Basic) that lack an increment operator can call the <ph id="ph1">&lt;xref:System.Decimal.op_Increment%2A&gt;</ph> method directly, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#13<ept id="p2">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/increment1.vb#13)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your language does not support custom operators, call the <ph id="ph1">&lt;xref:System.Decimal.Add%2A&gt;</ph> method instead, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#14<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/increment2.cs#14)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#14<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/increment2.vb#14)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The value to increment.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> incremented by 1.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether two <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> objects have different values.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_Inequality%2A&gt;</ph> method defines the operation of the inequality operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/inequality1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/inequality1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the language you're using doesn't support custom operators, you can test for inequality by using one of the following techniques:</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Decimal.Compare%2A&gt;</ph> method, which indicates the relationship between two <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Decimal.Equals%2A&gt;</ph> method and reversing its value.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Compare%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">d1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">d2</ph><ept id="p2">&lt;/code&gt;</ept> are not equal; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether a specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> is less than another specified <ph id="ph2">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_LessThan%2A&gt;</ph> method defines the operation of the less than operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#15<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/lessthan1.cs#15)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#15<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/lessthan1.vb#15)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.Decimal.Compare%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>They may also be able to call the <ph id="ph1">&lt;xref:System.Decimal.op_LessThan%2A&gt;</ph> method directly, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#16<ept id="p2">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/lessthan2.vb#16)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Compare%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">d1</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">d2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether a specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> is less than or equal to another specified <ph id="ph2">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_LessThanOrEqual%2A&gt;</ph> method defines the operation of the less than or equal operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#17<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/lessthanorequal1.cs#17)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#17<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/lessthanorequal1.vb#17)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.Decimal.Compare%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>They may also be able to call the <ph id="ph1">&lt;xref:System.Decimal.op_LessThanOrEqual%2A&gt;</ph> method directly, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#18<ept id="p2">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/lessthanorequal2.vb#18)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Compare%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">d1</ph><ept id="p1">&lt;/code&gt;</ept> is less than or equal to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">d2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Returns the remainder resulting from dividing two specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_Modulus%2A&gt;</ph> method defines the operation of the modulus operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#19<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/modulus1.cs#19)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#19<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/modulus1.vb#19)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the language you're using doesn't support custom operators, call the <ph id="ph1">&lt;xref:System.Decimal.Remainder%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>The sign of the value return by the modulus operation depends on the sign of dividend.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>If dividend is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Remainder%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The dividend.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The divisor.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The remainder resulting from dividing <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d2&lt;/code&gt;</ph> is <ph id="ph2">`zero`</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Multiplies two specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_Multiply%2A&gt;</ph> method defines the operation of the multiplication operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#20<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/multiply1.cs#20)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#20<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/multiply1.vb#20)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the language you're using doesn't support custom operators, call the <ph id="ph1">&lt;xref:System.Decimal.Multiply%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Multiply%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The first value to multiply.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The second value to multiply.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The result of multiplying <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Subtracts two specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_Subtraction%2A&gt;</ph> method defines the operation of the subtraction operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following:</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Decimal.Operators#21<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.decimal.operators/cs/subtraction1.cs#21)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Decimal.Operators#21<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.decimal.operators/vb/subtraction1.vb#21)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the language you're using doesn't support custom operators, call the <ph id="ph1">&lt;xref:System.Decimal.Subtract%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Subtract%28System.Decimal%2CSystem.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The minuend.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The subtrahend.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The result of subtracting <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d2</ph><ept id="p1">&lt;/code&gt;</ept> from <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d1</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Negates the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> operand.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_UnaryPlus%2A&gt;</ph> method defines the operation of the unary negation operator (or the additive inverse operator) for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation produces a value that results in 0 (zero) when it is added to the original number.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.Decimal.Negate%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Decimal.Negate%28System.Decimal%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The value to negate.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> multiplied by negative one (-1).</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Returns the value of the <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> operand (the sign of the operand is unchanged).</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.op_UnaryPlus%2A&gt;</ph> method defines the operation of the unary positive operator for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The operand to return.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The value of the operand, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Converts the string representation of a number to its <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> equivalent.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parameter <ph id="ph1">`s`</ph> contains a number of the form:</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>[ws][sign][digits,]digits[.fractional-digits][ws]</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets ([ and ]) are optional.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optional white space.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>An optional sign.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>,<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific thousands separator symbol.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parameter <ph id="ph1">`s`</ph> is interpreted using the <ph id="ph2">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that white space and thousands separators are allowed but currency symbols are not.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <ph id="ph1">`s`</ph>, use either the <ph id="ph2">&lt;xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName&gt;</ph> or the <ph id="ph3">&lt;xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parameter <ph id="ph1">`s`</ph> is parsed using the formatting information in a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> initialized for the current system culture.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>To parse a string using the formatting information of some other culture, use the <ph id="ph1">&lt;xref:System.Decimal.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>If necessary, the value of <ph id="ph1">`s`</ph> is rounded using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> has 29 digits of precision.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`s`</ph> represents a number that has more than 29 digits, but has a fractional part and is within the range of <ph id="ph2">&lt;xref:System.Decimal.MaxValue&gt;</ph> and <ph id="ph3">&lt;xref:System.Decimal.MinValue&gt;</ph>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>If during a parse operation a separator is encountered in the <ph id="ph1">`s`</ph> parameter, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The string representation of the number to convert.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The equivalent to the number contained in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">s</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is not in the correct format.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> represents a number less than <ph id="ph2">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph3">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Converts the string representation of a number in a specified style to its <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> equivalent.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`style`</ph> parameter defines the style elements (such as thousands separators, white space, and currency symbols) that are allowed in the <ph id="ph2">`s`</ph> parameter for the parse operation to succeed.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>It must be a combination of bit flags from the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members are not supported:</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the value of <ph id="ph1">`style`</ph>, the <ph id="ph2">`s`</ph> parameter may include the following elements:</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>[ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws]</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets ([ and ]) are optional.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optional white space.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>White space can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, and it can appear at the end of <ph id="ph4">`s`</ph> if <ph id="ph5">`style`</ph> includes the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific currency symbol.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its position in the string is defined by the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName&gt;</ph> properties of the current culture.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current culture's currency symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>An optional sign.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>The sign can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, and it can appear at the end of <ph id="ph4">`s`</ph> if <ph id="ph5">`style`</ph> includes the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parentheses can be used in <ph id="ph1">`s`</ph> to indicate a negative value if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>,<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific thousands separator symbol.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current culture's thousands separator can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current culture's decimal point symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fractional digits can appear in <ph id="ph1">`s`</ph> only if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>e<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>The 'e' or 'E' character, which indicates that the value is represented in exponential notation.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter can represent a number in exponential notation if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string with digits only (which corresponds to the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles.None&gt;</ph> style) always parses successfully.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>The remaining <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members control elements that may be but are not required to be present in the input string.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table indicates how individual <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members affect the elements that may be present in <ph id="ph2">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>NumberStyles value</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements permitted in s in addition to digits</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>digits<ept id="p1">*</ept> element only.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>and <bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept> elements.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter can also use exponential notation.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>This flag supports values in the form <bpt id="p1">*</bpt>digits<ept id="p1">*</ept>E<bpt id="p2">*</bpt>digits<ept id="p2">*</ept>; additional flags are needed to successfully parse strings with elements such as positive or negative signs and decimal point symbols.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element in the form of parentheses enclosing the numeric value.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>,<ept id="p1">*</ept> element.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt><ph id="ph1">$</ph><ept id="p1">*</ept> element.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>All.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter cannot represent a hexadecimal number or a number in exponential notation.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning or end of <ph id="ph1">`s`</ph>, <bpt id="p2">*</bpt>sign<ept id="p2">*</ept> at the beginning of <ph id="ph2">`s`</ph>, and the <bpt id="p3">*</bpt>.<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>symbol.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter can also use exponential notation.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ws`</ph>, <ph id="ph2">`sign`</ph>, <bpt id="p1">*</bpt>,<ept id="p1">*</ept>, and <bpt id="p2">*</bpt>.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>elements.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>All styles, except <ph id="ph1">`s`</ph> cannot represent a hexadecimal number.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter is parsed using the formatting information in a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object initialized for the current system culture.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> has 29 digits of precision.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`s`</ph> represents a number that has more than 29 digits, but has a fractional part and is within the range of <ph id="ph2">&lt;xref:System.Decimal.MaxValue&gt;</ph> and <ph id="ph3">&lt;xref:System.Decimal.MinValue&gt;</ph>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, <ph id="ph2">`styles`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> values, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The string representation of the number to convert.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>A bitwise combination of <ph id="ph1">&lt;xref href="System.Globalization.NumberStyles"&gt;&lt;/xref&gt;</ph> values that indicates the style elements that can be present in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">s</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>A typical value to specify is <ph id="ph1">&lt;xref href="System.Globalization.NumberStyles.Number"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> number equivalent to the number contained in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">s</ph><ept id="p1">&lt;/code&gt;</ept> as specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">style</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;style&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.Globalization.NumberStyles"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;style&lt;/code&gt;</ph> is the <ph id="ph2">&lt;xref href="System.Globalization.NumberStyles.AllowHexSpecifier"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is not in the correct format.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> represents a number less than <ph id="ph2">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph3">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Converts the string representation of a number to its <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> equivalent using the specified culture-specific format information.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Decimal.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method is commonly used to convert text that can be formatted in a variety of ways to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter contains a number of the form:</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>[ws][sign][digits,]digits[.fractional-digits][ws]</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets ([ and ]) are optional.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optional white space.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>An optional sign.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>,<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific thousands separator symbol.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter is interpreted using the <ph id="ph2">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that white space and thousands separators are allowed but currency symbols are not.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <ph id="ph1">`s`</ph>, use the <ph id="ph2">&lt;xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation, such as a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> or <ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter supplies culture-specific information used in parsing.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the thread current culture is used.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> object has 29 digits of precision.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`s`</ph> represents a number that has more than 29 digits, but has a fractional part and is within the range of <ph id="ph2">&lt;xref:System.Decimal.MaxValue&gt;</ph> and <ph id="ph3">&lt;xref:System.Decimal.MinValue&gt;</ph>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The string representation of the number to convert.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IFormatProvider"&gt;&lt;/xref&gt;</ph> that supplies culture-specific parsing information about <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">s</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> number equivalent to the number contained in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">s</ph><ept id="p1">&lt;/code&gt;</ept> as specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">provider</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is not of the correct format</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> represents a number less than <ph id="ph2">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph3">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Converts the string representation of a number to its <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> equivalent using the specified style and culture-specific format.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`style`</ph> parameter defines the allowable format of the <ph id="ph2">`s`</ph> parameter for the parse operation to succeed.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>It must be a combination of bit flags from the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members are not supported:</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the value of <ph id="ph1">`style`</ph>, the <ph id="ph2">`s`</ph> parameter may include the following elements:</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>[ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws]</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets ([ and ]) are optional.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific currency symbol.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its position in the string is defined by the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object returned by the <ph id="ph4">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method of the <ph id="ph5">`provider`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>The currency symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optional white space.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>White space can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, and it can appear at the end of <ph id="ph4">`s`</ph> if <ph id="ph5">`style`</ph> includes the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>An optional sign.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>The sign can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, and it can appear at the end of <ph id="ph4">`s`</ph> if <ph id="ph5">`style`</ph> includes the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parentheses can be used in <ph id="ph1">`s`</ph> to indicate a negative value if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>,<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific thousands separator symbol.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thousands separator of the culture defined by <ph id="ph1">`provider`</ph> can appear in <ph id="ph2">`s`</ph> if <ph id="ph3">`style`</ph> includes the <ph id="ph4">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>The decimal point symbol of the culture defined by <ph id="ph1">`provider`</ph> can appear in <ph id="ph2">`s`</ph> if <ph id="ph3">`style`</ph> includes the <ph id="ph4">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fractional digits can appear in <ph id="ph1">`s`</ph> only if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>e<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>The 'e' or 'E' character, which indicates that the value is represented in exponential notation.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter can represent a number in exponential notation if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string with digits only (which corresponds to the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles.None&gt;</ph> style) always parses successfully.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>The remaining <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members control elements that may be but are not required to be present in the input string.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table indicates how individual <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members affect the elements that may be present in <ph id="ph2">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>NumberStyles value</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements permitted in s in addition to digits</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>digits<ept id="p1">*</ept> element only.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT">
          <source>and <bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept> elements.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter can also use exponential notation.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>This flag supports values in the form <bpt id="p1">*</bpt>digits<ept id="p1">*</ept>E<bpt id="p2">*</bpt>digits<ept id="p2">*</ept>; additional flags are needed to successfully parse strings with elements such as positive or negative signs and decimal point symbols.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element in the form of parentheses enclosing the numeric value.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>,<ept id="p1">*</ept> element.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt><ph id="ph1">$</ph><ept id="p1">*</ept> element.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>All.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter cannot represent a hexadecimal number or a number in exponential notation.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning or end of <ph id="ph1">`s`</ph>, <bpt id="p2">*</bpt>sign<ept id="p2">*</ept> at the beginning of <ph id="ph2">`s`</ph>, and the <bpt id="p3">*</bpt>.<ept id="p3">*</ept>symbol.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`s`</ph> parameter can also use exponential notation.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ws`</ph>, <ph id="ph2">`sign`</ph>, <bpt id="p1">*</bpt>,<ept id="p1">*</ept>, and <bpt id="p2">*</bpt>.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>elements.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>All styles, except <ph id="ph1">`s`</ph> cannot represent a hexadecimal number.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation, such as a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> or <ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter supplies culture-specific information used in parsing.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the thread current culture is used.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> object has 29 digits of precision.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`s`</ph> represents a number that has more than 29 digits, but has a fractional part and is within the range of <ph id="ph2">&lt;xref:System.Decimal.MaxValue&gt;</ph> and <ph id="ph3">&lt;xref:System.Decimal.MinValue&gt;</ph>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>The string representation of the number to convert.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>A bitwise combination of <ph id="ph1">&lt;xref href="System.Globalization.NumberStyles"&gt;&lt;/xref&gt;</ph> values that indicates the style elements that can be present in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">s</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>A typical value to specify is <ph id="ph1">&lt;xref href="System.Globalization.NumberStyles.Number"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IFormatProvider"&gt;&lt;/xref&gt;</ph> object that supplies culture-specific information about the format of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">s</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> number equivalent to the number contained in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">s</ph><ept id="p1">&lt;/code&gt;</ept> as specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">style</ph><ept id="p2">&lt;/code&gt;</ept> and <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">provider</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is not in the correct format.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> represents a number less than <ph id="ph2">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph3">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;style&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.Globalization.NumberStyles"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;style&lt;/code&gt;</ph> is the <ph id="ph2">&lt;xref href="System.Globalization.NumberStyles.AllowHexSpecifier"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Computes the remainder after dividing two <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The dividend.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>The divisor.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The remainder after dividing <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d1</ph><ept id="p1">&lt;/code&gt;</ept> by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d2</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d2&lt;/code&gt;</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Rounds a decimal value to a specified precision.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>A parameter specifies how to round the value if it is midway between two other numbers.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`decimals`</ph> parameter specifies the number of significant decimal places in the return value and ranges from 0 to 28.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`decimals`</ph> is zero, an integer is returned.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, 3.47500 is a midpoint value if it is to be rounded two decimal places, and 7.500 is a midpoint value if it is to be rounded to an integer.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these cases, the nearest value can't be easily identified without a rounding convention, which is specified by the <ph id="ph1">`mode`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29&gt;</ph> method supports two rounding conventions for handling midpoint values.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rounding away from zero.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT">
          <source>Midpoint values are rounded to the next number away from zero.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, 3.75 rounds to 3.8, 3.85 rounds to 3.9, -3.75 rounds to -3.8, and -3.85 rounds to -3.9.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>This form of rounding is represented by the <ph id="ph1">&lt;xref:System.MidpointRounding?displayProperty=fullName&gt;</ph> enumeration member.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rounding away from zero is the most widely known form of rounding.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rounding to even, or banker's rounding</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>Midpoint values are rounded to the nearest even number.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, both 3.75 and 3.85 round to 3.8, and both -3.75 and -3.85 round to -3.8.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT">
          <source>This form of rounding is represented by the <ph id="ph1">&lt;xref:System.MidpointRounding?displayProperty=fullName&gt;</ph> enumeration member.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rounding to nearest is the standard form of rounding used in financial and statistical operations.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>It conforms to IEEE Standard 754, section 4.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, this rounding error can be significant.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>A decimal number to round.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The number of significant decimal places (precision) in the return value.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>A value that specifies how to round <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> if it is midway between two other numbers.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>The number that is nearest to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> parameter with a precision equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">decimals</ph><ept id="p2">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> is halfway between two numbers, one of which is even and the other odd, the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">mode</ph><ept id="p2">&lt;/code&gt;</ept> parameter determines which of the two numbers is returned.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>If the precision of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">decimals</ph><ept id="p2">&lt;/code&gt;</ept>, <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">d</ph><ept id="p3">&lt;/code&gt;</ept> is returned unchanged.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;decimals&lt;/code&gt;</ph> is less than 0 or greater than 28.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.MidpointRounding"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>The result is outside the range of a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Rounds a decimal value to the nearest integer.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>A parameter specifies how to round the value if it is midway between two other numbers.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, 7.5 is a midpoint value if it is to be rounded to an integer.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>For midpoint values, the nearest value can't be easily identified without a rounding convention, which is specified by the <ph id="ph1">`mode`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.Round%2A&gt;</ph> method supports two rounding conventions for handling midpoint values.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rounding away from zero.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT">
          <source>Midpoint values are rounded to the next number away from zero.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, 3.5 rounds to 4, 4.5 rounds to 5, -3.5 rounds to -4, and -4.5 rounds to -5.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT">
          <source>This form of rounding is represented by the <ph id="ph1">&lt;xref:System.MidpointRounding?displayProperty=fullName&gt;</ph> enumeration member.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rounding away from zero is the most widely known form of rounding.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rounding to even, or banker's rounding</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>Midpoint values are rounded to the nearest even number.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, both 3.5 and 4.5 round to 4, and both -3.5 and -4.5 round to -4.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source>This form of rounding is represented by the <ph id="ph1">&lt;xref:System.MidpointRounding?displayProperty=fullName&gt;</ph> enumeration member.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rounding to nearest is the standard form of rounding used in financial and statistical operations.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT">
          <source>It conforms to IEEE Standard 754, section 4.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT">
          <source>When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, this rounding error can be significant.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>A decimal number to round.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>A value that specifies how to round <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> if it is midway between two other numbers.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>The integer that is nearest to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> is halfway between two numbers, one of which is even and the other odd, the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">mode</ph><ept id="p2">&lt;/code&gt;</ept> parameter determines which of the two numbers is returned.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.MidpointRounding"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>The result is outside the range of a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Rounds a decimal value to the nearest integer.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of this method follows IEEE Standard 754, section 4.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>This kind of rounding is sometimes called <bpt id="p1">*</bpt>round half to even<ept id="p1">*</ept> or <bpt id="p2">*</bpt>banker's rounding<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is equivalent to calling the <ph id="ph1">&lt;xref:System.Decimal.Round%28System.Decimal%2CSystem.MidpointRounding%29&gt;</ph> method with a <ph id="ph2">`mode`</ph> argument of <ph id="ph3">&lt;xref:System.MidpointRounding?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>A decimal number to round.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>The integer that is nearest to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> is halfway between two integers, one of which is even and the other odd, the even number is returned.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>The result is outside the range of a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Rounds a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value to a specified number of decimal places.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is equivalent to calling the <ph id="ph1">&lt;xref:System.Decimal.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29&gt;</ph> method with a <ph id="ph2">`mode`</ph> argument of <ph id="ph3">&lt;xref:System.MidpointRounding?displayProperty=fullName&gt;</ph>.When <ph id="ph4">`d`</ph> is exactly halfway between two rounded values, the result is the rounded value that has an even digit in the far right decimal position.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT">
          <source>This process is known as <bpt id="p1">*</bpt>rounding toward even<ept id="p1">*</ept>, or <bpt id="p2">*</bpt>banker's rounding<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT">
          <source>It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>A decimal number to round.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>A value from 0 to 28 that specifies the number of decimal places to round to.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>The decimal number equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> rounded to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">decimals</ph><ept id="p2">&lt;/code&gt;</ept> number of decimal places.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;decimals&lt;/code&gt;</ph> is not a value from 0 to 28.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Subtracts one specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value from another.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>The minuend.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>The subtrahend.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>The result of subtracting <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d2</ph><ept id="p1">&lt;/code&gt;</ept> from <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">d1</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>The return value is less than <ph id="ph1">&lt;xref href="System.Decimal.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent 8-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parameter <ph id="ph1">`value`</ph> is rounded to the nearest integer value toward zero, and that result is returned.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to an 8-bit unsigned integer by using the <ph id="ph2">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>An 8-bit unsigned integer equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;xref href="System.Byte.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph3">&lt;xref href="System.Byte.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation can produce round-off errors because a double-precision floating-point number has fewer significant digits than a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value by using the <ph id="ph3">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the conversion can entail a loss of precision, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>A double-precision floating-point number equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent 16-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to a 16-bit integer by using the <ph id="ph2">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>A 16-bit signed integer equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;xref href="System.Int16.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph3">&lt;xref href="System.Int16.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is the integral part of the decimal value; fractional digits are truncated.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to a 32-bit integer by using the <ph id="ph2">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer equivalent to the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;xref href="System.Int32.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph3">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is the integral part of the decimal value; fractional digits are truncated.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to a 64-bit integer by using the <ph id="ph2">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>A 64-bit signed integer equivalent to the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;xref href="System.Int64.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph3">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Converts the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value to the equivalent OLE Automation Currency value, which is contained in a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>A 64-bit signed integer that contains the OLE Automation equivalent of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent 8-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to an 8-bit signed integer by using the <ph id="ph2">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>An 8-bit signed integer equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;xref href="System.SByte.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph3">&lt;xref href="System.SByte.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent single-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation can produce round-off errors because a single-precision floating-point number has fewer significant digits than a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> to a <ph id="ph2">&lt;xref:System.Single&gt;</ph> value by using the <ph id="ph3">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the conversion can entail a loss of precision, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>A single-precision floating-point number equivalent to the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method formats a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value in a specified format of a specified culture.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to use default format or culture settings, use the other overloads of the <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> method, as follows:</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use format</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT">
          <source>For culture</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the overload</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default ("G") format</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default (current) culture</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default ("G") format</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific culture</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific format</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default (current) culture</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter can be any valid standard numeric format specifier except for D, R, and X, as well as any combination of custom numeric format specifiers.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string, the return value for this instance is formatted with the general numeric format specifier ("G").</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation whose <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName&gt;</ph> method returns a <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, <ph id="ph1">`provider`</ph> is a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter supplies culture-specific information used in formatting.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the thread current culture is used.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>A numeric format string.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>The string representation of the value of this instance as specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">provider</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.ToString%28System.IFormatProvider%29&gt;</ph> method formats a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value in the default ("G", or general) format of a specified culture.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify a different format or the current culture, use the other overloads of the <ph id="ph1">&lt;xref:System.Decimal.ToString%2A&gt;</ph> method, as follows:</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use format</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT">
          <source>For culture</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the overload</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default ("G") format</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default (current) culture</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific format</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default (current) culture</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific format</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific culture</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation whose <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName&gt;</ph> method returns a <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, <ph id="ph1">`provider`</ph> is a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object or a <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter supplies culture-specific information used in formatting.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the thread current culture is used.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT">
          <source>To convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to its string representation using a specified culture and a specific format string, call the <ph id="ph2">&lt;xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>The string representation of the value of this instance as specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">provider</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Converts the numeric value of this instance to its equivalent string representation.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.ToString&gt;</ph> method formats a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value in the default ("G", or general) format of the current culture.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify a different format or culture, use the other overloads of the <ph id="ph1">&lt;xref:System.Decimal.ToString%2A&gt;</ph> method, as follows:</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use format</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT">
          <source>For culture</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the overload</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default ("G") format</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific culture</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific format</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default (current) culture</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific format</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific culture</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>A string that represents the value of this instance.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.ToString%28System.String%29&gt;</ph> method formats a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value in a specified format by using the conventions of the current culture.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to use the default ("G", or general) format or specify a different culture, use the other overloads of the <ph id="ph1">&lt;xref:System.Decimal.ToString%2A&gt;</ph> method, as follows:</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use format</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT">
          <source>For culture</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the overload</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default ("G") format</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default (current) culture</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default ("G") format</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific culture</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific format</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT">
          <source>A specific culture</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal.ToString%2A&gt;</ph> method uses the standard or custom numeric format string specified by the <ph id="ph2">`format`</ph> parameter to convert the value of the current instance into its string representation.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter can be any valid <bpt id="p1">[</bpt>standard numeric format specifier<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> except for D, R, and X, as well as any combination of <bpt id="p2">[</bpt>custom numeric format specifiers<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string, the return value of this instance is formatted with the general numeric format specifier (G).</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is formatted by using the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT">
          <source>To apply the formatting conventions of a specified culture, call the <ph id="ph1">&lt;xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>A standard or custom numeric format string.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>The string representation of the value of this instance as specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent 16-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is the integral part of the decimal value; fractional digits are truncated.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to a 16-bit unsigned integer by using the <ph id="ph2">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>A 16-bit unsigned integer equivalent to the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;xref href="System.UInt16.MaxValue"&gt;&lt;/xref&gt;</ph> or less than <ph id="ph3">&lt;xref href="System.UInt16.MinValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent 32-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is the integral part of the decimal value; fractional digits are truncated.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to an 32-bit unsigned integer by using the <ph id="ph2">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>A 32-bit unsigned integer equivalent to the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is negative or greater than <ph id="ph2">&lt;xref href="System.UInt32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>Converts the value of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to the equivalent 64-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is the integral part of the decimal value; fractional digits are truncated.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to an 64-bit unsigned integer by using the <ph id="ph2">&lt;xref:System.Decimal.op_Explicit%2A&gt;</ph> assignment operator.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>The decimal number to convert.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>A 64-bit unsigned integer equivalent to the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is negative or greater than <ph id="ph2">&lt;xref href="System.UInt64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Returns the integral digits of the specified <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>; any fractional digits are discarded.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method rounds <ph id="ph1">`d`</ph> toward zero, to the nearest whole number, which corresponds to discarding any digits after the decimal point.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>The decimal number to truncate.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>The result of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">d</ph><ept id="p1">&lt;/code&gt;</ept> rounded toward zero, to the nearest whole number.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Converts the string representation of a number to its <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> equivalent using the specified style and culture-specific format.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>A return value indicates whether the conversion succeeded or failed.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload differs from the <ph id="ph1">&lt;xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT">
          <source>It eliminates the need to use exception handling to test for a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> in the event that <ph id="ph2">`s`</ph> is invalid and cannot be successfully parsed.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`style`</ph> parameter defines the allowable format of the <ph id="ph2">`s`</ph> parameter for the parse operation to succeed.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT">
          <source>It must be a combination of bit flags from the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members are not supported:</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the value of style, the <ph id="ph1">`s`</ph> parameter may include the following elements:</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT">
          <source>[ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws]</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets ([ and ]) are optional.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optional white space.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT">
          <source>White space can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can appear at the end of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific currency symbol.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its position in the string is defined by the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object returned by the <ph id="ph4">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName&gt;</ph> method of the <ph id="ph5">`provider`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT">
          <source>The currency symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT">
          <source>An optional sign.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`style`</ph> parameter specifies the permitted format of the <ph id="ph2">`s`</ph> parameter, and can be one or more <ph id="ph3">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumerated constants combined using a bitwise OR operation.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`style`</ph> is null, <ph id="ph2">`s`</ph> is interpreted using the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation such as a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> or <ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter supplies culture-specific information used in parsing.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the thread current culture is used.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> object has 29 digits of precision.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`s`</ph> represents a number that has more than 29 digits, but has a fractional part and is within the range of <ph id="ph2">&lt;xref:System.Decimal.MaxValue&gt;</ph> and <ph id="ph3">&lt;xref:System.Decimal.MinValue&gt;</ph>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>The string representation of the number to convert.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>A bitwise combination of enumeration values that indicates the permitted format of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">s</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>A typical value to specify is <ph id="ph1">&lt;xref href="System.Globalization.NumberStyles.Number"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific parsing information about <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">s</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">s</ph><ept id="p1">&lt;/code&gt;</ept> was converted successfully; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;style&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.Globalization.NumberStyles"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;style&lt;/code&gt;</ph> is the <ph id="ph2">&lt;xref href="System.Globalization.NumberStyles.AllowHexSpecifier"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Converts the string representation of a number to its <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> equivalent.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>A return value indicates whether the conversion succeeded or failed.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload differs from the <ph id="ph1">&lt;xref:System.Decimal.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT">
          <source>It eliminates the need to use exception handling to test for a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> in the event that <ph id="ph2">`s`</ph> is invalid and cannot be successfully parsed.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parameter <ph id="ph1">`s`</ph> contains a number of the form:</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT">
          <source>[ws][sign][digits,]digits[.fractional-digits][ws]</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets ([ and ]) are optional.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optional white space.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT">
          <source>An optional sign.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>,<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific thousands separator symbol.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT">
          <source>A culture-specific decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sequence of digits ranging from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parameter <ph id="ph1">`s`</ph> is interpreted using the <ph id="ph2">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that white space and thousands separators are allowed but currency symbols are not.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT">
          <source>To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <ph id="ph1">`s`</ph>, use the <ph id="ph2">&lt;xref:System.Decimal.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Decimal%40%29?displayProperty=fullName&gt;</ph> method overload.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parameter <ph id="ph1">`s`</ph> is parsed using the formatting information in a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object initialized for the current system culture.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT">
          <source>To parse a string using the formatting information of some other specified culture, use the <ph id="ph1">&lt;xref:System.Decimal.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Decimal%40%29?displayProperty=fullName&gt;</ph> method overload.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT">
          <source>If necessary, the value of <ph id="ph1">`s`</ph> is rounded using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> object has 29 digits of precision.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`s`</ph> represents a number that has more than 29 digits, but has a fractional part and is within the range of <ph id="ph2">&lt;xref:System.Decimal.MaxValue&gt;</ph> and <ph id="ph3">&lt;xref:System.Decimal.MinValue&gt;</ph>, the number is rounded, not truncated, to 29 digits using rounding to nearest.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT">
          <source>If during a parse operation a separator is encountered in the <ph id="ph1">`s`</ph> parameter, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>The string representation of the number to convert.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">s</ph><ept id="p1">&lt;/code&gt;</ept> was converted successfully; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>Represents the number zero (0).</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToBoolean(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.Decimal%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the value of the current instance is not zero; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToByte(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToByte%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToByte%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>The resulting integer value is less than <ph id="ph1">&lt;xref href="System.Byte.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Byte.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>Attempting to use this method throws an <ph id="ph1">&lt;xref href="System.InvalidCastException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>None.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>In all cases.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>Attempting to use this method throws an <ph id="ph1">&lt;xref href="System.InvalidCastException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>None.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>In all cases.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToDecimal(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>The value of the current instance, unchanged.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToDouble(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToDouble%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToDouble%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a <ph id="ph1">&lt;xref:System.Double&gt;</ph> has fewer significant digits than a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>, this operation may produce round-off errors.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToInt16(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToInt16%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToInt16%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value is rounded toward zero to the nearest integer value.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.Int16"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>The resulting integer value is less than <ph id="ph1">&lt;xref href="System.Int16.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Int16.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToInt32(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToInt32%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToInt32%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value is rounded toward zero to the nearest integer value.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>The parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>The resulting integer value is less than <ph id="ph1">&lt;xref href="System.Int32.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToInt64(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToInt64%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToInt64%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>The resulting integer value is less than <ph id="ph1">&lt;xref href="System.Int64.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToSByte(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToSByte%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToSByte%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.SByte"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>The resulting integer value is less than <ph id="ph1">&lt;xref href="System.SByte.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.SByte.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToSingle(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToSingle%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToSingle%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToType(System.Type,System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Convert.ChangeType%2A?displayProperty=fullName&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>The type to which to convert the value of this <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IFormatProvider"&gt;&lt;/xref&gt;</ph> implementation that supplies culture-specific information about the format of the returned value.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>The requested type conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToUInt16(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToUInt16%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToUInt16%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.UInt16"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>The resulting integer value is less than <ph id="ph1">&lt;xref href="System.UInt16.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.UInt16.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToInt32(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToUInt32%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToUInt32%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value is rounded toward zero to the nearest integer value.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.UInt32"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>The resulting integer value is less than <ph id="ph1">&lt;xref href="System.UInt32.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.UInt32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToInt64(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call either the <ph id="ph1">&lt;xref:System.Decimal.ToUInt64%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Convert.ToUInt64%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value is rounded toward zero to the nearest integer value.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;xref href="System.UInt64"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>The resulting integer value is less than <ph id="ph1">&lt;xref href="System.UInt64.MinValue"&gt;&lt;/xref&gt;</ph> or greater than <ph id="ph2">&lt;xref href="System.UInt64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>Runs when the deserialization of an object has been completed.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>The object that initiated the callback.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>The functionality for this parameter is not currently implemented.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object contains invalid or corrupted data.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>