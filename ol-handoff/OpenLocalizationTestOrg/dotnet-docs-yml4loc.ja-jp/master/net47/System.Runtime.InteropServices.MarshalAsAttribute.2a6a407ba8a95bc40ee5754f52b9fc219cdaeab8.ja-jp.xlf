<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">832f14aac5536b614306aac5a701620cb10fb647</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices.MarshalAsAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b338f0fb5e70e5abfa37bd7c1152650ebe2827f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28dda8c377b3d641004220d681571fcf6afd6a5c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates how to marshal the data between managed and unmanaged code.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this attribute to parameters, fields, or return values.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This attribute is optional, as each data type has a default marshaling behavior.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This attribute is only necessary when a given type can be marshaled to multiple types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can marshal a string to unmanaged code as either a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPStr&gt;</ph>, a <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPWStr&gt;</ph>, a <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPTStr&gt;</ph>, or a <ph id="ph4">&lt;xref:System.Runtime.InteropServices.UnmanagedType.BStr&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the common language runtime marshals a string parameter as a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.BStr&gt;</ph> to COM methods.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute to an individual field or parameter to cause that particular string to be marshaled as a <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPStr&gt;</ph> instead of a <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.BStr&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>Tlbexp.exe (Type Library Exporter)<ept id="p1">](~/docs/framework/tools/tlbexp-exe-type-library-exporter.md)</ept> passes your marshaling preferences to the common language runtime.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some parameters and return values have different default marshaling behavior when used with COM interop or platform invoke.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the runtime marshals a string parameter (and fields in a value type) as a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPStr&gt;</ph> to a platform invoke method or function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information, see <bpt id="p1">[</bpt>Default Marshaling Behavior<ept id="p1">](~/docs/framework/interop/default-marshaling-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, the attribute simply identifies the format of the unmanaged data using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration, as shown in the following C# signature:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>system.runtime.interopservices.MarshalAsAttribute#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.MarshalAsAttribute/cs/Signature1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>system.runtime.interopservices.MarshalAsAttribute#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.MarshalAsAttribute/vb/Signature1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration members require additional information.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, additional information is needed when the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> is <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPArray&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a complete description of how to use this attribute with arrays, see <bpt id="p1">[</bpt>Default Marshaling for Arrays<ept id="p1">](~/docs/framework/interop/default-marshaling-for-arrays.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> also applies this attribute to parameters, fields, and return values to indicate that the data type in the input type library is not the default type for the corresponding managed data type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tlbimp.exe always applies the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> to <ph id="ph2">&lt;xref:System.String&gt;</ph> and <ph id="ph3">&lt;xref:System.Object&gt;</ph> types for clarity, regardless of the type specified in the input type library.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> does not support marshaling of generic types.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute"&gt;&lt;/xref&gt;</ph> class with the specified <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.UnmanagedType"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor takes an underlying 16-bit signed integer that represents each <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration member.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> uses this constructor.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The value the data is to be marshaled as.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute"&gt;&lt;/xref&gt;</ph> class with the specified <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.UnmanagedType"&gt;&lt;/xref&gt;</ph> enumeration member.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>For readable code that is less prone to error, always use this constructor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The value the data is to be marshaled as.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specifies the element type of the unmanaged <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.UnmanagedType.LPArray"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.UnmanagedType.ByValArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set this parameter to a value from the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph> enumeration to specify the type of the array's elements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a type is not specified, the default unmanaged type corresponding to the managed array's element type is used.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">`ArraySubType`</ph> for a <ph id="ph2">`LPWStr`</ph> array in COM is <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information, see <bpt id="p1">[</bpt>Default Marshaling for Arrays<ept id="p1">](~/docs/framework/interop/default-marshaling-for-arrays.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Specifies the parameter index of the unmanaged <ph id="ph1">`iid_is`</ph> attribute used by COM.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Provides additional information to a custom marshaler.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is optional when using a custom marshaler.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set this field to a string that supplies additional information to a custom marshaler.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the same marshaler can be used to provide a number of wrappers, where the cookie is used to indicate the specific wrapper.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Specifies the fully qualified name of a custom marshaler.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use either the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef?displayProperty=fullName&gt;</ph> field specify a custom marshaler type for the attributed parameter, field, or return type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</ph> field enables you to specify a string representing the fully qualified name of a custom marshaler.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is useful for late-bound references, but is less preferred than <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</ph> for specifying a custom marshaler.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information about creating and using custom marshalers, see <bpt id="p1">[</bpt>Custom Marshaling<ept id="p1">](http://msdn.microsoft.com/en-us/49f9ac47-1619-4d6e-9da6-bf06bba12079)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.MarshalType"&gt;&lt;/xref&gt;</ph> as a type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use either the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</ph> field to specify a custom marshaler type for the attributed parameter, field, or return type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</ph> field allows easier usage of <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</ph> by shortening the syntax.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, the first line represents syntax using <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</ph> and the second line represents syntax using <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object using <ph id="ph2">`typeof`</ph> in C#, <ph id="ph3">`GetType`</ph> in Visual Basic, or <ph id="ph4">`typeid`</ph> in C++.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information about creating and using custom marshalers, see <bpt id="p1">[</bpt>Custom Marshaling<ept id="p1">](http://msdn.microsoft.com/en-us/49f9ac47-1619-4d6e-9da6-bf06bba12079)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Indicates the element type of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.UnmanagedType.SafeArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set this field to a value from the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VarEnum?displayProperty=fullName&gt;</ph> enumeration to specify the type of the safe array's elements.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a type is not specified, the managed element type's default type (if passed as a VARIANT) is used.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">`SafeArraySubType`</ph> for an <ph id="ph2">`int`</ph> array in COM is <ph id="ph3">&lt;xref:System.Runtime.InteropServices.VarEnum.VT_I4&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information, see <bpt id="p1">[</bpt>Default Marshaling for Arrays<ept id="p1">](~/docs/framework/interop/default-marshaling-for-arrays.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Indicates the user-defined element type of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.UnmanagedType.SafeArray"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initialize this field with your custom type to enable the elements of the <ph id="ph1">`SAFEARRAY`</ph> to be marshaled successfully.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is only needed when the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType?displayProperty=fullName&gt;</ph> is either <ph id="ph2">&lt;xref:System.Runtime.InteropServices.VarEnum?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.VarEnum?displayProperty=fullName&gt;</ph>, or <ph id="ph4">&lt;xref:System.Runtime.InteropServices.VarEnum?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information, see <bpt id="p1">[</bpt>Default Marshaling for Arrays<ept id="p1">](~/docs/framework/interop/default-marshaling-for-arrays.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is required for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValArray&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValTStr&gt;</ph> members of the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the compressed format of the metadata is limited to 0x1FFFFFFF, the range of allowed values for <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst&gt;</ph> are (&gt;= 0 and &lt;= 0x1FFFFFFF).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information, see <bpt id="p1">[</bpt>Default Marshaling for Arrays<ept id="p1">](~/docs/framework/interop/default-marshaling-for-arrays.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Indicates the zero-based parameter that contains the count of array elements, similar to <ph id="ph1">`size_is`</ph> in COM.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex&gt;</ph> field supports managed-to-unmanaged and unmanaged-to-managed calls.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not have any effect on managed code that calls COM objects.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the managed type and the attributes applied to it, the array can be passed as a safe array or C-style array.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>When arrays are passed as C-style arrays, the marshaler cannot determine the size of the array.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, to pass an managed array to an unmanaged function or method, you must provide two arguments:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array, defined by reference or value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array size, defined by reference or value.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based index of the array size parameter is defined by using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify both <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst?displayProperty=fullName&gt;</ph> with a <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph> field, the sum of the fields' values produces a size total.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Default Marshaling for Arrays<ept id="p1">](~/docs/framework/interop/default-marshaling-for-arrays.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.UnmanagedType"&gt;&lt;/xref&gt;</ph> value the data is to be marshaled as.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is used with <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> to indicate how types should be marshaled between managed and unmanaged code.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, you can use this field with certain <ph id="ph1">`UnmanagedType`</ph> enumeration members.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValArray&gt;</ph>, you must use additional named parameters.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.UnmanagedType"&gt;&lt;/xref&gt;</ph> value the data is to be marshaled as.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>