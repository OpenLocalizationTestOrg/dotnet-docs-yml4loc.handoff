<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee7d5e3854faccefec8322a22ac724125fad1e7d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Dispatcher.IInstanceProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35799cf553c968674160c42eeca0fbc8332f1858</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d9c365e1f03937eed383adc1294847be888f787</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface to control the creation and recycling of service objects when one is requested or disposed by an <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface is implemented, you must assign your custom instance provider object to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> property using either an endpoint behavior (a <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph> object) or a contract behavior (a <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> object).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the insertion mechanism is an endpoint behavior you can also implement a <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> object that can insert your custom behavior using a configuration file.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For an example of the contract behavior approach, see the Example section.)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> has two methods, <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Service object pooling is one example of custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> functionality.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> invokes the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> when the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is first created and invokes the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method when the <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two ways to cause an <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object to release a service object before the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first method is to set the <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.ServiceModel.ReleaseInstanceMode.AfterCall&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second method is to call the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this is done, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method on the dispatcher's instance provider.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a new message arrives after the instance has been released, <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> creates a new instance using the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> of the service is <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>, the system does not call the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> methods even when the user did not provide a well-known service object unless the user directly calls <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> and then calls <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns a service object given the specified <ph id="ph1">&lt;xref href="System.ServiceModel.InstanceContext"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29&gt;</ph> method to control the exact service object that a <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> service receives when it attempts to create a new one.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">&lt;xref href="System.ServiceModel.InstanceContext"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A user-defined service object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns a service object given the specified <ph id="ph1">&lt;xref href="System.ServiceModel.InstanceContext"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29&gt;</ph> method to control the exact service object that a <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> service receives when it attempts to create a new one.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">&lt;xref href="System.ServiceModel.InstanceContext"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The message that triggered the creation of a service object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The service object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Called when an <ph id="ph1">&lt;xref href="System.ServiceModel.InstanceContext"&gt;&lt;/xref&gt;</ph> object recycles a service object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The service's instance context.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The service object to be recycled.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>