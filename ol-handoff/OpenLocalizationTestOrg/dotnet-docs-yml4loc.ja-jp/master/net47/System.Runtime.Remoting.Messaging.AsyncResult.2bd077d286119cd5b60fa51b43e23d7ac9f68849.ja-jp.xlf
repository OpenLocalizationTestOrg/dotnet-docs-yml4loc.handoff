<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09dae1300e3bec47903f009ccfa77ddd8cf5a7a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Remoting.Messaging.AsyncResult.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58bb0982e55b3c0ca966be3158098122bdc74d89</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09f3c05e8592c77099c79f8bb0769e276490fd76</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates the results of an asynchronous operation on a delegate.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class is used in conjunction with asynchronous method calls made using delegates.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the delegate's <ph id="ph2">`BeginInvoke`</ph> method can be cast to an <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> has the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property that holds the delegate object on which the asynchronous call was invoked.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`BeginInvoke`</ph> and asynchronous calls using delegates, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Gets the delegate object on which the asynchronous call was invoked.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property can be cast to the actual class of the user-defined delegate.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the delegate that was used to make the asynchronous call is of type <ph id="ph1">`MyDelegate`</ph>, the delegate that is returned by this property must be cast to <ph id="ph2">`MyDelegate`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback method can then call the delegate's <ph id="ph1">`EndInvoke`</ph> method with the correct signature, in order to obtain the results of the asynchronous method call.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The delegate object on which the asynchronous call was invoked.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface is not relevant to the <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementation by <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> throws a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, obtain an <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> by casting the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> interface returned by an asynchronous call made using a delegate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The request <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessage"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The response <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>No value is returned.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets the object provided as the last parameter of a <ph id="ph1">`BeginInvoke`</ph> method call.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the <ph id="ph1">`BeginInvoke`</ph> method, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The object provided as the last parameter of a <ph id="ph1">`BeginInvoke`</ph> method call.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> returned by this method is automatically signaled when the asynchronous operation has completed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait handle is not closed automatically when you call <ph id="ph1">`EndInvoke`</ph> on the delegate that was used to make the asynchronous method call.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To free the system resources as soon as you are finished using the wait handle, call the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> contained in the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property can be used to block the current thread until the asynchronous call is complete.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>However the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> will ignore the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>, if one was specified during the <ph id="ph3">`BeginInvoke`</ph> call.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, a situation can occur where the application shuts down before the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> has finished executing, even if a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> is used to block until the asynchronous call completion.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of such a situation, see the example for the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class, and remove the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">`BeginInvoke`</ph> call completed synchronously.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is detected that the <ph id="ph1">`BeginInvoke`</ph> call completed synchronously in the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that called BeginInvoke is the current thread.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most providers of the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface will not use the capability and will return a default <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A&gt;</ph> always returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">`BeginInvoke`</ph> call completed synchronously; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether <ph id="ph1">`EndInvoke`</ph> has been called on the current <ph id="ph2">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <ph id="ph2">`EndInvoke`</ph> has been called on the current <ph id="ph3">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the response message for the asynchronous call.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method can return an object after the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> return value can be cast to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you do not need to call either of these methods directly.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>They are intended for use by the remoting infrastructure of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A remoting message that should represent a response to a method call on a remote object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the server has completed the call.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, it is safe for the client to destroy the resources after the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> after the server has completed the call; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets the next message sink in the sink chain.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;&lt;/xref&gt;</ph> interface that represents the next message sink in the sink chain.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Sets an <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;&lt;/xref&gt;</ph> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not need to call the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;&lt;/xref&gt;</ph> for the current remote method call.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Synchronously processes a response message returned by a method call on a remote object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method implements the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not need to call this method directly.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is intended for use by the remoting infrastructure of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> invokes the consumer code's <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph> instance returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`msg`</ph> parameter is of type <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>, the same object is returned by <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, a reply message that contains a remoting exception is returned.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> also modifies the value returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A response message to a method call on a remote object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>