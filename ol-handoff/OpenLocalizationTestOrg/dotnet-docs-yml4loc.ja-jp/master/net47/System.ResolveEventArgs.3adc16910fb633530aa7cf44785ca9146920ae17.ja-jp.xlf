<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0043cdc4eba479531cd601e8d2e32209028d753d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ResolveEventArgs.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">982a7531c47f99f1742f8824544fb122c72df7f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d10429d7d261e8ac9cb4fd1aa88c482f53859995</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides data for loader resolution events, such as the <ph id="ph1">&lt;xref href="System.AppDomain.TypeResolve"&gt;&lt;/xref&gt;</ph>, <ph id="ph2">&lt;xref href="System.AppDomain.ResourceResolve"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.AppDomain.ReflectionOnlyAssemblyResolve"&gt;&lt;/xref&gt;</ph>, and <ph id="ph4">&lt;xref href="System.AppDomain.AssemblyResolve"&gt;&lt;/xref&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the loader cannot resolve an assembly reference and a handler has been provided for the appropriate loader resolution event, the event is raised and the <ph id="ph1">&lt;xref:System.ResolveEventArgs&gt;</ph> contains information about the item to be resolved.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> property contains the name of the item to be resolved.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property contains the assembly that requested an assembly that can provide the named item.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ResolveEventArgs"&gt;&lt;/xref&gt;</ph> class, specifying the name of the item to resolve.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is typically called only by the common language runtime.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The name of an item to resolve.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ResolveEventArgs"&gt;&lt;/xref&gt;</ph> class, specifying the name of the item to resolve and the assembly whose dependency is being resolved.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The name of an item to resolve.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The assembly whose dependency is being resolved.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Gets the name of the item to resolve.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event, <ph id="ph2">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> is the assembly name before policy is applied.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The name of the item to resolve.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Gets the assembly whose dependency is being resolved.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly that is returned by this property is an assembly that was unable to resolve the item specified by the <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> property, because the item did not exist in that assembly, in any of its loaded dependencies, or in any dependencies the loader could find through probing.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose the current assembly uses the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName&gt;</ph> method to load assembly A from a directory outside the probing path, in order to use class CA.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Suppose further that class CA uses class CB, in assembly B, and that assembly A has a compile-time reference to assembly B, also located outside the probing path.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the current assembly attempts to instantiate CA, the loader attempts to resolve the reference to assembly B. However, because assembly A was loaded by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName&gt;</ph> method, the loader cannot resolve the dependency.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a handler for the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=fullName&gt;</ph> event, the event is raised, and the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.ResolveEventArgs&gt;</ph> object contains assembly A, because assembly A is the assembly that is missing a dependency.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The semantics of the <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property vary, depending on how the requesting assembly was loaded:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Load context: The value of the property might be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The load context is load-order independent, and the identity of the requesting assembly is not necessarily meaningful.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>A non-null example occurs when the <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> method is called and the specified type is not known to the requesting assembly or any of its dependencies.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Load-from context: The property can be used as a probing hint, but the event handler should not get more than one request for a given assembly name.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>No context (that is, the requesting assembly was loaded by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName&gt;</ph> method, or as a byte stream, or in mixed mode): The handler can use the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property to load different implementations of the same assembly based on the identity of the requesting assembly.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The assembly that requested the item specified by the <ph id="ph1">&lt;xref href="System.ResolveEventArgs.Name"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>