<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b21d65c347129e8bb6adbdfc1040730400501f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Web.Util.HttpEncoder.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9646885e408e0dfe9c4c1d4f5a942e751df266c1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d39fb6430f45017e0167f46b0bb879ccc71765c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides encoding and decoding logic.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The class contains encoding and decoding logic that is used by methods in classes such as <ph id="ph1">&lt;xref:System.Web.HttpUtility&gt;</ph>, <ph id="ph2">&lt;xref:System.Web.HttpServerUtility&gt;</ph>, and <ph id="ph3">&lt;xref:System.Net.HttpResponseHeader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can inherit from the <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder&gt;</ph> class and override its behavior to customize the default encoding and decoding behavior of ASP.NET.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You then set the <ph id="ph1">&lt;xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Web.Configuration.HttpRuntimeSection&gt;</ph> class to configure your custom class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom class for encoding and decoding that derives from <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder&gt;</ph> can override the built-in ASP.NET encoding and decoding behavior or change only selected aspects of it.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can configure the custom encoding type for in ASP.NET to replace or supplement the following encoding behavior:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>HTML encoding</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>HTML attribute encoding</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>URL encoding</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>URL path encoding</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>HTTP header name and header value encoding</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, ASP.NET applications are configured to use the <ph id="ph1">&lt;xref:System.Web.Security.AntiXss.AntiXssEncoder&gt;</ph> type for all output encoding.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example from an application-level Web.config file shows how the <ph id="ph1">&lt;xref:System.Web.Security.AntiXss.AntiXssEncoder&gt;</ph> type is set for an ASP.NET application:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The configuration setting in the example sets the <ph id="ph1">&lt;xref:System.Web.Security.AntiXss.AntiXssEncoder&gt;</ph> class to perform all output encoding in the application.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Web.Security.AntiXss.AntiXssEncoder&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Web.Util.HttpEncoder"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets or set the <ph id="ph1">&lt;xref href="System.Web.Util.HttpEncoder"&gt;&lt;/xref&gt;</ph> type that will be used in an application.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a derived <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder&gt;</ph> type is specified in the configuration file, the <ph id="ph2">&lt;xref:System.Web.Util.HttpEncoder.Current%2A&gt;</ph> property returns a reference to the custom type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if no custom encoder is used, the property returns a reference to the default ASP.NET <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.Current%2A&gt;</ph> property is not thread-safe.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set this property only in the application's <ph id="ph1">`Application_Start`</ph> method, because <ph id="ph2">`Application_Start`</ph> runs on a single thread.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A reference to the encoder/decoder type that will be used.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The encoder instance that is being assigned to this property is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets a reference to the default encoder for ASP.NET.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>A common encoding issue is that the default ASP.NET <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.UrlEncode%2A&gt;</ph> behavior converts spaces into the "+" character.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Historically, the "+" character has been an Internet convention for encoding space characters in a URL into a more human-readable manner.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, according to standards, the space character is supposed to be encoded as "%20" and instead of as the "+" character.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>ASP.NET lets you implement a more standards compliant encoding algorithm.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A reference to the default encoder.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Encodes a header name and value into a string that can be used as an HTTP header.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A&gt;</ph> method takes input strings from the <ph id="ph2">`headerName`</ph> and <ph id="ph3">`headerValue`</ph> parameters and encodes them.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The encoded values are returned as out parameters.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A&gt;</ph> method uses the following logic to encode header names and values:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>All characters whose Unicode value is less than ASCII character 32, except ASCII character 9, are URL-encoded into a format of <ph id="ph1">`%NN`</ph> where the <ph id="ph2">`N`</ph> characters represent hexadecimal values.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>ASCII character 9 (the horizontal tab character) is not URL-encoded.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>ASCII character 127 is encoded as <ph id="ph1">`%7F`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>All other characters are not encoded.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this method can be used for Unicode values, it is typically used for values in the ASCII range.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of the <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A&gt;</ph> method returns the value of <ph id="ph2">`headerValue`</ph> in <ph id="ph3">`encodedHeaderValue`</ph> if <ph id="ph4">`headerValue`</ph> is <ph id="ph5">`null`</ph> or is an empty string.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, the default implementation returns the value of <ph id="ph1">`headerName`</ph> in <ph id="ph2">`encodedHeaderName`</ph> if <ph id="ph3">`headerName`</ph> is <ph id="ph4">`null`</ph> or is an empty string.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The HTTP header name to encode.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The HTTP header value to encode.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the encoded name to use for an HTTP header.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the encoded value to use for an HTTP header.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Encodes an incoming value into a string that can be inserted into an HTML attribute that is delimited by using single or double quotation marks.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A&gt;</ph> method encodes characters by using the standard HTML entities.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">`&lt;`</ph> (left angle bracket) is encoded as <ph id="ph2">`&amp;lt;`</ph> and the <ph id="ph3">`\`</ph> (backslash) is encoded as <ph id="ph4">`&amp;#92;`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is safe to use <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A&gt;</ph> within single-quoted and double-quoted attributes.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The values must be quoted.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The string to encode.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The text writer to write the encoded value to.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Decodes a value from an HTML-encoded string.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists the character sequences that the ASP.NET decoding logic can decode.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Character sequence</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rule</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&amp;#NNN;`</ph> (decimal codes for ASCII characters).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Decoded as the specified ASCII character.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The character sequence starts at the first digit after the # character and finishes at the semicolon.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&amp;#xZZ;`</ph> (hexadecimal codes for ASCII characters).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Decoded as the specified ASCII character.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The encoded form specifies the character by using hexadecimal characters instead of a decimal value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The character sequence starts at the first digit after the # character and finishes at the semicolon.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Named HTML entities.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Decoded as the equivalent ASCII character.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The string to decode.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The text writer to write the decoded value to.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Encodes a string into an HTML-encoded string.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists the character sequences that the ASP.NET encoding logic can decode.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Character</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Encoded as</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&lt;`</ph> (left angle bracket)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&gt;`</ph> (right angle bracket)</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`"`</ph> (double quotation marks)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&amp;`</ph> (ampersand)</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`\`</ph> (backslash)</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>ASCII characters from 160 to 255</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&amp;#NNN;`</ph>, where <ph id="ph2">`NNN`</ph> is the three-digit decimal character code</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override the <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.HtmlEncode%2A&gt;</ph> method, you must produce output that is also safe within double-quoted or single-quoted HTML attributes.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This accommodates parsing by the Razor engine, where markup and code can be combined, such as <ph id="ph1">\&lt;</ph>tag attr="<ph id="ph2">@value</ph>"&gt;.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, the @ operator is not context-aware when processed by the Razor engine, therefore it calls <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.HtmlEncode%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The string to encode.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The text writer to write the encoded value to.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Encodes a string.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>URL encoding makes sure that all browsers correctly transmit text in URL strings.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters such as a question mark (?), ampersand (&amp;), slash (/), and spaces might be truncated or corrupted by some browsers.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, these characters must be encoded.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The string to encode.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An encoded string.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Encodes an array of characters that are not allowed in a URL into a hexadecimal character-entity equivalent.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.UrlEncode%2A&gt;</ph> method is called by several URL encoding methods in the <ph id="ph2">&lt;xref:System.Web.HttpUtility&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.UrlEncode%2A&gt;</ph> method URL-encodes any character that is not in the set of ASCII characters that is considered to be URL-safe.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Spaces are encoded as the ASCII "<ph id="ph1">`+"`</ph> character.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>URL-safe ASCII characters include the ASCI characters (A to Z and a to z), numerals (0 to 9), and some punctuation marks.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists the punctuation marks that are considered URL-safe ASCII characters.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Character</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hyphen</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>_</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Underscore</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Period (dot)</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>!</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exclamation mark</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asterisk (star)</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>(</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Opening parenthesis</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>)</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Closing parenthesis</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An array of bytes to encode.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The position in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> array at which to begin encoding.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The number of items in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> array to encode.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>An array of encoded characters.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> is less than zero or greater than the length of the <ph id="ph2">&lt;code&gt;bytes&lt;/code&gt;</ph> array.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> plus <ph id="ph3">&lt;code&gt;offset&lt;/code&gt;</ph> is greater than the length of the <ph id="ph4">&lt;code&gt;bytes&lt;/code&gt;</ph> array.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Encodes a subsection of a URL.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A&gt;</ph> method is called by the <ph id="ph2">&lt;xref:System.Web.HttpUtility.UrlPathEncode%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.HttpUtility.UrlPathEncode%2A&gt;</ph> method performs the following steps:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applies the encoding logic of the <ph id="ph1">&lt;xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A&gt;</ph> method to only the path part of the URL (which excludes the query string).</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method assumes that the URL is encoded as a UTF-8 string.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Encodes non-spaces so that only a subset of the first 128 ASCII characters is used in the resulting encoded string.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any characters at Unicode value 128 and greater, or 32 and less, are URL-encoded.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Encodes spaces as %20.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The string to encode.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A URL-encoded string.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>