<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a3858617e5466adf26961f8fc0e8d69222e11b6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Linq.Expressions.Expression-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f945ab43d89643011d5fd8442c32b72d14d157e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e7026086438e43b24ee7225f2dcb8e174b909da</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a lambda expression is assigned to a variable, field, or parameter whose type is <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, the compiler emits instructions to build an expression tree.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>A conversion from a lambda expression to type <ph id="ph1">`Expression&lt;D&gt;`</ph> (<ph id="ph2">`Expression(Of D)`</ph> in Visual Basic) exists if a conversion from the lambda expression to a delegate of type <ph id="ph3">`D`</ph> exists.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the conversion may fail, for example, if the body of the lambda expression is a block.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that delegates and expression trees behave similarly with regard to overload resolution.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expression tree is an in-memory data representation of the lambda expression.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expression tree makes the structure of the lambda expression transparent and explicit.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can interact with the data in the expression tree just as you can with any other data structure.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many standard query operators defined in the <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> class have one or more parameters of type <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29&gt;</ph> method to create an <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type of the delegate that the <ph id="ph1">&lt;xref href="System.Linq.Expressions.Expression`1"&gt;&lt;/xref&gt;</ph> represents.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method produces a delegate of type <ph id="ph2">`TDelegate`</ph> at runtime.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>When that delegate is executed, it has the behavior described by the semantics of the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method can be used to obtain the value of any expression tree.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>First, create a lambda expression that has the expression as its body by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then call <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> to obtain a delegate, and execute the delegate to obtain the value of the expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A delegate of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TDelegate</ph><ept id="p1">&lt;/code&gt;</ept> that represents the compiled lambda expression described by the <ph id="ph2">&lt;xref href="System.Linq.Expressions.Expression`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Produces a delegate that represents the lambda expression.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Debugging information generator used by the compiler to mark sequence points and annotate local variables.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A delegate containing the compiled version of the lambda.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If all of the children are the same, it will return this expression.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Linq.Expressions.LambdaExpression.Body"&gt;&lt;/xref&gt;</ph> property of the result.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Linq.Expressions.LambdaExpression.Parameters"&gt;&lt;/xref&gt;</ph> property of the result.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This expression if no children are changed or an expression with the updated children.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>