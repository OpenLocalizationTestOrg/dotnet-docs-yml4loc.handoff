<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">401e419a48403eb010ec21181b9fcba215cf7d33</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Collections.Queue.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9249fdc2f22a194935a67a176dfdf9fc41b6978</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f214f7540e6d77f81095fa36bede3395a03be884</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a first-in, first-out collection of objects.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class implements a queue as a circular array.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects stored in a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> are inserted at one end and removed from the other.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> if you need to access the information in the same order that it is stored in the collection.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> if you need to access the information in reverse order.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> if you need to access the collection from multiple threads concurrently.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Three main operations can be performed on a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> and its elements:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Queue.Enqueue%2A&gt;</ph> adds an element to the end of the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Queue.Dequeue%2A&gt;</ph> removes the oldest element from the start of the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Queue.Peek%2A&gt;</ph> returns the oldest element that is at the start of the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> but does not remove it from the <ph id="ph3">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> can hold.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, the capacity is automatically increased as required through reallocation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is constructed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default growth factor is 2.0.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> will always increase by at least a minimum of four, regardless of the growth factor.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the generic version of this collection, see <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> class that is empty, has the default initial capacity, and uses the default growth factor.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> can hold.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, the capacity is automatically increased as required through reallocation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is constructed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> can hold.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, the capacity is automatically increased as required through reallocation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is constructed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> in the same order they are read by the <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> of the <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`col`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.ICollection"&gt;&lt;/xref&gt;</ph> to copy elements from.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;col&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> class that is empty, has the specified initial capacity, and uses the default growth factor.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> can hold.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, the capacity is automatically increased as required through reallocation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is constructed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The initial number of elements that the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> can contain.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> class that is empty, has the specified initial capacity, and uses the specified growth factor.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> can hold.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, the capacity is automatically increased as required through reallocation.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is constructed.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> from increasing in size.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The initial number of elements that the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> can contain.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The factor by which the capacity of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> is expanded.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;growFactor&lt;/code&gt;</ph> is less than 1.0 or greater than 10.0.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Removes all objects from the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity remains unchanged.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, call <ph id="ph2">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> to the default capacity.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Creates a shallow copy of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A shallow copy of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Determines whether an element is in the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines equality by calling <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`obj`</ph> to determine whether <ph id="ph4">`item`</ph> exists.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`obj`</ph> parameter on the objects in the collection.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> to locate in the <ph id="ph2">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> is found in the <ph id="ph3">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Copies the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> elements to an existing one-dimensional <ph id="ph2">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph>, starting at the specified array index.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The one-dimensional <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The zero-based index in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which copying begins.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The number of elements in the source <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">index</ph><ept id="p1">&lt;/code&gt;</ept> to the end of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The type of the source <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">array</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> can store.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is constructed.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> from increasing in size.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The number of elements contained in the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Removes and returns the object at the beginning of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Queue.Peek%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Queue.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`null`</ph> can be added to the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> as a value.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>To distinguish between a null value and the end of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph> property or catch the <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>, which is thrown when the <ph id="ph4">&lt;xref:System.Collections.Queue&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The object that is removed from the beginning of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Adds an object to the end of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> can hold.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, the capacity is automatically increased as required through reallocation.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is constructed.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> from increasing in size.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph> is less than the capacity of the internal array, this method is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The object to add to the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IEnumerator"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, all operations must be done through the wrapper returned by the <ph id="ph2">&lt;xref:System.Collections.Queue.Synchronized%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if access to the <ph id="ph2">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Returns the object at the beginning of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> without removing it.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Queue.Dequeue%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Queue.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`null`</ph> can be added to the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> as a value.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>To distinguish between a null value and the end of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph> property or catch the <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>, which is thrown when the <ph id="ph4">&lt;xref:System.Collections.Queue&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The object at the beginning of the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Returns a new <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> that wraps the original queue, and is thread safe.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, all operations must be done through this wrapper only.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> to synchronize.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> wrapper that is synchronized (thread safe).</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;queue&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a synchronized version of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Collections.Queue.Synchronized%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can provide their own synchronized version of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> using the <ph id="ph2">&lt;xref:System.Collections.Queue.SyncRoot%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.Queue.SyncRoot%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph>, not directly on the <ph id="ph3">&lt;xref:System.Collections.Queue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Copies the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> elements to a new array.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> is not modified.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the elements in the new array is the same as the order of the elements from the beginning of the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> to its end.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A new array containing elements copied from the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Queue.Clear%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Queue&gt;</ph> to the default capacity.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Queue.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Queue"&gt;&lt;/xref&gt;</ph> is read-only.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>