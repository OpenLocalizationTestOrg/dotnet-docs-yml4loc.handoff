<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6af961c175170ac26308280d9339140b8735961</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Security.PermissionSet.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb0940e8df5a92dc9c0a6d77a6a1a16a32e0d715</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">469261f9ddbe416df482894c811c0961809dd8a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a collection that can contain many different types of permissions.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> to perform operations on several different permissions as a group.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> class with the specified <ph id="ph2">&lt;xref href="System.Security.Permissions.PermissionState"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Unrestricted`</ph> state allows all permissions that implement the <ph id="ph2">&lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt;</ph> interface, while <ph id="ph3">`None`</ph> allows no permissions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Security.PermissionSet.AddPermission%2A&gt;</ph> on an empty <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> to define the set in greater detail.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the permission set's access to resources.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">state</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid <ph id="ph2">&lt;xref href="System.Security.Permissions.PermissionState"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> class with initial values taken from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">permSet</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> contains copies of the permissions contained in the specified <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is equivalent to <ph id="ph1">&lt;xref:System.Security.PermissionSet.Copy%2A&gt;</ph> when the <ph id="ph2">`permSet`</ph> parameter is not <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The set from which to take the value of the new <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>, or <ph id="ph2">`null`</ph> to create an empty <ph id="ph3">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Adds a specified permission to the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a permission of the same type as the added permission already exists in the <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph>, the new permission is the union of the existing permission object and the specified permission object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a permission that implements <ph id="ph1">&lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt;</ph> is added to an <ph id="ph2">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph><ph id="ph3">&lt;xref:System.Security.PermissionSet&gt;</ph>, the resulting union is the original <ph id="ph4">`Unrestricted`</ph><ph id="ph5">&lt;xref:System.Security.PermissionSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The permission to add.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The union of the permission added and any permission of the same type that already exists in the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The method is called from a <ph id="ph1">&lt;xref href="System.Security.ReadOnlyPermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Adds a specified permission to the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.PermissionSet.AddPermissionImpl%2A&gt;</ph> method is the implementation for the <ph id="ph2">&lt;xref:System.Security.PermissionSet.AddPermission%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a permission of the same type as the added permission already exists in the <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph>, the new permission is the union of the existing permission object and the specified permission object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a permission that implements <ph id="ph1">&lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt;</ph> is added to an <ph id="ph2">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph><ph id="ph3">&lt;xref:System.Security.PermissionSet&gt;</ph>, the resulting union is the original <ph id="ph4">`Unrestricted`</ph><ph id="ph5">&lt;xref:System.Security.PermissionSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The permission to add.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The union of the permission added and any permission of the same type that already exists in the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>, or <ph id="ph2">`null`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">perm</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The method is called from a <ph id="ph1">&lt;xref href="System.Security.ReadOnlyPermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">&lt;xref href="System.Security.PermissionSet.Assert"&gt;&lt;/xref&gt;</ph> can create security vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the only way to assert multiple permissions at the same time within a frame because only one <ph id="ph1">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph> can be active on a frame.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph> is only effective for granted permissions.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName&gt;</ph> method to cancel an active <ph id="ph3">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because calling the <ph id="ph1">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph> method removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, it should be used with great caution.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> instance asserted has not been granted to the asserting code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>There is already an active <ph id="ph1">&lt;xref href="System.Security.PermissionSet.Assert"&gt;&lt;/xref&gt;</ph> for the current frame.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> contains permissions that are not derived from <ph id="ph2">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> contains permissions that are not derived from <ph id="ph3">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Converts an encoded <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> from one XML encoding format to another XML encoding format.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use this method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A string representing one of the following encoding formats: ASCII, Unicode, or Binary.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Possible values are "XMLASCII" or "XML", "XMLUNICODE", and "BINARY".</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An XML-encoded permission set.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A string representing one of the following encoding formats: ASCII, Unicode, or Binary.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Possible values are "XMLASCII" or "XML", "XMLUNICODE", and "BINARY".</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An encrypted permission set with the specified output format.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In all cases.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Creates a copy of the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>A copy of a <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> represents the same access to resources as the original object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes made to the copy do not affect the original permission set.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A copy of the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Copies the permission objects of the set to the indicated location in an <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The target array to which to copy.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The starting position in the array to begin copying (zero based).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> parameter has more than one dimension.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> parameter is out of the range of the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">array</ph><ept id="p2">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Gets the number of permission objects contained in the permission set.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">`None`</ph> or <ph id="ph2">`Unrestricted`</ph> state this returns zero, because no actual permission object instances are used.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The number of permission objects contained in the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Forces a <ph id="ph1">&lt;xref href="System.Security.SecurityException"&gt;&lt;/xref&gt;</ph> at run time if all callers higher in the call stack have not been granted the permissions specified by the current instance.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Security.PermissionSet.Demand%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> to ensure that all callers have all permissions in the set with one operation.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.PermissionSet.Demand%2A&gt;</ph> succeeds only if no <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> contains permissions that do not inherit from <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>, the <ph id="ph3">`Demand`</ph> methods of those permissions are called as well.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A caller in the call chain does not have the permission demanded.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Causes any <ph id="ph1">&lt;xref href="System.Security.PermissionSet.Demand"&gt;&lt;/xref&gt;</ph> that passes through the calling code for a permission that has an intersection with a permission of a type contained in the current <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> to fail.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <ph id="ph2">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph> from being used to access the resource protected by the denied permission.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a method calls <ph id="ph1">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph> on a permission, and if a <ph id="ph2">&lt;xref:System.Security.PermissionSet.Demand%2A&gt;</ph> for that permission is invoked by a caller lower in the call stack, that security check fails when it reaches the <ph id="ph3">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph> is ignored for a permission that is not granted because a demand for that permission cannot succeed.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A previous call to <ph id="ph1">&lt;xref href="System.Security.PermissionSet.Deny"&gt;&lt;/xref&gt;</ph> has already restricted the permissions for the current stack frame.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Determines whether the specified <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Security.NamedPermissionSet"&gt;&lt;/xref&gt;</ph> object is equal to the current <ph id="ph3">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Equality is determined by the permissions contained in the permission set specified by <ph id="ph1">`obj`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`obj`</ph> can be either a <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> object or a <ph id="ph3">&lt;xref:System.Security.NamedPermissionSet&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`obj`</ph> is a <ph id="ph2">&lt;xref:System.Security.NamedPermissionSet&gt;</ph>, the name and description are ignored.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The object to compare with the current <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified object is equal to the current <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Reconstructs a security object with a specified state from an XML encoding.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The XML encoding to use to reconstruct the security object.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">et</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">et</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid permission element.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">et</ph><ept id="p1">&lt;/code&gt;</ept> parameter's version number is not supported.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns an enumerator for the permissions of the set.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the enumerator as an index to access individual permission objects in the set.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>An enumerator object for the permissions of the set.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns an enumerator for the permissions of the set.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.PermissionSet.GetEnumeratorImpl%2A&gt;</ph> method is the implementation for the <ph id="ph2">&lt;xref:System.Security.PermissionSet.GetEnumerator%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An enumerator object for the permissions of the set.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets a hash code for the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> object that is suitable for use in hashing algorithms and data structures such as a hash table.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The hash code for two instances of the same permission set might be different, so a hash code should not be used to compare two <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A hash code for the current <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Gets a permission object of the specified type, if it exists in the set.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns <ph id="ph1">`null`</ph> for an <ph id="ph2">`Unrestricted`</ph><ph id="ph3">&lt;xref:System.Security.PermissionSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although an <ph id="ph1">`Unrestricted`</ph><ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> effectively contains all permissions, it does not have any actual instances to return.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The type of the desired permission object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A copy of the permission object of the type specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">permClass</ph><ept id="p1">&lt;/code&gt;</ept> parameter contained in the <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>, or <ph id="ph3">`null`</ph> if none exists.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Gets a permission object of the specified type, if it exists in the set.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.PermissionSet.GetPermissionImpl%2A&gt;</ph> method is the implementation for the <ph id="ph2">&lt;xref:System.Security.PermissionSet.GetPermission%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns <ph id="ph1">`null`</ph> for an <ph id="ph2">`Unrestricted`</ph><ph id="ph3">&lt;xref:System.Security.PermissionSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although an <ph id="ph1">`Unrestricted`</ph><ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> effectively contains all permissions, it does not have any actual instances to return.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The type of the permission object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A copy of the permission object, of the type specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">permClass</ph><ept id="p1">&lt;/code&gt;</ept> parameter, contained in the <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>, or <ph id="ph3">`null`</ph> if none exists.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Creates and returns a permission set that is the intersection of the current <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> and the specified <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The intersection of two permission sets is a permission set that describes the set of operations they both describe in common.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, it represents the minimum permissions such that any demand that passes both permission sets also passes their intersection.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each type of permission that is present in both sets, the two instances of those permissions are intersected using the permission's <ph id="ph1">`Intersect`</ph> method; the resulting permission is included in the resulting <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Permission types that exist in only one of the two sets are excluded from the resulting set.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A permission set to intersect with the current <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A new permission set that represents the intersection of the current <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> and the specified target.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This object is <ph id="ph1">`null`</ph> if the intersection is empty.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> can be empty and yet contain instances of permissions if those permissions are in the fully-restricted state.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Permissions are in a fully restricted state if their <ph id="ph1">`IsSubsetOf`</ph> methods return <ph id="ph2">`true`</ph> when <ph id="ph3">`null`</ph> is passed as a parameter.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> is empty; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the collection is read-only.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> cannot be read-only, so this property is always <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Always <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Determines whether the current <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> is a subset of the specified <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> is a subset of the target <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> if all demands that succeed for the <ph id="ph3">&lt;xref:System.Security.PermissionSet&gt;</ph> also succeed for the target.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, the target contains at least the permissions contained in the subset.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The permission set to test for the subset relationship.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This must be either a <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> or a <ph id="ph2">&lt;xref href="System.Security.NamedPermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> is a subset of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">target</ph><ept id="p1">&lt;/code&gt;</ept> parameter; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the collection is guaranteed to be thread safe.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> does not automatically handle thread safety, so this property is always <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is required to support <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Always <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`Unrestricted`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">`Unrestricted`</ph><ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> effectively contains all permissions that implement the <ph id="ph3">&lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> is <ph id="ph3">`Unrestricted`</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Causes any <ph id="ph1">&lt;xref href="System.Security.PermissionSet.Demand"&gt;&lt;/xref&gt;</ph> that passes through the calling code for any <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> that is not a subset of the current <ph id="ph3">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> to fail.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph> is similar to <ph id="ph2">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph>, in that both cause stack walks to fail when they would otherwise succeed.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference is that <ph id="ph1">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph> specifies permissions that will cause the stack walk to fail, but <ph id="ph2">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph> specifies the only permissions that do not cause the stack walk to fail.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method to ensure that your code can be used to access only the specified resources.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission cannot succeed.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if code lower on the call stack later calls <ph id="ph1">&lt;xref:System.Security.PermissionSet.Demand%2A&gt;</ph> for that permission, a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id="ph3">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the code that called <ph id="ph1">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph> has not been granted the permission, even though it called <ph id="ph2">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph> for that permission.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Removes a permission of a certain type from the set.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot remove permissions from an unrestricted permission set.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code attempts to remove the <ph id="ph1">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> from the <ph id="ph2">`FullTrust`</ph> permission set, but the permission is not removed.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The type of permission to delete.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The permission removed from the set.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The method is called from a <ph id="ph1">&lt;xref href="System.Security.ReadOnlyPermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Removes a permission of a certain type from the set.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.PermissionSet.RemovePermissionImpl%2A&gt;</ph> method is the implementation for the <ph id="ph2">&lt;xref:System.Security.PermissionSet.RemovePermission%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot remove permissions from an unrestricted permission set.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission set remains unrestricted after you attempt to remove the permission, and an exception is not thrown.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The type of the permission to remove.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The permission removed from the set.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The method is called from a <ph id="ph1">&lt;xref href="System.Security.ReadOnlyPermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Causes any previous <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Assert"&gt;&lt;/xref&gt;</ph> for the current frame to be removed and no longer be in effect.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> for the current frame, an <ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>There is no previous <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Assert"&gt;&lt;/xref&gt;</ph> for the current frame.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Sets a permission to the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>, replacing any existing permission of the same type.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method removes any existing permission object of the same type from the <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> and replaces it with the <ph id="ph2">`perm`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a permission that implements <ph id="ph1">&lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt;</ph> is set on a <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> that is <ph id="ph3">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph>, the resulting <ph id="ph4">&lt;xref:System.Security.PermissionSet&gt;</ph> is no longer <ph id="ph5">`Unrestricted`</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The permission to set.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The set permission.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The method is called from a <ph id="ph1">&lt;xref href="System.Security.ReadOnlyPermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Sets a permission to the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>, replacing any existing permission of the same type.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.PermissionSet.SetPermissionImpl%2A&gt;</ph> method is the implementation for the <ph id="ph2">&lt;xref:System.Security.PermissionSet.SetPermission%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method removes any existing permission object of the same type from the <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph> and replaces it with the <ph id="ph2">`perm`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a permission that implements <ph id="ph1">&lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt;</ph> is set on a <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> that is <ph id="ph3">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph>, the resulting <ph id="ph4">&lt;xref:System.Security.PermissionSet&gt;</ph> is no longer <ph id="ph5">`Unrestricted`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The permission to set.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The set permission.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The method is called from a <ph id="ph1">&lt;xref href="System.Security.ReadOnlyPermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets the root object of the current collection.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is required to support <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The root object of the current collection.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Returns a string representation of the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string representation is useful in debugging to see the state of a <ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A representation of the <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Creates an XML encoding of the security object and its current state.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>An XML encoding of the security object, including any state information.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> that is the union of the current <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> and the specified <ph id="ph3">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result of a call to <ph id="ph1">&lt;xref:System.Security.PermissionSet.Union%2A&gt;</ph> is a <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> that represents all the operations represented by the current <ph id="ph3">&lt;xref:System.Security.PermissionSet&gt;</ph> as well as all the operations represented by the specified <ph id="ph4">&lt;xref:System.Security.PermissionSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If either set is <ph id="ph1">`Unrestricted`</ph>, the union is <ph id="ph2">`Unrestricted`</ph> as well.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The permission set to form the union with the current <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>A new permission set that represents the union of the current <ph id="ph1">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph> and the specified <ph id="ph2">&lt;xref href="System.Security.PermissionSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Runs when the entire object graph has been deserialized.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The object that initiated the callback.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The functionality for this parameter is not currently implemented.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>