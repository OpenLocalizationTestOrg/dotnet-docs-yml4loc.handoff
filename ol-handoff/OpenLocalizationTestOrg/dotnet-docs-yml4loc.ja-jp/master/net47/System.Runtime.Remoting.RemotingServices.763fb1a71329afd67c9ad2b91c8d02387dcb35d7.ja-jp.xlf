<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ca037c1638a911dfd6136f03b0baddfbe6cb088</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Remoting.RemotingServices.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab0f8e3a14816554ec0d3b39cd409f1eabe3f46c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28132660cb642e9c49839672271b60668065c5fe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides several methods for using and publishing remoted objects and proxies.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unless you are a service provider dealing with issues such as activation, lifetime management, or transactions, you do not need to distinguish between proxy references and object references.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The remoting infrastructure uses transparent proxies that give the impression that the remote objects reside in the client's space.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Proxies achieve this by forwarding calls made on them to the real objects at remote locations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Creates a proxy for a well-known object, given the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> and URL.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned proxy object points to an endpoint served by the specified well-known object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>No messages are sent over the network until a method is called on the proxy.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of a well-known object on the server end to which you want to connect.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The URL of the server class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A proxy to the remote object that points to an endpoint served by the specified well-known object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Creates a proxy for a well-known object, given the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph>, URL, and channel-specific data.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned proxy object points to an endpoint served by the specified well-known object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>No messages are sent over the network until a method is called on the proxy.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`data`</ph> object is used to communicate information to the channel, and is passed to the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the well-known object to which you want to connect.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The URL of the well-known object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Channel specific data.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A proxy that points to an endpoint that is served by the requested well-known object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Stops an object from receiving any further messages through the registered remoting channels.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Object to disconnect from its channel.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the object was disconnected from the registered remoting channels successfully; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is a proxy.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Connects to the specified remote object, and executes the provided <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Messaging.IMethodCallMessage"&gt;&lt;/xref&gt;</ph> on it.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current method is used in special cases by the server to forward the specified method call to another, possibly remote, object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called only when the caller is in the appropriate context.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The remote object whose method you want to call.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A method call message to the specified remote object's method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The response of the remote method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The method was called from a context other than the native context of the object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns a chain of envoy sinks that should be used when sending messages to the remote object represented by the specified proxy.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Envoy sinks are sinks sent along with the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> of an object that is used when returning messages to that object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current method returns the envoy sinks that are used during communication between the proxy of the object and the object itself.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The proxy of the remote object that requested envoy sinks are associated with.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A chain of envoy sinks associated with the specified proxy.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns a lifetime service object that controls the lifetime policy of the specified object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the default lifetime service the returned object will be an object of type <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.ILease&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`obj`</ph> parameter is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The object to obtain lifetime service for.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The object that controls the lifetime of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns the method base from the given <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Messaging.IMethodMessage"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>This determines the method base from the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage.TypeName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage.MethodName%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature%2A&gt;</ph> properties of <ph id="ph4">&lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage&gt;</ph> and is used by classes implementing the <ph id="ph5">&lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage&gt;</ph> classes should reference the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The method message to extract the method base from.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The method base extracted from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">msg</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Either the immediate caller does not have infrastructure permission, or at least one of the callers higher in the callstack does not have permission to retrieve the type information of non-public members.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Serializes the specified marshal by reference object into the provided <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> into which the object is serialized.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The source and destination of the serialization.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">info</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Retrieves the URI for the specified object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.MarshalByRefObject"&gt;&lt;/xref&gt;</ph> for which a URI is requested.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The URI of the specified object if it has one, or <ph id="ph1">`null`</ph> if the object has not yet been marshaled.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> that represents the remote object from the specified proxy.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is a serializable representation of an object used to transfer an object reference across an application domain boundary.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating a <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> for an object is known as marshaling.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> can be transferred through a channel into another application domain (possibly on another process or computer).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once in the other application domain, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> must be parsed to create a proxy for the object, generally connected to the real object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation is known as unmarshaling.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>During unmarshaling, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is parsed to extract the method information of the remote object and both the transparent proxy and <ph id="ph2">&lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt;</ph> objects are created.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> contains information that describes the <ph id="ph2">&lt;xref:System.Type&gt;</ph> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remote application where the object is located.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A proxy connected to the object you want to create a <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> for.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> that represents the remote object the specified proxy is connected to, or <ph id="ph2">`null`</ph> if the object or proxy have not been marshaled.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Returns the real proxy backing the specified transparent proxy.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client that uses an object across any kind of remoting boundary is actually using a transparent proxy for the object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transparent proxy gives the impression that the actual object resides in the client's space.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>It achieves this by forwarding calls made on it to the real object using the remoting infrastructure.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transparent proxy is backed by an instance of a managed runtime class of type <ph id="ph1">&lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt;</ph> implements a part of the functionality needed to forward the operations from the transparent proxy.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>A proxy object inherits the associated semantics of managed objects such as garbage collection, support for members and methods, and can be extended to form new classes.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The proxy acts as an object of the same class as the remote object (transparent proxy), and is also a managed object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A transparent proxy.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The real proxy instance backing the transparent proxy.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the object with the specified URI.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because remoting identifies endpoints using URIs, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingServices.GetServerTypeForUri%2A&gt;</ph> method is very useful in the pluggable parts of the remoting infrastructure (for example, channel sinks, dynamic sinks, and context sinks) that use <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> objects, because the current method will return the associated type object from the URI.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The URI of the object whose <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is requested.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the object with the specified URI.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Either the immediate caller does not have infrastructure permission, or at least one of the callers higher in the callstack does not have permission to retrieve the type information of non-public members.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Retrieves a session ID for a message.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same session ID might be returned for objects in the same application, but this method will never return the same session ID for two objects in different remote applications.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about identifying sessions and session IDs, see ASP.Net <bpt id="p1">[</bpt>ASP.NET Session State Overview<ept id="p1">](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.Messaging.IMethodMessage"&gt;&lt;/xref&gt;</ph> for which a session ID is requested.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A session ID string that uniquely identifies the current session.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the method in the given message is overloaded.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The message that contains a call to the method in question.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the method called in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">msg</ph><ept id="p1">&lt;/code&gt;</ept> is overloaded; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the object specified by the given transparent proxy is contained in a different application domain than the object that called the current method.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about application domains, see <bpt id="p1">[</bpt>Application Domains<ept id="p1">](http://msdn.microsoft.com/en-us/39e57d07-a740-4cd4-ae82-e119ea3856c1)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The object to check.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the object is out of the current application domain; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the object represented by the given proxy is contained in a different context than the object that called the current method.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>A context is an ordered sequence of properties that define an environment for the objects that reside inside it.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Contexts are created during the activation process for objects that are configured to require certain automatic services such synchronization, transactions, just-in-time activation, security, and so on.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Multiple objects can live inside a context.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The object to check.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the object is out of the current context; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the client that called the method specified in the given message is waiting for the server to finish processing the method before continuing execution.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a one-way method is called, the client does not wait for the server to finish processing the message.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client method returns to the application with no knowledge of whether or not the server will successfully process the message.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods are marked as one way using the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.OneWayAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>One-way methods cannot have a return value or any out parameters.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The method in question.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the method is one way; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the given object is a transparent proxy or a real object.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client that uses an object across any kind of a remoting boundary is actually using a transparent proxy for the object.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transparent proxy gives the impression that the actual object resides in the client's space.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>It achieves this by forwarding calls made on it to the real object using the remoting infrastructure.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transparent proxy is itself housed by an instance of a managed runtime class of type <ph id="ph1">&lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt;</ph> implements a part of the functionality needed to forward the operations from the transparent proxy.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>A proxy object inherits the associated semantics of managed objects such as garbage collection, support for members and methods, and can be extended to form new classes.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus the proxy has a dual nature; on the one hand it needs to act as an object of the same class as the remote object (transparent proxy), and on the other it is a managed object itself.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>A proxy object can be used without regard to any remoting subdivisions within a <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications need not distinguish between proxy references and object references.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, service providers dealing with issues such as activation, lifetime management, and transactions need to make such distinctions.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The reference to the object to check.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A Boolean value that indicates whether the object specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">proxy</ph><ept id="p1">&lt;/code&gt;</ept> parameter is a transparent proxy or a real object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Logs the stage in a remoting exchange to an external debugger.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`"REMOTING_PERF"`</ph> preprocessing symbol is applied to the method by using the <ph id="ph2">&lt;xref:System.Diagnostics.ConditionalAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An internally defined constant that identifies the stage in a remoting exchange.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Takes a <ph id="ph1">&lt;xref href="System.MarshalByRefObject"&gt;&lt;/xref&gt;</ph>, registers it with the remoting infrastructure, and converts it into an instance of the <ph id="ph2">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is a serializable representation of an object used to transfer an object reference across an application domain boundary.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating a <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> for an object is known as marshaling.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> can be transferred through a channel into another application domain (possibly on another process or computer).</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once in the other application domain, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> must be parsed to create a proxy for the object, generally connected to the real object.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation is known as unmarshaling.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> contains information that describes the <ph id="ph2">&lt;xref:System.Type&gt;</ph> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>During marshaling, the context from the current thread is used, not the context that was active when the object was created.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a URI was not explicitly set by the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingServices.SetObjectUriForMarshal%2A&gt;</ph> method, it is automatically generated by the remoting identity infrastructure.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot associate a URI with a proxy for one of two reasons: either the URI was generated at the server side for the object it represents, or the object is well known, in which case the URI is known.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, if the <ph id="ph1">`Obj`</ph> parameter is a proxy, an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>For custom proxies this restriction is relaxed because the transparent proxy is treated as the server object.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The object to convert.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>An instance of the <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> class that represents the object specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">Obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is an object proxy.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Converts the given <ph id="ph1">&lt;xref href="System.MarshalByRefObject"&gt;&lt;/xref&gt;</ph> into an instance of the <ph id="ph2">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> class with the specified URI.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is a serializable representation of an object used to transfer an object reference across an application domain boundary.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating a <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> for an object is known as marshaling.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> can be transferred through a channel into another application domain (possibly on another process or computer).</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once in the other application domain, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> must be parsed to create a proxy for the object, generally connected to the real object.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation is known as unmarshaling.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> contains information that describes the <ph id="ph2">&lt;xref:System.Type&gt;</ph> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>During marshaling, the context from the current thread is used, not the context that was active when the object was created.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot associate a URI with a proxy for one of two reasons: either the URI was generated at the server side for the object it represents, or the object is well known, in which case the URI is known.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, if the <ph id="ph1">`Obj`</ph> parameter is a proxy, an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>For custom proxies this restriction is relaxed because the transparent proxy is treated as the server object.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The object to convert.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The specified URI with which to initialize the new <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>An instance of the <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> class that represents the object specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">Obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Obj&lt;/code&gt;</ph> is an object proxy, and the <ph id="ph2">&lt;code&gt;URI&lt;/code&gt;</ph> parameter is not <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Takes a <ph id="ph1">&lt;xref href="System.MarshalByRefObject"&gt;&lt;/xref&gt;</ph> and converts it into an instance of the <ph id="ph2">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> class with the specified URI, and the provided <ph id="ph3">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is a serializable representation of an object used to transfer an object reference across an application domain boundary.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating a <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> for an object is known as marshaling.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> can be transferred through a channel into another application domain (possibly on another process or computer).</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once in the other application domain, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> must be parsed to create a proxy for the object, generally connected to the real object.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation is known as unmarshaling.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> contains information that describes the <ph id="ph2">&lt;xref:System.Type&gt;</ph> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specified <ph id="ph1">&lt;xref:System.Type&gt;</ph> is used by the remoting infrastructure to limit the scope of the exposed type hierarchy.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if object A derives from object B, which derives from object C, and <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingServices.Marshal%2A&gt;</ph> is called, then the client can cast the proxy between C and B but not to A.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>During marshaling, the context from the current thread is used, not the context that was active when the object was created.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot associate a URI with a proxy for one of two reasons: either the URI was generated at the server side for the object it represents, or the object is well known, in which case the URI is known.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, if the <ph id="ph1">`Obj`</ph> parameter is a proxy, an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>For custom proxies this restriction is relaxed because the transparent proxy is treated as the server object.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The object to convert into a <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The URI the object specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is marshaled with.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph><bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">Obj</ph><ept id="p1">&lt;/code&gt;</ept> is marshaled as.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>An instance of the <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> class that represents the object specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">Obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Obj&lt;/code&gt;</ph> is a proxy of a remote object, and the <ph id="ph2">&lt;code&gt;ObjUri&lt;/code&gt;</ph> parameter is not <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Sets the URI for the subsequent call to the <ph id="ph1">&lt;xref href="System.Runtime.Remoting.RemotingServices.Marshal(System.MarshalByRefObject)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The URI set by the current method is used when marshaling the given object.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>After marshaling, the URI of the specified object is set to the string in the <ph id="ph1">`uri`</ph> parameter appended onto the <ph id="ph2">&lt;xref:System.Guid&gt;</ph> of the current <ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current application is listening on an HTTP port, then both the string specified in the <ph id="ph1">`uri`</ph> parameter and the <ph id="ph2">`uri`</ph> string appended onto the <ph id="ph3">&lt;xref:System.Guid&gt;</ph> of the current <ph id="ph4">&lt;xref:System.AppDomain&gt;</ph> route to the specified object.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the application is listening on HTTP port 9000, then both http://localhost:9000/objectUri, and http://localhost:9000/<ph id="ph1">\&lt;</ph>appdomainguid&gt;/objectUri route to the object specified in the <ph id="ph2">`obj`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The object to set a URI for.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The URI to assign to the specified object.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;obj&lt;/code&gt;</ph> is not a local object, has already been marshaled, or the current method has already been called on.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Takes a <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> and creates a proxy object out of it.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is a serializable representation of an object used to transfer an object reference across an application domain boundary.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating a <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> for an object is known as marshaling.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> can be transferred through a channel into another application domain (possibly on another process or computer).</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once in the other application domain, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> must be parsed to create a proxy for the object, generally connected to the real object.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation is known as unmarshaling.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>During unmarshaling, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is parsed to extract the method information of the remote object and both the transparent proxy and <ph id="ph2">&lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt;</ph> objects are created.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the parsed <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is added to the transparent proxy before the transparent proxy is registered with the common language runtime.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> contains information that describes the <ph id="ph2">&lt;xref:System.Type&gt;</ph> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> that represents the remote object for which the proxy is being created.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A proxy to the object that the given <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> represents.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> instance specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">objectRef</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not well-formed.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Takes a <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> and creates a proxy object out of it, refining it to the type on the server.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is a serializable representation of an object used to transfer an object reference across an application domain boundary.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating a <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> for an object is known as marshaling.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> can be transferred through a channel into another application domain (possibly on another process or computer).</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once in the other application domain, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> must be parsed to create a proxy for the object, generally connected to the real object.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation is known as unmarshaling.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>During unmarshaling, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is parsed to extract the method information of the remote object and both the transparent proxy and <ph id="ph2">&lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt;</ph> objects are created.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the parsed <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> is added to the transparent proxy before the transparent proxy is registered with the common language runtime.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph> contains information that describes the <ph id="ph2">&lt;xref:System.Type&gt;</ph> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>When first created, the proxy is of type <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>As you cast it into different types, the remoting infrastructure keeps track of the most used type to avoid loading the type unnecessarily.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> that represents the remote object for which the proxy is being created.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to refine the proxy to the type on the server; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A proxy to the object that the given <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> represents.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ObjRef"&gt;&lt;/xref&gt;</ph> instance specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">objectRef</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not well-formed.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>