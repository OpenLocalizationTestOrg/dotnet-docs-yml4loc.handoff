<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f81b483f9cd72d9295b3adf4e7721cb03fe0e8ec</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Boolean.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7cf9aa5fe547d7d204e9c8f9af5d677621f3db3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08f8562fcec0de95a494f28b52be561947cea1f3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a Boolean (<ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>) value.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance can have either of two values: <ph id="ph2">`true`</ph>, or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> structure provides methods that support the following tasks:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Converting Boolean values to strings: <ph id="ph1">&lt;xref:System.Boolean.ToString%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parsing strings to convert them to Boolean values: <ph id="ph1">&lt;xref:System.Boolean.Parse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Boolean.TryParse%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Comparing values: <ph id="ph1">&lt;xref:System.Boolean.CompareTo%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Boolean.Equals%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following sections explain these tasks and other usage details:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Formatting Boolean values<ept id="p1">](#Formatting)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Converting to and from Boolean values<ept id="p1">](#Converting)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Parsing Boolean values<ept id="p1">](#Parsing)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Comparing Boolean values<ept id="p1">](#Comparing)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Working with Booleans as binary values<ept id="p1">](#Binary)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Performing operations with Boolean values<ept id="p1">](#Operations)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Booleans and Interop<ept id="p1">](#Interop)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Formatting Boolean values</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string representation of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> is either "True" for a <ph id="ph2">`true`</ph> value or "False" for a <ph id="ph3">`false`</ph> value.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string representation of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value is defined by the read-only <ph id="ph2">&lt;xref:System.Boolean.TrueString&gt;</ph> and <ph id="ph3">&lt;xref:System.Boolean.FalseString&gt;</ph> fields.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use the <ph id="ph1">&lt;xref:System.Boolean.ToString%2A&gt;</ph> method to convert Boolean values to strings.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Boolean structure includes two <ph id="ph1">&lt;xref:System.Boolean.ToString%2A&gt;</ph> overloads: the parameterless <ph id="ph2">&lt;xref:System.Boolean.ToString&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Boolean.ToString%28System.IFormatProvider%29&gt;</ph> method, which includes a parameter that controls formatting.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because this parameter is ignored, the two overloads produce identical strings.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Boolean.ToString%28System.IFormatProvider%29&gt;</ph> method does not support culture-sensitive formatting.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates formatting with the <ph id="ph1">&lt;xref:System.Boolean.ToString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the example uses the <bpt id="p1">[</bpt>composite formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> feature, so the <ph id="ph1">&lt;xref:System.Boolean.ToString%2A&gt;</ph> method is called implicitly.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/tostring1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/tostring1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> structure can have only two values, it is easy to add custom formatting.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For simple custom formatting in which other string literals are substituted for "True" and "False", you can use any conditional evaluation feature supported by your language, such as the <bpt id="p1">[</bpt>conditional operator<ept id="p1">](~/docs/csharp/language-reference/operators/conditional-operator.md)</ept> in C# or the <bpt id="p2">[</bpt>If operator<ept id="p2">](~/docs/visual-basic/language-reference/operators/if-operator.md)</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses this technique to format <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values as "Yes" and "No" rather than "True" and "False".</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/tostring2.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/tostring2.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more complex custom formatting operations, including culture-sensitive formatting, you can call the <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> method and provide an <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> interfaces to provide culture-sensitive Boolean strings for the English (United States), French (France), and Russian (Russia) cultures.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#5<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/format3.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#5<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/format3.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optionally, you can use <bpt id="p1">[</bpt>resource files<ept id="p1">](http://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890)</ept> to define culture-specific Boolean strings.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Converting to and from Boolean values</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> structure implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, you can use the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class to perform conversions between a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value and any other primitive type in the .NET Framework, or you can call the <ph id="ph3">&lt;xref:System.Boolean&gt;</ph> structure's explicit implementations.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, conversions between a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> and the following types are not supported, so the corresponding conversion methods throw an <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph> exception:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversion between <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> and <ph id="ph2">&lt;xref:System.Char&gt;</ph> (the <ph id="ph3">&lt;xref:System.Convert.ToBoolean%28System.Char%29?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.Convert.ToChar%28System.Boolean%29?displayProperty=fullName&gt;</ph> methods)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversion between <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> and <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> (the <ph id="ph3">&lt;xref:System.Convert.ToBoolean%28System.DateTime%29?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.Convert.ToDateTime%28System.Boolean%29?displayProperty=fullName&gt;</ph> methods)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>All conversions from integral or floating-point numbers to Boolean values convert non-zero values to <ph id="ph1">`true`</ph> and zero values to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this by calling selected overloads of the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%2A?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#6<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/conversion1.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#6<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/conversion1.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>When converting from floating-point values to Boolean values, the conversion methods perform an exact comparison with zero.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the floating-point value has lost precision, the result can be unexpected.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is illustrated in the following example, in which a <ph id="ph1">&lt;xref:System.Double&gt;</ph> variable whose value should be zero is converted to a Boolean value.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>As the example shows, the result is <ph id="ph1">`true`</ph> because repeated additions of 0.2 have resulted in a loss of precision.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>When converting from Boolean to numeric values, the conversion methods of the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class convert <ph id="ph2">`true`</ph> to 1 and <ph id="ph3">`false`</ph> to 0.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, Visual Basic conversion functions convert <ph id="ph1">`true`</ph> to either 255 (for conversions to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values) or -1 (for all other numeric conversions).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example converts <ph id="ph1">`true`</ph> to numeric values by using a <ph id="ph2">&lt;xref:System.Convert&gt;</ph> method, and, in the case of the Visual Basic example, by using the Visual Basic language's own conversion operator.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#8<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/conversion3.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#8<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/conversion3.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For conversions from <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> to string values, see the <bpt id="p1">[</bpt>Formatting Boolean Values<ept id="p1">](#Formatting)</ept> section.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For conversions from strings to <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values, see the <bpt id="p1">[</bpt>Parsing Boolean Values<ept id="p1">](#Parsing)</ept> section.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parsing Boolean values</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> structure includes two static parsing methods, <ph id="ph2">&lt;xref:System.Boolean.Parse%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Boolean.TryParse%2A&gt;</ph>, that convert a string to a Boolean value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string representation of a Boolean value is defined by the case-insensitive equivalents of the values of the <ph id="ph1">&lt;xref:System.Boolean.TrueString&gt;</ph> and <ph id="ph2">&lt;xref:System.Boolean.FalseString&gt;</ph> fields, which are "True" and "False", respectively.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other words, the only strings that parse successfully are "True", "False", "true", "false", or some mixed-case equivalent.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot successfully parse numeric strings such as "0" or "1".</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Leading or trailing white-space characters are not considered when performing the string comparison.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Boolean.Parse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Boolean.TryParse%2A&gt;</ph> methods to parse a number of strings.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that only the case-insensitive equivalents of "True" and "False" can be successfully parsed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/parse2.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/parse2.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are programming in Visual Basic, you can use the <ph id="ph1">`CBool`</ph> function to convert the string representation of a number to a Boolean value.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>"0" is converted to <ph id="ph1">`false`</ph>, and the string representation of any non-zero value is converted to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are not programming in Visual Basic, you must convert your numeric string to a number before converting it to a Boolean.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this by converting an array of integers to Boolean values.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#9<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/parse3.cs#9)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#9<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/parse3.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Comparing Boolean values</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because Boolean values are either <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>, there is little reason to explicitly call the <ph id="ph3">&lt;xref:System.Boolean.CompareTo%2A&gt;</ph> method, which indicates whether an instance is greater than, less than, or equal to a specified value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, to compare two Boolean variables, you call the <ph id="ph1">&lt;xref:System.Boolean.Equals%2A&gt;</ph> method or use your language's equality operator.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when you want to compare a Boolean variable with the literal Boolean value <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>, it is not necessary to do an explicit comparison, because the result of evaluating a Boolean value is that Boolean value.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the expressions</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#12<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/operations1.cs#12)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#12<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/operations1.vb#12)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>and</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#13<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/operations2.cs#13)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#13<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/operations2.vb#13)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>are equivalent, but the second is more compact.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, both techniques offer comparable performance.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Working with Booleans as binary values</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Boolean value occupies one byte of memory, as the following C# example shows.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example must be compiled with the <ph id="ph1">`/unsafe`</ph> switch.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#14<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/size1.cs#14)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The byte's low-order bit is used to represent its value.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of 1 represents <ph id="ph1">`true`</ph>; a value of 0 represents <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32?displayProperty=fullName&gt;</ph> structure to work with sets of Boolean values.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can convert a Boolean value to its binary representation by calling the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Boolean%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns a byte array with a single element.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restore a Boolean value from its binary representation, you can call the <ph id="ph1">&lt;xref:System.BitConverter.ToBoolean%28System.Byte%5B%5D%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A?displayProperty=fullName&gt;</ph> method to convert a Boolean value to its binary representation and displays the individual bits of the value, and then calls the <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A?displayProperty=fullName&gt;</ph> method to restore the value from its binary representation.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/binary1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/binary1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performing operations with Boolean values</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>This section illustrates how Boolean values are used in apps.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first section discusses its use as a flag.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second illustrates its use for arithmetic operations.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Boolean values as flags</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Boolean variables are most commonly used as flags, to signal the presence or absence of some condition.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in the <ph id="ph1">&lt;xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName&gt;</ph> method, the final parameter, <ph id="ph2">`ignoreCase`</ph>, is a flag that indicates whether the comparison of two strings is case-insensitive (<ph id="ph3">`ignoreCase`</ph> is <ph id="ph4">`true`</ph>) or case-sensitive (<ph id="ph5">`ignoreCase`</ph> is <ph id="ph6">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the flag can then be evaluated in a conditional statement.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses a simple console app to illustrate the use of Boolean variables as flags.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The app accepts command-line parameters that enable output to be redirected to a specified file (the <ph id="ph1">`/f`</ph> switch), and that enable output to be sent both to a specified file and to the console (the <ph id="ph2">`/b`</ph> switch).</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The app defines a flag named <ph id="ph1">`isRedirected`</ph> to indicate whether output is to be sent to a file, and a flag named <ph id="ph2">`isBoth`</ph> to indicate that output should be sent to the console.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#10<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/operations1.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#10<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/operations1.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Booleans and arithmetic operations</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Boolean value is sometimes used to indicate the presence of a condition that triggers a mathematical calculation.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">`hasShippingCharge`</ph> variable might serve as a flag to indicate whether to add shipping charges to an invoice amount.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an operation with a <ph id="ph1">`false`</ph> value has no effect on the result of an operation, it is not necessary to convert the Boolean to an integral value to use in the mathematical operation.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you can use conditional logic.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example computes an amount that consists of a subtotal, a shipping charge, and an optional service charge.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`hasServiceCharge`</ph> variable determines whether the service charge is applied.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of converting <ph id="ph1">`hasServiceCharge`</ph> to a numeric value and multiplying it by the amount of the service charge, the example uses conditional logic to add the service charge amount if it is applicable.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Boolean.Structure#13<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.boolean.structure/cs/operations2.cs#13)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Boolean.Structure#13<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.boolean.structure/vb/operations2.vb#13)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Booleans and interop</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>While marshaling base data types to COM is generally straightforward, the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> data type is an exception.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute to marshal the <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> type to any of the following representations:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumeration type</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unmanaged format</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>A 4-byte integer value, where any nonzero value represents <ph id="ph1">`true`</ph> and 0 represents <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the default format of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> field in a structure and of a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> parameter in platform invoke calls.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>A 1-byte integer value, where the 1 represents <ph id="ph1">`true`</ph> and 0 represents <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>A 2-byte integer value, where -1 represents <ph id="ph1">`true`</ph> and 0 represents <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the default format of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> parameter in COM interop calls.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Compares this instance to a specified <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> object and returns an integer that indicates their relationship to one another.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method implements the <ph id="ph1">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> interface and performs slightly better than the <ph id="ph2">&lt;xref:System.Boolean.CompareTo%2A?displayProperty=fullName&gt;</ph> method because it does not have to convert the <ph id="ph3">`value`</ph> parameter to an object.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose the instance type is <ph id="ph1">&lt;xref:System.Int32&gt;</ph> and the parameter type is <ph id="ph2">&lt;xref:System.Byte&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Microsoft C# compiler generates instructions to represent the value of the parameter as an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> object, then generates a <ph id="ph2">&lt;xref:System.Int32.CompareTo%2A?displayProperty=fullName&gt;</ph> method to compare the <ph id="ph3">&lt;xref:System.Int32&gt;</ph> instance and parameter representation.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> object to compare to this instance.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A signed integer that indicates the relative values of this instance and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Less than zero</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This instance is <ph id="ph1">`false`</ph> and <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This instance and <ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> are equal (either both are <ph id="ph2">`true`</ph> or both are <ph id="ph3">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Greater than zero</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This instance is <ph id="ph1">`true`</ph> and <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Compares this instance to a specified object and returns an integer that indicates their relationship to one another.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`obj`</ph> must be <ph id="ph2">`null`</ph> or an instance of <ph id="ph3">`Boolean`</ph>; otherwise, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method implements the <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>An object to compare to this instance, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A signed integer that indicates the relative order of this instance and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Less than zero</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This instance is <ph id="ph1">`false`</ph> and <ph id="ph2">&lt;code&gt;obj&lt;/code&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This instance and <ph id="ph1">&lt;code&gt;obj&lt;/code&gt;</ph> are equal (either both are <ph id="ph2">`true`</ph> or both are <ph id="ph3">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Greater than zero</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This instance is <ph id="ph1">`true`</ph> and <ph id="ph2">&lt;code&gt;obj&lt;/code&gt;</ph> is <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;obj&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;obj&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether this instance is equal to a specified <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method implements the <ph id="ph1">&lt;xref:System.IEquatable%601?displayProperty=fullName&gt;</ph> interface, and performs slightly better than <ph id="ph2">&lt;xref:System.Boolean.Equals%2A&gt;</ph> because it does not have to convert the <ph id="ph3">`obj`</ph> parameter to an object.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value to compare to this instance.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> has the same value as this instance; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An object to compare to this instance.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> is a <ph id="ph3">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> and has the same value as this instance; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Represents the Boolean value <ph id="ph1">`false`</ph> as a string.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This field is read-only.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is equal to the string "False".</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Boolean.FalseString&gt;</ph> property defines the string representation of a <ph id="ph2">`False`</ph><ph id="ph3">&lt;xref:System.Boolean&gt;</ph> value in formatting and parsing operations.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this instance.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> class implements <ph id="ph2">`true`</ph> as the integer, one, and <ph id="ph3">`false`</ph> as the integer, zero.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, a particular programming language might represent <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> with other values.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A hash code for the current <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Returns the type code for the <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value type.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The enumerated constant <ph id="ph1">&lt;xref href="System.TypeCode.Boolean"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Converts the specified string representation of a logical value to its <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> equivalent.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter, optionally preceded or trailed by white space, must contain either <ph id="ph2">&lt;xref:System.Boolean.TrueString&gt;</ph> or <ph id="ph3">&lt;xref:System.Boolean.FalseString&gt;</ph>; otherwise, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The comparison is case-insensitive.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>A string containing the value to convert.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> is equivalent to <ph id="ph3">&lt;xref href="System.Boolean.TrueString"&gt;&lt;/xref&gt;</ph>; <ph id="ph4">`false`</ph> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph5">value</ph><ept id="p2">&lt;/code&gt;</ept> is equivalent to <ph id="ph6">&lt;xref href="System.Boolean.FalseString"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is not equivalent to <ph id="ph2">&lt;xref href="System.Boolean.TrueString"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Boolean.FalseString"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Converts the value of this instance to its equivalent string representation (either "True" or "False").</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter is reserved.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not participate in the execution of this method.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the <ph id="ph1">&lt;xref:System.Boolean.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method, unlike most methods with a <ph id="ph2">`provider`</ph> parameter, does not reflect culture-specific settings.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the constants "True" or "False".</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that XML is case-sensitive, and that the XML specification recognizes "true" and "false" as the valid set of Boolean values.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.String&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Boolean.ToString%28System.IFormatProvider%29&gt;</ph> method is to be written to an XML file, its <ph id="ph3">&lt;xref:System.String.ToLowerInvariant%2A?displayProperty=fullName&gt;</ph> method should be called first to convert it to lowercase.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>(Reserved) An <ph id="ph1">&lt;xref href="System.IFormatProvider"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Boolean.TrueString"&gt;&lt;/xref&gt;</ph> if the value of this instance is <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref href="System.Boolean.FalseString"&gt;&lt;/xref&gt;</ph> if the value of this instance is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Converts the value of this instance to its equivalent string representation (either "True" or "False").</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the constants "True" or "False".</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that XML is case-sensitive, and that the XML specification recognizes "true" and "false" as the valid set of Boolean values.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string returned by the <ph id="ph1">&lt;xref:System.Boolean.ToString&gt;</ph> method is to be written to an XML file, its <ph id="ph2">&lt;xref:System.String.ToLowerInvariant%2A?displayProperty=fullName&gt;</ph> method should be called first to convert it to lowercase.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>"True" (the value of the <ph id="ph1">&lt;xref href="System.Boolean.TrueString"&gt;&lt;/xref&gt;</ph> property) if the value of this instance is <ph id="ph2">`true`</ph>, or "False" (the value of the <ph id="ph3">&lt;xref href="System.Boolean.FalseString"&gt;&lt;/xref&gt;</ph> property) if the value of this instance is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Represents the Boolean value <ph id="ph1">`true`</ph> as a string.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This field is read-only.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is equal to the string "True".</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Boolean.TrueString&gt;</ph> property defines the string representation of a <ph id="ph2">`True`</ph><ph id="ph3">&lt;xref:System.Boolean&gt;</ph> value in formatting and parsing operations.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Tries to convert the specified string representation of a logical value to its <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> equivalent.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A return value indicates whether the conversion succeeded or failed.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Boolean.TryParse%2A&gt;</ph> method is like the <ph id="ph2">&lt;xref:System.Boolean.Parse%2A&gt;</ph> method, except the <ph id="ph3">&lt;xref:System.Boolean.TryParse%2A&gt;</ph> method does not throw an exception if the conversion fails.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter can be preceded or followed by white space.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>The comparison is ordinal and case-insensitive.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A string containing the value to convert.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>When this method returns, if the conversion succeeded, contains <ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> is equal to <ph id="ph3">&lt;xref href="System.Boolean.TrueString"&gt;&lt;/xref&gt;</ph> or <ph id="ph4">`false`</ph> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph5">value</ph><ept id="p2">&lt;/code&gt;</ept> is equal to <ph id="ph6">&lt;xref href="System.Boolean.FalseString"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If the conversion failed, contains <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The conversion fails if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph> or is not equal to the value of either the <ph id="ph3">&lt;xref href="System.Boolean.TrueString"&gt;&lt;/xref&gt;</ph> or <ph id="ph4">&lt;xref href="System.Boolean.FalseString"&gt;&lt;/xref&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> was converted successfully; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToBoolean(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToByte(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToByte%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>1 if the value of this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Attempting to use this method throws an <ph id="ph1">&lt;xref href="System.InvalidCastException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>No value is returned.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>You attempt to convert a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value to a <ph id="ph2">&lt;xref href="System.Char"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Attempting to use this method throws an <ph id="ph1">&lt;xref href="System.InvalidCastException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>No value is returned.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>You attempt to convert a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value to a <ph id="ph2">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToDecimal(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>..</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToDecimal%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToDouble(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>..</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToDouble%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToInt16(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToInt16%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToInt32(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToInt32%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToInt64(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.Boolean%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToSByte(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.Boolean%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToSingle(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>..</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.Boolean%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToType(System.Type,System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The desired type.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IFormatProvider"&gt;&lt;/xref&gt;</ph> implementation that supplies culture-specific information about the format of the returned value.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>An object of the specified type, with a value that is equivalent to the value of this <ph id="ph1">`Boolean`</ph> object.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The requested type conversion is not supported.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToUInt16(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.Boolean%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToUInt32(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.Boolean%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.IConvertible.ToUInt64(System.IFormatProvider)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.Boolean%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>1 if this instance is <ph id="ph1">`true`</ph>; otherwise, 0.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>