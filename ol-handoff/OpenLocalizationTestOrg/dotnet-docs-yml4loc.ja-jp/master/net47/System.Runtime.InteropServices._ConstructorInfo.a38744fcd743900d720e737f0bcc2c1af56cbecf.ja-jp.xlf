<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c579d2926c9c30a18c58f9f778dd3364b9a14765</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices._ConstructorInfo.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">553823f907852a3c298f5c404a8bf347b897ba5f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb89e215687df98c55613c6d26445a528a3926b2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exposes the public members of the <ph id="ph1">&lt;xref href="System.Reflection.ConstructorInfo"&gt;&lt;/xref&gt;</ph> class to unmanaged code.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This interface is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo?displayProperty=fullName&gt;</ph> class discovers the attributes of a class constructor and provides access to constructor metadata.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices._ConstructorInfo?displayProperty=fullName&gt;</ph> interface preserves the vtable order of the <ph id="ph2">&lt;xref:System.Reflection.ConstructorInfo?displayProperty=fullName&gt;</ph> class members that can be accessed by unmanaged COM objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.Attributes"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Attributes%2A&gt;</ph> property gets the attributes associated with this method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Reflection.MethodAttributes"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.CallingConvention"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.CallingConvention%2A&gt;</ph> property gets a value indicating the calling conventions for this method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Reflection.CallingConventions"&gt;&lt;/xref&gt;</ph> for this method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo.DeclaringType"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property gets the class that declares this member.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object for the class that declares this member.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Object.Equals(System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> method determines whether the specified <ph id="ph2">&lt;xref:System.Object&gt;</ph> is equal to the current <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> to compare with the current <ph id="ph2">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified <ph id="ph2">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id="ph3">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method returns an array containing all the custom attributes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.GetCustomAttributes%2A&gt;</ph> method returns an array of custom attributes identified by <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The type of attribute to search for.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Only attributes that are assignable to this type are returned.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Object.GetHashCode"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> method serves as a hash function for a particular type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> is suitable for use in hashing algorithms and data structures like a hash table.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The hash code for the current instance.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Must be IID_NULL.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Passed-in array of names to be mapped.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Count of the names to be mapped.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The locale context in which to interpret the names.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.GetMethodImplementationFlags"&gt;&lt;/xref&gt;</ph> member.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A&gt;</ph> member returns the <ph id="ph2">&lt;xref:System.Reflection.MethodImplAttributes&gt;</ph> flags.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Reflection.MethodImplAttributes"&gt;&lt;/xref&gt;</ph> flags.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.GetParameters"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> method gets the parameters of the specified method or constructor.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Reflection.ParameterInfo"&gt;&lt;/xref&gt;</ph> containing information that matches the signature of the method (or constructor) reflected by this instance.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Object.GetType"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method gets the type of the current instance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The type information to return.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The locale identifier for the type information.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Receives a pointer to the requested type information object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Provides access to properties and methods exposed by an object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Identifies the member.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Must be IID_NULL.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The locale context in which to interpret arguments.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Flags describing the context of the call.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Pointer to the location where the result is to be stored.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Pointer to a structure that contains exception information.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The index of the first argument that has an error.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method invokes the constructor reflected by this <ph id="ph2">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> with the specified arguments, under the constraints of the specified <ph id="ph3">&lt;xref:System.Reflection.Binder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The instance that created this method.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">`BindingFlags`</ph> values that specifies the type of binding.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Binder`</ph> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">binder</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, then <ph id="ph3">`Binder.DefaultBinding`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`Object`</ph> used to match the number, order, and type of the parameters for this constructor, under the constraints of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">binder</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0].</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For reference-type elements, this value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For value-type elements, this value is 0, 0.0, or <ph id="ph1">`false`</ph>, depending on the specific element type.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> used to govern the coercion of types.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If this is <ph id="ph1">`null`</ph>, the <ph id="ph2">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> for the current thread is used.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An instance of the class associated with the constructor.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.Invoke(System.Object,System.Object[])"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method invokes the method or constructor represented by this object, using the specified parameters.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The instance that created this method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>An argument list for the invoked method or constructor.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If there are no parameters, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">parameters</ph><ept id="p1">&lt;/code&gt;</ept> should be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If the method or constructor represented by this instance takes a <ph id="ph1">`ref`</ph> parameter (<ph id="ph2">`ByRef`</ph> in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For reference-type elements, this value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For value-type elements, this value is 0, 0.0, or <ph id="ph1">`false`</ph>, depending on the specific element type.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>An instance of the class associated with the constructor.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo.Invoke%2A&gt;</ph> method invokes the constructor reflected by this <ph id="ph2">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object with the specified arguments, under the constraints of the specified <ph id="ph3">&lt;xref:System.Reflection.Binder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">`BindingFlags`</ph> values that specifies the type of binding.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Binder`</ph> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">binder</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, then <ph id="ph3">`Binder.DefaultBinding`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`Object`</ph> used to match the number, order, and type of the parameters for this constructor, under the constraints of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">binder</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0].</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For reference-type elements, this value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For value-type elements, this value is 0, 0.0, or <ph id="ph1">`false`</ph>, depending on the specific element type.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> used to govern the coercion of types.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If this is <ph id="ph1">`null`</ph>, the <ph id="ph2">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> for the current thread is used.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An instance of the class associated with the constructor.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.ConstructorInfo.Invoke(System.Object[])"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo.Invoke%2A&gt;</ph> method invokes the constructor reflected by the instance that has the specified parameters, providing default values for the parameters not commonly used.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>An array of values that matches the number, order, and type (under the constraints of the default binder) of the parameters for this constructor.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If this constructor takes no parameters, then use either an array with zero elements or <ph id="ph1">`null`</ph>, as in Object[] parameters = new Object[0].</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For reference-type elements, this value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For value-type elements, this value is 0, 0.0, or <ph id="ph1">`false`</ph>, depending on the specific element type.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>An instance of the class associated with the constructor.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsAbstract"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsAbstract%2A&gt;</ph> property gets a value indicating whether the method is abstract.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the method is abstract; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsAssembly"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsAssembly%2A&gt;</ph> property gets a value indicating whether this method can be called by other classes in the same assembly.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method can be called by other classes in the same assembly; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsConstructor"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsConstructor%2A&gt;</ph> property gets a value indicating whether the method is a constructor.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is a constructor; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)"&gt;&lt;/xref&gt;</ph> member.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.IsDefined%2A&gt;</ph> member indicates whether one or more instances of <ph id="ph2">`attributeType`</ph> is applied to this member.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Type`</ph> object to which the custom attributes are applied.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if one or more instances of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">attributeType</ph><ept id="p1">&lt;/code&gt;</ept> is applied to this member; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsFamily"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsFamily%2A&gt;</ph> property gets a value indicating whether access to this method is restricted to members of the class and members of its derived classes.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if access to the class is restricted to members of the class itself and to members of its derived classes; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsFamilyAndAssembly"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A&gt;</ph> property gets a value indicating whether this method can be called by derived classes if they are in the same assembly.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if access to this method is restricted to members of the class itself and to members of derived classes that are in the same assembly; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsFamilyOrAssembly"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A&gt;</ph> property gets a value indicating whether this method can be called by derived classes, wherever they are, and by all classes in the same assembly.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if access to this method is restricted to members of the class itself, members of derived classes wherever they are, and members of other classes in the same assembly; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsFinal"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsFinal%2A&gt;</ph> property gets a value indicating whether this method is <ph id="ph2">`final`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is <ph id="ph2">`final`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsHideBySig"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsHideBySig%2A&gt;</ph> property gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the member is hidden by signature; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsPrivate"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsPrivate%2A&gt;</ph> property gets a value indicating whether this member is private.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if access to this method is restricted to other members of the class itself; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsPublic"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsPublic%2A&gt;</ph> property gets a value indicating whether this is a public method.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is public; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsSpecialName"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsSpecialName%2A&gt;</ph> property gets a value indicating whether this method has a special name.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method has a special name; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsStatic"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> property gets a value indicating whether the method is <ph id="ph2">`static`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is <ph id="ph2">`static`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.IsVirtual"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsVirtual%2A&gt;</ph> property gets a value indicating whether the method is <ph id="ph2">`virtual`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method is <ph id="ph2">`virtual`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.ConstructorInfo.MemberType"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo.MemberType%2A&gt;</ph> property gets a <ph id="ph2">&lt;xref:System.Reflection.MemberTypes&gt;</ph> value indicating the type of the member — method, constructor, event, and so on.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Reflection.MemberTypes"&gt;&lt;/xref&gt;</ph> value indicating the type of member.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MethodBase.MethodHandle"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> property gets a handle to the internal metadata representation of a method.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.RuntimeMethodHandle"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo.Name"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> property gets the name of the current member.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> containing the name of this member.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo.ReflectedType"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</ph> property gets the class object that was used to obtain this instance of <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object through which this <ph id="ph2">&lt;xref href="System.Reflection.MemberInfo"&gt;&lt;/xref&gt;</ph> object was obtained.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Provides COM objects with version-independent access to the <ph id="ph1">&lt;xref href="System.Object.ToString"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A string that represents the current <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>