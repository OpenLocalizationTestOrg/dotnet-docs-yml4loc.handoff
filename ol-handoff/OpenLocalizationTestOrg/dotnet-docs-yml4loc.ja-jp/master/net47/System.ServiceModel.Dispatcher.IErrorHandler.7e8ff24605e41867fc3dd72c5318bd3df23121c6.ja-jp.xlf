<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71aff0e1469b25b2dda276f265017960080638f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Dispatcher.IErrorHandler.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23899cbb06713c84e29a275fb11dabae0b1bd5f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f7e429e9a7e3cd675ec305b3da0dca2c89c66f8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>To explicitly control the behavior of the application when an exception is thrown, implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> interface and add it to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph>â€™s <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> enables you to explicitly control the SOAP fault generated, decide whether to send it back to the client, and perform associated tasks, such as logging.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Error handlers are called in the order in which they were added to the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method to control the fault message that is returned to the client.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method to ensure error-related behaviors, including error logging, assuring a fail fast, shutting down the application, and so on.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method being called on the operation thread.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>All <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations are called first, prior to sending a response message.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations have been called and return, and if <ph id="ph2">`fault`</ph> is non-<ph id="ph3">`null`</ph>, it is sent back to the client according to the operation contract.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`fault`</ph> is <ph id="ph2">`null`</ph> after all implementations have been called, the response message is controlled by the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions can occur after all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations are called and a response message is handed to the channel.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a channel exception occurs (for example, difficulty serializing the message) <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> objects are notified.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you should still make sure that your development environment catches and displays such exceptions to you or makes use of tracing to discover the problem.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about tracing, see <bpt id="p1">[</bpt>Using Tracing to Troubleshoot Your Application<ept id="p1">](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the response message has been sent, all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> implementations are called in the same order.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation is added to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property on the service (and the client in the case of duplex communication).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> to the runtime by implementing a behavior (either an <ph id="ph2">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName&gt;</ph> object) and use the behavior programmatically, from a configuration file or with a custom attribute to attach your <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using behaviors to modify the runtime, see <bpt id="p1">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id="p1">](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method to implement error-related behaviors such as error logging, system notifications, shutting down the application, and so on, and return a value that specifies whether the exception has been handled appropriately.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method being called on the operation thread.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>All <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementations are called.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default (when the return value is <ph id="ph1">`false`</ph>), if there is an exception, the dispatcher aborts any session and aborts the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> if the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> is anything other than <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception is then considered unhandled and any state is considered corrupt.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return <ph id="ph1">`true`</ph> from <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> to prevent this default behavior.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If any error handler returns <ph id="ph1">`true`</ph> it instructs <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> that it is safe to continue using state associated with the failed request.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no error handler returns <ph id="ph1">`true`</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method the exception is considered unhandled and the default response applies, potentially resulting in an aborted <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt;</ph> and channel when communicating on a session channel or the <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName&gt;</ph> property is not set to <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`error`</ph> parameter is never <ph id="ph2">`null`</ph> and contains the exception object that was thrown.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> should not abort the session (if there is one) and instance context if the instance context is not <ph id="ph3">&lt;xref href="System.ServiceModel.InstanceContextMode.Single"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Enables the creation of a custom <ph id="ph1">&lt;xref href="System.ServiceModel.FaultException`1"&gt;&lt;/xref&gt;</ph> that is returned from an exception in the course of a service method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method to create a custom fault message that is returned to the client.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method will always be called for exceptions that leave operations, except when the WCF runtime recognizes the exception as especially fatal and rethrows the exception itself.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>When all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations have been called, the fault message is sent back to the client (if <ph id="ph2">`fault`</ph> is non-<ph id="ph3">`null`</ph>).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`fault`</ph> parameter is <ph id="ph2">`null`</ph> the default fault is sent to the client.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The inbound message that caused the processing error is available during this method from the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method being called on the operation thread.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The SOAP version of the message.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> object that is returned to the client, or service, in the duplex case.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>