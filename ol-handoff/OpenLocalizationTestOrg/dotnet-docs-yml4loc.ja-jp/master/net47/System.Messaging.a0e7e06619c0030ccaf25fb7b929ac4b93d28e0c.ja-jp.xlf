<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fac5b246308a23a14e2c4363ff047078439e3e7f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Messaging.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">214eac787a4978a0f777a80875e06b4ffe7eb533</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d50252a8eba03ea05025beb8579a6391594a51fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Messaging"&gt;&lt;/xref&gt;</ph> namespace provides classes that allow you to connect to, monitor, and administer message queues on the network and send, receive, or peek messages.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class include the following methods for reading and writing messages to the queue:</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;</ph> method enables your application to write messages to the queue.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overloads of the method enable you to specify whether to send your message using a <ph id="ph1">&lt;xref:System.Messaging.Message&gt;</ph> (which provides detailed control over the information you send) or any other managed object, including application-specific classes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method also supports sending messages as part of a transaction.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;</ph> methods provide functionality for reading messages from a queue.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Like the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;</ph> method, these methods provide overloads that support transactional queue processing.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>These methods also provide overloads with time-out.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Out parameters that enable processing to continue if the queue is empty.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because these methods are examples of synchronous processing, they interrupt the current thread until a message is available, unless you specify a time-out.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method is similar to <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, but it does not cause a message to be removed from the queue when it is read.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> does not change the queue contents, there are no overloads to support transactional processing.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>, like <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, reads messages synchronously from the queue, overloads of the method do support specifying a time-out in order to prevent the thread from waiting indefinitely.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph>, <ph id="ph3">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> methods provide ways to asynchronously read messages from the queue.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>They do not interrupt the current thread while waiting for a message to arrive in the queue.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following methods of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class provide functionality for retrieving lists of queues by specified criteria and determining if specific queues exist:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29&gt;</ph> enables the retrieval of the private queues on a computer.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29&gt;</ph>, <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29&gt;</ph>, and <ph id="ph3">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29&gt;</ph> provide ways to retrieve public queues by common criteria.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>An overload of <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.GetPublicQueues%2A&gt;</ph> provides even finer detail for selecting queues based on a number of search criteria.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other methods of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class provide the following functionality:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating and deleting Message Queueing queues.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a message enumerator to step through the messages in a queue.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a queue enumerator for iterating through the queues on the system.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting ACL-based access rights.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Working with the connection cache.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.Message&gt;</ph> class provides detailed control over the information you send to a queue, and is the object used when receiving or peeking messages from a queue.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Besides the message body, the properties of the <ph id="ph1">&lt;xref:System.Messaging.Message&gt;</ph> class include acknowledgment settings, formatter selection, identification, authentication and encryption information, timestamps, indications about using tracing, server journaling, and dead-letter queues, and transaction data.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> component is associated with the following three formatters, which enable you to serialize and deserialize messages sent and received from queues:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> provides loosely coupled messaging, enabling independent versioning of serialized types on the client and server.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.ActiveXMessageFormatter&gt;</ph> is compatible with the MSMQ COM control.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>It allows you to send types that can be received by the control and to receive types that were sent by the control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.BinaryMessageFormatter&gt;</ph> provides a faster alternative to the <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>, but without the benefit of loosely coupled messaging.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other classes in the <ph id="ph1">`Messaging`</ph> namespace support code-access and ACL-based security, filtering <ph id="ph2">&lt;xref:System.Messaging.Message&gt;</ph> properties when reading messages from a queue, and using transactions when sending and receiving messages.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>