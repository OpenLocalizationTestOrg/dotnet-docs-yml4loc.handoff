<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4acc96f09cb2e6f6c2ca172c44dcc289910e9d56</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.VisualBasic.VBMath.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64a5d4388df8b6b0579bffc6a8a092f5ff45fd9d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f93a829e74be4c37fa6341f04caf05a3d24ade1b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VbMath`</ph> module contains procedures used to perform mathematical operations.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This module supports the Visual Basic language keywords and run-time library members for generating random numbers.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes the random-number generator.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">`Randomize`</ph> method does not take a seed value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the value returned by the system timer is used as the new seed value.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Randomize`</ph> is not used, the <ph id="ph2">`Rnd`</ph> function (with no arguments) uses the same number as a seed the first time it is called, and thereafter uses the last-generated number as a seed value.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>To repeat sequences of random numbers, call <ph id="ph1">`Rnd`</ph> with a negative argument immediately before using <ph id="ph2">`Randomize`</ph> with a numeric argument.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function should not be used to generate random numbers for use in cryptography.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes the random-number generator.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Randomize`</ph> uses <ph id="ph2">`Number`</ph> to initialize the <ph id="ph3">`Rnd`</ph> function's random-number generator, giving it a new seed value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you omit <ph id="ph1">`Number`</ph>, the value returned by the system timer is used as the new seed value.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Randomize`</ph> is not used, the <ph id="ph2">`Rnd`</ph> function (with no arguments) uses the same number as a seed the first time it is called, and thereafter uses the last-generated number as a seed value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>To repeat sequences of random numbers, call <ph id="ph1">`Rnd`</ph> with a negative argument immediately before using <ph id="ph2">`Randomize`</ph> with a numeric argument.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using <ph id="ph1">`Randomize`</ph> with the same value for <ph id="ph2">`Number`</ph> does not repeat the previous sequence.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function should not be used to generate random numbers for use in cryptography.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Object`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns a random number of type <ph id="ph1">`Single`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Rnd`</ph> function returns a value less than 1, but greater than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before calling <ph id="ph1">`Rnd`</ph>, use the <ph id="ph2">`Randomize`</ph> statement without an argument to initialize the random-number generator with a seed based on the system timer.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To produce random integers in a given range, use the following formula.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrMath#30<ept id="p2">](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Here, <ph id="ph1">`upperbound`</ph> is the highest number in the range, and <ph id="ph2">`lowerbound`</ph> is the lowest number in the range.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>To repeat sequences of random numbers, call <ph id="ph1">`Rnd`</ph> with a negative argument immediately before using <ph id="ph2">`Randomize`</ph> with a numeric argument.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function should not be used to generate random numbers for use in cryptography.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The next random number in the sequence.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns a random number of type <ph id="ph1">`Single`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Rnd`</ph> function returns a value less than 1, but greater than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of <ph id="ph1">`Number`</ph> determines how <ph id="ph2">`Rnd`</ph> generates a random number.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any given initial seed, the same number sequence is generated because each successive call to the <ph id="ph1">`Rnd`</ph> function uses the previously generated number as a seed for the next number in the sequence.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before calling <ph id="ph1">`Rnd`</ph>, use the <ph id="ph2">`Randomize`</ph> statement without an argument to initialize the random-number generator with a seed based on the system timer.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>To produce random integers in a given range, use the following formula.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrMath#30<ept id="p2">](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Here, <ph id="ph1">`upperbound`</ph> is the highest number in the range, and <ph id="ph2">`lowerbound`</ph> is the lowest number in the range.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>To repeat sequences of random numbers, call <ph id="ph1">`Rnd`</ph> with a negative argument immediately before using <ph id="ph2">`Randomize`</ph> with a numeric argument.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using <ph id="ph1">`Randomize`</ph> with the same value for <ph id="ph2">`Number`</ph> does not repeat the previous sequence.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function should not be used to generate random numbers for use in cryptography.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Single`</ph> value or any valid <ph id="ph2">`Single`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If number is less than zero, Rnd generates the same number every time, using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> as the seed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If number is greater than zero, Rnd generates the next random number in the sequence.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If number is equal to zero, Rnd generates the most recently generated number.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If number is not supplied, Rnd generates the next random number in the sequence.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>