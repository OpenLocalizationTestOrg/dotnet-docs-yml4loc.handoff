<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">529a6efec2c210ae19e080c9deef3bf325dc0532</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Enum.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">adad924853bf34c94f428275e4e6e23f5819f226</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">facb6ebd1ebb57928d42900a3f7ed9d0f3e94cd0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the base class for enumerations.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumeration is a set of named constants whose underlying type is any integral type.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no underlying type is explicitly declared, <ph id="ph1">&lt;xref:System.Int32&gt;</ph> is used.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Enum&gt;</ph> is the base class for all enumerations in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumeration types are defined by the <ph id="ph1">`enum`</ph> keyword in C# and the <ph id="ph2">`Enum`</ph>...<ph id="ph3">`End Enum`</ph> construct in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Enum&gt;</ph> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also treat an enumeration as a bit field.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Non-Exclusive Members and the Flags Attribute<ept id="p1">](#Flags)</ept> section and the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> topic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this topic:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Creating an enumeration type<ept id="p1">](#Creating)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1"> [</bpt>Instantiating an enumeration type<ept id="p1">](#Instantiating)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1"> [</bpt>Enumeration best practices<ept id="p1">](#BestPractices)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1"> [</bpt>Performing operations with enumerations<ept id="p1">](#Operations)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1"> [</bpt>Performing conversions<ept id="p1">](#conversions)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1"> [</bpt>Parsing enumeration values<ept id="p1">](#parsing)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1"> [</bpt>Formatting enumeration values<ept id="p1">](#formatting)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Iterating enumeration members<ept id="p1">](#iterating)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Non-exclusive members and the Flags attribute<ept id="p1">](#Flags)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Adding enumeration methods<ept id="p1">](#methods)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating an enumeration type</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>It creates an enumeration named <ph id="ph1">`ArrivalStatus`</ph> that has three members: <ph id="ph2">`ArrivalStatus.Early`</ph>, <ph id="ph3">`ArrivalStatus.OnTime`</ph>, and <ph id="ph4">`ArrivalStatus.Late`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that in both cases, the enumeration does not explicitly inherit from <ph id="ph1">&lt;xref:System.Enum&gt;</ph>; the inheritance relationship is handled implicitly by the compiler.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should never create an enumeration type whose underlying type is non-integral or <ph id="ph1">&lt;xref:System.Char&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instantiating an enumeration type</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example instantiates an <ph id="ph1">`ArrivalStatus`</ph> whose value is <ph id="ph2">`ArrivalStatus.OnTime`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also instantiate an enumeration value in the following ways:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example creates an <ph id="ph1">`ArrivalStatus`</ph> object whose value is <ph id="ph2">`ArrivalStatus.Early`</ph> in this way.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling its implicit default constructor.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>As the following example shows, in this case the underlying value of the enumeration instance is 0.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this is not necessarily the value of a valid constant in the enumeration.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling the <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> method to parse a string that contains the name of a constant in the enumeration.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Parsing Enumeration Values<ept id="p1">](#parsing)</ept> section.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method to convert an integral value to an enumeration type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Performing Conversions<ept id="p1">](#conversions)</ept> section.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumeration best practices</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you use the following best practices when you define enumeration types:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have not defined an enumeration member whose value is 0, consider creating a <ph id="ph1">`None`</ph> enumerated constant.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the memory used for the enumeration is initialized to zero by the common language runtime.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not specify enumerated constants that are reserved for future use.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you define a method or property that takes an enumerated constant as a value, consider validating the value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additional best practices for enumeration types whose constants are bit fields are listed in the <bpt id="p1">[</bpt>Non-Exclusive Members and the Flags Attribute<ept id="p1">](#Flags)</ept> section.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performing operations with enumerations</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot define new methods when you are creating an enumeration.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, an enumeration type inherits a complete set of static and instance methods from the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performing conversions</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#5<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#5<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class also includes a <ph id="ph2">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method that converts a value of any integral type to an enumeration value.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> method to convert an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> to an <ph id="ph3">`ArrivalStatus`</ph> value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that, because the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> returns a value of type <ph id="ph2">&lt;xref:System.Object&gt;</ph>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#6<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#6<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent this, you can pass the integer to the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method before performing the conversion.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses this method to determine whether the elements in an array of integer values can be converted to <ph id="ph1">`ArrivalStatus`</ph> values.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#7<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#7<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class provides explicit interface implementations of the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface for converting from an enumeration value to an integral type, you should use the methods of the <ph id="ph3">&lt;xref:System.Convert&gt;</ph> class, such as <ph id="ph4">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, to perform these conversions.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates how you can use the <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> method along with the <ph id="ph2">&lt;xref:System.Convert.ChangeType%2A?displayProperty=fullName&gt;</ph> method to convert an enumeration value to its underlying type.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that this example does not require the underlying type of the enumeration to be known at compile time.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#8<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#8<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parsing enumeration values</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> methods allow you to convert the string representation of an enumeration value to that value.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string representation can be either the name or the underlying value of an enumeration constant.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent this, the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method can be called to ensure that the result of the parsing method is a valid enumeration value.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example illustrates this approach and demonstrates calls to both the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#9<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#9<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Formatting enumeration values</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can convert enumeration values to their string representations by calling the static <ph id="ph1">&lt;xref:System.Enum.Format%2A&gt;</ph> method, as well as the overloads of the instance <ph id="ph2">&lt;xref:System.Enum.ToString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use a format string to control the precise way in which an enumeration value is represented as a string.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the <ph id="ph1">`ArrivalStatus`</ph> enumeration to its string representations.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#10<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#10<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Iterating enumeration members</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> type does not implement the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, which would enable you to iterate members of a collection by using a <ph id="ph4">`foreach`</ph> (in C#) or <ph id="ph5">`For Each`</ph> (in Visual Basic) construct.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can enumerate members in either of two ways.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method to retrieve a string array containing the names of the enumeration members.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Next, for each element of the string array, you can call the <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> method to convert the string to its equivalent enumeration value.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this approach.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#11<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#11<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call the <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method to retrieve an array that contains the underlying values in the enumeration.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Next, for each element of the array, you can call the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method to convert the integer to its equivalent enumeration value.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this approach.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#12<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#12<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Non-exclusive members and the Flags attribute</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>One common use of an enumeration is to represent a set of mutually exclusive values.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an <ph id="ph1">`ArrivalStatus`</ph> instance can have a value of <ph id="ph2">`Early`</ph>, <ph id="ph3">`OnTime`</ph>, or <ph id="ph4">`Late`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>It makes no sense for the value of an <ph id="ph1">`ArrivalStatus`</ph> instance to reflect more than one enumeration constant.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute can be used to indicate that the enumeration consists of bit fields.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an enumeration named <ph id="ph1">`Pets`</ph> might be used to indicate the kinds of pets in a household.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be defined as follows.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#13<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#13<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Pets`</ph> enumeration can then be used as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#14<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#14<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following best practices should be used when defining a bitwise enumeration and applying the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means the individual flags in combined enumeration constants do not overlap.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider creating an enumerated constant for commonly used flag combinations.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you have an enumeration used for file I/O operations that contains the enumerated constants <ph id="ph1">`Read = 1`</ph> and <ph id="ph2">`Write = 2`</ph>, consider creating the enumerated constant <ph id="ph3">`ReadWrite = Read OR Write`</ph>, which combines the <ph id="ph4">`Read`</ph> and <ph id="ph5">`Write`</ph> flags.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>A convenient way to test whether a flag is set in a numeric value is to call the instance <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#15<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#15<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#16<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#16<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">`None`</ph> as the name of the flag enumerated constant whose value is zero.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot use the <ph id="ph1">`None`</ph> enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can perform a logical, not a bitwise, comparison between the numeric value and the <ph id="ph1">`None`</ph> enumerated constant to determine whether any bits in the numeric value are set.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#17<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#17<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not define an enumeration value solely to mirror the state of the enumeration itself.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, do not define an enumerated constant that merely marks the end of the enumeration.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to determine the last value of the enumeration, check for that value explicitly.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Adding enumeration methods</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because enumeration types are defined by language structures, such as <ph id="ph1">`enum`</ph> (C#) and <ph id="ph2">`Enum`</ph> (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <ph id="ph3">&lt;xref:System.Enum&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can use extension methods to add functionality to a particular enumeration type.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, the <ph id="ph1">`Grades`</ph> enumeration represents the possible letter grades that a student may receive in a class.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>An extension method named <ph id="ph1">`Passing`</ph> is added to the <ph id="ph2">`Grades`</ph> type so that each instance of that type now "knows" whether it represents a passing grade or not.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Extensions`</ph> class also contains a static read-write variable that defines the minimum passing grade.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of the <ph id="ph1">`Passing`</ph> extension method reflects the current value of that variable.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Class#18<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Class#18<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Compares this instance to a specified object and returns an indication of their relative values.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>An object to compare, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A signed number that indicates the relative values of this instance and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">target</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Less than zero</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The value of this instance is less than the value of <ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The value of this instance is equal to the value of <ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Greater than zero</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The value of this instance is greater than the value of <ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> and this instance are not the same type.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This instance is not type <ph id="ph1">&lt;xref href="System.SByte"&gt;&lt;/xref&gt;</ph>, <ph id="ph2">&lt;xref href="System.Int16"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph>, <ph id="ph4">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph>, <ph id="ph5">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph>, <ph id="ph6">&lt;xref href="System.UInt16"&gt;&lt;/xref&gt;</ph>, <ph id="ph7">&lt;xref href="System.UInt32"&gt;&lt;/xref&gt;</ph>, or <ph id="ph8">&lt;xref href="System.UInt64"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.Equals%28System.Object%29?displayProperty=fullName&gt;</ph> method overrides <ph id="ph2">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=fullName&gt;</ph> to define how enumeration members are evaluated for equality.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>An object to compare with this instance, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the valid values for the <ph id="ph1">`format`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Format</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>"G" or "g"</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of <ph id="ph2">`value`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose the only enumerated constant is named Red, and its value is 1.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is specified as 1, this format returns "Red".</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if <ph id="ph1">`value`</ph> is specified as 2, this format returns "2".</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> custom attribute is applied to the enumeration, <ph id="ph2">`value`</ph> is treated as a bit field that contains one or more flags that consist of one or more bits.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`value`</ph> is searched for flags, going from the flag with the largest value to the smallest value.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each flag that corresponds to a bit field in <ph id="ph1">`value`</ph>, the name of the constant is concatenated to the delimiter-separated list.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of that flag is then excluded from further consideration, and the search continues for the next flag.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is not equal to a combination of named enumerated constants, the decimal equivalent of <ph id="ph2">`value`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>"X" or "x"</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Represents <ph id="ph1">`value`</ph> in hexadecimal format without a leading "0x".</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>"D" or "d"</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Represents <ph id="ph1">`value`</ph> in decimal form.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>"F" or "f"</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Behaves identically to "G" or "g", except that the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is not required to be present on the <ph id="ph2">&lt;xref:System.Enum&gt;</ph> declaration.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The enumeration type of the value to convert.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The value to convert.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The output format to use.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A string representation of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumType</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">format</ph><ept id="p3">&lt;/code&gt;</ept> parameter is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumType</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is from an enumeration that differs in type from <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">enumType</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is not an underlying type of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">enumType</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains an invalid value.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> equals "X", but the enumeration type is unknown.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Returns the hash code for the value of this instance.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer hash code.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Retrieves the name of the constant in the specified enumeration that has the specified value.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple enumeration members have the same underlying value, the <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> method guarantees that it will return the name of one of those enumeration members.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it does not guarantee that it will always return the name of the same enumeration member.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>An enumeration type.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The value of a particular enumerated constant in terms of its underlying type.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A string containing the name of the enumerated constant in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumType</ph><ept id="p1">&lt;/code&gt;</ept> whose value is <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p2">&lt;/code&gt;</ept>; or <ph id="ph3">`null`</ph> if no such constant is found.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is neither of type <ph id="ph2">&lt;code&gt;enumType&lt;/code&gt;</ph> nor does it have the same underlying type as <ph id="ph3">&lt;code&gt;enumType&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Retrieves an array of the names of the constants in a specified enumeration.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example provides displays information about the array returned by the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method for an enumeration that includes a negative, zero, and a positive value.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.GetNames#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.GetNames#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are enumerated constants with same value, the order of their corresponding names is unspecified.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An enumeration type.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A string array of the names of the constants in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumType</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> parameter is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Returns the type code of the underlying type of this enumeration member.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The type code of the underlying type of this instance.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The enumeration type is unknown.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Returns the underlying type of the specified enumeration.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> structure enables values to be represented as named constants.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data type of the enumeration's values is known as its underlying type.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the underlying type of the <ph id="ph1">&lt;xref:System.DayOfWeek&gt;</ph> enumeration, which consists of constants that represent each day of the week (<ph id="ph2">&lt;xref:System.DayOfWeek?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.DayOfWeek?displayProperty=fullName&gt;</ph>, and so on), is <ph id="ph4">&lt;xref:System.Int32&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The enumeration whose underlying type will be retrieved.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The underlying type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumType</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Retrieves an array of the values of the constants in a specified enumeration.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example displays information about the array returned by the <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method for an enumeration that includes a negative value, zero, and a positive value.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.GetValues#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.GetValues#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method returns an array that contains a value for each member of the <ph id="ph2">`enumType`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple members have the same value, the returned array includes duplicate values.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, calling the <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve all the names of enumeration members successfully, call the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The<ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method cannot be invoked by using reflection in a reflection-only context.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you can retrieve the value of all enumeration members by using the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=fullName&gt;</ph> method to get an array of <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that represent enumeration members and then call the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=fullName&gt;</ph> method on each element of the array.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this technique.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>It requires that you define the following enumeration in an assembly named Enumerations.dll:</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.GetValues#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.GetValues#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly is loaded in a reflection-only context, a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">`Pets`</ph> enumeration is instantiated, an array of <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects is retrieved, and the field values are displayed to the console.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.GetValues#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.GetValues#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>An enumeration type.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>An array that contains the values of the constants in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumType</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The method is invoked by reflection in a reflection-only context,</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is a type from an assembly loaded in a reflection-only context.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Determines whether one or more bit fields are set in the current instance.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method returns the result of the following Boolean expression.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the underlying value of <ph id="ph1">`flag`</ph> is zero, the method returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this behavior is not desirable, you can use the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method to test for equality with zero and call <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> only if the underlying value of <ph id="ph3">`flag`</ph> is non-zero, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.HasFlag#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.HasFlag#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method is designed to be used with enumeration types that are marked with the <ph id="ph2">&lt;xref:System.FlagsAttribute&gt;</ph> attribute and can be used to determine whether multiple bit fields are set.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>For enumeration types that are not marked with the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute, call either the <ph id="ph2">&lt;xref:System.Enum.Equals%2A&gt;</ph> method or the <ph id="ph3">&lt;xref:System.Enum.CompareTo%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>An enumeration value.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the bit field or bit fields that are set in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">flag</ph><ept id="p1">&lt;/code&gt;</ept> are also set in the current instance; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;flag&lt;/code&gt;</ph> is a different type than the current instance.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Returns an indication whether a constant with a specified value exists in a specified enumeration.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter can be any of the following:</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any member of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>A variable whose value is an enumeration member of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string representation of the name of an enumeration member.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>The characters in the string must have the same case as the enumeration member name.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of the underlying type of <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the constants in <ph id="ph1">`enumType`</ph> define a set of bit fields and <ph id="ph2">`value`</ph> contains the values, names, or underlying values of multiple bit fields, the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method returns <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine whether multiple bit fields are set in an enumeration type that is tagged with the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute, you can call the <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>An enumeration type.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The value or name of a constant in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumType</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a constant in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">enumType</ph><ept id="p1">&lt;/code&gt;</ept> has a value equal to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">value</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">`Enum`</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is an enumeration, but it is not an enumeration of type <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">enumType</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is not an underlying type of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">enumType</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is not type <ph id="ph2">&lt;xref href="System.SByte"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Int16"&gt;&lt;/xref&gt;</ph>, <ph id="ph4">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph>, <ph id="ph5">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph>, <ph id="ph6">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph>, <ph id="ph7">&lt;xref href="System.UInt16"&gt;&lt;/xref&gt;</ph>, <ph id="ph8">&lt;xref href="System.UInt32"&gt;&lt;/xref&gt;</ph>, or <ph id="ph9">&lt;xref href="System.UInt64"&gt;&lt;/xref&gt;</ph>, or <ph id="ph10">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>One or more blank spaces can precede or follow each value, name, or comma in <ph id="ph1">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is a list, the return value is the value of the specified names combined with a bitwise <ph id="ph2">`OR`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`enumType`</ph>, the method throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`enumType`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Parse#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Parse#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation is case-sensitive.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>An enumeration type.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>A string containing the name or value to convert.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>An object of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumType</ph><ept id="p1">&lt;/code&gt;</ept> whose value is represented by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is either an empty string or only contains white space.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is a name, but not one of the named constants defined for the enumeration.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is outside the range of the underlying type of <ph id="ph2">&lt;code&gt;enumType&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A parameter specifies whether the operation is case-insensitive.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>One or more blank spaces can precede or follow each value, name, or comma in <ph id="ph1">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is a list, the return value is the value of the specified names combined with a bitwise <ph id="ph2">`OR`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`enumType`</ph>, the method throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`enumType`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Enum.Parse#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Enum.Parse#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ignoreCase`</ph> parameter specifies whether this operation is case-sensitive.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>An enumeration type.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>A string containing the name or value to convert.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore case; <ph id="ph2">`false`</ph> to regard case.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>An object of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumType</ph><ept id="p1">&lt;/code&gt;</ept> whose value is represented by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is either an empty string ("") or only contains white space.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is a name, but not one of the named constants defined for the enumeration.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is outside the range of the underlying type of <ph id="ph2">&lt;code&gt;enumType&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Converts the specified 16-bit signed integer to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The enumeration type to return.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The value to convert to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>An instance of the enumeration set to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Converts the specified 64-bit unsigned integer value to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The enumeration type to return.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The value to convert to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>An instance of the enumeration set to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Converts the specified 32-bit unsigned integer value to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The enumeration type to return.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The value to convert to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>An instance of the enumeration set to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Converts the specified 16-bit unsigned integer value to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The enumeration type to return.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The value to convert to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>An instance of the enumeration set to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Converts the specified 8-bit signed integer value to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The enumeration type to return.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The value to convert to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>An instance of the enumeration set to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Converts the specified object with an integer value to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29&gt;</ph> method converts the integral value <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The enumeration type to return.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The value convert to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>An enumeration object whose value is <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is not type <ph id="ph2">&lt;xref href="System.SByte"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Int16"&gt;&lt;/xref&gt;</ph>, <ph id="ph4">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph>, <ph id="ph5">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph>, <ph id="ph6">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph>, <ph id="ph7">&lt;xref href="System.UInt16"&gt;&lt;/xref&gt;</ph>, <ph id="ph8">&lt;xref href="System.UInt32"&gt;&lt;/xref&gt;</ph>, or <ph id="ph9">&lt;xref href="System.UInt64"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Converts the specified 64-bit signed integer to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The enumeration type to return.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The value to convert to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>An instance of the enumeration set to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Converts the specified 32-bit signed integer to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The enumeration type to return.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The value to convert to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>An instance of the enumeration set to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Converts the specified 8-bit unsigned integer to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The enumeration type to return.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>The value to convert to an enumeration member.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>An instance of the enumeration set to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;enumType&lt;/code&gt;</ph> is not an <ph id="ph2">&lt;xref href="System.Enum"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>This method overload is obsolete; use <ph id="ph1">&lt;xref href="System.Enum.ToString(System.String)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string (""), the general format specifier ("G") is used.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the enumeration format strings and formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify only <ph id="ph1">`format`</ph>; the <ph id="ph2">`provider`</ph> parameter is obsolete.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>A format specification.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>(Obsolete.)</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The string representation of the value of this instance as specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> does not contain a valid format specification.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> equals "X", but the enumeration type is unknown.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Converts the value of this instance to its equivalent string representation using the specified format.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string (""), the general format specifier ("G") is used.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the enumeration format strings and formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>A format string.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>The string representation of the value of this instance as specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> contains an invalid specification.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> equals "X", but the enumeration type is unknown.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>This method overload is obsolete; use <ph id="ph1">&lt;xref href="System.Enum.ToString"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>(obsolete)</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The string representation of the value of this instance.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Converts the value of this instance to its equivalent string representation.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is formatted with the general format specifier ("G").</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, if the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the return value is the string representation of the numeric value of this instance.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The string representation of the value of this instance.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>A parameter specifies whether the operation is case-sensitive.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The return value indicates whether the conversion succeeded.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> is identical to the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method, except that instead of throwing an exception, it returns <ph id="ph3">`false`</ph> if the conversion fails.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>It eliminates the need for exception handling when parsing the string representation of an enumeration value.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is a list, <ph id="ph2">`result`</ph> reflects the value of the specified names or underlying values combined with a bitwise <ph id="ph3">`OR`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is the string representation of the name of an enumeration value, the comparison of <ph id="ph2">`value`</ph> with enumeration names depends on the <ph id="ph3">`ignoreCase`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`true`</ph>, the comparison is case-insensitive; if <ph id="ph2">`false`</ph>, it is case-sensitive.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`TEnum`</ph>, the method returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`TEnum`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`TEnum`</ph>.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The string representation of the enumeration name or underlying value to convert.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore case; <ph id="ph2">`false`</ph> to consider case.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>When this method returns, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p1">&lt;/code&gt;</ept> contains an object of type <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">TEnum</ph><ept id="p2">&lt;/code&gt;</ept> whose value is represented by <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">value</ph><ept id="p3">&lt;/code&gt;</ept> if the parse operation succeeds.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>If the parse operation fails, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p1">&lt;/code&gt;</ept> contains the default value of the underlying type of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">TEnum</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Note that this value need not be a member of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TEnum</ph><ept id="p1">&lt;/code&gt;</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The enumeration type to which to convert <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> parameter was converted successfully; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;TEnum&lt;/code&gt;</ph> is not an enumeration type.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The return value indicates whether the conversion succeeded.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> is identical to the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method, except that instead of throwing an exception, it returns <ph id="ph3">`false`</ph> if the conversion fails.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>It eliminates the need for exception handling when parsing the string representation of an enumeration value.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is a list, <ph id="ph2">`result`</ph> reflects the value of the specified names or underlying values combined with a bitwise <ph id="ph3">`OR`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is the string representation of the name of an enumeration value, the comparison of <ph id="ph2">`value`</ph> with enumeration names is case-sensitive.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`TEnum`</ph>, the method returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`TEnum`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`TEnum`</ph>.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The string representation of the enumeration name or underlying value to convert.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>When this method returns, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p1">&lt;/code&gt;</ept> contains an object of type <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">TEnum</ph><ept id="p2">&lt;/code&gt;</ept> whose value is represented by <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">value</ph><ept id="p3">&lt;/code&gt;</ept> if the parse operation succeeds.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>If the parse operation fails, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p1">&lt;/code&gt;</ept> contains the default value of the underlying type of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">TEnum</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Note that this value need not be a member of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TEnum</ph><ept id="p1">&lt;/code&gt;</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The enumeration type to which to convert <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> parameter was converted successfully; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;TEnum&lt;/code&gt;</ph> is not an enumeration type.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Converts the current value to a Boolean value based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>Currently not implemented.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always throws an exception.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>This member always throws an exception.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>In all cases.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Converts the current value to an 8-bit unsigned integer based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The converted value.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Converts the current value to a Unicode character based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>Currently not implemented.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always throws an exception.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>This member always throws an exception.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>In all cases.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Converts the current value to a <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>Currently not implemented.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always throws an exception.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>This member always throws an exception.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>In all cases.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Converts the current value to a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>Currently not implemented.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always throws an exception.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>This member always throws an exception.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>In all cases.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Converts the current value to a double-precision floating point number based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Currently not implemented.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always throws an exception.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>This member always throws an exception.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>In all cases.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Converts the current value to a 16-bit signed integer based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The converted value.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Converts the current value to a 32-bit signed integer based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>The converted value.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Converts the current value to a 64-bit signed integer based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The converted value.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Converts the current value to an 8-bit signed integer based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>The converted value.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Converts the current value to a single-precision floating-point number based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>Currently not implemented.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always throws an exception.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>This member always throws an exception.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>In all cases.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Converts the current value to a specified type based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The type to convert to.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>The converted value.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Converts the current value to a 16-bit unsigned integer based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>The converted value.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Converts the current value to a 32-bit unsigned integer based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The converted value.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Converts the current value to a 64-bit unsigned integer based on the underlying type.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The converted value.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>