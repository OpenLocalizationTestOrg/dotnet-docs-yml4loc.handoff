<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f11d2b8f811dd6fe64f90977f99f04ef677588ab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.Serialization.IXmlSerializable.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f599f5f683253622519d2275f956a0562e421a93</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2394ba9eebd16497224f6d9ce4feca9ec9250e0b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides custom formatting for XML serialization and deserialization.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two reasons to implement this interface.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first is to control how your object is serialized or deserialized by the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can chunk data into bytes instead of buffering large data sets, and also avoid the inflation that occurs when the data is encoded using Base64 encoding.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the serialization, implement the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> methods to control the <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> and <ph id="ph4">&lt;xref:System.Xml.XmlWriter&gt;</ph> classes used to read and write the XML.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of this, see <bpt id="p1">[</bpt>How to: Chunk Serialized Data<ept id="p1">](~/docs/framework/serialization/how-to-chunk-serialized-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second reason is to be able to control the schema.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable this, you must apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> to the serializable type, and specify the name of the static member that returns the schema.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> for an example.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>A class that implements the interface must have a parameterless constructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a requirement of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This method is reserved and should not be used.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When implementing the <ph id="ph1">`IXmlSerializable`</ph> interface, you should return <ph id="ph2">`null`</ph> (<ph id="ph3">`Nothing`</ph> in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <ph id="ph4">&lt;xref href="System.Xml.Serialization.XmlSchemaProviderAttribute"&gt;&lt;/xref&gt;</ph> to the class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>When serializing or deserializing an object, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class does not perform XML validation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, it is often safe to omit schema information by providing a trivial implementation of this method, for example by returning <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>If providing schema information is necessary, you should use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`GetSchema`</ph> method should still return <ph id="ph2">`null`</ph> (or <ph id="ph3">`Nothing`</ph>).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> types as well as legacy custom types implementing the <ph id="ph2">`IXmlSerializable`</ph> interface may be using <ph id="ph3">`GetSchema`</ph> instead of <ph id="ph4">`XmlSchemaProvider`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the method returns an accurate XML schema that describes the XML representation of the object generated by the <ph id="ph1">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchema"&gt;&lt;/xref&gt;</ph> that describes the XML representation of the object that is produced by the <ph id="ph2">&lt;xref href="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"&gt;&lt;/xref&gt;</ph> method and consumed by the <ph id="ph3">&lt;xref href="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Generates an object from its XML representation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> method must reconstitute your object using the information that was written by the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called, the reader is positioned on the start tag that wraps the information for your type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, directly on the start tag that indicates the beginning of a serialized object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method returns, it must have read the entire element from beginning to end, including all of its contents.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> method, the framework does not handle the wrapper element automatically.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your implementation must do so.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing to observe these positioning rules may cause code to generate unexpected runtime exceptions or corrupt data.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>When implementing this method, you should consider the possibility that a malicious user might provide a well-formed but invalid XML representation in order to disable or otherwise alter the behavior of your application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> stream from which the object is deserialized.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Converts an object into its XML representation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> implementation you provide should write out the XML representation of the object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The framework writes a wrapper element and positions the XML writer after its start.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your implementation may write its contents, including child elements.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The framework then closes the wrapper element.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Write sufficient information to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> stream to allow the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> method to reconstitute your object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if your object state includes an array variable, be sure to write the length of the array, or use a parent element to contain the elements that describe the array values, so that you know how many values to read when the object is reconstituted.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> stream to which the object is serialized.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>